-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_rom is 
    generic(
             DWIDTH     : integer := 1145; 
             AWIDTH     : integer := 2; 
             MEM_SIZE    : integer := 4
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (

    1 => "00010101011111110010100101111111011010100111111111110010100000000100110110000000110011111111111111001111000000010010010101111111100000001000000000111111100000000100011111111111010111100000000110110100100000010000111111111110101001110000000000110100111111101111011100000000010010010000000000001001111111111000010111111111101010011111111101100000011111111011000101111111111011111111111101111000100000001010110100000000100001100111111100000101011111101010110011111111000011110111111000110110011111100101001101111111111011100111110111101000111111101101111101111111110001001111111110101001111111110001101101111110011110000000000100110001100000010110110000000001011100101000000000111010100000000101010001111111011110101000000010001010111111111110100110000000001101001000000000100110000000001111000000000001011010111000000001111110011111110100100011111111110000000111111100001011011111110100000001111111111101110000000101100011000000011101100100000000010101000111111010011101111111111110010001111111110010001000000101001001100000001000100001111111011010110000000001010010011111110101011011111111011100100111111101101101011111110111101000000000010100001", 

    3 => "00000101000000001101011000000000001111101000000010001100000000000110000001111111110101111111111101111101111111110110001100000000011010111000000100000111000000000101110010000001001000100111111100100101100000001010010110000001010000000111111111100011100000000000001111111111110110010111111110111101100000001010001100000001000011101000000001010011000000010111111110000000010001010000000001101110100000000010010110000000000000010000000001111000000000001000011110000000001100001000000011001111000000001100010010000000101110001000000001010101000000000111010111111111110010110000000011110011100000000100010111111111000111000111111110101110011111110011010101111111001101011000000000010011111111111100111000000000001111101111111001111010111111111101010001111111111000111000000001000100100000001001000001111110101100010111111111111100000000010000011110000000011010000111111111101110100000000001001111111111000010110000000010100110111111111001011110000000001101100111111110101110100000000110011010000000100001011111111101110101111111110011111000000000010111011111111111010000100000000011101010000000000111000111111011111101011111111011101111111110111101110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V is
    generic (
        DataWidth : INTEGER := 1145;
        AddressRange : INTEGER := 4;
        AddressWidth : INTEGER := 2);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V is
    component conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_rom_U :  component conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


