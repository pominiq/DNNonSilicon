-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_rom is 
    generic(
             DWIDTH     : integer := 60; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 72
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "001101011001111111110110100000000000100111011111110110010000", 
    1 => "111110010101000000010101111111111110110101111111111101100101", 
    2 => "111001000110000000010010001011111111101010001111111101101000", 
    3 => "000011011011111111111100011000000001001011010000000011110010", 
    4 => "000100001111111111111010000000000000100000000000000011100111", 
    5 => "111010011101000000010100110011111110111101010000000111000000", 
    6 => "110101100010000000000100111011111111010111010000000111111011", 
    7 => "000101001000111111110111011000000000111000100000000010001010", 
    8 => "000010001011111111111100111111111110110000100000000100000111", 
    9 => "000100001110000000000000101011111111110001110000000011100011", 
    10 => "111010010000111111000010011100000000101110001111111110011001", 
    11 => "000101110000111111110001101011111110001100110000000001110100", 
    12 => "001000010101111111100100100111111111000111011111111001111100", 
    13 => "000001101100000000010111100000000000010001111111111011111110", 
    14 => "111111000010111111101011101111111101111111010000000100110110", 
    15 => "111011001010000000010101001111111111001101001111111101000000", 
    16 => "000100101110000000010100110111111100001010111111110000110001", 
    17 => "110110101010000000010000011000000000011010000000000000110111", 
    18 => "000000100011111111010011110000000000111001100000010000100100", 
    19 => "000100000100000000101101101011111110001010011111111111001101", 
    20 => "001110100011000000010010101011111110100001111111111111001110", 
    21 => "111100011111111111111101000111111111101011111111111101000000", 
    22 => "111010100001000000010010001000000001101010010000000010111111", 
    23 => "000101001111111111110000101011111100110100110000000101011111", 
    24 => "000011010001111111110111100011111111100110001111110101111010", 
    25 => "111011000010000000000010001000000001000101000000001001110010", 
    26 => "111101100101000000100101001011111101000111001111111101011111", 
    27 => "111011100011111111101101001100000000101010001111111100111100", 
    28 => "111100100001000000010000100000000000010000011111111001110101", 
    29 => "111000111101111111110111001000000010010101010000001100101101", 
    30 => "111011011101000000100111011100000000110100001111111110110111", 
    31 => "000100010011111111110001001100000000100100010000000101110111", 
    32 => "111111000001111111100110110000000001000100000000001010010110", 
    33 => "000010100011000000011011000000000010111000101111111001001011", 
    34 => "001111100011000001001011101000000001100101001111111001110000", 
    35 => "111010000000111111101101110011111111110000010000000001001100", 
    36 => "000010000010000000001101110100000000010000100000000111100111", 
    37 => "001001110101111111110011111011111110110000001111111110110110", 
    38 => "000100110011111111101010100011111111011101101111111110011101", 
    39 => "000000101000111111110110001100000010100101101111111010110110", 
    40 => "000100110000000000001101101100000010110111010000000011011001", 
    41 => "001100001110000000001100001011111101110001111111111110100110", 
    42 => "001010000110111111011001011100000001100110001111111110000000", 
    43 => "111110110110000000010011001111111111100111001111111110110010", 
    44 => "111101001111000000001000101000000000110101001111111010111100", 
    45 => "001010110101000000010100110011111110000001010000001001101111", 
    46 => "000000011100000000001100010111111110011111000000001011101110", 
    47 => "000100001000000000110001100111111111110110100000000011001110", 
    48 => "001010111000111111101010101100000001001000111111111110000000", 
    49 => "000000100001111111101101110111111101100110010000000001010111", 
    50 => "000101001011111111111001010011111111010110100000010011100001", 
    51 => "111101000001111111111110001000000000100010011111111000110011", 
    52 => "000010011000111111100010010011111110010010010000000001011111", 
    53 => "000010100100000000000001110011111110011110000000000010011000", 
    54 => "000100111100000000100011110011111110011101100000010110011001", 
    55 => "000010101001111111110100000100000000100101111111111110100111", 
    56 => "111101011101111111110000000111111110101101001111111000000010", 
    57 => "000011100100111111101010101100000001001011001111111101110101", 
    58 => "010100001011000000100000000011111101100010100000001011111110", 
    59 => "111101101111111111011001011000000001011010001111111111001110", 
    60 => "000110001111000000010001011000000001010001101111111001011011", 
    61 => "111100111111000000001000111111111111111001101111111101111111", 
    62 => "111010101000111111101110011011111011000111010000000100001100", 
    63 => "000000100000000000011000100011111111111010111111111010100001", 
    64 => "000111100100000000001011011011111111101100011111111000111110", 
    65 => "111100101010000000010000011100000000001010100000000001101011", 
    66 => "111111100101000000001010101011111100010110001111110110000000", 
    67 => "111110010111111111110100111000000010001100001111111101010101", 
    68 => "111111001101111111111001000100000001101111101111111000110100", 
    69 => "000001111100000000011100000111111111011010101111111111000001", 
    70 => "000011011001111111101000111111111110000000001111110100000000", 
    71 => "000001110110111111000110000100000001010100001111111111100000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V is
    generic (
        DataWidth : INTEGER := 60;
        AddressRange : INTEGER := 72;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V is
    component conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_rom_U :  component conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


