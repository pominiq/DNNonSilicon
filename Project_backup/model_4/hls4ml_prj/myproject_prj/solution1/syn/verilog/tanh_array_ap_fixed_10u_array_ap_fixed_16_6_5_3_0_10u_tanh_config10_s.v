// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tanh_array_ap_fixed_10u_array_ap_fixed_16_6_5_3_0_10u_tanh_config10_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        res_V_data_0_V_TREADY,
        res_V_data_0_V_TDATA,
        res_V_data_0_V_TVALID,
        res_V_data_1_V_TDATA,
        res_V_data_1_V_TVALID,
        res_V_data_1_V_TREADY,
        res_V_data_2_V_TDATA,
        res_V_data_2_V_TVALID,
        res_V_data_2_V_TREADY,
        res_V_data_3_V_TDATA,
        res_V_data_3_V_TVALID,
        res_V_data_3_V_TREADY,
        res_V_data_4_V_TDATA,
        res_V_data_4_V_TVALID,
        res_V_data_4_V_TREADY,
        res_V_data_5_V_TDATA,
        res_V_data_5_V_TVALID,
        res_V_data_5_V_TREADY,
        res_V_data_6_V_TDATA,
        res_V_data_6_V_TVALID,
        res_V_data_6_V_TREADY,
        res_V_data_7_V_TDATA,
        res_V_data_7_V_TVALID,
        res_V_data_7_V_TREADY,
        res_V_data_8_V_TDATA,
        res_V_data_8_V_TVALID,
        res_V_data_8_V_TREADY,
        res_V_data_9_V_TDATA,
        res_V_data_9_V_TVALID,
        res_V_data_9_V_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [15:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [15:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input   res_V_data_0_V_TREADY;
output  [15:0] res_V_data_0_V_TDATA;
output   res_V_data_0_V_TVALID;
output  [15:0] res_V_data_1_V_TDATA;
output   res_V_data_1_V_TVALID;
input   res_V_data_1_V_TREADY;
output  [15:0] res_V_data_2_V_TDATA;
output   res_V_data_2_V_TVALID;
input   res_V_data_2_V_TREADY;
output  [15:0] res_V_data_3_V_TDATA;
output   res_V_data_3_V_TVALID;
input   res_V_data_3_V_TREADY;
output  [15:0] res_V_data_4_V_TDATA;
output   res_V_data_4_V_TVALID;
input   res_V_data_4_V_TREADY;
output  [15:0] res_V_data_5_V_TDATA;
output   res_V_data_5_V_TVALID;
input   res_V_data_5_V_TREADY;
output  [15:0] res_V_data_6_V_TDATA;
output   res_V_data_6_V_TVALID;
input   res_V_data_6_V_TREADY;
output  [15:0] res_V_data_7_V_TDATA;
output   res_V_data_7_V_TVALID;
input   res_V_data_7_V_TREADY;
output  [15:0] res_V_data_8_V_TDATA;
output   res_V_data_8_V_TVALID;
input   res_V_data_8_V_TREADY;
output  [15:0] res_V_data_9_V_TDATA;
output   res_V_data_9_V_TVALID;
input   res_V_data_9_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    io_acc_block_signal_op5;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    regslice_both_res_V_data_0_V_U_apdone_blk;
wire    regslice_both_res_V_data_1_V_U_apdone_blk;
wire    regslice_both_res_V_data_2_V_U_apdone_blk;
wire    regslice_both_res_V_data_3_V_U_apdone_blk;
wire    regslice_both_res_V_data_4_V_U_apdone_blk;
wire    regslice_both_res_V_data_5_V_U_apdone_blk;
wire    regslice_both_res_V_data_6_V_U_apdone_blk;
wire    regslice_both_res_V_data_7_V_U_apdone_blk;
wire    regslice_both_res_V_data_8_V_U_apdone_blk;
wire    regslice_both_res_V_data_9_V_U_apdone_blk;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] tanh_table1_address0;
reg    tanh_table1_ce0;
wire   [10:0] tanh_table1_q0;
wire   [9:0] tanh_table1_address1;
reg    tanh_table1_ce1;
wire   [10:0] tanh_table1_q1;
wire   [9:0] tanh_table1_address2;
reg    tanh_table1_ce2;
wire   [10:0] tanh_table1_q2;
wire   [9:0] tanh_table1_address3;
reg    tanh_table1_ce3;
wire   [10:0] tanh_table1_q3;
wire   [9:0] tanh_table1_address4;
reg    tanh_table1_ce4;
wire   [10:0] tanh_table1_q4;
wire   [9:0] tanh_table1_address5;
reg    tanh_table1_ce5;
wire   [10:0] tanh_table1_q5;
wire   [9:0] tanh_table1_address6;
reg    tanh_table1_ce6;
wire   [10:0] tanh_table1_q6;
wire   [9:0] tanh_table1_address7;
reg    tanh_table1_ce7;
wire   [10:0] tanh_table1_q7;
wire   [9:0] tanh_table1_address8;
reg    tanh_table1_ce8;
wire   [10:0] tanh_table1_q8;
wire   [9:0] tanh_table1_address9;
reg    tanh_table1_ce9;
wire   [10:0] tanh_table1_q9;
reg    data_V_data_0_V_blk_n;
wire    ap_block_pp0_stage0;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    data_V_data_8_V_blk_n;
reg    data_V_data_9_V_blk_n;
reg    res_V_data_0_V_TDATA_blk_n;
reg    res_V_data_1_V_TDATA_blk_n;
reg    res_V_data_2_V_TDATA_blk_n;
reg    res_V_data_3_V_TDATA_blk_n;
reg    res_V_data_4_V_TDATA_blk_n;
reg    res_V_data_5_V_TDATA_blk_n;
reg    res_V_data_6_V_TDATA_blk_n;
reg    res_V_data_7_V_TDATA_blk_n;
reg    res_V_data_8_V_TDATA_blk_n;
reg    res_V_data_9_V_TDATA_blk_n;
wire  signed [13:0] sext_ln850_fu_471_p1;
reg  signed [13:0] sext_ln850_reg_1863;
wire   [0:0] icmp_ln850_fu_475_p2;
reg   [0:0] icmp_ln850_reg_1869;
wire   [0:0] icmp_ln851_fu_493_p2;
reg   [0:0] icmp_ln851_reg_1874;
wire   [13:0] add_ln700_fu_499_p2;
reg   [13:0] add_ln700_reg_1879;
wire  signed [13:0] sext_ln850_1_fu_523_p1;
reg  signed [13:0] sext_ln850_1_reg_1884;
wire   [0:0] icmp_ln850_1_fu_527_p2;
reg   [0:0] icmp_ln850_1_reg_1890;
wire   [0:0] icmp_ln851_1_fu_545_p2;
reg   [0:0] icmp_ln851_1_reg_1895;
wire   [13:0] add_ln700_1_fu_551_p2;
reg   [13:0] add_ln700_1_reg_1900;
wire  signed [13:0] sext_ln850_2_fu_575_p1;
reg  signed [13:0] sext_ln850_2_reg_1905;
wire   [0:0] icmp_ln850_2_fu_579_p2;
reg   [0:0] icmp_ln850_2_reg_1911;
wire   [0:0] icmp_ln851_2_fu_597_p2;
reg   [0:0] icmp_ln851_2_reg_1916;
wire   [13:0] add_ln700_2_fu_603_p2;
reg   [13:0] add_ln700_2_reg_1921;
wire  signed [13:0] sext_ln850_3_fu_627_p1;
reg  signed [13:0] sext_ln850_3_reg_1926;
wire   [0:0] icmp_ln850_3_fu_631_p2;
reg   [0:0] icmp_ln850_3_reg_1932;
wire   [0:0] icmp_ln851_3_fu_649_p2;
reg   [0:0] icmp_ln851_3_reg_1937;
wire   [13:0] add_ln700_3_fu_655_p2;
reg   [13:0] add_ln700_3_reg_1942;
wire  signed [13:0] sext_ln850_4_fu_679_p1;
reg  signed [13:0] sext_ln850_4_reg_1947;
wire   [0:0] icmp_ln850_4_fu_683_p2;
reg   [0:0] icmp_ln850_4_reg_1953;
wire   [0:0] icmp_ln851_4_fu_701_p2;
reg   [0:0] icmp_ln851_4_reg_1958;
wire   [13:0] add_ln700_4_fu_707_p2;
reg   [13:0] add_ln700_4_reg_1963;
wire  signed [13:0] sext_ln850_5_fu_731_p1;
reg  signed [13:0] sext_ln850_5_reg_1968;
wire   [0:0] icmp_ln850_5_fu_735_p2;
reg   [0:0] icmp_ln850_5_reg_1974;
wire   [0:0] icmp_ln851_5_fu_753_p2;
reg   [0:0] icmp_ln851_5_reg_1979;
wire   [13:0] add_ln700_5_fu_759_p2;
reg   [13:0] add_ln700_5_reg_1984;
wire  signed [13:0] sext_ln850_6_fu_783_p1;
reg  signed [13:0] sext_ln850_6_reg_1989;
wire   [0:0] icmp_ln850_6_fu_787_p2;
reg   [0:0] icmp_ln850_6_reg_1995;
wire   [0:0] icmp_ln851_6_fu_805_p2;
reg   [0:0] icmp_ln851_6_reg_2000;
wire   [13:0] add_ln700_6_fu_811_p2;
reg   [13:0] add_ln700_6_reg_2005;
wire  signed [13:0] sext_ln850_7_fu_835_p1;
reg  signed [13:0] sext_ln850_7_reg_2010;
wire   [0:0] icmp_ln850_7_fu_839_p2;
reg   [0:0] icmp_ln850_7_reg_2016;
wire   [0:0] icmp_ln851_7_fu_857_p2;
reg   [0:0] icmp_ln851_7_reg_2021;
wire   [13:0] add_ln700_7_fu_863_p2;
reg   [13:0] add_ln700_7_reg_2026;
wire  signed [13:0] sext_ln850_8_fu_887_p1;
reg  signed [13:0] sext_ln850_8_reg_2031;
wire   [0:0] icmp_ln850_8_fu_891_p2;
reg   [0:0] icmp_ln850_8_reg_2037;
wire   [0:0] icmp_ln851_8_fu_909_p2;
reg   [0:0] icmp_ln851_8_reg_2042;
wire   [13:0] add_ln700_8_fu_915_p2;
reg   [13:0] add_ln700_8_reg_2047;
wire  signed [13:0] sext_ln850_9_fu_939_p1;
reg  signed [13:0] sext_ln850_9_reg_2052;
wire   [0:0] icmp_ln850_9_fu_943_p2;
reg   [0:0] icmp_ln850_9_reg_2058;
wire   [0:0] icmp_ln851_9_fu_961_p2;
reg   [0:0] icmp_ln851_9_reg_2063;
wire   [13:0] add_ln700_9_fu_967_p2;
reg   [13:0] add_ln700_9_reg_2068;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln408_fu_1052_p1;
wire   [63:0] zext_ln408_1_fu_1136_p1;
wire   [63:0] zext_ln408_2_fu_1220_p1;
wire   [63:0] zext_ln408_3_fu_1304_p1;
wire   [63:0] zext_ln408_4_fu_1388_p1;
wire   [63:0] zext_ln408_5_fu_1472_p1;
wire   [63:0] zext_ln408_6_fu_1556_p1;
wire   [63:0] zext_ln408_7_fu_1640_p1;
wire   [63:0] zext_ln408_8_fu_1724_p1;
wire   [63:0] zext_ln408_9_fu_1808_p1;
reg    ap_block_pp0_stage0_01001;
wire   [12:0] tmp_1_fu_461_p4;
wire   [25:0] shl_ln_fu_453_p3;
wire   [2:0] trunc_ln851_fu_481_p1;
wire   [9:0] p_Result_2_fu_485_p3;
wire   [12:0] tmp_3_fu_513_p4;
wire   [25:0] shl_ln1118_1_fu_505_p3;
wire   [2:0] trunc_ln851_1_fu_533_p1;
wire   [9:0] p_Result_2_1_fu_537_p3;
wire   [12:0] tmp_5_fu_565_p4;
wire   [25:0] shl_ln1118_2_fu_557_p3;
wire   [2:0] trunc_ln851_2_fu_585_p1;
wire   [9:0] p_Result_2_2_fu_589_p3;
wire   [12:0] tmp_7_fu_617_p4;
wire   [25:0] shl_ln1118_3_fu_609_p3;
wire   [2:0] trunc_ln851_3_fu_637_p1;
wire   [9:0] p_Result_2_3_fu_641_p3;
wire   [12:0] tmp_9_fu_669_p4;
wire   [25:0] shl_ln1118_4_fu_661_p3;
wire   [2:0] trunc_ln851_4_fu_689_p1;
wire   [9:0] p_Result_2_4_fu_693_p3;
wire   [12:0] tmp_s_fu_721_p4;
wire   [25:0] shl_ln1118_5_fu_713_p3;
wire   [2:0] trunc_ln851_5_fu_741_p1;
wire   [9:0] p_Result_2_5_fu_745_p3;
wire   [12:0] tmp_10_fu_773_p4;
wire   [25:0] shl_ln1118_6_fu_765_p3;
wire   [2:0] trunc_ln851_6_fu_793_p1;
wire   [9:0] p_Result_2_6_fu_797_p3;
wire   [12:0] tmp_12_fu_825_p4;
wire   [25:0] shl_ln1118_7_fu_817_p3;
wire   [2:0] trunc_ln851_7_fu_845_p1;
wire   [9:0] p_Result_2_7_fu_849_p3;
wire   [12:0] tmp_14_fu_877_p4;
wire   [25:0] shl_ln1118_8_fu_869_p3;
wire   [2:0] trunc_ln851_8_fu_897_p1;
wire   [9:0] p_Result_2_8_fu_901_p3;
wire   [12:0] tmp_16_fu_929_p4;
wire   [25:0] shl_ln1118_9_fu_921_p3;
wire   [2:0] trunc_ln851_9_fu_949_p1;
wire   [9:0] p_Result_2_9_fu_953_p3;
wire   [13:0] select_ln851_fu_973_p3;
wire   [13:0] select_ln850_fu_978_p3;
wire   [9:0] trunc_ln403_fu_984_p1;
wire   [13:0] add_ln403_fu_988_p2;
wire   [3:0] tmp_4_fu_1008_p4;
wire   [0:0] tmp_2_fu_1000_p3;
wire   [0:0] xor_ln404_fu_1024_p2;
wire   [0:0] icmp_ln406_fu_1018_p2;
wire   [0:0] or_ln404_fu_1038_p2;
wire   [9:0] select_ln404_fu_1030_p3;
wire   [9:0] xor_ln403_fu_994_p2;
wire   [9:0] select_ln404_1_fu_1044_p3;
wire   [13:0] select_ln851_1_fu_1057_p3;
wire   [13:0] select_ln850_1_fu_1062_p3;
wire   [9:0] trunc_ln403_1_fu_1068_p1;
wire   [13:0] add_ln403_1_fu_1072_p2;
wire   [3:0] tmp_8_fu_1092_p4;
wire   [0:0] tmp_6_fu_1084_p3;
wire   [0:0] xor_ln404_1_fu_1108_p2;
wire   [0:0] icmp_ln406_1_fu_1102_p2;
wire   [0:0] or_ln404_1_fu_1122_p2;
wire   [9:0] select_ln404_2_fu_1114_p3;
wire   [9:0] xor_ln403_1_fu_1078_p2;
wire   [9:0] select_ln404_3_fu_1128_p3;
wire   [13:0] select_ln851_2_fu_1141_p3;
wire   [13:0] select_ln850_2_fu_1146_p3;
wire   [9:0] trunc_ln403_2_fu_1152_p1;
wire   [13:0] add_ln403_2_fu_1156_p2;
wire   [3:0] tmp_13_fu_1176_p4;
wire   [0:0] tmp_11_fu_1168_p3;
wire   [0:0] xor_ln404_2_fu_1192_p2;
wire   [0:0] icmp_ln406_2_fu_1186_p2;
wire   [0:0] or_ln404_2_fu_1206_p2;
wire   [9:0] select_ln404_4_fu_1198_p3;
wire   [9:0] xor_ln403_2_fu_1162_p2;
wire   [9:0] select_ln404_5_fu_1212_p3;
wire   [13:0] select_ln851_3_fu_1225_p3;
wire   [13:0] select_ln850_3_fu_1230_p3;
wire   [9:0] trunc_ln403_3_fu_1236_p1;
wire   [13:0] add_ln403_3_fu_1240_p2;
wire   [3:0] tmp_17_fu_1260_p4;
wire   [0:0] tmp_15_fu_1252_p3;
wire   [0:0] xor_ln404_3_fu_1276_p2;
wire   [0:0] icmp_ln406_3_fu_1270_p2;
wire   [0:0] or_ln404_3_fu_1290_p2;
wire   [9:0] select_ln404_6_fu_1282_p3;
wire   [9:0] xor_ln403_3_fu_1246_p2;
wire   [9:0] select_ln404_7_fu_1296_p3;
wire   [13:0] select_ln851_4_fu_1309_p3;
wire   [13:0] select_ln850_4_fu_1314_p3;
wire   [9:0] trunc_ln403_4_fu_1320_p1;
wire   [13:0] add_ln403_4_fu_1324_p2;
wire   [3:0] tmp_20_fu_1344_p4;
wire   [0:0] tmp_19_fu_1336_p3;
wire   [0:0] xor_ln404_4_fu_1360_p2;
wire   [0:0] icmp_ln406_4_fu_1354_p2;
wire   [0:0] or_ln404_4_fu_1374_p2;
wire   [9:0] select_ln404_8_fu_1366_p3;
wire   [9:0] xor_ln403_4_fu_1330_p2;
wire   [9:0] select_ln404_9_fu_1380_p3;
wire   [13:0] select_ln851_5_fu_1393_p3;
wire   [13:0] select_ln850_5_fu_1398_p3;
wire   [9:0] trunc_ln403_5_fu_1404_p1;
wire   [13:0] add_ln403_5_fu_1408_p2;
wire   [3:0] tmp_22_fu_1428_p4;
wire   [0:0] tmp_21_fu_1420_p3;
wire   [0:0] xor_ln404_5_fu_1444_p2;
wire   [0:0] icmp_ln406_5_fu_1438_p2;
wire   [0:0] or_ln404_5_fu_1458_p2;
wire   [9:0] select_ln404_10_fu_1450_p3;
wire   [9:0] xor_ln403_5_fu_1414_p2;
wire   [9:0] select_ln404_11_fu_1464_p3;
wire   [13:0] select_ln851_6_fu_1477_p3;
wire   [13:0] select_ln850_6_fu_1482_p3;
wire   [9:0] trunc_ln403_6_fu_1488_p1;
wire   [13:0] add_ln403_6_fu_1492_p2;
wire   [3:0] tmp_24_fu_1512_p4;
wire   [0:0] tmp_23_fu_1504_p3;
wire   [0:0] xor_ln404_6_fu_1528_p2;
wire   [0:0] icmp_ln406_6_fu_1522_p2;
wire   [0:0] or_ln404_6_fu_1542_p2;
wire   [9:0] select_ln404_12_fu_1534_p3;
wire   [9:0] xor_ln403_6_fu_1498_p2;
wire   [9:0] select_ln404_13_fu_1548_p3;
wire   [13:0] select_ln851_7_fu_1561_p3;
wire   [13:0] select_ln850_7_fu_1566_p3;
wire   [9:0] trunc_ln403_7_fu_1572_p1;
wire   [13:0] add_ln403_7_fu_1576_p2;
wire   [3:0] tmp_26_fu_1596_p4;
wire   [0:0] tmp_25_fu_1588_p3;
wire   [0:0] xor_ln404_7_fu_1612_p2;
wire   [0:0] icmp_ln406_7_fu_1606_p2;
wire   [0:0] or_ln404_7_fu_1626_p2;
wire   [9:0] select_ln404_14_fu_1618_p3;
wire   [9:0] xor_ln403_7_fu_1582_p2;
wire   [9:0] select_ln404_15_fu_1632_p3;
wire   [13:0] select_ln851_8_fu_1645_p3;
wire   [13:0] select_ln850_8_fu_1650_p3;
wire   [9:0] trunc_ln403_8_fu_1656_p1;
wire   [13:0] add_ln403_8_fu_1660_p2;
wire   [3:0] tmp_28_fu_1680_p4;
wire   [0:0] tmp_27_fu_1672_p3;
wire   [0:0] xor_ln404_8_fu_1696_p2;
wire   [0:0] icmp_ln406_8_fu_1690_p2;
wire   [0:0] or_ln404_8_fu_1710_p2;
wire   [9:0] select_ln404_16_fu_1702_p3;
wire   [9:0] xor_ln403_8_fu_1666_p2;
wire   [9:0] select_ln404_17_fu_1716_p3;
wire   [13:0] select_ln851_9_fu_1729_p3;
wire   [13:0] select_ln850_9_fu_1734_p3;
wire   [9:0] trunc_ln403_9_fu_1740_p1;
wire   [13:0] add_ln403_9_fu_1744_p2;
wire   [3:0] tmp_30_fu_1764_p4;
wire   [0:0] tmp_29_fu_1756_p3;
wire   [0:0] xor_ln404_9_fu_1780_p2;
wire   [0:0] icmp_ln406_9_fu_1774_p2;
wire   [0:0] or_ln404_9_fu_1794_p2;
wire   [9:0] select_ln404_18_fu_1786_p3;
wire   [9:0] xor_ln403_9_fu_1750_p2;
wire   [9:0] select_ln404_19_fu_1800_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [15:0] res_V_data_0_V_TDATA_int;
reg    res_V_data_0_V_TVALID_int;
wire    res_V_data_0_V_TREADY_int;
wire    regslice_both_res_V_data_0_V_U_vld_out;
wire   [15:0] res_V_data_1_V_TDATA_int;
reg    res_V_data_1_V_TVALID_int;
wire    res_V_data_1_V_TREADY_int;
wire    regslice_both_res_V_data_1_V_U_vld_out;
wire   [15:0] res_V_data_2_V_TDATA_int;
reg    res_V_data_2_V_TVALID_int;
wire    res_V_data_2_V_TREADY_int;
wire    regslice_both_res_V_data_2_V_U_vld_out;
wire   [15:0] res_V_data_3_V_TDATA_int;
reg    res_V_data_3_V_TVALID_int;
wire    res_V_data_3_V_TREADY_int;
wire    regslice_both_res_V_data_3_V_U_vld_out;
wire   [15:0] res_V_data_4_V_TDATA_int;
reg    res_V_data_4_V_TVALID_int;
wire    res_V_data_4_V_TREADY_int;
wire    regslice_both_res_V_data_4_V_U_vld_out;
wire   [15:0] res_V_data_5_V_TDATA_int;
reg    res_V_data_5_V_TVALID_int;
wire    res_V_data_5_V_TREADY_int;
wire    regslice_both_res_V_data_5_V_U_vld_out;
wire   [15:0] res_V_data_6_V_TDATA_int;
reg    res_V_data_6_V_TVALID_int;
wire    res_V_data_6_V_TREADY_int;
wire    regslice_both_res_V_data_6_V_U_vld_out;
wire   [15:0] res_V_data_7_V_TDATA_int;
reg    res_V_data_7_V_TVALID_int;
wire    res_V_data_7_V_TREADY_int;
wire    regslice_both_res_V_data_7_V_U_vld_out;
wire   [15:0] res_V_data_8_V_TDATA_int;
reg    res_V_data_8_V_TVALID_int;
wire    res_V_data_8_V_TREADY_int;
wire    regslice_both_res_V_data_8_V_U_vld_out;
wire   [15:0] res_V_data_9_V_TDATA_int;
reg    res_V_data_9_V_TVALID_int;
wire    res_V_data_9_V_TREADY_int;
wire    regslice_both_res_V_data_9_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

tanh_array_ap_fixed_10u_array_ap_fixed_16_6_5_3_0_10u_tanh_config10_s_tanh_taFfa #(
    .DataWidth( 11 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
tanh_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tanh_table1_address0),
    .ce0(tanh_table1_ce0),
    .q0(tanh_table1_q0),
    .address1(tanh_table1_address1),
    .ce1(tanh_table1_ce1),
    .q1(tanh_table1_q1),
    .address2(tanh_table1_address2),
    .ce2(tanh_table1_ce2),
    .q2(tanh_table1_q2),
    .address3(tanh_table1_address3),
    .ce3(tanh_table1_ce3),
    .q3(tanh_table1_q3),
    .address4(tanh_table1_address4),
    .ce4(tanh_table1_ce4),
    .q4(tanh_table1_q4),
    .address5(tanh_table1_address5),
    .ce5(tanh_table1_ce5),
    .q5(tanh_table1_q5),
    .address6(tanh_table1_address6),
    .ce6(tanh_table1_ce6),
    .q6(tanh_table1_q6),
    .address7(tanh_table1_address7),
    .ce7(tanh_table1_ce7),
    .q7(tanh_table1_q7),
    .address8(tanh_table1_address8),
    .ce8(tanh_table1_ce8),
    .q8(tanh_table1_q8),
    .address9(tanh_table1_address9),
    .ce9(tanh_table1_ce9),
    .q9(tanh_table1_q9)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_0_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_0_V_TDATA_int),
    .vld_in(res_V_data_0_V_TVALID_int),
    .ack_in(res_V_data_0_V_TREADY_int),
    .data_out(res_V_data_0_V_TDATA),
    .vld_out(regslice_both_res_V_data_0_V_U_vld_out),
    .ack_out(res_V_data_0_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_0_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_1_V_TDATA_int),
    .vld_in(res_V_data_1_V_TVALID_int),
    .ack_in(res_V_data_1_V_TREADY_int),
    .data_out(res_V_data_1_V_TDATA),
    .vld_out(regslice_both_res_V_data_1_V_U_vld_out),
    .ack_out(res_V_data_1_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_1_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_2_V_TDATA_int),
    .vld_in(res_V_data_2_V_TVALID_int),
    .ack_in(res_V_data_2_V_TREADY_int),
    .data_out(res_V_data_2_V_TDATA),
    .vld_out(regslice_both_res_V_data_2_V_U_vld_out),
    .ack_out(res_V_data_2_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_2_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_3_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_3_V_TDATA_int),
    .vld_in(res_V_data_3_V_TVALID_int),
    .ack_in(res_V_data_3_V_TREADY_int),
    .data_out(res_V_data_3_V_TDATA),
    .vld_out(regslice_both_res_V_data_3_V_U_vld_out),
    .ack_out(res_V_data_3_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_3_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_4_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_4_V_TDATA_int),
    .vld_in(res_V_data_4_V_TVALID_int),
    .ack_in(res_V_data_4_V_TREADY_int),
    .data_out(res_V_data_4_V_TDATA),
    .vld_out(regslice_both_res_V_data_4_V_U_vld_out),
    .ack_out(res_V_data_4_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_4_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_5_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_5_V_TDATA_int),
    .vld_in(res_V_data_5_V_TVALID_int),
    .ack_in(res_V_data_5_V_TREADY_int),
    .data_out(res_V_data_5_V_TDATA),
    .vld_out(regslice_both_res_V_data_5_V_U_vld_out),
    .ack_out(res_V_data_5_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_5_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_6_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_6_V_TDATA_int),
    .vld_in(res_V_data_6_V_TVALID_int),
    .ack_in(res_V_data_6_V_TREADY_int),
    .data_out(res_V_data_6_V_TDATA),
    .vld_out(regslice_both_res_V_data_6_V_U_vld_out),
    .ack_out(res_V_data_6_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_6_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_7_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_7_V_TDATA_int),
    .vld_in(res_V_data_7_V_TVALID_int),
    .ack_in(res_V_data_7_V_TREADY_int),
    .data_out(res_V_data_7_V_TDATA),
    .vld_out(regslice_both_res_V_data_7_V_U_vld_out),
    .ack_out(res_V_data_7_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_7_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_8_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_8_V_TDATA_int),
    .vld_in(res_V_data_8_V_TVALID_int),
    .ack_in(res_V_data_8_V_TREADY_int),
    .data_out(res_V_data_8_V_TDATA),
    .vld_out(regslice_both_res_V_data_8_V_U_vld_out),
    .ack_out(res_V_data_8_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_8_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_9_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_9_V_TDATA_int),
    .vld_in(res_V_data_9_V_TVALID_int),
    .ack_in(res_V_data_9_V_TREADY_int),
    .data_out(res_V_data_9_V_TDATA),
    .vld_out(regslice_both_res_V_data_9_V_U_vld_out),
    .ack_out(res_V_data_9_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_9_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln700_1_reg_1900 <= add_ln700_1_fu_551_p2;
        add_ln700_2_reg_1921 <= add_ln700_2_fu_603_p2;
        add_ln700_3_reg_1942 <= add_ln700_3_fu_655_p2;
        add_ln700_4_reg_1963 <= add_ln700_4_fu_707_p2;
        add_ln700_5_reg_1984 <= add_ln700_5_fu_759_p2;
        add_ln700_6_reg_2005 <= add_ln700_6_fu_811_p2;
        add_ln700_7_reg_2026 <= add_ln700_7_fu_863_p2;
        add_ln700_8_reg_2047 <= add_ln700_8_fu_915_p2;
        add_ln700_9_reg_2068 <= add_ln700_9_fu_967_p2;
        add_ln700_reg_1879 <= add_ln700_fu_499_p2;
        icmp_ln850_1_reg_1890 <= icmp_ln850_1_fu_527_p2;
        icmp_ln850_2_reg_1911 <= icmp_ln850_2_fu_579_p2;
        icmp_ln850_3_reg_1932 <= icmp_ln850_3_fu_631_p2;
        icmp_ln850_4_reg_1953 <= icmp_ln850_4_fu_683_p2;
        icmp_ln850_5_reg_1974 <= icmp_ln850_5_fu_735_p2;
        icmp_ln850_6_reg_1995 <= icmp_ln850_6_fu_787_p2;
        icmp_ln850_7_reg_2016 <= icmp_ln850_7_fu_839_p2;
        icmp_ln850_8_reg_2037 <= icmp_ln850_8_fu_891_p2;
        icmp_ln850_9_reg_2058 <= icmp_ln850_9_fu_943_p2;
        icmp_ln850_reg_1869 <= icmp_ln850_fu_475_p2;
        icmp_ln851_1_reg_1895 <= icmp_ln851_1_fu_545_p2;
        icmp_ln851_2_reg_1916 <= icmp_ln851_2_fu_597_p2;
        icmp_ln851_3_reg_1937 <= icmp_ln851_3_fu_649_p2;
        icmp_ln851_4_reg_1958 <= icmp_ln851_4_fu_701_p2;
        icmp_ln851_5_reg_1979 <= icmp_ln851_5_fu_753_p2;
        icmp_ln851_6_reg_2000 <= icmp_ln851_6_fu_805_p2;
        icmp_ln851_7_reg_2021 <= icmp_ln851_7_fu_857_p2;
        icmp_ln851_8_reg_2042 <= icmp_ln851_8_fu_909_p2;
        icmp_ln851_9_reg_2063 <= icmp_ln851_9_fu_961_p2;
        icmp_ln851_reg_1874 <= icmp_ln851_fu_493_p2;
        sext_ln850_1_reg_1884 <= sext_ln850_1_fu_523_p1;
        sext_ln850_2_reg_1905 <= sext_ln850_2_fu_575_p1;
        sext_ln850_3_reg_1926 <= sext_ln850_3_fu_627_p1;
        sext_ln850_4_reg_1947 <= sext_ln850_4_fu_679_p1;
        sext_ln850_5_reg_1968 <= sext_ln850_5_fu_731_p1;
        sext_ln850_6_reg_1989 <= sext_ln850_6_fu_783_p1;
        sext_ln850_7_reg_2010 <= sext_ln850_7_fu_835_p1;
        sext_ln850_8_reg_2031 <= sext_ln850_8_fu_887_p1;
        sext_ln850_9_reg_2052 <= sext_ln850_9_fu_939_p1;
        sext_ln850_reg_1863 <= sext_ln850_fu_471_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        res_V_data_0_V_TDATA_blk_n = res_V_data_0_V_TREADY_int;
    end else begin
        res_V_data_0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_0_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_0_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        res_V_data_1_V_TDATA_blk_n = res_V_data_1_V_TREADY_int;
    end else begin
        res_V_data_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_1_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_1_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        res_V_data_2_V_TDATA_blk_n = res_V_data_2_V_TREADY_int;
    end else begin
        res_V_data_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_2_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_2_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        res_V_data_3_V_TDATA_blk_n = res_V_data_3_V_TREADY_int;
    end else begin
        res_V_data_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_3_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_3_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        res_V_data_4_V_TDATA_blk_n = res_V_data_4_V_TREADY_int;
    end else begin
        res_V_data_4_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_4_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_4_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        res_V_data_5_V_TDATA_blk_n = res_V_data_5_V_TREADY_int;
    end else begin
        res_V_data_5_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_5_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_5_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        res_V_data_6_V_TDATA_blk_n = res_V_data_6_V_TREADY_int;
    end else begin
        res_V_data_6_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_6_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_6_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        res_V_data_7_V_TDATA_blk_n = res_V_data_7_V_TREADY_int;
    end else begin
        res_V_data_7_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_7_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_7_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        res_V_data_8_V_TDATA_blk_n = res_V_data_8_V_TREADY_int;
    end else begin
        res_V_data_8_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_8_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_8_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        res_V_data_9_V_TDATA_blk_n = res_V_data_9_V_TREADY_int;
    end else begin
        res_V_data_9_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_9_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_9_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tanh_table1_ce0 = 1'b1;
    end else begin
        tanh_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tanh_table1_ce1 = 1'b1;
    end else begin
        tanh_table1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tanh_table1_ce2 = 1'b1;
    end else begin
        tanh_table1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tanh_table1_ce3 = 1'b1;
    end else begin
        tanh_table1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tanh_table1_ce4 = 1'b1;
    end else begin
        tanh_table1_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tanh_table1_ce5 = 1'b1;
    end else begin
        tanh_table1_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tanh_table1_ce6 = 1'b1;
    end else begin
        tanh_table1_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tanh_table1_ce7 = 1'b1;
    end else begin
        tanh_table1_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tanh_table1_ce8 = 1'b1;
    end else begin
        tanh_table1_ce8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tanh_table1_ce9 = 1'b1;
    end else begin
        tanh_table1_ce9 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln403_1_fu_1072_p2 = (14'd512 + select_ln850_1_fu_1062_p3);

assign add_ln403_2_fu_1156_p2 = (14'd512 + select_ln850_2_fu_1146_p3);

assign add_ln403_3_fu_1240_p2 = (14'd512 + select_ln850_3_fu_1230_p3);

assign add_ln403_4_fu_1324_p2 = (14'd512 + select_ln850_4_fu_1314_p3);

assign add_ln403_5_fu_1408_p2 = (14'd512 + select_ln850_5_fu_1398_p3);

assign add_ln403_6_fu_1492_p2 = (14'd512 + select_ln850_6_fu_1482_p3);

assign add_ln403_7_fu_1576_p2 = (14'd512 + select_ln850_7_fu_1566_p3);

assign add_ln403_8_fu_1660_p2 = (14'd512 + select_ln850_8_fu_1650_p3);

assign add_ln403_9_fu_1744_p2 = (14'd512 + select_ln850_9_fu_1734_p3);

assign add_ln403_fu_988_p2 = (14'd512 + select_ln850_fu_978_p3);

assign add_ln700_1_fu_551_p2 = ($signed(14'd1) + $signed(sext_ln850_1_fu_523_p1));

assign add_ln700_2_fu_603_p2 = ($signed(14'd1) + $signed(sext_ln850_2_fu_575_p1));

assign add_ln700_3_fu_655_p2 = ($signed(14'd1) + $signed(sext_ln850_3_fu_627_p1));

assign add_ln700_4_fu_707_p2 = ($signed(14'd1) + $signed(sext_ln850_4_fu_679_p1));

assign add_ln700_5_fu_759_p2 = ($signed(14'd1) + $signed(sext_ln850_5_fu_731_p1));

assign add_ln700_6_fu_811_p2 = ($signed(14'd1) + $signed(sext_ln850_6_fu_783_p1));

assign add_ln700_7_fu_863_p2 = ($signed(14'd1) + $signed(sext_ln850_7_fu_835_p1));

assign add_ln700_8_fu_915_p2 = ($signed(14'd1) + $signed(sext_ln850_8_fu_887_p1));

assign add_ln700_9_fu_967_p2 = ($signed(14'd1) + $signed(sext_ln850_9_fu_939_p1));

assign add_ln700_fu_499_p2 = ($signed(14'd1) + $signed(sext_ln850_fu_471_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((io_acc_block_signal_op5 == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_9_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_8_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((res_V_data_0_V_TREADY_int == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_start == 1'b1) & ((io_acc_block_signal_op5 == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((res_V_data_0_V_TREADY_int == 1'b0) | (regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_9_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_8_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((res_V_data_0_V_TREADY_int == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_start == 1'b1) & ((io_acc_block_signal_op5 == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((res_V_data_0_V_TREADY_int == 1'b0) | (regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_9_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_8_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((io_acc_block_signal_op5 == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_9_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_8_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign icmp_ln406_1_fu_1102_p2 = ((tmp_8_fu_1092_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln406_2_fu_1186_p2 = ((tmp_13_fu_1176_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln406_3_fu_1270_p2 = ((tmp_17_fu_1260_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln406_4_fu_1354_p2 = ((tmp_20_fu_1344_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln406_5_fu_1438_p2 = ((tmp_22_fu_1428_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln406_6_fu_1522_p2 = ((tmp_24_fu_1512_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln406_7_fu_1606_p2 = ((tmp_26_fu_1596_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln406_8_fu_1690_p2 = ((tmp_28_fu_1680_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln406_9_fu_1774_p2 = ((tmp_30_fu_1764_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln406_fu_1018_p2 = ((tmp_4_fu_1008_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln850_1_fu_527_p2 = (($signed(shl_ln1118_1_fu_505_p3) < $signed(26'd67108857)) ? 1'b1 : 1'b0);

assign icmp_ln850_2_fu_579_p2 = (($signed(shl_ln1118_2_fu_557_p3) < $signed(26'd67108857)) ? 1'b1 : 1'b0);

assign icmp_ln850_3_fu_631_p2 = (($signed(shl_ln1118_3_fu_609_p3) < $signed(26'd67108857)) ? 1'b1 : 1'b0);

assign icmp_ln850_4_fu_683_p2 = (($signed(shl_ln1118_4_fu_661_p3) < $signed(26'd67108857)) ? 1'b1 : 1'b0);

assign icmp_ln850_5_fu_735_p2 = (($signed(shl_ln1118_5_fu_713_p3) < $signed(26'd67108857)) ? 1'b1 : 1'b0);

assign icmp_ln850_6_fu_787_p2 = (($signed(shl_ln1118_6_fu_765_p3) < $signed(26'd67108857)) ? 1'b1 : 1'b0);

assign icmp_ln850_7_fu_839_p2 = (($signed(shl_ln1118_7_fu_817_p3) < $signed(26'd67108857)) ? 1'b1 : 1'b0);

assign icmp_ln850_8_fu_891_p2 = (($signed(shl_ln1118_8_fu_869_p3) < $signed(26'd67108857)) ? 1'b1 : 1'b0);

assign icmp_ln850_9_fu_943_p2 = (($signed(shl_ln1118_9_fu_921_p3) < $signed(26'd67108857)) ? 1'b1 : 1'b0);

assign icmp_ln850_fu_475_p2 = (($signed(shl_ln_fu_453_p3) < $signed(26'd67108857)) ? 1'b1 : 1'b0);

assign icmp_ln851_1_fu_545_p2 = ((p_Result_2_1_fu_537_p3 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln851_2_fu_597_p2 = ((p_Result_2_2_fu_589_p3 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln851_3_fu_649_p2 = ((p_Result_2_3_fu_641_p3 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln851_4_fu_701_p2 = ((p_Result_2_4_fu_693_p3 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln851_5_fu_753_p2 = ((p_Result_2_5_fu_745_p3 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln851_6_fu_805_p2 = ((p_Result_2_6_fu_797_p3 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln851_7_fu_857_p2 = ((p_Result_2_7_fu_849_p3 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln851_8_fu_909_p2 = ((p_Result_2_8_fu_901_p3 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln851_9_fu_961_p2 = ((p_Result_2_9_fu_953_p3 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln851_fu_493_p2 = ((p_Result_2_fu_485_p3 == 10'd0) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op5 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign or_ln404_1_fu_1122_p2 = (tmp_6_fu_1084_p3 | icmp_ln406_1_fu_1102_p2);

assign or_ln404_2_fu_1206_p2 = (tmp_11_fu_1168_p3 | icmp_ln406_2_fu_1186_p2);

assign or_ln404_3_fu_1290_p2 = (tmp_15_fu_1252_p3 | icmp_ln406_3_fu_1270_p2);

assign or_ln404_4_fu_1374_p2 = (tmp_19_fu_1336_p3 | icmp_ln406_4_fu_1354_p2);

assign or_ln404_5_fu_1458_p2 = (tmp_21_fu_1420_p3 | icmp_ln406_5_fu_1438_p2);

assign or_ln404_6_fu_1542_p2 = (tmp_23_fu_1504_p3 | icmp_ln406_6_fu_1522_p2);

assign or_ln404_7_fu_1626_p2 = (tmp_25_fu_1588_p3 | icmp_ln406_7_fu_1606_p2);

assign or_ln404_8_fu_1710_p2 = (tmp_27_fu_1672_p3 | icmp_ln406_8_fu_1690_p2);

assign or_ln404_9_fu_1794_p2 = (tmp_29_fu_1756_p3 | icmp_ln406_9_fu_1774_p2);

assign or_ln404_fu_1038_p2 = (tmp_2_fu_1000_p3 | icmp_ln406_fu_1018_p2);

assign p_Result_2_1_fu_537_p3 = {{trunc_ln851_1_fu_533_p1}, {7'd0}};

assign p_Result_2_2_fu_589_p3 = {{trunc_ln851_2_fu_585_p1}, {7'd0}};

assign p_Result_2_3_fu_641_p3 = {{trunc_ln851_3_fu_637_p1}, {7'd0}};

assign p_Result_2_4_fu_693_p3 = {{trunc_ln851_4_fu_689_p1}, {7'd0}};

assign p_Result_2_5_fu_745_p3 = {{trunc_ln851_5_fu_741_p1}, {7'd0}};

assign p_Result_2_6_fu_797_p3 = {{trunc_ln851_6_fu_793_p1}, {7'd0}};

assign p_Result_2_7_fu_849_p3 = {{trunc_ln851_7_fu_845_p1}, {7'd0}};

assign p_Result_2_8_fu_901_p3 = {{trunc_ln851_8_fu_897_p1}, {7'd0}};

assign p_Result_2_9_fu_953_p3 = {{trunc_ln851_9_fu_949_p1}, {7'd0}};

assign p_Result_2_fu_485_p3 = {{trunc_ln851_fu_481_p1}, {7'd0}};

assign res_V_data_0_V_TDATA_int = $signed(tanh_table1_q0);

assign res_V_data_0_V_TVALID = regslice_both_res_V_data_0_V_U_vld_out;

assign res_V_data_1_V_TDATA_int = $signed(tanh_table1_q1);

assign res_V_data_1_V_TVALID = regslice_both_res_V_data_1_V_U_vld_out;

assign res_V_data_2_V_TDATA_int = $signed(tanh_table1_q2);

assign res_V_data_2_V_TVALID = regslice_both_res_V_data_2_V_U_vld_out;

assign res_V_data_3_V_TDATA_int = $signed(tanh_table1_q3);

assign res_V_data_3_V_TVALID = regslice_both_res_V_data_3_V_U_vld_out;

assign res_V_data_4_V_TDATA_int = $signed(tanh_table1_q4);

assign res_V_data_4_V_TVALID = regslice_both_res_V_data_4_V_U_vld_out;

assign res_V_data_5_V_TDATA_int = $signed(tanh_table1_q5);

assign res_V_data_5_V_TVALID = regslice_both_res_V_data_5_V_U_vld_out;

assign res_V_data_6_V_TDATA_int = $signed(tanh_table1_q6);

assign res_V_data_6_V_TVALID = regslice_both_res_V_data_6_V_U_vld_out;

assign res_V_data_7_V_TDATA_int = $signed(tanh_table1_q7);

assign res_V_data_7_V_TVALID = regslice_both_res_V_data_7_V_U_vld_out;

assign res_V_data_8_V_TDATA_int = $signed(tanh_table1_q8);

assign res_V_data_8_V_TVALID = regslice_both_res_V_data_8_V_U_vld_out;

assign res_V_data_9_V_TDATA_int = $signed(tanh_table1_q9);

assign res_V_data_9_V_TVALID = regslice_both_res_V_data_9_V_U_vld_out;

assign select_ln404_10_fu_1450_p3 = ((xor_ln404_5_fu_1444_p2[0:0] === 1'b1) ? 10'd1023 : 10'd0);

assign select_ln404_11_fu_1464_p3 = ((or_ln404_5_fu_1458_p2[0:0] === 1'b1) ? select_ln404_10_fu_1450_p3 : xor_ln403_5_fu_1414_p2);

assign select_ln404_12_fu_1534_p3 = ((xor_ln404_6_fu_1528_p2[0:0] === 1'b1) ? 10'd1023 : 10'd0);

assign select_ln404_13_fu_1548_p3 = ((or_ln404_6_fu_1542_p2[0:0] === 1'b1) ? select_ln404_12_fu_1534_p3 : xor_ln403_6_fu_1498_p2);

assign select_ln404_14_fu_1618_p3 = ((xor_ln404_7_fu_1612_p2[0:0] === 1'b1) ? 10'd1023 : 10'd0);

assign select_ln404_15_fu_1632_p3 = ((or_ln404_7_fu_1626_p2[0:0] === 1'b1) ? select_ln404_14_fu_1618_p3 : xor_ln403_7_fu_1582_p2);

assign select_ln404_16_fu_1702_p3 = ((xor_ln404_8_fu_1696_p2[0:0] === 1'b1) ? 10'd1023 : 10'd0);

assign select_ln404_17_fu_1716_p3 = ((or_ln404_8_fu_1710_p2[0:0] === 1'b1) ? select_ln404_16_fu_1702_p3 : xor_ln403_8_fu_1666_p2);

assign select_ln404_18_fu_1786_p3 = ((xor_ln404_9_fu_1780_p2[0:0] === 1'b1) ? 10'd1023 : 10'd0);

assign select_ln404_19_fu_1800_p3 = ((or_ln404_9_fu_1794_p2[0:0] === 1'b1) ? select_ln404_18_fu_1786_p3 : xor_ln403_9_fu_1750_p2);

assign select_ln404_1_fu_1044_p3 = ((or_ln404_fu_1038_p2[0:0] === 1'b1) ? select_ln404_fu_1030_p3 : xor_ln403_fu_994_p2);

assign select_ln404_2_fu_1114_p3 = ((xor_ln404_1_fu_1108_p2[0:0] === 1'b1) ? 10'd1023 : 10'd0);

assign select_ln404_3_fu_1128_p3 = ((or_ln404_1_fu_1122_p2[0:0] === 1'b1) ? select_ln404_2_fu_1114_p3 : xor_ln403_1_fu_1078_p2);

assign select_ln404_4_fu_1198_p3 = ((xor_ln404_2_fu_1192_p2[0:0] === 1'b1) ? 10'd1023 : 10'd0);

assign select_ln404_5_fu_1212_p3 = ((or_ln404_2_fu_1206_p2[0:0] === 1'b1) ? select_ln404_4_fu_1198_p3 : xor_ln403_2_fu_1162_p2);

assign select_ln404_6_fu_1282_p3 = ((xor_ln404_3_fu_1276_p2[0:0] === 1'b1) ? 10'd1023 : 10'd0);

assign select_ln404_7_fu_1296_p3 = ((or_ln404_3_fu_1290_p2[0:0] === 1'b1) ? select_ln404_6_fu_1282_p3 : xor_ln403_3_fu_1246_p2);

assign select_ln404_8_fu_1366_p3 = ((xor_ln404_4_fu_1360_p2[0:0] === 1'b1) ? 10'd1023 : 10'd0);

assign select_ln404_9_fu_1380_p3 = ((or_ln404_4_fu_1374_p2[0:0] === 1'b1) ? select_ln404_8_fu_1366_p3 : xor_ln403_4_fu_1330_p2);

assign select_ln404_fu_1030_p3 = ((xor_ln404_fu_1024_p2[0:0] === 1'b1) ? 10'd1023 : 10'd0);

assign select_ln850_1_fu_1062_p3 = ((icmp_ln850_1_reg_1890[0:0] === 1'b1) ? select_ln851_1_fu_1057_p3 : sext_ln850_1_reg_1884);

assign select_ln850_2_fu_1146_p3 = ((icmp_ln850_2_reg_1911[0:0] === 1'b1) ? select_ln851_2_fu_1141_p3 : sext_ln850_2_reg_1905);

assign select_ln850_3_fu_1230_p3 = ((icmp_ln850_3_reg_1932[0:0] === 1'b1) ? select_ln851_3_fu_1225_p3 : sext_ln850_3_reg_1926);

assign select_ln850_4_fu_1314_p3 = ((icmp_ln850_4_reg_1953[0:0] === 1'b1) ? select_ln851_4_fu_1309_p3 : sext_ln850_4_reg_1947);

assign select_ln850_5_fu_1398_p3 = ((icmp_ln850_5_reg_1974[0:0] === 1'b1) ? select_ln851_5_fu_1393_p3 : sext_ln850_5_reg_1968);

assign select_ln850_6_fu_1482_p3 = ((icmp_ln850_6_reg_1995[0:0] === 1'b1) ? select_ln851_6_fu_1477_p3 : sext_ln850_6_reg_1989);

assign select_ln850_7_fu_1566_p3 = ((icmp_ln850_7_reg_2016[0:0] === 1'b1) ? select_ln851_7_fu_1561_p3 : sext_ln850_7_reg_2010);

assign select_ln850_8_fu_1650_p3 = ((icmp_ln850_8_reg_2037[0:0] === 1'b1) ? select_ln851_8_fu_1645_p3 : sext_ln850_8_reg_2031);

assign select_ln850_9_fu_1734_p3 = ((icmp_ln850_9_reg_2058[0:0] === 1'b1) ? select_ln851_9_fu_1729_p3 : sext_ln850_9_reg_2052);

assign select_ln850_fu_978_p3 = ((icmp_ln850_reg_1869[0:0] === 1'b1) ? select_ln851_fu_973_p3 : sext_ln850_reg_1863);

assign select_ln851_1_fu_1057_p3 = ((icmp_ln851_1_reg_1895[0:0] === 1'b1) ? sext_ln850_1_reg_1884 : add_ln700_1_reg_1900);

assign select_ln851_2_fu_1141_p3 = ((icmp_ln851_2_reg_1916[0:0] === 1'b1) ? sext_ln850_2_reg_1905 : add_ln700_2_reg_1921);

assign select_ln851_3_fu_1225_p3 = ((icmp_ln851_3_reg_1937[0:0] === 1'b1) ? sext_ln850_3_reg_1926 : add_ln700_3_reg_1942);

assign select_ln851_4_fu_1309_p3 = ((icmp_ln851_4_reg_1958[0:0] === 1'b1) ? sext_ln850_4_reg_1947 : add_ln700_4_reg_1963);

assign select_ln851_5_fu_1393_p3 = ((icmp_ln851_5_reg_1979[0:0] === 1'b1) ? sext_ln850_5_reg_1968 : add_ln700_5_reg_1984);

assign select_ln851_6_fu_1477_p3 = ((icmp_ln851_6_reg_2000[0:0] === 1'b1) ? sext_ln850_6_reg_1989 : add_ln700_6_reg_2005);

assign select_ln851_7_fu_1561_p3 = ((icmp_ln851_7_reg_2021[0:0] === 1'b1) ? sext_ln850_7_reg_2010 : add_ln700_7_reg_2026);

assign select_ln851_8_fu_1645_p3 = ((icmp_ln851_8_reg_2042[0:0] === 1'b1) ? sext_ln850_8_reg_2031 : add_ln700_8_reg_2047);

assign select_ln851_9_fu_1729_p3 = ((icmp_ln851_9_reg_2063[0:0] === 1'b1) ? sext_ln850_9_reg_2052 : add_ln700_9_reg_2068);

assign select_ln851_fu_973_p3 = ((icmp_ln851_reg_1874[0:0] === 1'b1) ? sext_ln850_reg_1863 : add_ln700_reg_1879);

assign sext_ln850_1_fu_523_p1 = $signed(tmp_3_fu_513_p4);

assign sext_ln850_2_fu_575_p1 = $signed(tmp_5_fu_565_p4);

assign sext_ln850_3_fu_627_p1 = $signed(tmp_7_fu_617_p4);

assign sext_ln850_4_fu_679_p1 = $signed(tmp_9_fu_669_p4);

assign sext_ln850_5_fu_731_p1 = $signed(tmp_s_fu_721_p4);

assign sext_ln850_6_fu_783_p1 = $signed(tmp_10_fu_773_p4);

assign sext_ln850_7_fu_835_p1 = $signed(tmp_12_fu_825_p4);

assign sext_ln850_8_fu_887_p1 = $signed(tmp_14_fu_877_p4);

assign sext_ln850_9_fu_939_p1 = $signed(tmp_16_fu_929_p4);

assign sext_ln850_fu_471_p1 = $signed(tmp_1_fu_461_p4);

assign shl_ln1118_1_fu_505_p3 = {{data_V_data_1_V_dout}, {10'd0}};

assign shl_ln1118_2_fu_557_p3 = {{data_V_data_2_V_dout}, {10'd0}};

assign shl_ln1118_3_fu_609_p3 = {{data_V_data_3_V_dout}, {10'd0}};

assign shl_ln1118_4_fu_661_p3 = {{data_V_data_4_V_dout}, {10'd0}};

assign shl_ln1118_5_fu_713_p3 = {{data_V_data_5_V_dout}, {10'd0}};

assign shl_ln1118_6_fu_765_p3 = {{data_V_data_6_V_dout}, {10'd0}};

assign shl_ln1118_7_fu_817_p3 = {{data_V_data_7_V_dout}, {10'd0}};

assign shl_ln1118_8_fu_869_p3 = {{data_V_data_8_V_dout}, {10'd0}};

assign shl_ln1118_9_fu_921_p3 = {{data_V_data_9_V_dout}, {10'd0}};

assign shl_ln_fu_453_p3 = {{data_V_data_0_V_dout}, {10'd0}};

assign tanh_table1_address0 = zext_ln408_fu_1052_p1;

assign tanh_table1_address1 = zext_ln408_1_fu_1136_p1;

assign tanh_table1_address2 = zext_ln408_2_fu_1220_p1;

assign tanh_table1_address3 = zext_ln408_3_fu_1304_p1;

assign tanh_table1_address4 = zext_ln408_4_fu_1388_p1;

assign tanh_table1_address5 = zext_ln408_5_fu_1472_p1;

assign tanh_table1_address6 = zext_ln408_6_fu_1556_p1;

assign tanh_table1_address7 = zext_ln408_7_fu_1640_p1;

assign tanh_table1_address8 = zext_ln408_8_fu_1724_p1;

assign tanh_table1_address9 = zext_ln408_9_fu_1808_p1;

assign tmp_10_fu_773_p4 = {{data_V_data_6_V_dout[15:3]}};

assign tmp_11_fu_1168_p3 = add_ln403_2_fu_1156_p2[32'd13];

assign tmp_12_fu_825_p4 = {{data_V_data_7_V_dout[15:3]}};

assign tmp_13_fu_1176_p4 = {{add_ln403_2_fu_1156_p2[13:10]}};

assign tmp_14_fu_877_p4 = {{data_V_data_8_V_dout[15:3]}};

assign tmp_15_fu_1252_p3 = add_ln403_3_fu_1240_p2[32'd13];

assign tmp_16_fu_929_p4 = {{data_V_data_9_V_dout[15:3]}};

assign tmp_17_fu_1260_p4 = {{add_ln403_3_fu_1240_p2[13:10]}};

assign tmp_19_fu_1336_p3 = add_ln403_4_fu_1324_p2[32'd13];

assign tmp_1_fu_461_p4 = {{data_V_data_0_V_dout[15:3]}};

assign tmp_20_fu_1344_p4 = {{add_ln403_4_fu_1324_p2[13:10]}};

assign tmp_21_fu_1420_p3 = add_ln403_5_fu_1408_p2[32'd13];

assign tmp_22_fu_1428_p4 = {{add_ln403_5_fu_1408_p2[13:10]}};

assign tmp_23_fu_1504_p3 = add_ln403_6_fu_1492_p2[32'd13];

assign tmp_24_fu_1512_p4 = {{add_ln403_6_fu_1492_p2[13:10]}};

assign tmp_25_fu_1588_p3 = add_ln403_7_fu_1576_p2[32'd13];

assign tmp_26_fu_1596_p4 = {{add_ln403_7_fu_1576_p2[13:10]}};

assign tmp_27_fu_1672_p3 = add_ln403_8_fu_1660_p2[32'd13];

assign tmp_28_fu_1680_p4 = {{add_ln403_8_fu_1660_p2[13:10]}};

assign tmp_29_fu_1756_p3 = add_ln403_9_fu_1744_p2[32'd13];

assign tmp_2_fu_1000_p3 = add_ln403_fu_988_p2[32'd13];

assign tmp_30_fu_1764_p4 = {{add_ln403_9_fu_1744_p2[13:10]}};

assign tmp_3_fu_513_p4 = {{data_V_data_1_V_dout[15:3]}};

assign tmp_4_fu_1008_p4 = {{add_ln403_fu_988_p2[13:10]}};

assign tmp_5_fu_565_p4 = {{data_V_data_2_V_dout[15:3]}};

assign tmp_6_fu_1084_p3 = add_ln403_1_fu_1072_p2[32'd13];

assign tmp_7_fu_617_p4 = {{data_V_data_3_V_dout[15:3]}};

assign tmp_8_fu_1092_p4 = {{add_ln403_1_fu_1072_p2[13:10]}};

assign tmp_9_fu_669_p4 = {{data_V_data_4_V_dout[15:3]}};

assign tmp_s_fu_721_p4 = {{data_V_data_5_V_dout[15:3]}};

assign trunc_ln403_1_fu_1068_p1 = select_ln850_1_fu_1062_p3[9:0];

assign trunc_ln403_2_fu_1152_p1 = select_ln850_2_fu_1146_p3[9:0];

assign trunc_ln403_3_fu_1236_p1 = select_ln850_3_fu_1230_p3[9:0];

assign trunc_ln403_4_fu_1320_p1 = select_ln850_4_fu_1314_p3[9:0];

assign trunc_ln403_5_fu_1404_p1 = select_ln850_5_fu_1398_p3[9:0];

assign trunc_ln403_6_fu_1488_p1 = select_ln850_6_fu_1482_p3[9:0];

assign trunc_ln403_7_fu_1572_p1 = select_ln850_7_fu_1566_p3[9:0];

assign trunc_ln403_8_fu_1656_p1 = select_ln850_8_fu_1650_p3[9:0];

assign trunc_ln403_9_fu_1740_p1 = select_ln850_9_fu_1734_p3[9:0];

assign trunc_ln403_fu_984_p1 = select_ln850_fu_978_p3[9:0];

assign trunc_ln851_1_fu_533_p1 = data_V_data_1_V_dout[2:0];

assign trunc_ln851_2_fu_585_p1 = data_V_data_2_V_dout[2:0];

assign trunc_ln851_3_fu_637_p1 = data_V_data_3_V_dout[2:0];

assign trunc_ln851_4_fu_689_p1 = data_V_data_4_V_dout[2:0];

assign trunc_ln851_5_fu_741_p1 = data_V_data_5_V_dout[2:0];

assign trunc_ln851_6_fu_793_p1 = data_V_data_6_V_dout[2:0];

assign trunc_ln851_7_fu_845_p1 = data_V_data_7_V_dout[2:0];

assign trunc_ln851_8_fu_897_p1 = data_V_data_8_V_dout[2:0];

assign trunc_ln851_9_fu_949_p1 = data_V_data_9_V_dout[2:0];

assign trunc_ln851_fu_481_p1 = data_V_data_0_V_dout[2:0];

assign xor_ln403_1_fu_1078_p2 = (trunc_ln403_1_fu_1068_p1 ^ 10'd512);

assign xor_ln403_2_fu_1162_p2 = (trunc_ln403_2_fu_1152_p1 ^ 10'd512);

assign xor_ln403_3_fu_1246_p2 = (trunc_ln403_3_fu_1236_p1 ^ 10'd512);

assign xor_ln403_4_fu_1330_p2 = (trunc_ln403_4_fu_1320_p1 ^ 10'd512);

assign xor_ln403_5_fu_1414_p2 = (trunc_ln403_5_fu_1404_p1 ^ 10'd512);

assign xor_ln403_6_fu_1498_p2 = (trunc_ln403_6_fu_1488_p1 ^ 10'd512);

assign xor_ln403_7_fu_1582_p2 = (trunc_ln403_7_fu_1572_p1 ^ 10'd512);

assign xor_ln403_8_fu_1666_p2 = (trunc_ln403_8_fu_1656_p1 ^ 10'd512);

assign xor_ln403_9_fu_1750_p2 = (trunc_ln403_9_fu_1740_p1 ^ 10'd512);

assign xor_ln403_fu_994_p2 = (trunc_ln403_fu_984_p1 ^ 10'd512);

assign xor_ln404_1_fu_1108_p2 = (tmp_6_fu_1084_p3 ^ 1'd1);

assign xor_ln404_2_fu_1192_p2 = (tmp_11_fu_1168_p3 ^ 1'd1);

assign xor_ln404_3_fu_1276_p2 = (tmp_15_fu_1252_p3 ^ 1'd1);

assign xor_ln404_4_fu_1360_p2 = (tmp_19_fu_1336_p3 ^ 1'd1);

assign xor_ln404_5_fu_1444_p2 = (tmp_21_fu_1420_p3 ^ 1'd1);

assign xor_ln404_6_fu_1528_p2 = (tmp_23_fu_1504_p3 ^ 1'd1);

assign xor_ln404_7_fu_1612_p2 = (tmp_25_fu_1588_p3 ^ 1'd1);

assign xor_ln404_8_fu_1696_p2 = (tmp_27_fu_1672_p3 ^ 1'd1);

assign xor_ln404_9_fu_1780_p2 = (tmp_29_fu_1756_p3 ^ 1'd1);

assign xor_ln404_fu_1024_p2 = (tmp_2_fu_1000_p3 ^ 1'd1);

assign zext_ln408_1_fu_1136_p1 = select_ln404_3_fu_1128_p3;

assign zext_ln408_2_fu_1220_p1 = select_ln404_5_fu_1212_p3;

assign zext_ln408_3_fu_1304_p1 = select_ln404_7_fu_1296_p3;

assign zext_ln408_4_fu_1388_p1 = select_ln404_9_fu_1380_p3;

assign zext_ln408_5_fu_1472_p1 = select_ln404_11_fu_1464_p3;

assign zext_ln408_6_fu_1556_p1 = select_ln404_13_fu_1548_p3;

assign zext_ln408_7_fu_1640_p1 = select_ln404_15_fu_1632_p3;

assign zext_ln408_8_fu_1724_p1 = select_ln404_17_fu_1716_p3;

assign zext_ln408_9_fu_1808_p1 = select_ln404_19_fu_1800_p3;

assign zext_ln408_fu_1052_p1 = select_ln404_1_fu_1044_p3;

endmodule //tanh_array_ap_fixed_10u_array_ap_fixed_16_6_5_3_0_10u_tanh_config10_s
