-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_rom is 
    generic(
             DWIDTH     : integer := 124; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 36
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1110100001001111111010111111111111101110000100000000100100010000000010111101000000000001000100000000110001110000000111010010", 
    1 => "1111010011100000000010111010111111110101101111111110001100100000000001111111000000000000010100000000001111111111111111110101", 
    2 => "1101001111011111111000110111000000100011001000000000101001010000000101001111000000100100010000000010111111111111111111010010", 
    3 => "0001010110000000001001111010111111101101110011111111101001011111111111110001111111110011000011111111100001110000000100101100", 
    4 => "1110101010111111111101110001111111101101000011111100100100100000000001101010000000001110110100000000101110000000000100011111", 
    5 => "1101000101111111110111111010000000001000110011111101110101110000000100000011000000000001110100000001111110000000000000110010", 
    6 => "1011000011101111111111001001000000100110101111111111100110001111111101100100000000011001001100000000111000100000001011111111", 
    7 => "0010011010100000001111010100111111111011011000000000000100000000000100011010111111101001010111111101001011010000001101100101", 
    8 => "1110111100111111111101111101111111101110000011111110010111010000000011110010111111111110101000000001110000011111111011001101", 
    9 => "1100010111001111111011010010000000011100011100000001001010001111111110101111111111111001001011111111111110111111111000001001", 
    10 => "1110100010101111111101111000111111111010000111111110011010101111111011111011000000001101101100000100110110010000000010010011", 
    11 => "0000001010110000000100010010000000000100010011111111111011010000000011010001111111011100100111111101011100001111111100101001", 
    12 => "0001110111110000000001100101111111111010001000000010011101010000000101001010111111110100111100000000011101011111111101110111", 
    13 => "0000011010100000000010011010000000010010100111111111111010101111111101100100111111111000000000000000010111100000000001100000", 
    14 => "1110000001100000000011000100111111011110001000000010110101001111111110110011111111110110000111111110101010010000000000111011", 
    15 => "0001000111101111111111000100111111100100001000000001001010110000000100100111111111100111011111111111110101001111111101110001", 
    16 => "0000101111010000000101110001000000010010000011111101000001110000000000101110000000010000001000000000110110100000000010100001", 
    17 => "1111101111010000000101111110000000011011011111111111000100000000000000011101000000011111100100000010011110010000000111100010", 
    18 => "1111010101100000000100111101000000010101011011111110101110010000000011001001000000000011001111111111000100011111111110010001", 
    19 => "0010010111110000000001101101111111011111101111111110100101101111111000111001111111011100100111111100110011100000001001001100", 
    20 => "1111111000110000000000110110000000010011111111111110111010000000000110011000000000001001100000000000110100101111111111100101", 
    21 => "1111010000111111111100000111111111111001010100000001101101100000000010100001111111111010011111111111111101010000000101110101", 
    22 => "0001110010000000000111111111111111111011100100000000111010100000000100010111000000010110000000000010111100010000000111100001", 
    23 => "0001000011001111111010001100000000001011011111111111000111111111111111100011111111101010000100000000000110010000000010100110", 
    24 => "0000011000010000000001111100000000001010101000000000001110001111110110011111111111100111000100000010000101110000000010011100", 
    25 => "1111011001100000000111111101000000001011001111111110100110001111111101000110000000000110001000000001001001111111111111101010", 
    26 => "0000011010011111111111100110000000111000010111111111110001110000000000001010000000000011100100000001110010101111111100100100", 
    27 => "0000011010100000000000001111111110101010011011111111011101011111110110010100111111111010010011111110011100000000000001101111", 
    28 => "0001001001010000000001011101000000101100011000000000010000001111110110000100000000100001001000000001101101001111111111100101", 
    29 => "0001101010110000000110011101000000001001011000000001010011010000001000100000000000101001010011111111111100000000000000110110", 
    30 => "0000000100000000001110111100000000100100100000000000100011010000001010101100000000001111010111111111000101100000000000011001", 
    31 => "0000100001011111110111101110000000110001010011111110011100111111101011000111111111100111010100000001000100011111111110110101", 
    32 => "0000111110001111111011011110000000000111011100000001001111100000000101101001000000000011011011111111100110101111111100011111", 
    33 => "0000010010000000000000100010111111111110100000000001011001010000000010100010000000000111000011111111011101001111111110011100", 
    34 => "1111101110000000001100001100111111111101010100000001100001100000000000110011000000100011011011111101110010001111111100011000", 
    35 => "0001000011011111111000100000000000110001101011111111110101001111110010000100111111101100100100000011001000000000001000000111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V is
    generic (
        DataWidth : INTEGER := 124;
        AddressRange : INTEGER := 36;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V is
    component conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_rom_U :  component conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


