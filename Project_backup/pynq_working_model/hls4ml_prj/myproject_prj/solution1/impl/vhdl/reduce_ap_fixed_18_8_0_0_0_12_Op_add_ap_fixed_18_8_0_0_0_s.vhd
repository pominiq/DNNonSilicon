-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_0_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_1_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_2_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_3_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_4_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_5_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_6_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_7_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_8_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_9_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_10_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_11_V : IN STD_LOGIC_VECTOR (16 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (17 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv18_1FFFF : STD_LOGIC_VECTOR (17 downto 0) := "011111111111111111";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_s_reg_425 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_Val2_38_fu_181_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_38_reg_431 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_Val2_39_fu_331_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_39_reg_437 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_port_reg_x_8_V : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_port_reg_x_9_V : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_port_reg_x_10_V : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_port_reg_x_11_V : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_start : STD_LOGIC;
    signal grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_done : STD_LOGIC;
    signal grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_idle : STD_LOGIC;
    signal grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_ready : STD_LOGIC;
    signal grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_8_V : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_9_V : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_10_V : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_11_V : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_V_offset : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_ce : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm_state3 : STD_LOGIC;
    signal rhs_V_fu_104_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_V_fu_101_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_fu_104_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_fu_108_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_27_fu_122_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_27_fu_122_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_18_fu_127_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_114_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_29_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_165_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln388_fu_173_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_29_fu_193_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_28_fu_189_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_30_fu_197_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_19_fu_203_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_32_fu_223_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_31_fu_219_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_33_fu_227_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_20_fu_233_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_34_fu_211_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_35_fu_241_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_V_3_fu_249_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_3_fu_253_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_3_fu_257_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_37_fu_271_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_22_fu_277_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_21_fu_263_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_12_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_12_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_30_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_3_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_14_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_12_fu_315_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln388_12_fu_323_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_V_4_fu_339_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_4_fu_342_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_4_fu_345_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_41_fu_359_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_24_fu_363_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_23_fu_351_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_13_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_13_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_31_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_4_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_15_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_13_fu_401_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln388_13_fu_409_p3 : STD_LOGIC_VECTOR (17 downto 0);

    component reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_0_V : IN STD_LOGIC_VECTOR (16 downto 0);
        x_1_V : IN STD_LOGIC_VECTOR (16 downto 0);
        x_2_V : IN STD_LOGIC_VECTOR (16 downto 0);
        x_3_V : IN STD_LOGIC_VECTOR (16 downto 0);
        x_4_V : IN STD_LOGIC_VECTOR (16 downto 0);
        x_5_V : IN STD_LOGIC_VECTOR (16 downto 0);
        x_6_V : IN STD_LOGIC_VECTOR (16 downto 0);
        x_7_V : IN STD_LOGIC_VECTOR (16 downto 0);
        x_8_V : IN STD_LOGIC_VECTOR (16 downto 0);
        x_9_V : IN STD_LOGIC_VECTOR (16 downto 0);
        x_10_V : IN STD_LOGIC_VECTOR (16 downto 0);
        x_11_V : IN STD_LOGIC_VECTOR (16 downto 0);
        x_V_offset : IN STD_LOGIC_VECTOR (4 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;



begin
    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70 : component reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_start,
        ap_done => grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_done,
        ap_idle => grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_idle,
        ap_ready => grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_ready,
        x_0_V => x_0_V,
        x_1_V => x_1_V,
        x_2_V => x_2_V,
        x_3_V => x_3_V,
        x_4_V => x_4_V,
        x_5_V => x_5_V,
        x_6_V => x_6_V,
        x_7_V => x_7_V,
        x_8_V => grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_8_V,
        x_9_V => grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_9_V,
        x_10_V => grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_10_V,
        x_11_V => grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_11_V,
        x_V_offset => grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_V_offset,
        ap_return => grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_return,
        ap_ce => grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_NS_fsm_state3))) then 
                    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_ready = ap_const_logic_1)) then 
                    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                ap_port_reg_x_10_V <= x_10_V;
                ap_port_reg_x_11_V <= x_11_V;
                ap_port_reg_x_8_V <= x_8_V;
                ap_port_reg_x_9_V <= x_9_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                p_Val2_38_reg_431 <= p_Val2_38_fu_181_p3;
                p_Val2_39_reg_437 <= p_Val2_39_fu_331_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_Val2_s_reg_425 <= grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_NS_fsm_state3 <= ap_NS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state5)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        select_ln340_13_fu_401_p3 when (or_ln340_15_fu_395_p2(0) = '1') else 
        select_ln388_13_fu_409_p3;

    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_0 = ap_ce) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_ce <= ap_const_logic_0;
        else 
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_start_reg)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_start <= ap_const_logic_1;
        else 
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_start <= grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_start_reg;
        end if; 
    end process;


    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_10_V_assign_proc : process(ap_CS_fsm_state1, x_10_V, ap_port_reg_x_10_V, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_10_V <= ap_port_reg_x_10_V;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_10_V <= x_10_V;
        else 
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_10_V <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_11_V_assign_proc : process(ap_CS_fsm_state1, x_11_V, ap_port_reg_x_11_V, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_11_V <= ap_port_reg_x_11_V;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_11_V <= x_11_V;
        else 
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_11_V <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_8_V_assign_proc : process(ap_CS_fsm_state1, x_8_V, ap_port_reg_x_8_V, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_8_V <= ap_port_reg_x_8_V;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_8_V <= x_8_V;
        else 
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_8_V <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_9_V_assign_proc : process(ap_CS_fsm_state1, x_9_V, ap_port_reg_x_9_V, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_9_V <= ap_port_reg_x_9_V;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_9_V <= x_9_V;
        else 
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_9_V <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_V_offset_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_V_offset <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_V_offset <= ap_const_lv5_0;
        else 
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_x_V_offset <= "XXXXX";
        end if; 
    end process;

        lhs_V_3_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_34_fu_211_p3),19));

        lhs_V_4_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_38_reg_431),19));

        lhs_V_fu_101_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_425),19));

    or_ln340_14_fu_309_p2 <= (xor_ln340_12_fu_303_p2 or p_Result_22_fu_277_p3);
    or_ln340_15_fu_395_p2 <= (xor_ln340_13_fu_389_p2 or p_Result_24_fu_363_p3);
    or_ln340_fu_159_p2 <= (xor_ln340_fu_153_p2 or p_Result_18_fu_127_p3);
    p_Result_18_fu_127_p3 <= p_Val2_27_fu_122_p2(17 downto 17);
    p_Result_19_fu_203_p3 <= p_Val2_30_fu_197_p2(17 downto 17);
    p_Result_20_fu_233_p3 <= p_Val2_33_fu_227_p2(17 downto 17);
    p_Result_21_fu_263_p3 <= ret_V_3_fu_257_p2(18 downto 18);
    p_Result_22_fu_277_p3 <= p_Val2_37_fu_271_p2(17 downto 17);
    p_Result_23_fu_351_p3 <= ret_V_4_fu_345_p2(18 downto 18);
    p_Result_24_fu_363_p3 <= p_Val2_41_fu_359_p2(17 downto 17);
    p_Result_s_fu_114_p3 <= ret_V_fu_108_p2(18 downto 18);
    p_Val2_27_fu_122_p0 <= grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_return;
    p_Val2_27_fu_122_p2 <= std_logic_vector(signed(p_Val2_27_fu_122_p0) + signed(p_Val2_s_reg_425));
    p_Val2_28_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_port_reg_x_8_V),18));
    p_Val2_29_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_port_reg_x_9_V),18));
    p_Val2_30_fu_197_p2 <= std_logic_vector(unsigned(p_Val2_29_fu_193_p1) + unsigned(p_Val2_28_fu_189_p1));
    p_Val2_31_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_port_reg_x_10_V),18));
    p_Val2_32_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_port_reg_x_11_V),18));
    p_Val2_33_fu_227_p2 <= std_logic_vector(unsigned(p_Val2_32_fu_223_p1) + unsigned(p_Val2_31_fu_219_p1));
    p_Val2_34_fu_211_p3 <= 
        ap_const_lv18_1FFFF when (p_Result_19_fu_203_p3(0) = '1') else 
        p_Val2_30_fu_197_p2;
    p_Val2_35_fu_241_p3 <= 
        ap_const_lv18_1FFFF when (p_Result_20_fu_233_p3(0) = '1') else 
        p_Val2_33_fu_227_p2;
    p_Val2_37_fu_271_p2 <= std_logic_vector(signed(p_Val2_35_fu_241_p3) + signed(p_Val2_34_fu_211_p3));
    p_Val2_38_fu_181_p3 <= 
        select_ln340_fu_165_p3 when (or_ln340_fu_159_p2(0) = '1') else 
        select_ln388_fu_173_p3;
    p_Val2_39_fu_331_p3 <= 
        select_ln340_12_fu_315_p3 when (or_ln340_14_fu_309_p2(0) = '1') else 
        select_ln388_12_fu_323_p3;
    p_Val2_41_fu_359_p2 <= std_logic_vector(signed(p_Val2_39_reg_437) + signed(p_Val2_38_reg_431));
    ret_V_3_fu_257_p2 <= std_logic_vector(signed(lhs_V_3_fu_249_p1) + signed(rhs_V_3_fu_253_p1));
    ret_V_4_fu_345_p2 <= std_logic_vector(signed(lhs_V_4_fu_339_p1) + signed(rhs_V_4_fu_342_p1));
    ret_V_fu_108_p2 <= std_logic_vector(signed(lhs_V_fu_101_p1) + signed(rhs_V_fu_104_p1));
        rhs_V_3_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_35_fu_241_p3),19));

        rhs_V_4_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_39_reg_437),19));

    rhs_V_fu_104_p0 <= grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_70_ap_return;
        rhs_V_fu_104_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_104_p0),19));

    select_ln340_12_fu_315_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln340_30_fu_297_p2(0) = '1') else 
        p_Val2_37_fu_271_p2;
    select_ln340_13_fu_401_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln340_31_fu_383_p2(0) = '1') else 
        p_Val2_41_fu_359_p2;
    select_ln340_fu_165_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln340_29_fu_147_p2(0) = '1') else 
        p_Val2_27_fu_122_p2;
    select_ln388_12_fu_323_p3 <= 
        ap_const_lv18_20000 when (underflow_3_fu_291_p2(0) = '1') else 
        p_Val2_37_fu_271_p2;
    select_ln388_13_fu_409_p3 <= 
        ap_const_lv18_20000 when (underflow_4_fu_377_p2(0) = '1') else 
        p_Val2_41_fu_359_p2;
    select_ln388_fu_173_p3 <= 
        ap_const_lv18_20000 when (underflow_fu_141_p2(0) = '1') else 
        p_Val2_27_fu_122_p2;
    underflow_3_fu_291_p2 <= (xor_ln786_12_fu_285_p2 and p_Result_21_fu_263_p3);
    underflow_4_fu_377_p2 <= (xor_ln786_13_fu_371_p2 and p_Result_23_fu_351_p3);
    underflow_fu_141_p2 <= (xor_ln786_fu_135_p2 and p_Result_s_fu_114_p3);
    xor_ln340_12_fu_303_p2 <= (p_Result_21_fu_263_p3 xor ap_const_lv1_1);
    xor_ln340_13_fu_389_p2 <= (p_Result_23_fu_351_p3 xor ap_const_lv1_1);
    xor_ln340_29_fu_147_p2 <= (p_Result_s_fu_114_p3 xor p_Result_18_fu_127_p3);
    xor_ln340_30_fu_297_p2 <= (p_Result_22_fu_277_p3 xor p_Result_21_fu_263_p3);
    xor_ln340_31_fu_383_p2 <= (p_Result_24_fu_363_p3 xor p_Result_23_fu_351_p3);
    xor_ln340_fu_153_p2 <= (p_Result_s_fu_114_p3 xor ap_const_lv1_1);
    xor_ln786_12_fu_285_p2 <= (p_Result_22_fu_277_p3 xor ap_const_lv1_1);
    xor_ln786_13_fu_371_p2 <= (p_Result_24_fu_363_p3 xor ap_const_lv1_1);
    xor_ln786_fu_135_p2 <= (p_Result_18_fu_127_p3 xor ap_const_lv1_1);
end behav;
