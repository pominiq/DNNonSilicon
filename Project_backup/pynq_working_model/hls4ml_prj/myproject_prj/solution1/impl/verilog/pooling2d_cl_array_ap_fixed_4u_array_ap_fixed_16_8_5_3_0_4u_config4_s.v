// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_8_5_3_0_4u_config4_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] pX;
reg   [31:0] sX;
reg   [31:0] pY;
reg   [31:0] sY;
reg   [15:0] kernel_data_V_1_4;
reg   [15:0] kernel_data_V_1_5;
reg   [15:0] kernel_data_V_1_6;
reg   [15:0] kernel_data_V_1_7;
reg   [15:0] kernel_data_V_1_12;
reg   [15:0] kernel_data_V_1_13;
reg   [15:0] kernel_data_V_1_14;
reg   [15:0] kernel_data_V_1_15;
reg    line_buffer_Array_V_1_0_0_ce0;
reg    line_buffer_Array_V_1_0_0_we0;
wire   [15:0] line_buffer_Array_V_1_0_0_q0;
reg    line_buffer_Array_V_1_0_1_ce0;
reg    line_buffer_Array_V_1_0_1_we0;
wire   [15:0] line_buffer_Array_V_1_0_1_q0;
reg    line_buffer_Array_V_1_0_2_ce0;
reg    line_buffer_Array_V_1_0_2_we0;
wire   [15:0] line_buffer_Array_V_1_0_2_q0;
reg    line_buffer_Array_V_1_0_3_ce0;
reg    line_buffer_Array_V_1_0_3_we0;
wire   [15:0] line_buffer_Array_V_1_0_3_q0;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln241_reg_796;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] and_ln191_2_reg_869;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg   [9:0] indvar_flatten_reg_234;
wire   [0:0] icmp_ln241_fu_256_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op20;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    io_acc_block_signal_op117;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln241_reg_796_pp0_iter1_reg;
wire   [9:0] add_ln241_fu_262_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] pool_window_3_V_reg_805;
reg   [15:0] pool_window_3_V_1_reg_813;
reg   [15:0] pool_window_3_V_2_reg_821;
reg   [15:0] pool_window_3_V_3_reg_829;
reg   [15:0] pool_window_1_V_reg_837;
reg   [15:0] pool_window_1_V_1_reg_845;
reg   [15:0] pool_window_1_V_2_reg_853;
reg   [15:0] pool_window_1_V_3_reg_861;
wire   [0:0] and_ln191_2_fu_448_p2;
wire   [15:0] tmp_data_0_V_fu_504_p6;
reg   [15:0] tmp_data_0_V_reg_873;
wire   [15:0] tmp_data_1_V_fu_566_p6;
reg   [15:0] tmp_data_1_V_reg_878;
wire   [15:0] tmp_data_2_V_fu_628_p6;
reg   [15:0] tmp_data_2_V_reg_883;
wire   [15:0] tmp_data_3_V_fu_690_p6;
reg   [15:0] tmp_data_3_V_reg_888;
wire   [0:0] icmp_ln212_fu_702_p2;
reg   [0:0] icmp_ln212_reg_893;
wire   [0:0] icmp_ln216_fu_752_p2;
wire   [31:0] select_ln222_fu_776_p3;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge_i_i_reg_245;
reg   [31:0] ap_phi_reg_pp0_iter1_storemerge_i_i_reg_245;
reg   [31:0] ap_phi_reg_pp0_iter2_storemerge_i_i_reg_245;
reg   [31:0] ap_phi_reg_pp0_iter3_storemerge_i_i_reg_245;
wire   [31:0] add_ln225_fu_708_p2;
wire   [31:0] select_ln227_fu_726_p3;
wire   [31:0] add_ln220_fu_758_p2;
reg   [31:0] ap_sig_allocacmp_sY_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln191_fu_400_p2;
wire   [0:0] icmp_ln191_1_fu_410_p2;
wire   [0:0] icmp_ln191_2_fu_420_p2;
wire   [0:0] icmp_ln191_3_fu_430_p2;
wire   [0:0] and_ln191_1_fu_442_p2;
wire   [0:0] and_ln191_fu_436_p2;
wire   [0:0] icmp_ln1496_fu_454_p2;
wire   [0:0] icmp_ln1496_1_fu_466_p2;
wire   [15:0] select_ln65_fu_459_p3;
wire   [15:0] select_ln65_5_fu_479_p3;
wire   [0:0] icmp_ln1496_2_fu_486_p2;
wire   [1:0] select_ln65_11_fu_471_p3;
wire   [1:0] zext_ln65_fu_492_p1;
wire   [1:0] tmp_data_0_V_fu_504_p5;
wire   [0:0] icmp_ln1496_4_fu_516_p2;
wire   [0:0] icmp_ln1496_5_fu_528_p2;
wire   [15:0] select_ln65_7_fu_521_p3;
wire   [15:0] select_ln65_9_fu_541_p3;
wire   [0:0] icmp_ln1496_6_fu_548_p2;
wire   [1:0] select_ln65_16_fu_533_p3;
wire   [1:0] zext_ln65_1_fu_554_p1;
wire   [1:0] tmp_data_1_V_fu_566_p5;
wire   [0:0] icmp_ln1496_7_fu_578_p2;
wire   [0:0] icmp_ln1496_8_fu_590_p2;
wire   [15:0] select_ln65_10_fu_583_p3;
wire   [15:0] select_ln65_12_fu_603_p3;
wire   [0:0] icmp_ln1496_9_fu_610_p2;
wire   [1:0] select_ln65_18_fu_595_p3;
wire   [1:0] zext_ln65_2_fu_616_p1;
wire   [1:0] tmp_data_2_V_fu_628_p5;
wire   [0:0] icmp_ln1496_3_fu_640_p2;
wire   [0:0] icmp_ln1496_10_fu_652_p2;
wire   [15:0] select_ln65_13_fu_645_p3;
wire   [15:0] select_ln65_15_fu_665_p3;
wire   [0:0] icmp_ln1496_11_fu_672_p2;
wire   [1:0] select_ln65_20_fu_657_p3;
wire   [1:0] zext_ln65_3_fu_678_p1;
wire   [1:0] tmp_data_3_V_fu_690_p5;
wire   [31:0] add_ln227_fu_720_p2;
wire   [31:0] add_ln222_fu_770_p2;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_222;
reg    ap_condition_255;
reg    ap_condition_613;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 pX = 32'd0;
#0 sX = 32'd0;
#0 pY = 32'd0;
#0 sY = 32'd0;
#0 kernel_data_V_1_4 = 16'd0;
#0 kernel_data_V_1_5 = 16'd0;
#0 kernel_data_V_1_6 = 16'd0;
#0 kernel_data_V_1_7 = 16'd0;
#0 kernel_data_V_1_12 = 16'd0;
#0 kernel_data_V_1_13 = 16'd0;
#0 kernel_data_V_1_14 = 16'd0;
#0 kernel_data_V_1_15 = 16'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_8_5_3_0_4u_config4_s_line_bueOg #(
    .DataWidth( 16 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_1_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd24),
    .ce0(line_buffer_Array_V_1_0_0_ce0),
    .we0(line_buffer_Array_V_1_0_0_we0),
    .d0(data_V_data_0_V_dout),
    .q0(line_buffer_Array_V_1_0_0_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_8_5_3_0_4u_config4_s_line_bueOg #(
    .DataWidth( 16 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_1_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd24),
    .ce0(line_buffer_Array_V_1_0_1_ce0),
    .we0(line_buffer_Array_V_1_0_1_we0),
    .d0(data_V_data_1_V_dout),
    .q0(line_buffer_Array_V_1_0_1_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_8_5_3_0_4u_config4_s_line_bueOg #(
    .DataWidth( 16 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_1_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd24),
    .ce0(line_buffer_Array_V_1_0_2_ce0),
    .we0(line_buffer_Array_V_1_0_2_we0),
    .d0(data_V_data_2_V_dout),
    .q0(line_buffer_Array_V_1_0_2_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_8_5_3_0_4u_config4_s_line_bueOg #(
    .DataWidth( 16 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_1_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd24),
    .ce0(line_buffer_Array_V_1_0_3_ce0),
    .we0(line_buffer_Array_V_1_0_3_we0),
    .d0(data_V_data_3_V_dout),
    .q0(line_buffer_Array_V_1_0_3_q0)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U16(
    .din0(kernel_data_V_1_4),
    .din1(pool_window_1_V_reg_837),
    .din2(kernel_data_V_1_12),
    .din3(pool_window_3_V_reg_805),
    .din4(tmp_data_0_V_fu_504_p5),
    .dout(tmp_data_0_V_fu_504_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U17(
    .din0(kernel_data_V_1_5),
    .din1(pool_window_1_V_1_reg_845),
    .din2(kernel_data_V_1_13),
    .din3(pool_window_3_V_1_reg_813),
    .din4(tmp_data_1_V_fu_566_p5),
    .dout(tmp_data_1_V_fu_566_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U18(
    .din0(kernel_data_V_1_6),
    .din1(pool_window_1_V_2_reg_853),
    .din2(kernel_data_V_1_14),
    .din3(pool_window_3_V_2_reg_821),
    .din4(tmp_data_2_V_fu_628_p5),
    .dout(tmp_data_2_V_fu_628_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U19(
    .din0(kernel_data_V_1_7),
    .din1(pool_window_1_V_3_reg_861),
    .din2(kernel_data_V_1_15),
    .din3(pool_window_3_V_3_reg_829),
    .din4(tmp_data_3_V_fu_690_p5),
    .dout(tmp_data_3_V_fu_690_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((1'b1 == ap_condition_255)) begin
            ap_phi_reg_pp0_iter3_storemerge_i_i_reg_245 <= 32'd0;
        end else if ((1'b1 == ap_condition_222)) begin
            ap_phi_reg_pp0_iter3_storemerge_i_i_reg_245 <= select_ln222_fu_776_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_storemerge_i_i_reg_245 <= ap_phi_reg_pp0_iter2_storemerge_i_i_reg_245;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_256_p2 == 1'd0))) begin
        indvar_flatten_reg_234 <= add_ln241_fu_262_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_234 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((icmp_ln212_fu_702_p2 == 1'd1)) begin
            pX <= 32'd0;
        end else if ((icmp_ln212_fu_702_p2 == 1'd0)) begin
            pX <= add_ln225_fu_708_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_613)) begin
        if ((icmp_ln216_fu_752_p2 == 1'd1)) begin
            pY <= 32'd0;
        end else if ((icmp_ln216_fu_752_p2 == 1'd0)) begin
            pY <= add_ln220_fu_758_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((icmp_ln212_fu_702_p2 == 1'd1)) begin
            sX <= 32'd0;
        end else if ((icmp_ln212_fu_702_p2 == 1'd0)) begin
            sX <= select_ln227_fu_726_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_796_pp0_iter1_reg == 1'd0))) begin
        and_ln191_2_reg_869 <= and_ln191_2_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_storemerge_i_i_reg_245 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_245;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter2_storemerge_i_i_reg_245 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_245;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln212_reg_893 <= icmp_ln212_fu_702_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln241_reg_796 <= icmp_ln241_fu_256_p2;
        icmp_ln241_reg_796_pp0_iter1_reg <= icmp_ln241_reg_796;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_796_pp0_iter1_reg == 1'd0))) begin
        kernel_data_V_1_12 <= pool_window_3_V_reg_805;
        kernel_data_V_1_13 <= pool_window_3_V_1_reg_813;
        kernel_data_V_1_14 <= pool_window_3_V_2_reg_821;
        kernel_data_V_1_15 <= pool_window_3_V_3_reg_829;
        kernel_data_V_1_4 <= pool_window_1_V_reg_837;
        kernel_data_V_1_5 <= pool_window_1_V_1_reg_845;
        kernel_data_V_1_6 <= pool_window_1_V_2_reg_853;
        kernel_data_V_1_7 <= pool_window_1_V_3_reg_861;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_796 == 1'd0))) begin
        pool_window_1_V_1_reg_845 <= line_buffer_Array_V_1_0_1_q0;
        pool_window_1_V_2_reg_853 <= line_buffer_Array_V_1_0_2_q0;
        pool_window_1_V_3_reg_861 <= line_buffer_Array_V_1_0_3_q0;
        pool_window_1_V_reg_837 <= line_buffer_Array_V_1_0_0_q0;
        pool_window_3_V_1_reg_813 <= data_V_data_1_V_dout;
        pool_window_3_V_2_reg_821 <= data_V_data_2_V_dout;
        pool_window_3_V_3_reg_829 <= data_V_data_3_V_dout;
        pool_window_3_V_reg_805 <= data_V_data_0_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_reg_893 == 1'd1))) begin
        sY <= ap_phi_reg_pp0_iter3_storemerge_i_i_reg_245;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_fu_448_p2))) begin
        tmp_data_0_V_reg_873 <= tmp_data_0_V_fu_504_p6;
        tmp_data_1_V_reg_878 <= tmp_data_1_V_fu_566_p6;
        tmp_data_2_V_reg_883 <= tmp_data_2_V_fu_628_p6;
        tmp_data_3_V_reg_888 <= tmp_data_3_V_fu_690_p6;
    end
end

always @ (*) begin
    if ((icmp_ln241_fu_256_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln212_reg_893 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_sY_load = ap_phi_reg_pp0_iter3_storemerge_i_i_reg_245;
    end else begin
        ap_sig_allocacmp_sY_load = sY;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln241_reg_796 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_796 == 1'd0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln241_reg_796 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_796 == 1'd0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln241_reg_796 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_796 == 1'd0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln241_reg_796 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_796 == 1'd0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_796 == 1'd0))) begin
        line_buffer_Array_V_1_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_1_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_796 == 1'd0))) begin
        line_buffer_Array_V_1_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_1_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_796 == 1'd0))) begin
        line_buffer_Array_V_1_0_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_1_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_796 == 1'd0))) begin
        line_buffer_Array_V_1_0_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_1_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_796 == 1'd0))) begin
        line_buffer_Array_V_1_0_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_1_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_796 == 1'd0))) begin
        line_buffer_Array_V_1_0_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_1_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_796 == 1'd0))) begin
        line_buffer_Array_V_1_0_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_1_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_796 == 1'd0))) begin
        line_buffer_Array_V_1_0_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_1_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'd1 == and_ln191_2_reg_869) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_reg_869))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'd1 == and_ln191_2_reg_869) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_reg_869))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'd1 == and_ln191_2_reg_869) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_reg_869))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'd1 == and_ln191_2_reg_869) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_reg_869))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln241_fu_256_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln241_fu_256_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln220_fu_758_p2 = (pY + 32'd1);

assign add_ln222_fu_770_p2 = (ap_sig_allocacmp_sY_load + 32'd1);

assign add_ln225_fu_708_p2 = (pX + 32'd1);

assign add_ln227_fu_720_p2 = (sX + 32'd1);

assign add_ln241_fu_262_p2 = (indvar_flatten_reg_234 + 10'd1);

assign and_ln191_1_fu_442_p2 = (icmp_ln191_3_fu_430_p2 & icmp_ln191_2_fu_420_p2);

assign and_ln191_2_fu_448_p2 = (and_ln191_fu_436_p2 & and_ln191_1_fu_442_p2);

assign and_ln191_fu_436_p2 = (icmp_ln191_fu_400_p2 & icmp_ln191_1_fu_410_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((io_acc_block_signal_op117 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'd1 == and_ln191_2_reg_869)) | ((io_acc_block_signal_op20 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln241_reg_796 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((io_acc_block_signal_op117 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'd1 == and_ln191_2_reg_869)) | ((io_acc_block_signal_op20 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln241_reg_796 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((io_acc_block_signal_op117 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'd1 == and_ln191_2_reg_869)) | ((io_acc_block_signal_op20 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln241_reg_796 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((io_acc_block_signal_op20 == 1'b0) & (icmp_ln241_reg_796 == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((io_acc_block_signal_op117 == 1'b0) & (1'd1 == and_ln191_2_reg_869));
end

always @ (*) begin
    ap_condition_222 = ((icmp_ln212_fu_702_p2 == 1'd1) & (icmp_ln216_fu_752_p2 == 1'd0) & (icmp_ln241_reg_796_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_condition_255 = ((icmp_ln216_fu_752_p2 == 1'd1) & (icmp_ln212_fu_702_p2 == 1'd1) & (icmp_ln241_reg_796_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_condition_613 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_702_p2 == 1'd1) & (icmp_ln241_reg_796_pp0_iter1_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_storemerge_i_i_reg_245 = 'bx;

assign ap_ready = internal_ap_ready;

assign icmp_ln1496_10_fu_652_p2 = (($signed(kernel_data_V_1_15) < $signed(pool_window_3_V_3_reg_829)) ? 1'b1 : 1'b0);

assign icmp_ln1496_11_fu_672_p2 = (($signed(select_ln65_13_fu_645_p3) < $signed(select_ln65_15_fu_665_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_1_fu_466_p2 = (($signed(kernel_data_V_1_12) < $signed(pool_window_3_V_reg_805)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_486_p2 = (($signed(select_ln65_fu_459_p3) < $signed(select_ln65_5_fu_479_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_640_p2 = (($signed(kernel_data_V_1_7) < $signed(pool_window_1_V_3_reg_861)) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_516_p2 = (($signed(kernel_data_V_1_5) < $signed(pool_window_1_V_1_reg_845)) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_528_p2 = (($signed(kernel_data_V_1_13) < $signed(pool_window_3_V_1_reg_813)) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_548_p2 = (($signed(select_ln65_7_fu_521_p3) < $signed(select_ln65_9_fu_541_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_578_p2 = (($signed(kernel_data_V_1_6) < $signed(pool_window_1_V_2_reg_853)) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_590_p2 = (($signed(kernel_data_V_1_14) < $signed(pool_window_3_V_2_reg_821)) ? 1'b1 : 1'b0);

assign icmp_ln1496_9_fu_610_p2 = (($signed(select_ln65_10_fu_583_p3) < $signed(select_ln65_12_fu_603_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_454_p2 = (($signed(kernel_data_V_1_4) < $signed(pool_window_1_V_reg_837)) ? 1'b1 : 1'b0);

assign icmp_ln191_1_fu_410_p2 = ((ap_sig_allocacmp_sY_load == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln191_2_fu_420_p2 = (($signed(pY) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_3_fu_430_p2 = (($signed(pX) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_400_p2 = ((sX == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_702_p2 = ((pX == 32'd24) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_752_p2 = ((pY == 32'd24) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_256_p2 = ((indvar_flatten_reg_234 == 10'd625) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op117 = (res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op20 = (data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign res_V_data_0_V_din = tmp_data_0_V_reg_873;

assign res_V_data_1_V_din = tmp_data_1_V_reg_878;

assign res_V_data_2_V_din = tmp_data_2_V_reg_883;

assign res_V_data_3_V_din = tmp_data_3_V_reg_888;

assign select_ln222_fu_776_p3 = ((icmp_ln191_1_fu_410_p2[0:0] === 1'b1) ? 32'd0 : add_ln222_fu_770_p2);

assign select_ln227_fu_726_p3 = ((icmp_ln191_fu_400_p2[0:0] === 1'b1) ? 32'd0 : add_ln227_fu_720_p2);

assign select_ln65_10_fu_583_p3 = ((icmp_ln1496_7_fu_578_p2[0:0] === 1'b1) ? pool_window_1_V_2_reg_853 : kernel_data_V_1_6);

assign select_ln65_11_fu_471_p3 = ((icmp_ln1496_1_fu_466_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_12_fu_603_p3 = ((icmp_ln1496_8_fu_590_p2[0:0] === 1'b1) ? pool_window_3_V_2_reg_821 : kernel_data_V_1_14);

assign select_ln65_13_fu_645_p3 = ((icmp_ln1496_3_fu_640_p2[0:0] === 1'b1) ? pool_window_1_V_3_reg_861 : kernel_data_V_1_7);

assign select_ln65_15_fu_665_p3 = ((icmp_ln1496_10_fu_652_p2[0:0] === 1'b1) ? pool_window_3_V_3_reg_829 : kernel_data_V_1_15);

assign select_ln65_16_fu_533_p3 = ((icmp_ln1496_5_fu_528_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_18_fu_595_p3 = ((icmp_ln1496_8_fu_590_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_20_fu_657_p3 = ((icmp_ln1496_10_fu_652_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_5_fu_479_p3 = ((icmp_ln1496_1_fu_466_p2[0:0] === 1'b1) ? pool_window_3_V_reg_805 : kernel_data_V_1_12);

assign select_ln65_7_fu_521_p3 = ((icmp_ln1496_4_fu_516_p2[0:0] === 1'b1) ? pool_window_1_V_1_reg_845 : kernel_data_V_1_5);

assign select_ln65_9_fu_541_p3 = ((icmp_ln1496_5_fu_528_p2[0:0] === 1'b1) ? pool_window_3_V_1_reg_813 : kernel_data_V_1_13);

assign select_ln65_fu_459_p3 = ((icmp_ln1496_fu_454_p2[0:0] === 1'b1) ? pool_window_1_V_reg_837 : kernel_data_V_1_4);

assign start_out = real_start;

assign tmp_data_0_V_fu_504_p5 = ((icmp_ln1496_2_fu_486_p2[0:0] === 1'b1) ? select_ln65_11_fu_471_p3 : zext_ln65_fu_492_p1);

assign tmp_data_1_V_fu_566_p5 = ((icmp_ln1496_6_fu_548_p2[0:0] === 1'b1) ? select_ln65_16_fu_533_p3 : zext_ln65_1_fu_554_p1);

assign tmp_data_2_V_fu_628_p5 = ((icmp_ln1496_9_fu_610_p2[0:0] === 1'b1) ? select_ln65_18_fu_595_p3 : zext_ln65_2_fu_616_p1);

assign tmp_data_3_V_fu_690_p5 = ((icmp_ln1496_11_fu_672_p2[0:0] === 1'b1) ? select_ln65_20_fu_657_p3 : zext_ln65_3_fu_678_p1);

assign zext_ln65_1_fu_554_p1 = icmp_ln1496_4_fu_516_p2;

assign zext_ln65_2_fu_616_p1 = icmp_ln1496_7_fu_578_p2;

assign zext_ln65_3_fu_678_p1 = icmp_ln1496_3_fu_640_p2;

assign zext_ln65_fu_492_p1 = icmp_ln1496_fu_454_p2;

endmodule //pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_8_5_3_0_4u_config4_s
