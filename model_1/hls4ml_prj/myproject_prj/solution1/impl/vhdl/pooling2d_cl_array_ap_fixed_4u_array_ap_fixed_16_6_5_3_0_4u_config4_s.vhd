-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC );
end;


architecture behav of pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv10_271 : STD_LOGIC_VECTOR (9 downto 0) := "1001110001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal pX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_1_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_20 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_21 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_22 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_23 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_36 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_37 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_38 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_39 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_52 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_53 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_54 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_55 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_10 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_11 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_24 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_25 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_26 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_27 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_40 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_41 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_42 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_43 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_56 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_57 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_58 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_59 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_12 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_13 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_14 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_15 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_28 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_29 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_30 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_31 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_44 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_45 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_46 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_47 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_60 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_61 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_62 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_63 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal line_buffer_Array_V_1_0_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1_0_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1_0_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_1_1_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1_1_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1_1_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_1_2_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1_2_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1_2_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_1_0_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1_0_1_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1_0_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_1_1_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1_1_1_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1_1_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_1_2_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1_2_1_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1_2_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_1_0_2_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1_0_2_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1_0_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_1_1_2_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1_1_2_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1_1_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_1_2_2_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1_2_2_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1_2_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_1_0_3_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1_0_3_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1_0_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_1_1_3_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1_1_3_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1_1_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_1_2_3_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1_2_3_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1_2_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln241_reg_3286 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_data_1_V_blk_n : STD_LOGIC;
    signal data_V_data_2_V_blk_n : STD_LOGIC;
    signal data_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal and_ln191_2_reg_3295 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_2_reg_3295_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_364 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln241_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal io_acc_block_signal_op53 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal io_acc_block_signal_op373 : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln241_reg_3286_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln241_fu_392_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal and_ln191_2_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_reg_3299 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln216_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln222_fu_530_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_window_15_V_reg_3312 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_15_V_1_reg_3343 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_15_V_2_reg_3374 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_15_V_3_reg_3405 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_reg_pp0_iter0_storemerge_i_i_reg_375 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln225_fu_462_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln227_fu_480_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln220_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_sY_load : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_0_V_fu_1652_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_data_1_V_fu_2184_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_fu_2716_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_fu_3248_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln191_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_2_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_3_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_1_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln227_fu_474_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln222_fu_524_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1496_fu_1158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_1_fu_1176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_1168_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_5_fu_1190_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_2_fu_1198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_4_fu_1182_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_fu_1164_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_6_fu_1204_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln_fu_1220_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_3_fu_1258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_4_fu_1280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_8_fu_1272_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_10_fu_1294_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_5_fu_1302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_20_fu_1286_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_7_fu_1264_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_11_fu_1308_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln65_1_fu_1320_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln_fu_1220_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_1_fu_1320_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_6_fu_1358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln65_1_fu_1212_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_12_fu_1364_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln65_2_fu_1372_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_7_fu_1414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_8_fu_1436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_14_fu_1428_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_16_fu_1450_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_9_fu_1458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_15_fu_1442_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_13_fu_1420_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_17_fu_1464_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_10_fu_1510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_11_fu_1532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_19_fu_1524_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_21_fu_1545_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_12_fu_1552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_24_fu_1537_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_18_fu_1516_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_22_fu_1558_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln65_fu_1566_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_3_fu_1472_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_4_fu_1570_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_13_fu_1595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_23_fu_1601_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_2_fu_1376_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_5_fu_1609_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_14_fu_1638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_0_V_fu_1652_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_15_fu_1690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_16_fu_1708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_25_fu_1700_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_27_fu_1722_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_17_fu_1730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_26_fu_1714_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_3_fu_1696_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_28_fu_1736_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln65_6_fu_1752_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_18_fu_1790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_19_fu_1812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_30_fu_1804_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_32_fu_1826_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_20_fu_1834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_42_fu_1818_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_29_fu_1796_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_33_fu_1840_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln65_7_fu_1852_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_6_fu_1752_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_7_fu_1852_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_21_fu_1890_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln65_4_fu_1744_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_34_fu_1896_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln65_5_fu_1904_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_22_fu_1946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_23_fu_1968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_36_fu_1960_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_38_fu_1982_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_24_fu_1990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_37_fu_1974_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_35_fu_1952_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_39_fu_1996_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_25_fu_2042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_26_fu_2064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_41_fu_2056_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_43_fu_2077_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_27_fu_2084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_52_fu_2069_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_40_fu_2048_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_44_fu_2090_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln65_1_fu_2098_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_9_fu_2004_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_s_fu_2102_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_28_fu_2127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_45_fu_2133_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_8_fu_1908_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_10_fu_2141_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_29_fu_2170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_1_V_fu_2184_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_30_fu_2222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_31_fu_2240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_46_fu_2232_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_48_fu_2254_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_32_fu_2262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_47_fu_2246_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_6_fu_2228_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_49_fu_2268_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln65_11_fu_2284_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_33_fu_2322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_34_fu_2344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_51_fu_2336_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_53_fu_2358_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_35_fu_2366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_73_fu_2350_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_50_fu_2328_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_54_fu_2372_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln65_12_fu_2384_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_11_fu_2284_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_12_fu_2384_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_36_fu_2422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln65_7_fu_2276_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_55_fu_2428_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln65_8_fu_2436_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_37_fu_2478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_38_fu_2500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_57_fu_2492_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_59_fu_2514_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_39_fu_2522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_58_fu_2506_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_56_fu_2484_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_60_fu_2528_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_40_fu_2574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_41_fu_2596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_62_fu_2588_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_64_fu_2609_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_42_fu_2616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_84_fu_2601_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_61_fu_2580_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_65_fu_2622_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln65_2_fu_2630_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_14_fu_2536_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_15_fu_2634_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_43_fu_2659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_66_fu_2665_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_13_fu_2440_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_16_fu_2673_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_44_fu_2702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_2_V_fu_2716_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_45_fu_2754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_46_fu_2772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_67_fu_2764_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_69_fu_2786_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_47_fu_2794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_68_fu_2778_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_9_fu_2760_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_70_fu_2800_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln65_17_fu_2816_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_48_fu_2854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_49_fu_2876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_72_fu_2868_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_74_fu_2890_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_50_fu_2898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_89_fu_2882_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_71_fu_2860_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_75_fu_2904_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln65_18_fu_2916_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_17_fu_2816_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_18_fu_2916_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_51_fu_2954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln65_10_fu_2808_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_76_fu_2960_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln65_11_fu_2968_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_52_fu_3010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_53_fu_3032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_78_fu_3024_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_80_fu_3046_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_54_fu_3054_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_79_fu_3038_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_77_fu_3016_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_81_fu_3060_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_55_fu_3106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_56_fu_3128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_83_fu_3120_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_85_fu_3141_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_57_fu_3148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_90_fu_3133_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_82_fu_3112_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_86_fu_3154_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln65_3_fu_3162_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_20_fu_3068_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_21_fu_3166_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_58_fu_3191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_87_fu_3197_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_19_fu_2972_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_22_fu_3205_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_59_fu_3234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_3_V_fu_3248_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_303 : BOOLEAN;
    signal ap_condition_338 : BOOLEAN;
    signal ap_condition_284 : BOOLEAN;
    signal ap_condition_331 : BOOLEAN;
    signal ap_condition_344 : BOOLEAN;

    component myproject_mux_164_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_bueOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    line_buffer_Array_V_1_0_0_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_bueOg
    generic map (
        DataWidth => 16,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_18,
        ce0 => line_buffer_Array_V_1_0_0_ce0,
        we0 => line_buffer_Array_V_1_0_0_we0,
        d0 => pool_window_15_V_reg_3312,
        q0 => line_buffer_Array_V_1_0_0_q0);

    line_buffer_Array_V_1_1_0_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_bueOg
    generic map (
        DataWidth => 16,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_18,
        ce0 => line_buffer_Array_V_1_1_0_ce0,
        we0 => line_buffer_Array_V_1_1_0_we0,
        d0 => line_buffer_Array_V_1_0_0_q0,
        q0 => line_buffer_Array_V_1_1_0_q0);

    line_buffer_Array_V_1_2_0_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_bueOg
    generic map (
        DataWidth => 16,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_18,
        ce0 => line_buffer_Array_V_1_2_0_ce0,
        we0 => line_buffer_Array_V_1_2_0_we0,
        d0 => line_buffer_Array_V_1_1_0_q0,
        q0 => line_buffer_Array_V_1_2_0_q0);

    line_buffer_Array_V_1_0_1_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_bueOg
    generic map (
        DataWidth => 16,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_18,
        ce0 => line_buffer_Array_V_1_0_1_ce0,
        we0 => line_buffer_Array_V_1_0_1_we0,
        d0 => pool_window_15_V_1_reg_3343,
        q0 => line_buffer_Array_V_1_0_1_q0);

    line_buffer_Array_V_1_1_1_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_bueOg
    generic map (
        DataWidth => 16,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_18,
        ce0 => line_buffer_Array_V_1_1_1_ce0,
        we0 => line_buffer_Array_V_1_1_1_we0,
        d0 => line_buffer_Array_V_1_0_1_q0,
        q0 => line_buffer_Array_V_1_1_1_q0);

    line_buffer_Array_V_1_2_1_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_bueOg
    generic map (
        DataWidth => 16,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_18,
        ce0 => line_buffer_Array_V_1_2_1_ce0,
        we0 => line_buffer_Array_V_1_2_1_we0,
        d0 => line_buffer_Array_V_1_1_1_q0,
        q0 => line_buffer_Array_V_1_2_1_q0);

    line_buffer_Array_V_1_0_2_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_bueOg
    generic map (
        DataWidth => 16,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_18,
        ce0 => line_buffer_Array_V_1_0_2_ce0,
        we0 => line_buffer_Array_V_1_0_2_we0,
        d0 => pool_window_15_V_2_reg_3374,
        q0 => line_buffer_Array_V_1_0_2_q0);

    line_buffer_Array_V_1_1_2_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_bueOg
    generic map (
        DataWidth => 16,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_18,
        ce0 => line_buffer_Array_V_1_1_2_ce0,
        we0 => line_buffer_Array_V_1_1_2_we0,
        d0 => line_buffer_Array_V_1_0_2_q0,
        q0 => line_buffer_Array_V_1_1_2_q0);

    line_buffer_Array_V_1_2_2_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_bueOg
    generic map (
        DataWidth => 16,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_18,
        ce0 => line_buffer_Array_V_1_2_2_ce0,
        we0 => line_buffer_Array_V_1_2_2_we0,
        d0 => line_buffer_Array_V_1_1_2_q0,
        q0 => line_buffer_Array_V_1_2_2_q0);

    line_buffer_Array_V_1_0_3_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_bueOg
    generic map (
        DataWidth => 16,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_18,
        ce0 => line_buffer_Array_V_1_0_3_ce0,
        we0 => line_buffer_Array_V_1_0_3_we0,
        d0 => pool_window_15_V_3_reg_3405,
        q0 => line_buffer_Array_V_1_0_3_q0);

    line_buffer_Array_V_1_1_3_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_bueOg
    generic map (
        DataWidth => 16,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_18,
        ce0 => line_buffer_Array_V_1_1_3_ce0,
        we0 => line_buffer_Array_V_1_1_3_we0,
        d0 => line_buffer_Array_V_1_0_3_q0,
        q0 => line_buffer_Array_V_1_1_3_q0);

    line_buffer_Array_V_1_2_3_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_bueOg
    generic map (
        DataWidth => 16,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_18,
        ce0 => line_buffer_Array_V_1_2_3_ce0,
        we0 => line_buffer_Array_V_1_2_3_we0,
        d0 => line_buffer_Array_V_1_1_3_q0,
        q0 => line_buffer_Array_V_1_2_3_q0);

    myproject_mux_164_16_1_1_U16 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_1_4,
        din1 => kernel_data_V_1_8,
        din2 => kernel_data_V_1_12,
        din3 => line_buffer_Array_V_1_2_0_q0,
        din4 => line_buffer_Array_V_1_2_0_q0,
        din5 => line_buffer_Array_V_1_2_0_q0,
        din6 => line_buffer_Array_V_1_2_0_q0,
        din7 => line_buffer_Array_V_1_2_0_q0,
        din8 => line_buffer_Array_V_1_2_0_q0,
        din9 => line_buffer_Array_V_1_2_0_q0,
        din10 => line_buffer_Array_V_1_2_0_q0,
        din11 => line_buffer_Array_V_1_2_0_q0,
        din12 => line_buffer_Array_V_1_2_0_q0,
        din13 => line_buffer_Array_V_1_2_0_q0,
        din14 => line_buffer_Array_V_1_2_0_q0,
        din15 => line_buffer_Array_V_1_2_0_q0,
        din16 => phi_ln_fu_1220_p17,
        dout => phi_ln_fu_1220_p18);

    myproject_mux_164_16_1_1_U17 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => line_buffer_Array_V_1_1_0_q0,
        din1 => line_buffer_Array_V_1_1_0_q0,
        din2 => line_buffer_Array_V_1_1_0_q0,
        din3 => line_buffer_Array_V_1_1_0_q0,
        din4 => kernel_data_V_1_20,
        din5 => kernel_data_V_1_24,
        din6 => kernel_data_V_1_28,
        din7 => line_buffer_Array_V_1_1_0_q0,
        din8 => line_buffer_Array_V_1_1_0_q0,
        din9 => line_buffer_Array_V_1_1_0_q0,
        din10 => line_buffer_Array_V_1_1_0_q0,
        din11 => line_buffer_Array_V_1_1_0_q0,
        din12 => line_buffer_Array_V_1_1_0_q0,
        din13 => line_buffer_Array_V_1_1_0_q0,
        din14 => line_buffer_Array_V_1_1_0_q0,
        din15 => line_buffer_Array_V_1_1_0_q0,
        din16 => phi_ln65_1_fu_1320_p17,
        dout => phi_ln65_1_fu_1320_p18);

    myproject_mux_164_16_1_1_U18 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_1_4,
        din1 => kernel_data_V_1_8,
        din2 => kernel_data_V_1_12,
        din3 => line_buffer_Array_V_1_2_0_q0,
        din4 => kernel_data_V_1_20,
        din5 => kernel_data_V_1_24,
        din6 => kernel_data_V_1_28,
        din7 => line_buffer_Array_V_1_1_0_q0,
        din8 => line_buffer_Array_V_1_1_0_q0,
        din9 => line_buffer_Array_V_1_1_0_q0,
        din10 => line_buffer_Array_V_1_1_0_q0,
        din11 => line_buffer_Array_V_1_1_0_q0,
        din12 => line_buffer_Array_V_1_1_0_q0,
        din13 => line_buffer_Array_V_1_1_0_q0,
        din14 => line_buffer_Array_V_1_1_0_q0,
        din15 => line_buffer_Array_V_1_1_0_q0,
        din16 => zext_ln65_2_fu_1372_p1,
        dout => phi_ln65_2_fu_1376_p18);

    myproject_mux_164_16_1_1_U19 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => line_buffer_Array_V_1_0_0_q0,
        din1 => line_buffer_Array_V_1_0_0_q0,
        din2 => line_buffer_Array_V_1_0_0_q0,
        din3 => line_buffer_Array_V_1_0_0_q0,
        din4 => line_buffer_Array_V_1_0_0_q0,
        din5 => line_buffer_Array_V_1_0_0_q0,
        din6 => line_buffer_Array_V_1_0_0_q0,
        din7 => line_buffer_Array_V_1_0_0_q0,
        din8 => kernel_data_V_1_36,
        din9 => kernel_data_V_1_40,
        din10 => kernel_data_V_1_44,
        din11 => line_buffer_Array_V_1_0_0_q0,
        din12 => line_buffer_Array_V_1_0_0_q0,
        din13 => line_buffer_Array_V_1_0_0_q0,
        din14 => line_buffer_Array_V_1_0_0_q0,
        din15 => line_buffer_Array_V_1_0_0_q0,
        din16 => select_ln65_17_fu_1464_p3,
        dout => phi_ln65_3_fu_1472_p18);

    myproject_mux_164_16_1_1_U20 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_15_V_reg_3312,
        din1 => pool_window_15_V_reg_3312,
        din2 => pool_window_15_V_reg_3312,
        din3 => pool_window_15_V_reg_3312,
        din4 => pool_window_15_V_reg_3312,
        din5 => pool_window_15_V_reg_3312,
        din6 => pool_window_15_V_reg_3312,
        din7 => pool_window_15_V_reg_3312,
        din8 => pool_window_15_V_reg_3312,
        din9 => pool_window_15_V_reg_3312,
        din10 => pool_window_15_V_reg_3312,
        din11 => pool_window_15_V_reg_3312,
        din12 => kernel_data_V_1_52,
        din13 => kernel_data_V_1_56,
        din14 => kernel_data_V_1_60,
        din15 => pool_window_15_V_reg_3312,
        din16 => sext_ln65_fu_1566_p1,
        dout => phi_ln65_4_fu_1570_p18);

    myproject_mux_164_16_1_1_U21 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_15_V_reg_3312,
        din1 => pool_window_15_V_reg_3312,
        din2 => pool_window_15_V_reg_3312,
        din3 => pool_window_15_V_reg_3312,
        din4 => pool_window_15_V_reg_3312,
        din5 => pool_window_15_V_reg_3312,
        din6 => pool_window_15_V_reg_3312,
        din7 => pool_window_15_V_reg_3312,
        din8 => kernel_data_V_1_36,
        din9 => kernel_data_V_1_40,
        din10 => kernel_data_V_1_44,
        din11 => line_buffer_Array_V_1_0_0_q0,
        din12 => kernel_data_V_1_52,
        din13 => kernel_data_V_1_56,
        din14 => kernel_data_V_1_60,
        din15 => pool_window_15_V_reg_3312,
        din16 => select_ln65_23_fu_1601_p3,
        dout => phi_ln65_5_fu_1609_p18);

    myproject_mux_164_16_1_1_U22 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_1_4,
        din1 => kernel_data_V_1_8,
        din2 => kernel_data_V_1_12,
        din3 => line_buffer_Array_V_1_2_0_q0,
        din4 => kernel_data_V_1_20,
        din5 => kernel_data_V_1_24,
        din6 => kernel_data_V_1_28,
        din7 => line_buffer_Array_V_1_1_0_q0,
        din8 => kernel_data_V_1_36,
        din9 => kernel_data_V_1_40,
        din10 => kernel_data_V_1_44,
        din11 => line_buffer_Array_V_1_0_0_q0,
        din12 => kernel_data_V_1_52,
        din13 => kernel_data_V_1_56,
        din14 => kernel_data_V_1_60,
        din15 => pool_window_15_V_reg_3312,
        din16 => tmp_data_0_V_fu_1652_p17,
        dout => tmp_data_0_V_fu_1652_p18);

    myproject_mux_164_16_1_1_U23 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_1_5,
        din1 => kernel_data_V_1_9,
        din2 => kernel_data_V_1_13,
        din3 => line_buffer_Array_V_1_2_1_q0,
        din4 => line_buffer_Array_V_1_2_1_q0,
        din5 => line_buffer_Array_V_1_2_1_q0,
        din6 => line_buffer_Array_V_1_2_1_q0,
        din7 => line_buffer_Array_V_1_2_1_q0,
        din8 => line_buffer_Array_V_1_2_1_q0,
        din9 => line_buffer_Array_V_1_2_1_q0,
        din10 => line_buffer_Array_V_1_2_1_q0,
        din11 => line_buffer_Array_V_1_2_1_q0,
        din12 => line_buffer_Array_V_1_2_1_q0,
        din13 => line_buffer_Array_V_1_2_1_q0,
        din14 => line_buffer_Array_V_1_2_1_q0,
        din15 => line_buffer_Array_V_1_2_1_q0,
        din16 => phi_ln65_6_fu_1752_p17,
        dout => phi_ln65_6_fu_1752_p18);

    myproject_mux_164_16_1_1_U24 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => line_buffer_Array_V_1_1_1_q0,
        din1 => line_buffer_Array_V_1_1_1_q0,
        din2 => line_buffer_Array_V_1_1_1_q0,
        din3 => line_buffer_Array_V_1_1_1_q0,
        din4 => kernel_data_V_1_21,
        din5 => kernel_data_V_1_25,
        din6 => kernel_data_V_1_29,
        din7 => line_buffer_Array_V_1_1_1_q0,
        din8 => line_buffer_Array_V_1_1_1_q0,
        din9 => line_buffer_Array_V_1_1_1_q0,
        din10 => line_buffer_Array_V_1_1_1_q0,
        din11 => line_buffer_Array_V_1_1_1_q0,
        din12 => line_buffer_Array_V_1_1_1_q0,
        din13 => line_buffer_Array_V_1_1_1_q0,
        din14 => line_buffer_Array_V_1_1_1_q0,
        din15 => line_buffer_Array_V_1_1_1_q0,
        din16 => phi_ln65_7_fu_1852_p17,
        dout => phi_ln65_7_fu_1852_p18);

    myproject_mux_164_16_1_1_U25 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_1_5,
        din1 => kernel_data_V_1_9,
        din2 => kernel_data_V_1_13,
        din3 => line_buffer_Array_V_1_2_1_q0,
        din4 => kernel_data_V_1_21,
        din5 => kernel_data_V_1_25,
        din6 => kernel_data_V_1_29,
        din7 => line_buffer_Array_V_1_1_1_q0,
        din8 => line_buffer_Array_V_1_1_1_q0,
        din9 => line_buffer_Array_V_1_1_1_q0,
        din10 => line_buffer_Array_V_1_1_1_q0,
        din11 => line_buffer_Array_V_1_1_1_q0,
        din12 => line_buffer_Array_V_1_1_1_q0,
        din13 => line_buffer_Array_V_1_1_1_q0,
        din14 => line_buffer_Array_V_1_1_1_q0,
        din15 => line_buffer_Array_V_1_1_1_q0,
        din16 => zext_ln65_5_fu_1904_p1,
        dout => phi_ln65_8_fu_1908_p18);

    myproject_mux_164_16_1_1_U26 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => line_buffer_Array_V_1_0_1_q0,
        din1 => line_buffer_Array_V_1_0_1_q0,
        din2 => line_buffer_Array_V_1_0_1_q0,
        din3 => line_buffer_Array_V_1_0_1_q0,
        din4 => line_buffer_Array_V_1_0_1_q0,
        din5 => line_buffer_Array_V_1_0_1_q0,
        din6 => line_buffer_Array_V_1_0_1_q0,
        din7 => line_buffer_Array_V_1_0_1_q0,
        din8 => kernel_data_V_1_37,
        din9 => kernel_data_V_1_41,
        din10 => kernel_data_V_1_45,
        din11 => line_buffer_Array_V_1_0_1_q0,
        din12 => line_buffer_Array_V_1_0_1_q0,
        din13 => line_buffer_Array_V_1_0_1_q0,
        din14 => line_buffer_Array_V_1_0_1_q0,
        din15 => line_buffer_Array_V_1_0_1_q0,
        din16 => select_ln65_39_fu_1996_p3,
        dout => phi_ln65_9_fu_2004_p18);

    myproject_mux_164_16_1_1_U27 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_15_V_1_reg_3343,
        din1 => pool_window_15_V_1_reg_3343,
        din2 => pool_window_15_V_1_reg_3343,
        din3 => pool_window_15_V_1_reg_3343,
        din4 => pool_window_15_V_1_reg_3343,
        din5 => pool_window_15_V_1_reg_3343,
        din6 => pool_window_15_V_1_reg_3343,
        din7 => pool_window_15_V_1_reg_3343,
        din8 => pool_window_15_V_1_reg_3343,
        din9 => pool_window_15_V_1_reg_3343,
        din10 => pool_window_15_V_1_reg_3343,
        din11 => pool_window_15_V_1_reg_3343,
        din12 => kernel_data_V_1_53,
        din13 => kernel_data_V_1_57,
        din14 => kernel_data_V_1_61,
        din15 => pool_window_15_V_1_reg_3343,
        din16 => sext_ln65_1_fu_2098_p1,
        dout => phi_ln65_s_fu_2102_p18);

    myproject_mux_164_16_1_1_U28 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_15_V_1_reg_3343,
        din1 => pool_window_15_V_1_reg_3343,
        din2 => pool_window_15_V_1_reg_3343,
        din3 => pool_window_15_V_1_reg_3343,
        din4 => pool_window_15_V_1_reg_3343,
        din5 => pool_window_15_V_1_reg_3343,
        din6 => pool_window_15_V_1_reg_3343,
        din7 => pool_window_15_V_1_reg_3343,
        din8 => kernel_data_V_1_37,
        din9 => kernel_data_V_1_41,
        din10 => kernel_data_V_1_45,
        din11 => line_buffer_Array_V_1_0_1_q0,
        din12 => kernel_data_V_1_53,
        din13 => kernel_data_V_1_57,
        din14 => kernel_data_V_1_61,
        din15 => pool_window_15_V_1_reg_3343,
        din16 => select_ln65_45_fu_2133_p3,
        dout => phi_ln65_10_fu_2141_p18);

    myproject_mux_164_16_1_1_U29 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_1_5,
        din1 => kernel_data_V_1_9,
        din2 => kernel_data_V_1_13,
        din3 => line_buffer_Array_V_1_2_1_q0,
        din4 => kernel_data_V_1_21,
        din5 => kernel_data_V_1_25,
        din6 => kernel_data_V_1_29,
        din7 => line_buffer_Array_V_1_1_1_q0,
        din8 => kernel_data_V_1_37,
        din9 => kernel_data_V_1_41,
        din10 => kernel_data_V_1_45,
        din11 => line_buffer_Array_V_1_0_1_q0,
        din12 => kernel_data_V_1_53,
        din13 => kernel_data_V_1_57,
        din14 => kernel_data_V_1_61,
        din15 => pool_window_15_V_1_reg_3343,
        din16 => tmp_data_1_V_fu_2184_p17,
        dout => tmp_data_1_V_fu_2184_p18);

    myproject_mux_164_16_1_1_U30 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_1_6,
        din1 => kernel_data_V_1_10,
        din2 => kernel_data_V_1_14,
        din3 => line_buffer_Array_V_1_2_2_q0,
        din4 => line_buffer_Array_V_1_2_2_q0,
        din5 => line_buffer_Array_V_1_2_2_q0,
        din6 => line_buffer_Array_V_1_2_2_q0,
        din7 => line_buffer_Array_V_1_2_2_q0,
        din8 => line_buffer_Array_V_1_2_2_q0,
        din9 => line_buffer_Array_V_1_2_2_q0,
        din10 => line_buffer_Array_V_1_2_2_q0,
        din11 => line_buffer_Array_V_1_2_2_q0,
        din12 => line_buffer_Array_V_1_2_2_q0,
        din13 => line_buffer_Array_V_1_2_2_q0,
        din14 => line_buffer_Array_V_1_2_2_q0,
        din15 => line_buffer_Array_V_1_2_2_q0,
        din16 => phi_ln65_11_fu_2284_p17,
        dout => phi_ln65_11_fu_2284_p18);

    myproject_mux_164_16_1_1_U31 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => line_buffer_Array_V_1_1_2_q0,
        din1 => line_buffer_Array_V_1_1_2_q0,
        din2 => line_buffer_Array_V_1_1_2_q0,
        din3 => line_buffer_Array_V_1_1_2_q0,
        din4 => kernel_data_V_1_22,
        din5 => kernel_data_V_1_26,
        din6 => kernel_data_V_1_30,
        din7 => line_buffer_Array_V_1_1_2_q0,
        din8 => line_buffer_Array_V_1_1_2_q0,
        din9 => line_buffer_Array_V_1_1_2_q0,
        din10 => line_buffer_Array_V_1_1_2_q0,
        din11 => line_buffer_Array_V_1_1_2_q0,
        din12 => line_buffer_Array_V_1_1_2_q0,
        din13 => line_buffer_Array_V_1_1_2_q0,
        din14 => line_buffer_Array_V_1_1_2_q0,
        din15 => line_buffer_Array_V_1_1_2_q0,
        din16 => phi_ln65_12_fu_2384_p17,
        dout => phi_ln65_12_fu_2384_p18);

    myproject_mux_164_16_1_1_U32 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_1_6,
        din1 => kernel_data_V_1_10,
        din2 => kernel_data_V_1_14,
        din3 => line_buffer_Array_V_1_2_2_q0,
        din4 => kernel_data_V_1_22,
        din5 => kernel_data_V_1_26,
        din6 => kernel_data_V_1_30,
        din7 => line_buffer_Array_V_1_1_2_q0,
        din8 => line_buffer_Array_V_1_1_2_q0,
        din9 => line_buffer_Array_V_1_1_2_q0,
        din10 => line_buffer_Array_V_1_1_2_q0,
        din11 => line_buffer_Array_V_1_1_2_q0,
        din12 => line_buffer_Array_V_1_1_2_q0,
        din13 => line_buffer_Array_V_1_1_2_q0,
        din14 => line_buffer_Array_V_1_1_2_q0,
        din15 => line_buffer_Array_V_1_1_2_q0,
        din16 => zext_ln65_8_fu_2436_p1,
        dout => phi_ln65_13_fu_2440_p18);

    myproject_mux_164_16_1_1_U33 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => line_buffer_Array_V_1_0_2_q0,
        din1 => line_buffer_Array_V_1_0_2_q0,
        din2 => line_buffer_Array_V_1_0_2_q0,
        din3 => line_buffer_Array_V_1_0_2_q0,
        din4 => line_buffer_Array_V_1_0_2_q0,
        din5 => line_buffer_Array_V_1_0_2_q0,
        din6 => line_buffer_Array_V_1_0_2_q0,
        din7 => line_buffer_Array_V_1_0_2_q0,
        din8 => kernel_data_V_1_38,
        din9 => kernel_data_V_1_42,
        din10 => kernel_data_V_1_46,
        din11 => line_buffer_Array_V_1_0_2_q0,
        din12 => line_buffer_Array_V_1_0_2_q0,
        din13 => line_buffer_Array_V_1_0_2_q0,
        din14 => line_buffer_Array_V_1_0_2_q0,
        din15 => line_buffer_Array_V_1_0_2_q0,
        din16 => select_ln65_60_fu_2528_p3,
        dout => phi_ln65_14_fu_2536_p18);

    myproject_mux_164_16_1_1_U34 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_15_V_2_reg_3374,
        din1 => pool_window_15_V_2_reg_3374,
        din2 => pool_window_15_V_2_reg_3374,
        din3 => pool_window_15_V_2_reg_3374,
        din4 => pool_window_15_V_2_reg_3374,
        din5 => pool_window_15_V_2_reg_3374,
        din6 => pool_window_15_V_2_reg_3374,
        din7 => pool_window_15_V_2_reg_3374,
        din8 => pool_window_15_V_2_reg_3374,
        din9 => pool_window_15_V_2_reg_3374,
        din10 => pool_window_15_V_2_reg_3374,
        din11 => pool_window_15_V_2_reg_3374,
        din12 => kernel_data_V_1_54,
        din13 => kernel_data_V_1_58,
        din14 => kernel_data_V_1_62,
        din15 => pool_window_15_V_2_reg_3374,
        din16 => sext_ln65_2_fu_2630_p1,
        dout => phi_ln65_15_fu_2634_p18);

    myproject_mux_164_16_1_1_U35 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_15_V_2_reg_3374,
        din1 => pool_window_15_V_2_reg_3374,
        din2 => pool_window_15_V_2_reg_3374,
        din3 => pool_window_15_V_2_reg_3374,
        din4 => pool_window_15_V_2_reg_3374,
        din5 => pool_window_15_V_2_reg_3374,
        din6 => pool_window_15_V_2_reg_3374,
        din7 => pool_window_15_V_2_reg_3374,
        din8 => kernel_data_V_1_38,
        din9 => kernel_data_V_1_42,
        din10 => kernel_data_V_1_46,
        din11 => line_buffer_Array_V_1_0_2_q0,
        din12 => kernel_data_V_1_54,
        din13 => kernel_data_V_1_58,
        din14 => kernel_data_V_1_62,
        din15 => pool_window_15_V_2_reg_3374,
        din16 => select_ln65_66_fu_2665_p3,
        dout => phi_ln65_16_fu_2673_p18);

    myproject_mux_164_16_1_1_U36 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_1_6,
        din1 => kernel_data_V_1_10,
        din2 => kernel_data_V_1_14,
        din3 => line_buffer_Array_V_1_2_2_q0,
        din4 => kernel_data_V_1_22,
        din5 => kernel_data_V_1_26,
        din6 => kernel_data_V_1_30,
        din7 => line_buffer_Array_V_1_1_2_q0,
        din8 => kernel_data_V_1_38,
        din9 => kernel_data_V_1_42,
        din10 => kernel_data_V_1_46,
        din11 => line_buffer_Array_V_1_0_2_q0,
        din12 => kernel_data_V_1_54,
        din13 => kernel_data_V_1_58,
        din14 => kernel_data_V_1_62,
        din15 => pool_window_15_V_2_reg_3374,
        din16 => tmp_data_2_V_fu_2716_p17,
        dout => tmp_data_2_V_fu_2716_p18);

    myproject_mux_164_16_1_1_U37 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_1_7,
        din1 => kernel_data_V_1_11,
        din2 => kernel_data_V_1_15,
        din3 => line_buffer_Array_V_1_2_3_q0,
        din4 => line_buffer_Array_V_1_2_3_q0,
        din5 => line_buffer_Array_V_1_2_3_q0,
        din6 => line_buffer_Array_V_1_2_3_q0,
        din7 => line_buffer_Array_V_1_2_3_q0,
        din8 => line_buffer_Array_V_1_2_3_q0,
        din9 => line_buffer_Array_V_1_2_3_q0,
        din10 => line_buffer_Array_V_1_2_3_q0,
        din11 => line_buffer_Array_V_1_2_3_q0,
        din12 => line_buffer_Array_V_1_2_3_q0,
        din13 => line_buffer_Array_V_1_2_3_q0,
        din14 => line_buffer_Array_V_1_2_3_q0,
        din15 => line_buffer_Array_V_1_2_3_q0,
        din16 => phi_ln65_17_fu_2816_p17,
        dout => phi_ln65_17_fu_2816_p18);

    myproject_mux_164_16_1_1_U38 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => line_buffer_Array_V_1_1_3_q0,
        din1 => line_buffer_Array_V_1_1_3_q0,
        din2 => line_buffer_Array_V_1_1_3_q0,
        din3 => line_buffer_Array_V_1_1_3_q0,
        din4 => kernel_data_V_1_23,
        din5 => kernel_data_V_1_27,
        din6 => kernel_data_V_1_31,
        din7 => line_buffer_Array_V_1_1_3_q0,
        din8 => line_buffer_Array_V_1_1_3_q0,
        din9 => line_buffer_Array_V_1_1_3_q0,
        din10 => line_buffer_Array_V_1_1_3_q0,
        din11 => line_buffer_Array_V_1_1_3_q0,
        din12 => line_buffer_Array_V_1_1_3_q0,
        din13 => line_buffer_Array_V_1_1_3_q0,
        din14 => line_buffer_Array_V_1_1_3_q0,
        din15 => line_buffer_Array_V_1_1_3_q0,
        din16 => phi_ln65_18_fu_2916_p17,
        dout => phi_ln65_18_fu_2916_p18);

    myproject_mux_164_16_1_1_U39 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_1_7,
        din1 => kernel_data_V_1_11,
        din2 => kernel_data_V_1_15,
        din3 => line_buffer_Array_V_1_2_3_q0,
        din4 => kernel_data_V_1_23,
        din5 => kernel_data_V_1_27,
        din6 => kernel_data_V_1_31,
        din7 => line_buffer_Array_V_1_1_3_q0,
        din8 => line_buffer_Array_V_1_1_3_q0,
        din9 => line_buffer_Array_V_1_1_3_q0,
        din10 => line_buffer_Array_V_1_1_3_q0,
        din11 => line_buffer_Array_V_1_1_3_q0,
        din12 => line_buffer_Array_V_1_1_3_q0,
        din13 => line_buffer_Array_V_1_1_3_q0,
        din14 => line_buffer_Array_V_1_1_3_q0,
        din15 => line_buffer_Array_V_1_1_3_q0,
        din16 => zext_ln65_11_fu_2968_p1,
        dout => phi_ln65_19_fu_2972_p18);

    myproject_mux_164_16_1_1_U40 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => line_buffer_Array_V_1_0_3_q0,
        din1 => line_buffer_Array_V_1_0_3_q0,
        din2 => line_buffer_Array_V_1_0_3_q0,
        din3 => line_buffer_Array_V_1_0_3_q0,
        din4 => line_buffer_Array_V_1_0_3_q0,
        din5 => line_buffer_Array_V_1_0_3_q0,
        din6 => line_buffer_Array_V_1_0_3_q0,
        din7 => line_buffer_Array_V_1_0_3_q0,
        din8 => kernel_data_V_1_39,
        din9 => kernel_data_V_1_43,
        din10 => kernel_data_V_1_47,
        din11 => line_buffer_Array_V_1_0_3_q0,
        din12 => line_buffer_Array_V_1_0_3_q0,
        din13 => line_buffer_Array_V_1_0_3_q0,
        din14 => line_buffer_Array_V_1_0_3_q0,
        din15 => line_buffer_Array_V_1_0_3_q0,
        din16 => select_ln65_81_fu_3060_p3,
        dout => phi_ln65_20_fu_3068_p18);

    myproject_mux_164_16_1_1_U41 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_15_V_3_reg_3405,
        din1 => pool_window_15_V_3_reg_3405,
        din2 => pool_window_15_V_3_reg_3405,
        din3 => pool_window_15_V_3_reg_3405,
        din4 => pool_window_15_V_3_reg_3405,
        din5 => pool_window_15_V_3_reg_3405,
        din6 => pool_window_15_V_3_reg_3405,
        din7 => pool_window_15_V_3_reg_3405,
        din8 => pool_window_15_V_3_reg_3405,
        din9 => pool_window_15_V_3_reg_3405,
        din10 => pool_window_15_V_3_reg_3405,
        din11 => pool_window_15_V_3_reg_3405,
        din12 => kernel_data_V_1_55,
        din13 => kernel_data_V_1_59,
        din14 => kernel_data_V_1_63,
        din15 => pool_window_15_V_3_reg_3405,
        din16 => sext_ln65_3_fu_3162_p1,
        dout => phi_ln65_21_fu_3166_p18);

    myproject_mux_164_16_1_1_U42 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_15_V_3_reg_3405,
        din1 => pool_window_15_V_3_reg_3405,
        din2 => pool_window_15_V_3_reg_3405,
        din3 => pool_window_15_V_3_reg_3405,
        din4 => pool_window_15_V_3_reg_3405,
        din5 => pool_window_15_V_3_reg_3405,
        din6 => pool_window_15_V_3_reg_3405,
        din7 => pool_window_15_V_3_reg_3405,
        din8 => kernel_data_V_1_39,
        din9 => kernel_data_V_1_43,
        din10 => kernel_data_V_1_47,
        din11 => line_buffer_Array_V_1_0_3_q0,
        din12 => kernel_data_V_1_55,
        din13 => kernel_data_V_1_59,
        din14 => kernel_data_V_1_63,
        din15 => pool_window_15_V_3_reg_3405,
        din16 => select_ln65_87_fu_3197_p3,
        dout => phi_ln65_22_fu_3205_p18);

    myproject_mux_164_16_1_1_U43 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_1_7,
        din1 => kernel_data_V_1_11,
        din2 => kernel_data_V_1_15,
        din3 => line_buffer_Array_V_1_2_3_q0,
        din4 => kernel_data_V_1_23,
        din5 => kernel_data_V_1_27,
        din6 => kernel_data_V_1_31,
        din7 => line_buffer_Array_V_1_1_3_q0,
        din8 => kernel_data_V_1_39,
        din9 => kernel_data_V_1_43,
        din10 => kernel_data_V_1_47,
        din11 => line_buffer_Array_V_1_0_3_q0,
        din12 => kernel_data_V_1_55,
        din13 => kernel_data_V_1_59,
        din14 => kernel_data_V_1_63,
        din15 => pool_window_15_V_3_reg_3405,
        din16 => tmp_data_3_V_fu_3248_p17,
        dout => tmp_data_3_V_fu_3248_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_284)) then
                if ((ap_const_boolean_1 = ap_condition_338)) then 
                    ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_303)) then 
                    ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375 <= select_ln222_fu_530_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_375;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_fu_386_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_364 <= add_ln241_fu_392_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_364 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    pX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_331)) then
                if ((icmp_ln212_fu_456_p2 = ap_const_lv1_1)) then 
                    pX <= ap_const_lv32_0;
                elsif ((icmp_ln212_fu_456_p2 = ap_const_lv1_0)) then 
                    pX <= add_ln225_fu_462_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_344)) then
                if ((icmp_ln216_fu_506_p2 = ap_const_lv1_1)) then 
                    pY <= ap_const_lv32_0;
                elsif ((icmp_ln216_fu_506_p2 = ap_const_lv1_0)) then 
                    pY <= add_ln220_fu_512_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_331)) then
                if ((icmp_ln212_fu_456_p2 = ap_const_lv1_1)) then 
                    sX <= ap_const_lv32_0;
                elsif ((icmp_ln212_fu_456_p2 = ap_const_lv1_0)) then 
                    sX <= select_ln227_fu_480_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_fu_386_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln191_2_reg_3295 <= and_ln191_2_fu_450_p2;
                icmp_ln212_reg_3299 <= icmp_ln212_fu_456_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln191_2_reg_3295_pp0_iter1_reg <= and_ln191_2_reg_3295;
                icmp_ln241_reg_3286 <= icmp_ln241_fu_386_p2;
                icmp_ln241_reg_3286_pp0_iter1_reg <= icmp_ln241_reg_3286;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                kernel_data_V_1_10 <= kernel_data_V_1_14;
                kernel_data_V_1_11 <= kernel_data_V_1_15;
                kernel_data_V_1_12 <= line_buffer_Array_V_1_2_0_q0;
                kernel_data_V_1_13 <= line_buffer_Array_V_1_2_1_q0;
                kernel_data_V_1_14 <= line_buffer_Array_V_1_2_2_q0;
                kernel_data_V_1_15 <= line_buffer_Array_V_1_2_3_q0;
                kernel_data_V_1_20 <= kernel_data_V_1_24;
                kernel_data_V_1_21 <= kernel_data_V_1_25;
                kernel_data_V_1_22 <= kernel_data_V_1_26;
                kernel_data_V_1_23 <= kernel_data_V_1_27;
                kernel_data_V_1_24 <= kernel_data_V_1_28;
                kernel_data_V_1_25 <= kernel_data_V_1_29;
                kernel_data_V_1_26 <= kernel_data_V_1_30;
                kernel_data_V_1_27 <= kernel_data_V_1_31;
                kernel_data_V_1_28 <= line_buffer_Array_V_1_1_0_q0;
                kernel_data_V_1_29 <= line_buffer_Array_V_1_1_1_q0;
                kernel_data_V_1_30 <= line_buffer_Array_V_1_1_2_q0;
                kernel_data_V_1_31 <= line_buffer_Array_V_1_1_3_q0;
                kernel_data_V_1_36 <= kernel_data_V_1_40;
                kernel_data_V_1_37 <= kernel_data_V_1_41;
                kernel_data_V_1_38 <= kernel_data_V_1_42;
                kernel_data_V_1_39 <= kernel_data_V_1_43;
                kernel_data_V_1_4 <= kernel_data_V_1_8;
                kernel_data_V_1_40 <= kernel_data_V_1_44;
                kernel_data_V_1_41 <= kernel_data_V_1_45;
                kernel_data_V_1_42 <= kernel_data_V_1_46;
                kernel_data_V_1_43 <= kernel_data_V_1_47;
                kernel_data_V_1_44 <= line_buffer_Array_V_1_0_0_q0;
                kernel_data_V_1_45 <= line_buffer_Array_V_1_0_1_q0;
                kernel_data_V_1_46 <= line_buffer_Array_V_1_0_2_q0;
                kernel_data_V_1_47 <= line_buffer_Array_V_1_0_3_q0;
                kernel_data_V_1_5 <= kernel_data_V_1_9;
                kernel_data_V_1_52 <= kernel_data_V_1_56;
                kernel_data_V_1_53 <= kernel_data_V_1_57;
                kernel_data_V_1_54 <= kernel_data_V_1_58;
                kernel_data_V_1_55 <= kernel_data_V_1_59;
                kernel_data_V_1_56 <= kernel_data_V_1_60;
                kernel_data_V_1_57 <= kernel_data_V_1_61;
                kernel_data_V_1_58 <= kernel_data_V_1_62;
                kernel_data_V_1_59 <= kernel_data_V_1_63;
                kernel_data_V_1_6 <= kernel_data_V_1_10;
                kernel_data_V_1_60 <= pool_window_15_V_reg_3312;
                kernel_data_V_1_61 <= pool_window_15_V_1_reg_3343;
                kernel_data_V_1_62 <= pool_window_15_V_2_reg_3374;
                kernel_data_V_1_63 <= pool_window_15_V_3_reg_3405;
                kernel_data_V_1_7 <= kernel_data_V_1_11;
                kernel_data_V_1_8 <= kernel_data_V_1_12;
                kernel_data_V_1_9 <= kernel_data_V_1_13;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                pool_window_15_V_1_reg_3343 <= data_V_data_1_V_dout;
                pool_window_15_V_2_reg_3374 <= data_V_data_2_V_dout;
                pool_window_15_V_3_reg_3405 <= data_V_data_3_V_dout;
                pool_window_15_V_reg_3312 <= data_V_data_0_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_reg_3299 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sY <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln241_fu_386_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln241_fu_386_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln241_fu_386_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln220_fu_512_p2 <= std_logic_vector(unsigned(pY) + unsigned(ap_const_lv32_1));
    add_ln222_fu_524_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_sY_load) + unsigned(ap_const_lv32_1));
    add_ln225_fu_462_p2 <= std_logic_vector(unsigned(pX) + unsigned(ap_const_lv32_1));
    add_ln227_fu_474_p2 <= std_logic_vector(unsigned(sX) + unsigned(ap_const_lv32_1));
    add_ln241_fu_392_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_364) + unsigned(ap_const_lv10_1));
    and_ln191_1_fu_444_p2 <= (icmp_ln191_3_fu_432_p2 and icmp_ln191_2_fu_422_p2);
    and_ln191_2_fu_450_p2 <= (and_ln191_fu_438_p2 and and_ln191_1_fu_444_p2);
    and_ln191_fu_438_p2 <= (icmp_ln191_fu_402_p2 and icmp_ln191_1_fu_412_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln241_reg_3286, ap_enable_reg_pp0_iter2, and_ln191_2_reg_3295_pp0_iter1_reg, io_acc_block_signal_op53, io_acc_block_signal_op373)
    begin
                ap_block_pp0_stage0_01001 <= (((io_acc_block_signal_op373 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_2_reg_3295_pp0_iter1_reg) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((io_acc_block_signal_op53 = ap_const_logic_0) and (icmp_ln241_reg_3286 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln241_reg_3286, ap_enable_reg_pp0_iter2, and_ln191_2_reg_3295_pp0_iter1_reg, io_acc_block_signal_op53, io_acc_block_signal_op373)
    begin
                ap_block_pp0_stage0_11001 <= (((io_acc_block_signal_op373 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_2_reg_3295_pp0_iter1_reg) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((io_acc_block_signal_op53 = ap_const_logic_0) and (icmp_ln241_reg_3286 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln241_reg_3286, ap_enable_reg_pp0_iter2, and_ln191_2_reg_3295_pp0_iter1_reg, io_acc_block_signal_op53, io_acc_block_signal_op373)
    begin
                ap_block_pp0_stage0_subdone <= (((io_acc_block_signal_op373 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_2_reg_3295_pp0_iter1_reg) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((io_acc_block_signal_op53 = ap_const_logic_0) and (icmp_ln241_reg_3286 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(icmp_ln241_reg_3286, io_acc_block_signal_op53)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((io_acc_block_signal_op53 = ap_const_logic_0) and (icmp_ln241_reg_3286 = ap_const_lv1_0));
    end process;


    ap_block_state4_pp0_stage0_iter2_assign_proc : process(and_ln191_2_reg_3295_pp0_iter1_reg, io_acc_block_signal_op373)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((io_acc_block_signal_op373 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_2_reg_3295_pp0_iter1_reg));
    end process;


    ap_condition_284_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
                ap_condition_284 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_303_assign_proc : process(icmp_ln241_fu_386_p2, icmp_ln212_fu_456_p2, icmp_ln216_fu_506_p2)
    begin
                ap_condition_303 <= ((icmp_ln212_fu_456_p2 = ap_const_lv1_1) and (icmp_ln216_fu_506_p2 = ap_const_lv1_0) and (icmp_ln241_fu_386_p2 = ap_const_lv1_0));
    end process;


    ap_condition_331_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln241_fu_386_p2, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
                ap_condition_331 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_fu_386_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_338_assign_proc : process(icmp_ln241_fu_386_p2, icmp_ln212_fu_456_p2, icmp_ln216_fu_506_p2)
    begin
                ap_condition_338 <= ((icmp_ln216_fu_506_p2 = ap_const_lv1_1) and (icmp_ln212_fu_456_p2 = ap_const_lv1_1) and (icmp_ln241_fu_386_p2 = ap_const_lv1_0));
    end process;


    ap_condition_344_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln241_fu_386_p2, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, icmp_ln212_fu_456_p2)
    begin
                ap_condition_344 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_456_p2 = ap_const_lv1_1) and (icmp_ln241_fu_386_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln241_fu_386_p2)
    begin
        if ((icmp_ln241_fu_386_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge_i_i_reg_375 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    ap_sig_allocacmp_sY_load_assign_proc : process(sY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln212_reg_3299, ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375)
    begin
        if (((icmp_ln212_reg_3299 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_sY_load <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375;
        else 
            ap_sig_allocacmp_sY_load <= sY;
        end if; 
    end process;


    data_V_data_0_V_blk_n_assign_proc : process(data_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_3286)
    begin
        if (((icmp_ln241_reg_3286 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3286, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(data_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_3286)
    begin
        if (((icmp_ln241_reg_3286 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3286, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(data_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_3286)
    begin
        if (((icmp_ln241_reg_3286 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3286, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(data_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_3286)
    begin
        if (((icmp_ln241_reg_3286 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3286, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1496_10_fu_1510_p2 <= "1" when (signed(kernel_data_V_1_52) < signed(kernel_data_V_1_56)) else "0";
    icmp_ln1496_11_fu_1532_p2 <= "1" when (signed(kernel_data_V_1_60) < signed(pool_window_15_V_reg_3312)) else "0";
    icmp_ln1496_12_fu_1552_p2 <= "1" when (signed(select_ln65_19_fu_1524_p3) < signed(select_ln65_21_fu_1545_p3)) else "0";
    icmp_ln1496_13_fu_1595_p2 <= "1" when (signed(phi_ln65_3_fu_1472_p18) < signed(phi_ln65_4_fu_1570_p18)) else "0";
    icmp_ln1496_14_fu_1638_p2 <= "1" when (signed(phi_ln65_2_fu_1376_p18) < signed(phi_ln65_5_fu_1609_p18)) else "0";
    icmp_ln1496_15_fu_1690_p2 <= "1" when (signed(kernel_data_V_1_5) < signed(kernel_data_V_1_9)) else "0";
    icmp_ln1496_16_fu_1708_p2 <= "1" when (signed(kernel_data_V_1_13) < signed(line_buffer_Array_V_1_2_1_q0)) else "0";
    icmp_ln1496_17_fu_1730_p2 <= "1" when (signed(select_ln65_25_fu_1700_p3) < signed(select_ln65_27_fu_1722_p3)) else "0";
    icmp_ln1496_18_fu_1790_p2 <= "1" when (signed(kernel_data_V_1_21) < signed(kernel_data_V_1_25)) else "0";
    icmp_ln1496_19_fu_1812_p2 <= "1" when (signed(kernel_data_V_1_29) < signed(line_buffer_Array_V_1_1_1_q0)) else "0";
    icmp_ln1496_1_fu_1176_p2 <= "1" when (signed(kernel_data_V_1_12) < signed(line_buffer_Array_V_1_2_0_q0)) else "0";
    icmp_ln1496_20_fu_1834_p2 <= "1" when (signed(select_ln65_30_fu_1804_p3) < signed(select_ln65_32_fu_1826_p3)) else "0";
    icmp_ln1496_21_fu_1890_p2 <= "1" when (signed(phi_ln65_6_fu_1752_p18) < signed(phi_ln65_7_fu_1852_p18)) else "0";
    icmp_ln1496_22_fu_1946_p2 <= "1" when (signed(kernel_data_V_1_37) < signed(kernel_data_V_1_41)) else "0";
    icmp_ln1496_23_fu_1968_p2 <= "1" when (signed(kernel_data_V_1_45) < signed(line_buffer_Array_V_1_0_1_q0)) else "0";
    icmp_ln1496_24_fu_1990_p2 <= "1" when (signed(select_ln65_36_fu_1960_p3) < signed(select_ln65_38_fu_1982_p3)) else "0";
    icmp_ln1496_25_fu_2042_p2 <= "1" when (signed(kernel_data_V_1_53) < signed(kernel_data_V_1_57)) else "0";
    icmp_ln1496_26_fu_2064_p2 <= "1" when (signed(kernel_data_V_1_61) < signed(pool_window_15_V_1_reg_3343)) else "0";
    icmp_ln1496_27_fu_2084_p2 <= "1" when (signed(select_ln65_41_fu_2056_p3) < signed(select_ln65_43_fu_2077_p3)) else "0";
    icmp_ln1496_28_fu_2127_p2 <= "1" when (signed(phi_ln65_9_fu_2004_p18) < signed(phi_ln65_s_fu_2102_p18)) else "0";
    icmp_ln1496_29_fu_2170_p2 <= "1" when (signed(phi_ln65_8_fu_1908_p18) < signed(phi_ln65_10_fu_2141_p18)) else "0";
    icmp_ln1496_2_fu_1198_p2 <= "1" when (signed(select_ln65_fu_1168_p3) < signed(select_ln65_5_fu_1190_p3)) else "0";
    icmp_ln1496_30_fu_2222_p2 <= "1" when (signed(kernel_data_V_1_6) < signed(kernel_data_V_1_10)) else "0";
    icmp_ln1496_31_fu_2240_p2 <= "1" when (signed(kernel_data_V_1_14) < signed(line_buffer_Array_V_1_2_2_q0)) else "0";
    icmp_ln1496_32_fu_2262_p2 <= "1" when (signed(select_ln65_46_fu_2232_p3) < signed(select_ln65_48_fu_2254_p3)) else "0";
    icmp_ln1496_33_fu_2322_p2 <= "1" when (signed(kernel_data_V_1_22) < signed(kernel_data_V_1_26)) else "0";
    icmp_ln1496_34_fu_2344_p2 <= "1" when (signed(kernel_data_V_1_30) < signed(line_buffer_Array_V_1_1_2_q0)) else "0";
    icmp_ln1496_35_fu_2366_p2 <= "1" when (signed(select_ln65_51_fu_2336_p3) < signed(select_ln65_53_fu_2358_p3)) else "0";
    icmp_ln1496_36_fu_2422_p2 <= "1" when (signed(phi_ln65_11_fu_2284_p18) < signed(phi_ln65_12_fu_2384_p18)) else "0";
    icmp_ln1496_37_fu_2478_p2 <= "1" when (signed(kernel_data_V_1_38) < signed(kernel_data_V_1_42)) else "0";
    icmp_ln1496_38_fu_2500_p2 <= "1" when (signed(kernel_data_V_1_46) < signed(line_buffer_Array_V_1_0_2_q0)) else "0";
    icmp_ln1496_39_fu_2522_p2 <= "1" when (signed(select_ln65_57_fu_2492_p3) < signed(select_ln65_59_fu_2514_p3)) else "0";
    icmp_ln1496_3_fu_1258_p2 <= "1" when (signed(kernel_data_V_1_20) < signed(kernel_data_V_1_24)) else "0";
    icmp_ln1496_40_fu_2574_p2 <= "1" when (signed(kernel_data_V_1_54) < signed(kernel_data_V_1_58)) else "0";
    icmp_ln1496_41_fu_2596_p2 <= "1" when (signed(kernel_data_V_1_62) < signed(pool_window_15_V_2_reg_3374)) else "0";
    icmp_ln1496_42_fu_2616_p2 <= "1" when (signed(select_ln65_62_fu_2588_p3) < signed(select_ln65_64_fu_2609_p3)) else "0";
    icmp_ln1496_43_fu_2659_p2 <= "1" when (signed(phi_ln65_14_fu_2536_p18) < signed(phi_ln65_15_fu_2634_p18)) else "0";
    icmp_ln1496_44_fu_2702_p2 <= "1" when (signed(phi_ln65_13_fu_2440_p18) < signed(phi_ln65_16_fu_2673_p18)) else "0";
    icmp_ln1496_45_fu_2754_p2 <= "1" when (signed(kernel_data_V_1_7) < signed(kernel_data_V_1_11)) else "0";
    icmp_ln1496_46_fu_2772_p2 <= "1" when (signed(kernel_data_V_1_15) < signed(line_buffer_Array_V_1_2_3_q0)) else "0";
    icmp_ln1496_47_fu_2794_p2 <= "1" when (signed(select_ln65_67_fu_2764_p3) < signed(select_ln65_69_fu_2786_p3)) else "0";
    icmp_ln1496_48_fu_2854_p2 <= "1" when (signed(kernel_data_V_1_23) < signed(kernel_data_V_1_27)) else "0";
    icmp_ln1496_49_fu_2876_p2 <= "1" when (signed(kernel_data_V_1_31) < signed(line_buffer_Array_V_1_1_3_q0)) else "0";
    icmp_ln1496_4_fu_1280_p2 <= "1" when (signed(kernel_data_V_1_28) < signed(line_buffer_Array_V_1_1_0_q0)) else "0";
    icmp_ln1496_50_fu_2898_p2 <= "1" when (signed(select_ln65_72_fu_2868_p3) < signed(select_ln65_74_fu_2890_p3)) else "0";
    icmp_ln1496_51_fu_2954_p2 <= "1" when (signed(phi_ln65_17_fu_2816_p18) < signed(phi_ln65_18_fu_2916_p18)) else "0";
    icmp_ln1496_52_fu_3010_p2 <= "1" when (signed(kernel_data_V_1_39) < signed(kernel_data_V_1_43)) else "0";
    icmp_ln1496_53_fu_3032_p2 <= "1" when (signed(kernel_data_V_1_47) < signed(line_buffer_Array_V_1_0_3_q0)) else "0";
    icmp_ln1496_54_fu_3054_p2 <= "1" when (signed(select_ln65_78_fu_3024_p3) < signed(select_ln65_80_fu_3046_p3)) else "0";
    icmp_ln1496_55_fu_3106_p2 <= "1" when (signed(kernel_data_V_1_55) < signed(kernel_data_V_1_59)) else "0";
    icmp_ln1496_56_fu_3128_p2 <= "1" when (signed(kernel_data_V_1_63) < signed(pool_window_15_V_3_reg_3405)) else "0";
    icmp_ln1496_57_fu_3148_p2 <= "1" when (signed(select_ln65_83_fu_3120_p3) < signed(select_ln65_85_fu_3141_p3)) else "0";
    icmp_ln1496_58_fu_3191_p2 <= "1" when (signed(phi_ln65_20_fu_3068_p18) < signed(phi_ln65_21_fu_3166_p18)) else "0";
    icmp_ln1496_59_fu_3234_p2 <= "1" when (signed(phi_ln65_19_fu_2972_p18) < signed(phi_ln65_22_fu_3205_p18)) else "0";
    icmp_ln1496_5_fu_1302_p2 <= "1" when (signed(select_ln65_8_fu_1272_p3) < signed(select_ln65_10_fu_1294_p3)) else "0";
    icmp_ln1496_6_fu_1358_p2 <= "1" when (signed(phi_ln_fu_1220_p18) < signed(phi_ln65_1_fu_1320_p18)) else "0";
    icmp_ln1496_7_fu_1414_p2 <= "1" when (signed(kernel_data_V_1_36) < signed(kernel_data_V_1_40)) else "0";
    icmp_ln1496_8_fu_1436_p2 <= "1" when (signed(kernel_data_V_1_44) < signed(line_buffer_Array_V_1_0_0_q0)) else "0";
    icmp_ln1496_9_fu_1458_p2 <= "1" when (signed(select_ln65_14_fu_1428_p3) < signed(select_ln65_16_fu_1450_p3)) else "0";
    icmp_ln1496_fu_1158_p2 <= "1" when (signed(kernel_data_V_1_4) < signed(kernel_data_V_1_8)) else "0";
    icmp_ln191_1_fu_412_p2 <= "1" when (ap_sig_allocacmp_sY_load = ap_const_lv32_3) else "0";
    icmp_ln191_2_fu_422_p2 <= "1" when (signed(pY) > signed(ap_const_lv32_2)) else "0";
    icmp_ln191_3_fu_432_p2 <= "1" when (signed(pX) > signed(ap_const_lv32_2)) else "0";
    icmp_ln191_fu_402_p2 <= "1" when (sX = ap_const_lv32_3) else "0";
    icmp_ln212_fu_456_p2 <= "1" when (pX = ap_const_lv32_18) else "0";
    icmp_ln216_fu_506_p2 <= "1" when (pY = ap_const_lv32_18) else "0";
    icmp_ln241_fu_386_p2 <= "1" when (indvar_flatten_reg_364 = ap_const_lv10_271) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op373 <= (res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    io_acc_block_signal_op53 <= (data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);

    line_buffer_Array_V_1_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_0_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_0_0_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_0_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_0_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_0_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_0_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_0_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_0_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_0_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_0_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_0_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_0_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_0_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_0_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_0_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_1_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_1_0_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_1_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_1_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_1_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_1_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_1_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_1_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_1_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_1_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_1_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_1_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_1_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_1_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_1_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_1_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_2_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_2_0_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_2_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_2_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_2_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_2_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_2_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_2_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_2_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_2_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_2_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_2_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_2_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_2_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_2_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln241_reg_3286_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3286_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_2_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_2_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    phi_ln65_11_fu_2284_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_49_fu_2268_p3),4));
    phi_ln65_12_fu_2384_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_54_fu_2372_p3),4));
    phi_ln65_17_fu_2816_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_70_fu_2800_p3),4));
    phi_ln65_18_fu_2916_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_75_fu_2904_p3),4));
    phi_ln65_1_fu_1320_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_11_fu_1308_p3),4));
    phi_ln65_6_fu_1752_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_28_fu_1736_p3),4));
    phi_ln65_7_fu_1852_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_33_fu_1840_p3),4));
    phi_ln_fu_1220_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_6_fu_1204_p3),4));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_2_reg_3295_pp0_iter1_reg)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_3295_pp0_iter1_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= tmp_data_0_V_fu_1652_p18;

    res_V_data_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_2_reg_3295_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_3295_pp0_iter1_reg) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_2_reg_3295_pp0_iter1_reg)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_3295_pp0_iter1_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= tmp_data_1_V_fu_2184_p18;

    res_V_data_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_2_reg_3295_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_3295_pp0_iter1_reg) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_2_reg_3295_pp0_iter1_reg)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_3295_pp0_iter1_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= tmp_data_2_V_fu_2716_p18;

    res_V_data_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_2_reg_3295_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_3295_pp0_iter1_reg) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_2_reg_3295_pp0_iter1_reg)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_3295_pp0_iter1_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= tmp_data_3_V_fu_3248_p18;

    res_V_data_3_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_2_reg_3295_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_3295_pp0_iter1_reg) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln222_fu_530_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_1_fu_412_p2(0) = '1') else 
        add_ln222_fu_524_p2;
    select_ln227_fu_480_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_fu_402_p2(0) = '1') else 
        add_ln227_fu_474_p2;
    select_ln65_10_fu_1294_p3 <= 
        line_buffer_Array_V_1_1_0_q0 when (icmp_ln1496_4_fu_1280_p2(0) = '1') else 
        kernel_data_V_1_28;
    select_ln65_11_fu_1308_p3 <= 
        select_ln65_20_fu_1286_p3 when (icmp_ln1496_5_fu_1302_p2(0) = '1') else 
        select_ln65_7_fu_1264_p3;
    select_ln65_12_fu_1364_p3 <= 
        select_ln65_11_fu_1308_p3 when (icmp_ln1496_6_fu_1358_p2(0) = '1') else 
        zext_ln65_1_fu_1212_p1;
    select_ln65_13_fu_1420_p3 <= 
        ap_const_lv4_9 when (icmp_ln1496_7_fu_1414_p2(0) = '1') else 
        ap_const_lv4_8;
    select_ln65_14_fu_1428_p3 <= 
        kernel_data_V_1_40 when (icmp_ln1496_7_fu_1414_p2(0) = '1') else 
        kernel_data_V_1_36;
    select_ln65_15_fu_1442_p3 <= 
        ap_const_lv4_B when (icmp_ln1496_8_fu_1436_p2(0) = '1') else 
        ap_const_lv4_A;
    select_ln65_16_fu_1450_p3 <= 
        line_buffer_Array_V_1_0_0_q0 when (icmp_ln1496_8_fu_1436_p2(0) = '1') else 
        kernel_data_V_1_44;
    select_ln65_17_fu_1464_p3 <= 
        select_ln65_15_fu_1442_p3 when (icmp_ln1496_9_fu_1458_p2(0) = '1') else 
        select_ln65_13_fu_1420_p3;
    select_ln65_18_fu_1516_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_10_fu_1510_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_19_fu_1524_p3 <= 
        kernel_data_V_1_56 when (icmp_ln1496_10_fu_1510_p2(0) = '1') else 
        kernel_data_V_1_52;
    select_ln65_20_fu_1286_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_4_fu_1280_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_21_fu_1545_p3 <= 
        pool_window_15_V_reg_3312 when (icmp_ln1496_11_fu_1532_p2(0) = '1') else 
        kernel_data_V_1_60;
    select_ln65_22_fu_1558_p3 <= 
        select_ln65_24_fu_1537_p3 when (icmp_ln1496_12_fu_1552_p2(0) = '1') else 
        select_ln65_18_fu_1516_p3;
    select_ln65_23_fu_1601_p3 <= 
        sext_ln65_fu_1566_p1 when (icmp_ln1496_13_fu_1595_p2(0) = '1') else 
        select_ln65_17_fu_1464_p3;
    select_ln65_24_fu_1537_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_11_fu_1532_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_25_fu_1700_p3 <= 
        kernel_data_V_1_9 when (icmp_ln1496_15_fu_1690_p2(0) = '1') else 
        kernel_data_V_1_5;
    select_ln65_26_fu_1714_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_16_fu_1708_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_27_fu_1722_p3 <= 
        line_buffer_Array_V_1_2_1_q0 when (icmp_ln1496_16_fu_1708_p2(0) = '1') else 
        kernel_data_V_1_13;
    select_ln65_28_fu_1736_p3 <= 
        select_ln65_26_fu_1714_p3 when (icmp_ln1496_17_fu_1730_p2(0) = '1') else 
        zext_ln65_3_fu_1696_p1;
    select_ln65_29_fu_1796_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_18_fu_1790_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_30_fu_1804_p3 <= 
        kernel_data_V_1_25 when (icmp_ln1496_18_fu_1790_p2(0) = '1') else 
        kernel_data_V_1_21;
    select_ln65_32_fu_1826_p3 <= 
        line_buffer_Array_V_1_1_1_q0 when (icmp_ln1496_19_fu_1812_p2(0) = '1') else 
        kernel_data_V_1_29;
    select_ln65_33_fu_1840_p3 <= 
        select_ln65_42_fu_1818_p3 when (icmp_ln1496_20_fu_1834_p2(0) = '1') else 
        select_ln65_29_fu_1796_p3;
    select_ln65_34_fu_1896_p3 <= 
        select_ln65_33_fu_1840_p3 when (icmp_ln1496_21_fu_1890_p2(0) = '1') else 
        zext_ln65_4_fu_1744_p1;
    select_ln65_35_fu_1952_p3 <= 
        ap_const_lv4_9 when (icmp_ln1496_22_fu_1946_p2(0) = '1') else 
        ap_const_lv4_8;
    select_ln65_36_fu_1960_p3 <= 
        kernel_data_V_1_41 when (icmp_ln1496_22_fu_1946_p2(0) = '1') else 
        kernel_data_V_1_37;
    select_ln65_37_fu_1974_p3 <= 
        ap_const_lv4_B when (icmp_ln1496_23_fu_1968_p2(0) = '1') else 
        ap_const_lv4_A;
    select_ln65_38_fu_1982_p3 <= 
        line_buffer_Array_V_1_0_1_q0 when (icmp_ln1496_23_fu_1968_p2(0) = '1') else 
        kernel_data_V_1_45;
    select_ln65_39_fu_1996_p3 <= 
        select_ln65_37_fu_1974_p3 when (icmp_ln1496_24_fu_1990_p2(0) = '1') else 
        select_ln65_35_fu_1952_p3;
    select_ln65_40_fu_2048_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_25_fu_2042_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_41_fu_2056_p3 <= 
        kernel_data_V_1_57 when (icmp_ln1496_25_fu_2042_p2(0) = '1') else 
        kernel_data_V_1_53;
    select_ln65_42_fu_1818_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_19_fu_1812_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_43_fu_2077_p3 <= 
        pool_window_15_V_1_reg_3343 when (icmp_ln1496_26_fu_2064_p2(0) = '1') else 
        kernel_data_V_1_61;
    select_ln65_44_fu_2090_p3 <= 
        select_ln65_52_fu_2069_p3 when (icmp_ln1496_27_fu_2084_p2(0) = '1') else 
        select_ln65_40_fu_2048_p3;
    select_ln65_45_fu_2133_p3 <= 
        sext_ln65_1_fu_2098_p1 when (icmp_ln1496_28_fu_2127_p2(0) = '1') else 
        select_ln65_39_fu_1996_p3;
    select_ln65_46_fu_2232_p3 <= 
        kernel_data_V_1_10 when (icmp_ln1496_30_fu_2222_p2(0) = '1') else 
        kernel_data_V_1_6;
    select_ln65_47_fu_2246_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_31_fu_2240_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_48_fu_2254_p3 <= 
        line_buffer_Array_V_1_2_2_q0 when (icmp_ln1496_31_fu_2240_p2(0) = '1') else 
        kernel_data_V_1_14;
    select_ln65_49_fu_2268_p3 <= 
        select_ln65_47_fu_2246_p3 when (icmp_ln1496_32_fu_2262_p2(0) = '1') else 
        zext_ln65_6_fu_2228_p1;
    select_ln65_4_fu_1182_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_1_fu_1176_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_50_fu_2328_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_33_fu_2322_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_51_fu_2336_p3 <= 
        kernel_data_V_1_26 when (icmp_ln1496_33_fu_2322_p2(0) = '1') else 
        kernel_data_V_1_22;
    select_ln65_52_fu_2069_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_26_fu_2064_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_53_fu_2358_p3 <= 
        line_buffer_Array_V_1_1_2_q0 when (icmp_ln1496_34_fu_2344_p2(0) = '1') else 
        kernel_data_V_1_30;
    select_ln65_54_fu_2372_p3 <= 
        select_ln65_73_fu_2350_p3 when (icmp_ln1496_35_fu_2366_p2(0) = '1') else 
        select_ln65_50_fu_2328_p3;
    select_ln65_55_fu_2428_p3 <= 
        select_ln65_54_fu_2372_p3 when (icmp_ln1496_36_fu_2422_p2(0) = '1') else 
        zext_ln65_7_fu_2276_p1;
    select_ln65_56_fu_2484_p3 <= 
        ap_const_lv4_9 when (icmp_ln1496_37_fu_2478_p2(0) = '1') else 
        ap_const_lv4_8;
    select_ln65_57_fu_2492_p3 <= 
        kernel_data_V_1_42 when (icmp_ln1496_37_fu_2478_p2(0) = '1') else 
        kernel_data_V_1_38;
    select_ln65_58_fu_2506_p3 <= 
        ap_const_lv4_B when (icmp_ln1496_38_fu_2500_p2(0) = '1') else 
        ap_const_lv4_A;
    select_ln65_59_fu_2514_p3 <= 
        line_buffer_Array_V_1_0_2_q0 when (icmp_ln1496_38_fu_2500_p2(0) = '1') else 
        kernel_data_V_1_46;
    select_ln65_5_fu_1190_p3 <= 
        line_buffer_Array_V_1_2_0_q0 when (icmp_ln1496_1_fu_1176_p2(0) = '1') else 
        kernel_data_V_1_12;
    select_ln65_60_fu_2528_p3 <= 
        select_ln65_58_fu_2506_p3 when (icmp_ln1496_39_fu_2522_p2(0) = '1') else 
        select_ln65_56_fu_2484_p3;
    select_ln65_61_fu_2580_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_40_fu_2574_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_62_fu_2588_p3 <= 
        kernel_data_V_1_58 when (icmp_ln1496_40_fu_2574_p2(0) = '1') else 
        kernel_data_V_1_54;
    select_ln65_64_fu_2609_p3 <= 
        pool_window_15_V_2_reg_3374 when (icmp_ln1496_41_fu_2596_p2(0) = '1') else 
        kernel_data_V_1_62;
    select_ln65_65_fu_2622_p3 <= 
        select_ln65_84_fu_2601_p3 when (icmp_ln1496_42_fu_2616_p2(0) = '1') else 
        select_ln65_61_fu_2580_p3;
    select_ln65_66_fu_2665_p3 <= 
        sext_ln65_2_fu_2630_p1 when (icmp_ln1496_43_fu_2659_p2(0) = '1') else 
        select_ln65_60_fu_2528_p3;
    select_ln65_67_fu_2764_p3 <= 
        kernel_data_V_1_11 when (icmp_ln1496_45_fu_2754_p2(0) = '1') else 
        kernel_data_V_1_7;
    select_ln65_68_fu_2778_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_46_fu_2772_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_69_fu_2786_p3 <= 
        line_buffer_Array_V_1_2_3_q0 when (icmp_ln1496_46_fu_2772_p2(0) = '1') else 
        kernel_data_V_1_15;
    select_ln65_6_fu_1204_p3 <= 
        select_ln65_4_fu_1182_p3 when (icmp_ln1496_2_fu_1198_p2(0) = '1') else 
        zext_ln65_fu_1164_p1;
    select_ln65_70_fu_2800_p3 <= 
        select_ln65_68_fu_2778_p3 when (icmp_ln1496_47_fu_2794_p2(0) = '1') else 
        zext_ln65_9_fu_2760_p1;
    select_ln65_71_fu_2860_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_48_fu_2854_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_72_fu_2868_p3 <= 
        kernel_data_V_1_27 when (icmp_ln1496_48_fu_2854_p2(0) = '1') else 
        kernel_data_V_1_23;
    select_ln65_73_fu_2350_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_34_fu_2344_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_74_fu_2890_p3 <= 
        line_buffer_Array_V_1_1_3_q0 when (icmp_ln1496_49_fu_2876_p2(0) = '1') else 
        kernel_data_V_1_31;
    select_ln65_75_fu_2904_p3 <= 
        select_ln65_89_fu_2882_p3 when (icmp_ln1496_50_fu_2898_p2(0) = '1') else 
        select_ln65_71_fu_2860_p3;
    select_ln65_76_fu_2960_p3 <= 
        select_ln65_75_fu_2904_p3 when (icmp_ln1496_51_fu_2954_p2(0) = '1') else 
        zext_ln65_10_fu_2808_p1;
    select_ln65_77_fu_3016_p3 <= 
        ap_const_lv4_9 when (icmp_ln1496_52_fu_3010_p2(0) = '1') else 
        ap_const_lv4_8;
    select_ln65_78_fu_3024_p3 <= 
        kernel_data_V_1_43 when (icmp_ln1496_52_fu_3010_p2(0) = '1') else 
        kernel_data_V_1_39;
    select_ln65_79_fu_3038_p3 <= 
        ap_const_lv4_B when (icmp_ln1496_53_fu_3032_p2(0) = '1') else 
        ap_const_lv4_A;
    select_ln65_7_fu_1264_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_3_fu_1258_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_80_fu_3046_p3 <= 
        line_buffer_Array_V_1_0_3_q0 when (icmp_ln1496_53_fu_3032_p2(0) = '1') else 
        kernel_data_V_1_47;
    select_ln65_81_fu_3060_p3 <= 
        select_ln65_79_fu_3038_p3 when (icmp_ln1496_54_fu_3054_p2(0) = '1') else 
        select_ln65_77_fu_3016_p3;
    select_ln65_82_fu_3112_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_55_fu_3106_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_83_fu_3120_p3 <= 
        kernel_data_V_1_59 when (icmp_ln1496_55_fu_3106_p2(0) = '1') else 
        kernel_data_V_1_55;
    select_ln65_84_fu_2601_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_41_fu_2596_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_85_fu_3141_p3 <= 
        pool_window_15_V_3_reg_3405 when (icmp_ln1496_56_fu_3128_p2(0) = '1') else 
        kernel_data_V_1_63;
    select_ln65_86_fu_3154_p3 <= 
        select_ln65_90_fu_3133_p3 when (icmp_ln1496_57_fu_3148_p2(0) = '1') else 
        select_ln65_82_fu_3112_p3;
    select_ln65_87_fu_3197_p3 <= 
        sext_ln65_3_fu_3162_p1 when (icmp_ln1496_58_fu_3191_p2(0) = '1') else 
        select_ln65_81_fu_3060_p3;
    select_ln65_89_fu_2882_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_49_fu_2876_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_8_fu_1272_p3 <= 
        kernel_data_V_1_24 when (icmp_ln1496_3_fu_1258_p2(0) = '1') else 
        kernel_data_V_1_20;
    select_ln65_90_fu_3133_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_56_fu_3128_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_fu_1168_p3 <= 
        kernel_data_V_1_8 when (icmp_ln1496_fu_1158_p2(0) = '1') else 
        kernel_data_V_1_4;
        sext_ln65_1_fu_2098_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln65_44_fu_2090_p3),4));

        sext_ln65_2_fu_2630_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln65_65_fu_2622_p3),4));

        sext_ln65_3_fu_3162_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln65_86_fu_3154_p3),4));

        sext_ln65_fu_1566_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln65_22_fu_1558_p3),4));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_data_0_V_fu_1652_p17 <= 
        select_ln65_23_fu_1601_p3 when (icmp_ln1496_14_fu_1638_p2(0) = '1') else 
        zext_ln65_2_fu_1372_p1;
    tmp_data_1_V_fu_2184_p17 <= 
        select_ln65_45_fu_2133_p3 when (icmp_ln1496_29_fu_2170_p2(0) = '1') else 
        zext_ln65_5_fu_1904_p1;
    tmp_data_2_V_fu_2716_p17 <= 
        select_ln65_66_fu_2665_p3 when (icmp_ln1496_44_fu_2702_p2(0) = '1') else 
        zext_ln65_8_fu_2436_p1;
    tmp_data_3_V_fu_3248_p17 <= 
        select_ln65_87_fu_3197_p3 when (icmp_ln1496_59_fu_3234_p2(0) = '1') else 
        zext_ln65_11_fu_2968_p1;
    zext_ln65_10_fu_2808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_70_fu_2800_p3),3));
    zext_ln65_11_fu_2968_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_76_fu_2960_p3),4));
    zext_ln65_1_fu_1212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_6_fu_1204_p3),3));
    zext_ln65_2_fu_1372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_12_fu_1364_p3),4));
    zext_ln65_3_fu_1696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_15_fu_1690_p2),2));
    zext_ln65_4_fu_1744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_28_fu_1736_p3),3));
    zext_ln65_5_fu_1904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_34_fu_1896_p3),4));
    zext_ln65_6_fu_2228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_30_fu_2222_p2),2));
    zext_ln65_7_fu_2276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_49_fu_2268_p3),3));
    zext_ln65_8_fu_2436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_55_fu_2428_p3),4));
    zext_ln65_9_fu_2760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_45_fu_2754_p2),2));
    zext_ln65_fu_1164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_fu_1158_p2),2));
end behav;
