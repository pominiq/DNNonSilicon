-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv_2d_cl_array_array_ap_fixed_3u_config2_depthwise_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_0_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_0_V_TVALID : IN STD_LOGIC;
    data_V_data_0_V_TREADY : OUT STD_LOGIC;
    data_V_data_1_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_1_V_TVALID : IN STD_LOGIC;
    data_V_data_1_V_TREADY : OUT STD_LOGIC;
    data_V_data_2_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_2_V_TVALID : IN STD_LOGIC;
    data_V_data_2_V_TREADY : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC );
end;


architecture behav of depthwise_conv_2d_cl_array_array_ap_fixed_3u_config2_depthwise_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv26_3FFFD0B : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111110100001011";
    constant ap_const_lv26_1A7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000110100111";
    constant ap_const_lv26_190 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000110010000";
    constant ap_const_lv24_FFFFAE : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111110101110";
    constant ap_const_lv25_89 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010001001";
    constant ap_const_lv26_1A4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000110100100";
    constant ap_const_lv26_135 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100110101";
    constant ap_const_lv26_194 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000110010100";
    constant ap_const_lv26_1B5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000110110101";
    constant ap_const_lv26_3FFFE3B : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111000111011";
    constant ap_const_lv24_7B : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001111011";
    constant ap_const_lv24_4D : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001001101";
    constant ap_const_lv24_FFFF9E : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111110011110";
    constant ap_const_lv25_9D : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010011101";
    constant ap_const_lv25_87 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000111";
    constant ap_const_lv25_1FFFF32 : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111100110010";
    constant ap_const_lv25_1FFFF37 : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111100110111";
    constant ap_const_lv25_D2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000011010010";
    constant ap_const_lv24_FFFFA8 : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111110101000";
    constant ap_const_lv26_183 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000110000011";
    constant ap_const_lv26_1B0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000110110000";
    constant ap_const_lv26_3FFFE90 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111010010000";
    constant ap_const_lv24_76 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001110110";
    constant ap_const_lv26_3FFFE85 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111010000101";
    constant ap_const_lv26_3FFFCEC : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111110011101100";
    constant ap_const_lv25_F2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000011110010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal pX_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sX_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_1_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_12 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_13 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_14 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_21 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_22 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_23 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_15 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_16 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_17 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_24 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_25 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_26 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal line_buffer_Array_V_1_0_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1_0_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1_0_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_1_1_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1_1_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1_1_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_1_0_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1_0_1_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1_0_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_1_1_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1_1_1_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1_1_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_1_0_2_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1_0_2_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1_0_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_1_1_2_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1_1_2_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1_1_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_data_0_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal data_V_data_1_V_TDATA_blk_n : STD_LOGIC;
    signal data_V_data_2_V_TDATA_blk_n : STD_LOGIC;
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln63_reg_1603 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln266_4_reg_1644 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal grp_fu_716_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_762 : STD_LOGIC_VECTOR (15 downto 0);
    signal io_acc_block_signal_op122 : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln63_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln63_fu_772_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln63_reg_1607 : STD_LOGIC_VECTOR (10 downto 0);
    signal sX_3_load_reg_1612 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln266_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln266_reg_1617 : STD_LOGIC_VECTOR (0 downto 0);
    signal sY_3_load_reg_1622 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln266_4_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln266_4_reg_1627 : STD_LOGIC_VECTOR (0 downto 0);
    signal pY_3_load_reg_1632 : STD_LOGIC_VECTOR (31 downto 0);
    signal pX_3_load_reg_1638 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln266_4_fu_892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1118_fu_898_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1118_1504_fu_903_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1118_1505_fu_908_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1118_1506_fu_913_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1118_1507_fu_918_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1118_1508_fu_923_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1118_1514_fu_970_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln1118_1515_fu_975_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1118_1516_fu_980_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1118_1517_fu_985_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1118_1518_fu_990_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1118_1519_fu_995_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1118_1525_fu_1042_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sext_ln1118_1526_fu_1047_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1118_1527_fu_1052_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1118_1528_fu_1057_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1118_1529_fu_1062_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1118_1530_fu_1067_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_data_1_V_2_reg_1738 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_2_reg_1743 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_696_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln_reg_1748 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln708_s_reg_1753 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln708_2933_reg_1758 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_1509_fu_1228_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1118_1513_fu_1263_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1118_1521_fu_1268_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1118_1522_fu_1273_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1118_1524_fu_1278_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1118_1532_fu_1283_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln703_3682_fu_1288_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3682_reg_1803 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln288_fu_1294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln288_reg_1808 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln292_fu_1321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln292_reg_1812 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_2935_reg_1816 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln708_2936_reg_1821 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_706_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_11_reg_1826 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_746_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln708_2937_reg_1831 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_1533_fu_1352_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1118_1534_fu_1356_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln703_fu_1360_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_reg_1846 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_756_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3674_reg_1851 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln297_fu_1391_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln708_2940_reg_1861 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln708_20_reg_1866 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3676_fu_1405_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3676_reg_1871 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3686_fu_1410_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln703_3686_reg_1876 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_data_0_V_fu_1508_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_0_V_reg_1881 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln703_3679_fu_1524_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3679_reg_1886 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3684_fu_1535_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3684_reg_1891 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3685_fu_1540_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3685_reg_1896 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_reg_281 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal storemerge_i_i_reg_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln301_fu_1372_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1326_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal io_acc_block_signal_op320 : STD_LOGIC;
    signal ap_predicate_op320_write_state9 : BOOLEAN;
    signal ap_block_state9 : BOOLEAN;
    signal grp_fu_303_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_303_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_304_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_304_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_305_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_305_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_306_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_306_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_307_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_307_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_308_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_308_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_306_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_304_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_303_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_307_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_308_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_746_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_305_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_736_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_726_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_844_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_48_fu_864_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln266_5_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln266_6_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln266_3_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln266_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1118_fu_898_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1504_fu_903_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1505_fu_908_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1506_fu_913_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1507_fu_918_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1508_fu_923_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1514_fu_970_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1515_fu_975_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1516_fu_980_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1517_fu_985_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1518_fu_990_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1519_fu_995_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1525_fu_1042_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1526_fu_1047_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1527_fu_1052_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1528_fu_1057_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1529_fu_1062_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1530_fu_1067_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_s_fu_1198_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln708_2933_fu_1208_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1118_1509_fu_1228_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_1233_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1118_s_fu_1245_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1257_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1257_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1118_1513_fu_1263_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1521_fu_1268_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1522_fu_1273_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1524_fu_1278_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1532_fu_1283_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_5_fu_1218_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1257_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1304_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1118_1531_fu_1401_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1118_1520_fu_1398_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln708_2938_fu_1438_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln708_2938_fu_1438_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln708_2939_fu_1452_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln708_2939_fu_1452_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln703_3667_fu_1473_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_1169_fu_1428_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_fu_1422_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_1173_fu_1469_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_1172_fu_1466_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_1170_fu_1435_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3670_fu_1490_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3669_fu_1484_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3671_fu_1496_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3668_fu_1479_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3672_fu_1502_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_1512_fu_1432_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1118_1523_fu_1448_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln703_3678_fu_1514_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln708_1167_fu_1425_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_fu_1520_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3683_fu_1530_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_1171_fu_1462_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_2944_fu_1552_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln708_2944_fu_1552_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln708_1168_fu_1545_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_1174_fu_1548_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3677_fu_1566_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3680_fu_1572_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_1175_fu_1562_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_779_fu_1583_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3687_fu_1586_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3688_fu_1592_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_303_ce : STD_LOGIC;
    signal grp_fu_304_ce : STD_LOGIC;
    signal grp_fu_305_ce : STD_LOGIC;
    signal grp_fu_306_ce : STD_LOGIC;
    signal grp_fu_307_ce : STD_LOGIC;
    signal grp_fu_308_ce : STD_LOGIC;
    signal grp_fu_1257_ce : STD_LOGIC;
    signal grp_fu_1299_ce : STD_LOGIC;
    signal grp_fu_1304_ce : STD_LOGIC;
    signal grp_fu_1326_ce : STD_LOGIC;
    signal grp_fu_1331_ce : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal regslice_both_data_V_data_0_V_U_apdone_blk : STD_LOGIC;
    signal data_V_data_0_V_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_data_0_V_TVALID_int : STD_LOGIC;
    signal data_V_data_0_V_TREADY_int : STD_LOGIC;
    signal regslice_both_data_V_data_0_V_U_ack_in : STD_LOGIC;
    signal regslice_both_data_V_data_1_V_U_apdone_blk : STD_LOGIC;
    signal data_V_data_1_V_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_data_1_V_TVALID_int : STD_LOGIC;
    signal data_V_data_1_V_TREADY_int : STD_LOGIC;
    signal regslice_both_data_V_data_1_V_U_ack_in : STD_LOGIC;
    signal regslice_both_data_V_data_2_V_U_apdone_blk : STD_LOGIC;
    signal data_V_data_2_V_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_data_2_V_TVALID_int : STD_LOGIC;
    signal data_V_data_2_V_TREADY_int : STD_LOGIC;
    signal regslice_both_data_V_data_2_V_U_ack_in : STD_LOGIC;

    component myproject_mul_16s_11s_26_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_mul_16s_10ns_26_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_mul_16s_10s_26_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_mul_16s_10s_25_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component myproject_sub_21s_21s_21_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (20 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component myproject_add_32ns_32ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component depthwise_conv_2d_cl_array_array_ap_fixed_3u_config2_depthwise_s_line_buffer_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    line_buffer_Array_V_1_0_0_U : component depthwise_conv_2d_cl_array_array_ap_fixed_3u_config2_depthwise_s_line_buffer_bkb
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1F,
        ce0 => line_buffer_Array_V_1_0_0_ce0,
        we0 => line_buffer_Array_V_1_0_0_we0,
        d0 => data_V_data_0_V_TDATA_int,
        q0 => line_buffer_Array_V_1_0_0_q0);

    line_buffer_Array_V_1_1_0_U : component depthwise_conv_2d_cl_array_array_ap_fixed_3u_config2_depthwise_s_line_buffer_bkb
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1F,
        ce0 => line_buffer_Array_V_1_1_0_ce0,
        we0 => line_buffer_Array_V_1_1_0_we0,
        d0 => line_buffer_Array_V_1_0_0_q0,
        q0 => line_buffer_Array_V_1_1_0_q0);

    line_buffer_Array_V_1_0_1_U : component depthwise_conv_2d_cl_array_array_ap_fixed_3u_config2_depthwise_s_line_buffer_bkb
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1F,
        ce0 => line_buffer_Array_V_1_0_1_ce0,
        we0 => line_buffer_Array_V_1_0_1_we0,
        d0 => data_V_data_1_V_TDATA_int,
        q0 => line_buffer_Array_V_1_0_1_q0);

    line_buffer_Array_V_1_1_1_U : component depthwise_conv_2d_cl_array_array_ap_fixed_3u_config2_depthwise_s_line_buffer_bkb
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1F,
        ce0 => line_buffer_Array_V_1_1_1_ce0,
        we0 => line_buffer_Array_V_1_1_1_we0,
        d0 => line_buffer_Array_V_1_0_1_q0,
        q0 => line_buffer_Array_V_1_1_1_q0);

    line_buffer_Array_V_1_0_2_U : component depthwise_conv_2d_cl_array_array_ap_fixed_3u_config2_depthwise_s_line_buffer_bkb
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1F,
        ce0 => line_buffer_Array_V_1_0_2_ce0,
        we0 => line_buffer_Array_V_1_0_2_we0,
        d0 => data_V_data_2_V_TDATA_int,
        q0 => line_buffer_Array_V_1_0_2_q0);

    line_buffer_Array_V_1_1_2_U : component depthwise_conv_2d_cl_array_array_ap_fixed_3u_config2_depthwise_s_line_buffer_bkb
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1F,
        ce0 => line_buffer_Array_V_1_1_2_ce0,
        we0 => line_buffer_Array_V_1_1_2_we0,
        d0 => line_buffer_Array_V_1_0_2_q0,
        q0 => line_buffer_Array_V_1_1_2_q0);

    myproject_mul_16s_11s_26_4_1_U1 : component myproject_mul_16s_11s_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_303_p0,
        din1 => grp_fu_303_p1,
        ce => grp_fu_303_ce,
        dout => grp_fu_303_p2);

    myproject_mul_16s_10ns_26_4_1_U2 : component myproject_mul_16s_10ns_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_304_p0,
        din1 => grp_fu_304_p1,
        ce => grp_fu_304_ce,
        dout => grp_fu_304_p2);

    myproject_mul_16s_10s_26_4_1_U3 : component myproject_mul_16s_10s_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_305_p0,
        din1 => grp_fu_305_p1,
        ce => grp_fu_305_ce,
        dout => grp_fu_305_p2);

    myproject_mul_16s_10s_25_4_1_U4 : component myproject_mul_16s_10s_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_306_p0,
        din1 => grp_fu_306_p1,
        ce => grp_fu_306_ce,
        dout => grp_fu_306_p2);

    myproject_mul_16s_11s_26_4_1_U5 : component myproject_mul_16s_11s_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_307_p0,
        din1 => grp_fu_307_p1,
        ce => grp_fu_307_ce,
        dout => grp_fu_307_p2);

    myproject_mul_16s_11s_26_4_1_U6 : component myproject_mul_16s_11s_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_308_p0,
        din1 => grp_fu_308_p1,
        ce => grp_fu_308_ce,
        dout => grp_fu_308_p2);

    myproject_sub_21s_21s_21_2_1_U7 : component myproject_sub_21s_21s_21_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 21,
        din1_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1257_p0,
        din1 => grp_fu_1257_p1,
        ce => grp_fu_1257_ce,
        dout => grp_fu_1257_p2);

    myproject_add_32ns_32ns_32_2_1_U8 : component myproject_add_32ns_32ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => pX_3_load_reg_1638,
        din1 => ap_const_lv32_1,
        ce => grp_fu_1299_ce,
        dout => grp_fu_1299_p2);

    myproject_add_32ns_32ns_32_2_1_U9 : component myproject_add_32ns_32ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sX_3_load_reg_1612,
        din1 => ap_const_lv32_1,
        ce => grp_fu_1304_ce,
        dout => grp_fu_1304_p2);

    myproject_add_32ns_32ns_32_2_1_U10 : component myproject_add_32ns_32ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => pY_3_load_reg_1632,
        din1 => ap_const_lv32_1,
        ce => grp_fu_1326_ce,
        dout => grp_fu_1326_p2);

    myproject_add_32ns_32ns_32_2_1_U11 : component myproject_add_32ns_32ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sY_3_load_reg_1622,
        din1 => ap_const_lv32_1,
        ce => grp_fu_1331_ce,
        dout => grp_fu_1331_p2);

    regslice_both_data_V_data_0_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => data_V_data_0_V_TDATA,
        vld_in => data_V_data_0_V_TVALID,
        ack_in => regslice_both_data_V_data_0_V_U_ack_in,
        data_out => data_V_data_0_V_TDATA_int,
        vld_out => data_V_data_0_V_TVALID_int,
        ack_out => data_V_data_0_V_TREADY_int,
        apdone_blk => regslice_both_data_V_data_0_V_U_apdone_blk);

    regslice_both_data_V_data_1_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => data_V_data_1_V_TDATA,
        vld_in => data_V_data_1_V_TVALID,
        ack_in => regslice_both_data_V_data_1_V_U_ack_in,
        data_out => data_V_data_1_V_TDATA_int,
        vld_out => data_V_data_1_V_TVALID_int,
        ack_out => data_V_data_1_V_TREADY_int,
        apdone_blk => regslice_both_data_V_data_1_V_U_apdone_blk);

    regslice_both_data_V_data_2_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => data_V_data_2_V_TDATA,
        vld_in => data_V_data_2_V_TVALID,
        ack_in => regslice_both_data_V_data_2_V_U_ack_in,
        data_out => data_V_data_2_V_TDATA_int,
        vld_out => data_V_data_2_V_TVALID_int,
        ack_out => data_V_data_2_V_TREADY_int,
        apdone_blk => regslice_both_data_V_data_2_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln63_reg_1603 = ap_const_lv1_0))) then 
                indvar_flatten_reg_281 <= add_ln63_reg_1607;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_281 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    pX_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln288_reg_1808 = ap_const_lv1_0) and (icmp_ln63_reg_1603 = ap_const_lv1_0))) then 
                pX_3 <= grp_fu_1299_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1) and (icmp_ln288_fu_1294_p2 = ap_const_lv1_1))) then 
                pX_3 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    pY_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln288_reg_1808 = ap_const_lv1_1) and (icmp_ln292_reg_1812 = ap_const_lv1_0) and (icmp_ln63_reg_1603 = ap_const_lv1_0))) then 
                pY_3 <= grp_fu_1326_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1) and (icmp_ln292_fu_1321_p2 = ap_const_lv1_1) and (icmp_ln288_fu_1294_p2 = ap_const_lv1_1))) then 
                pY_3 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sX_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln288_reg_1808 = ap_const_lv1_0) and (icmp_ln63_reg_1603 = ap_const_lv1_0))) then 
                sX_3 <= select_ln301_fu_1372_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1) and (icmp_ln288_fu_1294_p2 = ap_const_lv1_1))) then 
                sX_3 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    storemerge_i_i_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1) and (icmp_ln292_fu_1321_p2 = ap_const_lv1_1) and (icmp_ln288_fu_1294_p2 = ap_const_lv1_1))) then 
                storemerge_i_i_reg_292 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln288_reg_1808 = ap_const_lv1_1) and (icmp_ln292_reg_1812 = ap_const_lv1_0) and (icmp_ln63_reg_1603 = ap_const_lv1_0))) then 
                storemerge_i_i_reg_292 <= select_ln297_fu_1391_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln63_reg_1607 <= add_ln63_fu_772_p2;
                icmp_ln63_reg_1603 <= icmp_ln63_fu_766_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = and_ln266_4_reg_1644) and (icmp_ln63_reg_1603 = ap_const_lv1_0))) then
                add_ln703_3674_reg_1851 <= grp_fu_756_p2;
                add_ln703_reg_1846 <= add_ln703_fu_1360_p2;
                trunc_ln708_11_reg_1826 <= grp_fu_304_p2(25 downto 10);
                trunc_ln708_2935_reg_1816 <= grp_fu_1257_p2(20 downto 10);
                trunc_ln708_2936_reg_1821 <= grp_fu_306_p2(24 downto 10);
                trunc_ln708_2937_reg_1831 <= grp_fu_746_p1(23 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln266_4_reg_1644) and (icmp_ln63_reg_1603 = ap_const_lv1_0))) then
                add_ln703_3676_reg_1871 <= add_ln703_3676_fu_1405_p2;
                add_ln703_3686_reg_1876 <= add_ln703_3686_fu_1410_p2;
                trunc_ln708_20_reg_1866 <= grp_fu_304_p2(25 downto 10);
                trunc_ln708_2940_reg_1861 <= grp_fu_306_p2(24 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = and_ln266_4_reg_1644) and (icmp_ln63_reg_1603 = ap_const_lv1_0))) then
                add_ln703_3679_reg_1886 <= add_ln703_3679_fu_1524_p2;
                add_ln703_3684_reg_1891 <= add_ln703_3684_fu_1535_p2;
                add_ln703_3685_reg_1896 <= add_ln703_3685_fu_1540_p2;
                tmp_data_0_V_reg_1881 <= tmp_data_0_V_fu_1508_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln266_4_reg_1644))) then
                add_ln703_3682_reg_1803 <= add_ln703_3682_fu_1288_p2;
                trunc_ln708_2933_reg_1758 <= trunc_ln708_2933_fu_1208_p1(23 downto 10);
                trunc_ln708_s_reg_1753 <= trunc_ln708_s_fu_1198_p1(23 downto 10);
                trunc_ln_reg_1748 <= grp_fu_306_p2(24 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln63_fu_766_p2 = ap_const_lv1_0))) then
                and_ln266_4_reg_1644 <= and_ln266_4_fu_892_p2;
                icmp_ln266_4_reg_1627 <= icmp_ln266_4_fu_834_p2;
                icmp_ln266_reg_1617 <= icmp_ln266_fu_824_p2;
                kernel_data_V_1_3 <= kernel_data_V_1_6;
                kernel_data_V_1_4 <= kernel_data_V_1_7;
                kernel_data_V_1_5 <= kernel_data_V_1_8;
                pX_3_load_reg_1638 <= pX_3;
                pY_3_load_reg_1632 <= pY_3;
                sX_3_load_reg_1612 <= sX_3;
                sY_3_load_reg_1622 <= sY_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1))) then
                icmp_ln288_reg_1808 <= icmp_ln288_fu_1294_p2;
                kernel_data_V_1_15 <= line_buffer_Array_V_1_0_0_q0;
                kernel_data_V_1_16 <= line_buffer_Array_V_1_0_1_q0;
                kernel_data_V_1_17 <= line_buffer_Array_V_1_0_2_q0;
                kernel_data_V_1_24 <= data_V_data_0_V_TDATA_int;
                kernel_data_V_1_25 <= data_V_data_1_V_TDATA_int;
                kernel_data_V_1_26 <= data_V_data_2_V_TDATA_int;
                kernel_data_V_1_6 <= line_buffer_Array_V_1_1_0_q0;
                kernel_data_V_1_7 <= line_buffer_Array_V_1_1_1_q0;
                kernel_data_V_1_8 <= line_buffer_Array_V_1_1_2_q0;
                tmp_data_1_V_2_reg_1738 <= data_V_data_1_V_TDATA_int;
                tmp_data_2_V_2_reg_1743 <= data_V_data_2_V_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1) and (icmp_ln288_fu_1294_p2 = ap_const_lv1_1))) then
                icmp_ln292_reg_1812 <= icmp_ln292_fu_1321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                kernel_data_V_1_12 <= kernel_data_V_1_15;
                kernel_data_V_1_13 <= kernel_data_V_1_16;
                kernel_data_V_1_14 <= kernel_data_V_1_17;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                kernel_data_V_1_21 <= kernel_data_V_1_24;
                kernel_data_V_1_22 <= kernel_data_V_1_25;
                kernel_data_V_1_23 <= kernel_data_V_1_26;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln266_4_reg_1644) and (icmp_ln63_reg_1603 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln266_4_reg_1644)))) then
                reg_762 <= grp_fu_303_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln288_reg_1808 = ap_const_lv1_1) and (icmp_ln63_reg_1603 = ap_const_lv1_0))) then
                sY_3 <= storemerge_i_i_reg_292;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state9, io_acc_block_signal_op122, icmp_ln63_fu_766_p2, ap_CS_fsm_state2, io_acc_block_signal_op320, ap_predicate_op320_write_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln63_fu_766_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if ((not(((io_acc_block_signal_op320 = ap_const_logic_0) and (ap_predicate_op320_write_state9 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln63_fu_772_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_281) + unsigned(ap_const_lv11_1));
    add_ln703_3667_fu_1473_p2 <= std_logic_vector(unsigned(reg_762) + unsigned(grp_fu_706_p4));
    add_ln703_3668_fu_1479_p2 <= std_logic_vector(unsigned(add_ln703_reg_1846) + unsigned(add_ln703_3667_fu_1473_p2));
    add_ln703_3669_fu_1484_p2 <= std_logic_vector(signed(sext_ln708_1169_fu_1428_p1) + signed(sext_ln708_fu_1422_p1));
    add_ln703_3670_fu_1490_p2 <= std_logic_vector(signed(sext_ln708_1173_fu_1469_p1) + signed(sext_ln708_1172_fu_1466_p1));
    add_ln703_3671_fu_1496_p2 <= std_logic_vector(signed(sext_ln708_1170_fu_1435_p1) + signed(add_ln703_3670_fu_1490_p2));
    add_ln703_3672_fu_1502_p2 <= std_logic_vector(unsigned(add_ln703_3669_fu_1484_p2) + unsigned(add_ln703_3671_fu_1496_p2));
    add_ln703_3676_fu_1405_p2 <= std_logic_vector(unsigned(add_ln703_3674_reg_1851) + unsigned(grp_fu_756_p2));
    add_ln703_3677_fu_1566_p2 <= std_logic_vector(signed(sext_ln708_1168_fu_1545_p1) + signed(sext_ln708_1174_fu_1548_p1));
    add_ln703_3678_fu_1514_p2 <= std_logic_vector(signed(sext_ln1118_1512_fu_1432_p1) + signed(sext_ln1118_1523_fu_1448_p1));
    add_ln703_3679_fu_1524_p2 <= std_logic_vector(signed(sext_ln708_1167_fu_1425_p1) + signed(sext_ln703_fu_1520_p1));
    add_ln703_3680_fu_1572_p2 <= std_logic_vector(unsigned(add_ln703_3677_fu_1566_p2) + unsigned(add_ln703_3679_reg_1886));
    add_ln703_3682_fu_1288_p2 <= std_logic_vector(unsigned(grp_fu_706_p4) + unsigned(trunc_ln708_5_fu_1218_p4));
    add_ln703_3683_fu_1530_p2 <= std_logic_vector(unsigned(trunc_ln708_11_reg_1826) + unsigned(grp_fu_726_p4));
    add_ln703_3684_fu_1535_p2 <= std_logic_vector(unsigned(add_ln703_3682_reg_1803) + unsigned(add_ln703_3683_fu_1530_p2));
    add_ln703_3685_fu_1540_p2 <= std_logic_vector(signed(sext_ln708_1171_fu_1462_p1) + signed(trunc_ln708_20_reg_1866));
    add_ln703_3686_fu_1410_p2 <= std_logic_vector(signed(sext_ln1118_1531_fu_1401_p1) + signed(sext_ln1118_1520_fu_1398_p1));
    add_ln703_3687_fu_1586_p2 <= std_logic_vector(signed(sext_ln708_1175_fu_1562_p1) + signed(sext_ln703_779_fu_1583_p1));
    add_ln703_3688_fu_1592_p2 <= std_logic_vector(unsigned(add_ln703_3685_reg_1896) + unsigned(add_ln703_3687_fu_1586_p2));
    add_ln703_fu_1360_p2 <= std_logic_vector(unsigned(grp_fu_716_p4) + unsigned(reg_762));
    and_ln266_3_fu_886_p2 <= (icmp_ln266_6_fu_874_p2 and icmp_ln266_5_fu_854_p2);
    and_ln266_4_fu_892_p2 <= (and_ln266_fu_880_p2 and and_ln266_3_fu_886_p2);
    and_ln266_fu_880_p2 <= (icmp_ln266_fu_824_p2 and icmp_ln266_4_fu_834_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state9_assign_proc : process(io_acc_block_signal_op320, ap_predicate_op320_write_state9)
    begin
                ap_block_state9 <= ((io_acc_block_signal_op320 = ap_const_logic_0) and (ap_predicate_op320_write_state9 = ap_const_boolean_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op320_write_state9_assign_proc : process(icmp_ln63_reg_1603, and_ln266_4_reg_1644)
    begin
                ap_predicate_op320_write_state9 <= ((ap_const_lv1_1 = and_ln266_4_reg_1644) and (icmp_ln63_reg_1603 = ap_const_lv1_0));
    end process;

    ap_ready <= internal_ap_ready;

    data_V_data_0_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state5, data_V_data_0_V_TVALID_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_V_data_0_V_TDATA_blk_n <= data_V_data_0_V_TVALID_int;
        else 
            data_V_data_0_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_TREADY_assign_proc : process(data_V_data_0_V_TVALID, regslice_both_data_V_data_0_V_U_ack_in)
    begin
        if (((data_V_data_0_V_TVALID = ap_const_logic_1) and (regslice_both_data_V_data_0_V_U_ack_in = ap_const_logic_1))) then 
            data_V_data_0_V_TREADY <= ap_const_logic_1;
        else 
            data_V_data_0_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_0_V_TREADY_int_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1))) then 
            data_V_data_0_V_TREADY_int <= ap_const_logic_1;
        else 
            data_V_data_0_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state5, data_V_data_1_V_TVALID_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_V_data_1_V_TDATA_blk_n <= data_V_data_1_V_TVALID_int;
        else 
            data_V_data_1_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_TREADY_assign_proc : process(data_V_data_1_V_TVALID, regslice_both_data_V_data_1_V_U_ack_in)
    begin
        if (((data_V_data_1_V_TVALID = ap_const_logic_1) and (regslice_both_data_V_data_1_V_U_ack_in = ap_const_logic_1))) then 
            data_V_data_1_V_TREADY <= ap_const_logic_1;
        else 
            data_V_data_1_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_TREADY_int_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1))) then 
            data_V_data_1_V_TREADY_int <= ap_const_logic_1;
        else 
            data_V_data_1_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state5, data_V_data_2_V_TVALID_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_V_data_2_V_TDATA_blk_n <= data_V_data_2_V_TVALID_int;
        else 
            data_V_data_2_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_TREADY_assign_proc : process(data_V_data_2_V_TVALID, regslice_both_data_V_data_2_V_U_ack_in)
    begin
        if (((data_V_data_2_V_TVALID = ap_const_logic_1) and (regslice_both_data_V_data_2_V_U_ack_in = ap_const_logic_1))) then 
            data_V_data_2_V_TREADY <= ap_const_logic_1;
        else 
            data_V_data_2_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_TREADY_int_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1))) then 
            data_V_data_2_V_TREADY_int <= ap_const_logic_1;
        else 
            data_V_data_2_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1257_ce_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1)))) then 
            grp_fu_1257_ce <= ap_const_logic_1;
        else 
            grp_fu_1257_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_1257_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_s_fu_1245_p3),21));

        grp_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_1233_p3),21));


    grp_fu_1299_ce_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1)))) then 
            grp_fu_1299_ce <= ap_const_logic_1;
        else 
            grp_fu_1299_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1304_ce_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1)))) then 
            grp_fu_1304_ce <= ap_const_logic_1;
        else 
            grp_fu_1304_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1326_ce_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1)))) then 
            grp_fu_1326_ce <= ap_const_logic_1;
        else 
            grp_fu_1326_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1331_ce_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1)))) then 
            grp_fu_1331_ce <= ap_const_logic_1;
        else 
            grp_fu_1331_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_303_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, io_acc_block_signal_op122, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, io_acc_block_signal_op320, ap_predicate_op320_write_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (not(((io_acc_block_signal_op320 = ap_const_logic_0) and (ap_predicate_op320_write_state9 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1)))) then 
            grp_fu_303_ce <= ap_const_logic_1;
        else 
            grp_fu_303_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_303_p0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, sext_ln1118_1506_fu_913_p1, ap_CS_fsm_state3, sext_ln1118_1517_fu_985_p1, ap_CS_fsm_state4, sext_ln1118_1528_fu_1057_p1, sext_ln1118_1522_fu_1273_p1, ap_CS_fsm_state6, sext_ln1118_1534_fu_1356_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_303_p0 <= sext_ln1118_1534_fu_1356_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_303_p0 <= sext_ln1118_1522_fu_1273_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_303_p0 <= sext_ln1118_1528_fu_1057_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_303_p0 <= sext_ln1118_1517_fu_985_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_303_p0 <= sext_ln1118_1506_fu_913_p1(16 - 1 downto 0);
        else 
            grp_fu_303_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_303_p1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_303_p1 <= ap_const_lv25_89(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_303_p1 <= ap_const_lv24_FFFFAE(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_303_p1 <= ap_const_lv26_190(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_303_p1 <= ap_const_lv26_1A7(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_303_p1 <= ap_const_lv26_3FFFD0B(11 - 1 downto 0);
        else 
            grp_fu_303_p1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_304_ce_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1)))) then 
            grp_fu_304_ce <= ap_const_logic_1;
        else 
            grp_fu_304_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_304_p0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, sext_ln1118_1505_fu_908_p1, ap_CS_fsm_state3, sext_ln1118_1516_fu_980_p1, ap_CS_fsm_state4, sext_ln1118_1527_fu_1052_p1, sext_ln1118_1521_fu_1268_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_304_p0 <= sext_ln1118_1521_fu_1268_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_304_p0 <= sext_ln1118_1527_fu_1052_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_304_p0 <= sext_ln1118_1516_fu_980_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_304_p0 <= sext_ln1118_1505_fu_908_p1(16 - 1 downto 0);
        else 
            grp_fu_304_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_304_p1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_304_p1 <= ap_const_lv26_1B5(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_304_p1 <= ap_const_lv26_194(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_304_p1 <= ap_const_lv26_135(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_304_p1 <= ap_const_lv26_1A4(10 - 1 downto 0);
        else 
            grp_fu_304_p1 <= "XXXXXXXXXX";
        end if; 
    end process;


    grp_fu_305_ce_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1)))) then 
            grp_fu_305_ce <= ap_const_logic_1;
        else 
            grp_fu_305_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_305_p0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, sext_ln1118_1508_fu_923_p1, ap_CS_fsm_state3, sext_ln1118_1519_fu_995_p1, ap_CS_fsm_state4, sext_ln1118_1530_fu_1067_p1, sext_ln1118_1532_fu_1283_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_305_p0 <= sext_ln1118_1532_fu_1283_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_305_p0 <= sext_ln1118_1530_fu_1067_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_305_p0 <= sext_ln1118_1519_fu_995_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_305_p0 <= sext_ln1118_1508_fu_923_p1(16 - 1 downto 0);
        else 
            grp_fu_305_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_305_p1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_305_p1 <= ap_const_lv24_FFFF9E(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_305_p1 <= ap_const_lv24_4D(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_305_p1 <= ap_const_lv24_7B(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_305_p1 <= ap_const_lv26_3FFFE3B(10 - 1 downto 0);
        else 
            grp_fu_305_p1 <= "XXXXXXXXXX";
        end if; 
    end process;


    grp_fu_306_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, io_acc_block_signal_op122, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, io_acc_block_signal_op320, ap_predicate_op320_write_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (not(((io_acc_block_signal_op320 = ap_const_logic_0) and (ap_predicate_op320_write_state9 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1)))) then 
            grp_fu_306_ce <= ap_const_logic_1;
        else 
            grp_fu_306_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_306_p0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, sext_ln1118_fu_898_p1, sext_ln1118_1514_fu_970_p1, ap_CS_fsm_state3, sext_ln1118_1525_fu_1042_p1, ap_CS_fsm_state4, sext_ln1118_1509_fu_1228_p1, ap_CS_fsm_state6, sext_ln1118_1533_fu_1352_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_306_p0 <= sext_ln1118_1533_fu_1352_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_306_p0 <= sext_ln1118_1509_fu_1228_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_306_p0 <= sext_ln1118_1525_fu_1042_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_306_p0 <= sext_ln1118_1514_fu_970_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_306_p0 <= sext_ln1118_fu_898_p1(16 - 1 downto 0);
        else 
            grp_fu_306_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_306_p1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_306_p1 <= ap_const_lv25_D2(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_306_p1 <= ap_const_lv25_1FFFF37(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_306_p1 <= ap_const_lv25_1FFFF32(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_306_p1 <= ap_const_lv25_87(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_306_p1 <= ap_const_lv25_9D(10 - 1 downto 0);
        else 
            grp_fu_306_p1 <= "XXXXXXXXXX";
        end if; 
    end process;


    grp_fu_307_ce_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1)))) then 
            grp_fu_307_ce <= ap_const_logic_1;
        else 
            grp_fu_307_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_307_p0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, sext_ln1118_1504_fu_903_p1, ap_CS_fsm_state3, sext_ln1118_1515_fu_975_p1, ap_CS_fsm_state4, sext_ln1118_1526_fu_1047_p1, sext_ln1118_1513_fu_1263_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_307_p0 <= sext_ln1118_1513_fu_1263_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_307_p0 <= sext_ln1118_1526_fu_1047_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_307_p0 <= sext_ln1118_1515_fu_975_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_307_p0 <= sext_ln1118_1504_fu_903_p1(16 - 1 downto 0);
        else 
            grp_fu_307_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_307_p1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_307_p1 <= ap_const_lv26_3FFFE90(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_307_p1 <= ap_const_lv26_1B0(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_307_p1 <= ap_const_lv26_183(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_307_p1 <= ap_const_lv24_FFFFA8(11 - 1 downto 0);
        else 
            grp_fu_307_p1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_308_ce_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1)))) then 
            grp_fu_308_ce <= ap_const_logic_1;
        else 
            grp_fu_308_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_308_p0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, sext_ln1118_1507_fu_918_p1, ap_CS_fsm_state3, sext_ln1118_1518_fu_990_p1, ap_CS_fsm_state4, sext_ln1118_1529_fu_1062_p1, sext_ln1118_1524_fu_1278_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_308_p0 <= sext_ln1118_1524_fu_1278_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_308_p0 <= sext_ln1118_1529_fu_1062_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_308_p0 <= sext_ln1118_1518_fu_990_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_308_p0 <= sext_ln1118_1507_fu_918_p1(16 - 1 downto 0);
        else 
            grp_fu_308_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_308_p1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_308_p1 <= ap_const_lv25_F2(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_308_p1 <= ap_const_lv26_3FFFCEC(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_308_p1 <= ap_const_lv26_3FFFE85(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_308_p1 <= ap_const_lv24_76(11 - 1 downto 0);
        else 
            grp_fu_308_p1 <= "XXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_696_p4 <= grp_fu_306_p2(24 downto 10);
    grp_fu_706_p4 <= grp_fu_304_p2(25 downto 10);
    grp_fu_716_p4 <= grp_fu_303_p2(25 downto 10);
    grp_fu_726_p4 <= grp_fu_307_p2(25 downto 10);
    grp_fu_736_p4 <= grp_fu_308_p2(25 downto 10);
    grp_fu_746_p1 <= grp_fu_305_p2(24 - 1 downto 0);
    grp_fu_746_p4 <= grp_fu_746_p1(23 downto 10);
    grp_fu_756_p2 <= std_logic_vector(unsigned(grp_fu_736_p4) + unsigned(grp_fu_726_p4));
    icmp_ln266_4_fu_834_p2 <= "1" when (sY_3 = ap_const_lv32_2) else "0";
    icmp_ln266_5_fu_854_p2 <= "1" when (signed(tmp_fu_844_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln266_6_fu_874_p2 <= "1" when (signed(tmp_48_fu_864_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln266_fu_824_p2 <= "1" when (sX_3 = ap_const_lv32_2) else "0";
    icmp_ln288_fu_1294_p2 <= "1" when (pX_3_load_reg_1638 = ap_const_lv32_1F) else "0";
    icmp_ln292_fu_1321_p2 <= "1" when (pY_3_load_reg_1632 = ap_const_lv32_1F) else "0";
    icmp_ln63_fu_766_p2 <= "1" when (indvar_flatten_reg_281 = ap_const_lv11_400) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op122 <= (data_V_data_2_V_TVALID_int and data_V_data_1_V_TVALID_int and data_V_data_0_V_TVALID_int);
    io_acc_block_signal_op320 <= (res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);

    line_buffer_Array_V_1_0_0_ce0_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_0_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_0_0_we0_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_0_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_0_1_ce0_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_0_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_0_1_we0_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_0_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_0_2_ce0_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_0_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_0_2_we0_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_0_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_1_0_ce0_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_1_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_1_0_we0_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_1_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_1_1_ce0_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_1_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_1_1_we0_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_1_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_1_2_ce0_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_1_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_1_2_we0_assign_proc : process(ap_CS_fsm_state5, io_acc_block_signal_op122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (io_acc_block_signal_op122 = ap_const_logic_1))) then 
            line_buffer_Array_V_1_1_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_CS_fsm_state9, icmp_ln63_reg_1603, and_ln266_4_reg_1644)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln266_4_reg_1644) and (icmp_ln63_reg_1603 = ap_const_lv1_0))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= tmp_data_0_V_reg_1881;

    res_V_data_0_V_write_assign_proc : process(ap_CS_fsm_state9, io_acc_block_signal_op320, ap_predicate_op320_write_state9)
    begin
        if ((not(((io_acc_block_signal_op320 = ap_const_logic_0) and (ap_predicate_op320_write_state9 = ap_const_boolean_1))) and (ap_predicate_op320_write_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_CS_fsm_state9, icmp_ln63_reg_1603, and_ln266_4_reg_1644)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln266_4_reg_1644) and (icmp_ln63_reg_1603 = ap_const_lv1_0))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= std_logic_vector(unsigned(add_ln703_3676_reg_1871) + unsigned(add_ln703_3680_fu_1572_p2));

    res_V_data_1_V_write_assign_proc : process(ap_CS_fsm_state9, io_acc_block_signal_op320, ap_predicate_op320_write_state9)
    begin
        if ((not(((io_acc_block_signal_op320 = ap_const_logic_0) and (ap_predicate_op320_write_state9 = ap_const_boolean_1))) and (ap_predicate_op320_write_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_CS_fsm_state9, icmp_ln63_reg_1603, and_ln266_4_reg_1644)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln266_4_reg_1644) and (icmp_ln63_reg_1603 = ap_const_lv1_0))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= std_logic_vector(unsigned(add_ln703_3684_reg_1891) + unsigned(add_ln703_3688_fu_1592_p2));

    res_V_data_2_V_write_assign_proc : process(ap_CS_fsm_state9, io_acc_block_signal_op320, ap_predicate_op320_write_state9)
    begin
        if ((not(((io_acc_block_signal_op320 = ap_const_logic_0) and (ap_predicate_op320_write_state9 = ap_const_boolean_1))) and (ap_predicate_op320_write_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln297_fu_1391_p3 <= 
        ap_const_lv32_2 when (icmp_ln266_4_reg_1627(0) = '1') else 
        grp_fu_1331_p2;
    select_ln301_fu_1372_p3 <= 
        ap_const_lv32_2 when (icmp_ln266_reg_1617(0) = '1') else 
        grp_fu_1304_p2;
    sext_ln1118_1504_fu_903_p0 <= kernel_data_V_1_4;
        sext_ln1118_1504_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1504_fu_903_p0),24));

    sext_ln1118_1505_fu_908_p0 <= kernel_data_V_1_5;
        sext_ln1118_1505_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1505_fu_908_p0),26));

    sext_ln1118_1506_fu_913_p0 <= kernel_data_V_1_6;
        sext_ln1118_1506_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1506_fu_913_p0),26));

    sext_ln1118_1507_fu_918_p0 <= kernel_data_V_1_7;
        sext_ln1118_1507_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1507_fu_918_p0),24));

    sext_ln1118_1508_fu_923_p0 <= kernel_data_V_1_8;
        sext_ln1118_1508_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1508_fu_923_p0),26));

    sext_ln1118_1509_fu_1228_p0 <= line_buffer_Array_V_1_1_0_q0;
        sext_ln1118_1509_fu_1228_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1509_fu_1228_p0),25));

        sext_ln1118_1512_fu_1432_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_2935_reg_1816),15));

    sext_ln1118_1513_fu_1263_p0 <= line_buffer_Array_V_1_1_2_q0;
        sext_ln1118_1513_fu_1263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1513_fu_1263_p0),26));

    sext_ln1118_1514_fu_970_p0 <= kernel_data_V_1_12;
        sext_ln1118_1514_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1514_fu_970_p0),25));

    sext_ln1118_1515_fu_975_p0 <= kernel_data_V_1_13;
        sext_ln1118_1515_fu_975_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1515_fu_975_p0),26));

    sext_ln1118_1516_fu_980_p0 <= kernel_data_V_1_14;
        sext_ln1118_1516_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1516_fu_980_p0),26));

    sext_ln1118_1517_fu_985_p0 <= kernel_data_V_1_15;
        sext_ln1118_1517_fu_985_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1517_fu_985_p0),26));

    sext_ln1118_1518_fu_990_p0 <= kernel_data_V_1_16;
        sext_ln1118_1518_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1518_fu_990_p0),26));

    sext_ln1118_1519_fu_995_p0 <= kernel_data_V_1_17;
        sext_ln1118_1519_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1519_fu_995_p0),24));

        sext_ln1118_1520_fu_1398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_2937_reg_1831),15));

    sext_ln1118_1521_fu_1268_p0 <= line_buffer_Array_V_1_0_0_q0;
        sext_ln1118_1521_fu_1268_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1521_fu_1268_p0),26));

    sext_ln1118_1522_fu_1273_p0 <= line_buffer_Array_V_1_0_1_q0;
        sext_ln1118_1522_fu_1273_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1522_fu_1273_p0),24));

        sext_ln1118_1523_fu_1448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_2938_fu_1438_p4),15));

    sext_ln1118_1524_fu_1278_p0 <= line_buffer_Array_V_1_0_2_q0;
        sext_ln1118_1524_fu_1278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1524_fu_1278_p0),25));

    sext_ln1118_1525_fu_1042_p0 <= kernel_data_V_1_21;
        sext_ln1118_1525_fu_1042_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1525_fu_1042_p0),25));

    sext_ln1118_1526_fu_1047_p0 <= kernel_data_V_1_22;
        sext_ln1118_1526_fu_1047_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1526_fu_1047_p0),26));

    sext_ln1118_1527_fu_1052_p0 <= kernel_data_V_1_23;
        sext_ln1118_1527_fu_1052_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1527_fu_1052_p0),26));

    sext_ln1118_1528_fu_1057_p0 <= kernel_data_V_1_24;
        sext_ln1118_1528_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1528_fu_1057_p0),26));

    sext_ln1118_1529_fu_1062_p0 <= kernel_data_V_1_25;
        sext_ln1118_1529_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1529_fu_1062_p0),26));

    sext_ln1118_1530_fu_1067_p0 <= kernel_data_V_1_26;
        sext_ln1118_1530_fu_1067_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1530_fu_1067_p0),24));

        sext_ln1118_1531_fu_1401_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_746_p4),15));

    sext_ln1118_1532_fu_1283_p0 <= data_V_data_0_V_TDATA_int;
        sext_ln1118_1532_fu_1283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1532_fu_1283_p0),24));

        sext_ln1118_1533_fu_1352_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_1_V_2_reg_1738),25));

        sext_ln1118_1534_fu_1356_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_2_V_2_reg_1743),25));

    sext_ln1118_fu_898_p0 <= kernel_data_V_1_3;
        sext_ln1118_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_fu_898_p0),25));

        sext_ln703_779_fu_1583_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_3686_reg_1876),16));

        sext_ln703_fu_1520_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_3678_fu_1514_p2),16));

        sext_ln708_1167_fu_1425_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_s_reg_1753),16));

        sext_ln708_1168_fu_1545_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_2933_reg_1758),16));

        sext_ln708_1169_fu_1428_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_696_p4),16));

        sext_ln708_1170_fu_1435_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_2936_reg_1821),16));

        sext_ln708_1171_fu_1462_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_2939_fu_1452_p4),16));

        sext_ln708_1172_fu_1466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_2940_reg_1861),16));

        sext_ln708_1173_fu_1469_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_746_p4),16));

        sext_ln708_1174_fu_1548_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_696_p4),16));

        sext_ln708_1175_fu_1562_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_2944_fu_1552_p4),16));

        sext_ln708_fu_1422_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_1748),16));

    shl_ln1118_s_fu_1245_p3 <= (line_buffer_Array_V_1_1_1_q0 & ap_const_lv1_0);
    shl_ln_fu_1233_p3 <= (line_buffer_Array_V_1_1_1_q0 & ap_const_lv4_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_48_fu_864_p4 <= pX_3(31 downto 1);
    tmp_data_0_V_fu_1508_p2 <= std_logic_vector(unsigned(add_ln703_3668_fu_1479_p2) + unsigned(add_ln703_3672_fu_1502_p2));
    tmp_fu_844_p4 <= pY_3(31 downto 1);
    trunc_ln708_2933_fu_1208_p1 <= grp_fu_308_p2(24 - 1 downto 0);
    trunc_ln708_2938_fu_1438_p1 <= grp_fu_303_p2(24 - 1 downto 0);
    trunc_ln708_2938_fu_1438_p4 <= trunc_ln708_2938_fu_1438_p1(23 downto 10);
    trunc_ln708_2939_fu_1452_p1 <= grp_fu_308_p2(25 - 1 downto 0);
    trunc_ln708_2939_fu_1452_p4 <= trunc_ln708_2939_fu_1452_p1(24 downto 10);
    trunc_ln708_2944_fu_1552_p1 <= grp_fu_303_p2(25 - 1 downto 0);
    trunc_ln708_2944_fu_1552_p4 <= trunc_ln708_2944_fu_1552_p1(24 downto 10);
    trunc_ln708_5_fu_1218_p4 <= grp_fu_305_p2(25 downto 10);
    trunc_ln708_s_fu_1198_p1 <= grp_fu_307_p2(24 - 1 downto 0);
end behav;
