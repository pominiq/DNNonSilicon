// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config16_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        res_V_data_0_V_TDATA,
        res_V_data_0_V_TVALID,
        res_V_data_0_V_TREADY,
        res_V_data_1_V_TDATA,
        res_V_data_1_V_TVALID,
        res_V_data_1_V_TREADY,
        res_V_data_2_V_TDATA,
        res_V_data_2_V_TVALID,
        res_V_data_2_V_TREADY,
        res_V_data_3_V_TDATA,
        res_V_data_3_V_TVALID,
        res_V_data_3_V_TREADY,
        res_V_data_4_V_TDATA,
        res_V_data_4_V_TVALID,
        res_V_data_4_V_TREADY,
        res_V_data_5_V_TDATA,
        res_V_data_5_V_TVALID,
        res_V_data_5_V_TREADY,
        res_V_data_6_V_TDATA,
        res_V_data_6_V_TVALID,
        res_V_data_6_V_TREADY,
        res_V_data_7_V_TDATA,
        res_V_data_7_V_TVALID,
        res_V_data_7_V_TREADY,
        res_V_data_8_V_TDATA,
        res_V_data_8_V_TVALID,
        res_V_data_8_V_TREADY,
        res_V_data_9_V_TDATA,
        res_V_data_9_V_TVALID,
        res_V_data_9_V_TREADY,
        data_V_data_0_V_blk_n,
        data_V_data_1_V_blk_n,
        data_V_data_2_V_blk_n,
        data_V_data_3_V_blk_n,
        data_V_data_4_V_blk_n,
        data_V_data_5_V_blk_n,
        data_V_data_6_V_blk_n,
        data_V_data_7_V_blk_n,
        data_V_data_8_V_blk_n,
        data_V_data_9_V_blk_n,
        res_V_data_0_V_TDATA_blk_n,
        res_V_data_1_V_TDATA_blk_n,
        res_V_data_2_V_TDATA_blk_n,
        res_V_data_3_V_TDATA_blk_n,
        res_V_data_4_V_TDATA_blk_n,
        res_V_data_5_V_TDATA_blk_n,
        res_V_data_6_V_TDATA_blk_n,
        res_V_data_7_V_TDATA_blk_n,
        res_V_data_8_V_TDATA_blk_n,
        res_V_data_9_V_TDATA_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 10'd1;
parameter    ap_ST_fsm_pp0_stage1 = 10'd2;
parameter    ap_ST_fsm_pp0_stage2 = 10'd4;
parameter    ap_ST_fsm_pp0_stage3 = 10'd8;
parameter    ap_ST_fsm_pp0_stage4 = 10'd16;
parameter    ap_ST_fsm_pp0_stage5 = 10'd32;
parameter    ap_ST_fsm_pp0_stage6 = 10'd64;
parameter    ap_ST_fsm_pp0_stage7 = 10'd128;
parameter    ap_ST_fsm_pp0_stage8 = 10'd256;
parameter    ap_ST_fsm_pp0_stage9 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [15:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [15:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
output  [15:0] res_V_data_0_V_TDATA;
output   res_V_data_0_V_TVALID;
input   res_V_data_0_V_TREADY;
output  [15:0] res_V_data_1_V_TDATA;
output   res_V_data_1_V_TVALID;
input   res_V_data_1_V_TREADY;
output  [15:0] res_V_data_2_V_TDATA;
output   res_V_data_2_V_TVALID;
input   res_V_data_2_V_TREADY;
output  [15:0] res_V_data_3_V_TDATA;
output   res_V_data_3_V_TVALID;
input   res_V_data_3_V_TREADY;
output  [15:0] res_V_data_4_V_TDATA;
output   res_V_data_4_V_TVALID;
input   res_V_data_4_V_TREADY;
output  [15:0] res_V_data_5_V_TDATA;
output   res_V_data_5_V_TVALID;
input   res_V_data_5_V_TREADY;
output  [15:0] res_V_data_6_V_TDATA;
output   res_V_data_6_V_TVALID;
input   res_V_data_6_V_TREADY;
output  [15:0] res_V_data_7_V_TDATA;
output   res_V_data_7_V_TVALID;
input   res_V_data_7_V_TREADY;
output  [15:0] res_V_data_8_V_TDATA;
output   res_V_data_8_V_TVALID;
input   res_V_data_8_V_TREADY;
output  [15:0] res_V_data_9_V_TDATA;
output   res_V_data_9_V_TVALID;
input   res_V_data_9_V_TREADY;
output   data_V_data_0_V_blk_n;
output   data_V_data_1_V_blk_n;
output   data_V_data_2_V_blk_n;
output   data_V_data_3_V_blk_n;
output   data_V_data_4_V_blk_n;
output   data_V_data_5_V_blk_n;
output   data_V_data_6_V_blk_n;
output   data_V_data_7_V_blk_n;
output   data_V_data_8_V_blk_n;
output   data_V_data_9_V_blk_n;
output   res_V_data_0_V_TDATA_blk_n;
output   res_V_data_1_V_TDATA_blk_n;
output   res_V_data_2_V_TDATA_blk_n;
output   res_V_data_3_V_TDATA_blk_n;
output   res_V_data_4_V_TDATA_blk_n;
output   res_V_data_5_V_TDATA_blk_n;
output   res_V_data_6_V_TDATA_blk_n;
output   res_V_data_7_V_TDATA_blk_n;
output   res_V_data_8_V_TDATA_blk_n;
output   res_V_data_9_V_TDATA_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg res_V_data_0_V_TVALID;
reg res_V_data_1_V_TVALID;
reg res_V_data_2_V_TVALID;
reg res_V_data_3_V_TVALID;
reg res_V_data_4_V_TVALID;
reg res_V_data_5_V_TVALID;
reg res_V_data_6_V_TVALID;
reg res_V_data_7_V_TVALID;
reg res_V_data_8_V_TVALID;
reg res_V_data_9_V_TVALID;
reg data_V_data_0_V_blk_n;
reg data_V_data_1_V_blk_n;
reg data_V_data_2_V_blk_n;
reg data_V_data_3_V_blk_n;
reg data_V_data_4_V_blk_n;
reg data_V_data_5_V_blk_n;
reg data_V_data_6_V_blk_n;
reg data_V_data_7_V_blk_n;
reg data_V_data_8_V_blk_n;
reg data_V_data_9_V_blk_n;
reg res_V_data_0_V_TDATA_blk_n;
reg res_V_data_1_V_TDATA_blk_n;
reg res_V_data_2_V_TDATA_blk_n;
reg res_V_data_3_V_TDATA_blk_n;
reg res_V_data_4_V_TDATA_blk_n;
reg res_V_data_5_V_TDATA_blk_n;
reg res_V_data_6_V_TDATA_blk_n;
reg res_V_data_7_V_TDATA_blk_n;
reg res_V_data_8_V_TDATA_blk_n;
reg res_V_data_9_V_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_state20_pp0_stage9_iter1;
wire    ap_block_state30_pp0_stage9_iter2;
wire    ap_block_pp0_stage9_11001;
reg   [9:0] exp_table3_address0;
reg    exp_table3_ce0;
wire   [16:0] exp_table3_q0;
wire   [9:0] invert_table4_address0;
reg    invert_table4_ce0;
wire   [17:0] invert_table4_q0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    io_acc_block_signal_op43;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state21_pp0_stage0_iter2;
wire    ap_block_state31_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] y_V_1_fu_1307_p3;
reg   [9:0] y_V_1_reg_2006;
wire   [9:0] y_V_2_fu_1341_p3;
reg   [9:0] y_V_2_reg_2011;
wire   [9:0] y_V_3_fu_1375_p3;
reg   [9:0] y_V_3_reg_2016;
wire   [9:0] y_V_4_fu_1409_p3;
reg   [9:0] y_V_4_reg_2021;
wire   [9:0] y_V_5_fu_1443_p3;
reg   [9:0] y_V_5_reg_2026;
wire   [9:0] y_V_6_fu_1477_p3;
reg   [9:0] y_V_6_reg_2031;
wire   [9:0] y_V_7_fu_1511_p3;
reg   [9:0] y_V_7_reg_2036;
wire   [9:0] y_V_8_fu_1545_p3;
reg   [9:0] y_V_8_reg_2041;
wire   [9:0] y_V_9_fu_1579_p3;
reg   [9:0] y_V_9_reg_2046;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state12_pp0_stage1_iter1;
wire    ap_block_state22_pp0_stage1_iter2;
wire    ap_block_state32_pp0_stage1_iter3;
reg    ap_block_pp0_stage1_11001;
reg   [16:0] exp_res_0_V_1_reg_2056;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state13_pp0_stage2_iter1;
wire    ap_block_state23_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
reg   [16:0] exp_res_0_V_1_reg_2056_pp0_iter1_reg;
reg   [16:0] exp_res_1_V_1_reg_2067;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state14_pp0_stage3_iter1;
wire    ap_block_state24_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_11001;
reg   [16:0] exp_res_1_V_1_reg_2067_pp0_iter1_reg;
reg   [16:0] exp_res_2_V_1_reg_2078;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state15_pp0_stage4_iter1;
wire    ap_block_state25_pp0_stage4_iter2;
wire    ap_block_pp0_stage4_11001;
reg   [16:0] exp_res_2_V_1_reg_2078_pp0_iter1_reg;
reg   [16:0] exp_res_3_V_1_reg_2089;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state16_pp0_stage5_iter1;
wire    ap_block_state26_pp0_stage5_iter2;
wire    ap_block_pp0_stage5_11001;
reg   [16:0] exp_res_3_V_1_reg_2089_pp0_iter1_reg;
reg   [16:0] exp_res_4_V_1_reg_2100;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_state17_pp0_stage6_iter1;
wire    ap_block_state27_pp0_stage6_iter2;
wire    ap_block_pp0_stage6_11001;
reg   [16:0] exp_res_4_V_1_reg_2100_pp0_iter1_reg;
reg   [16:0] exp_res_5_V_1_reg_2111;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_state18_pp0_stage7_iter1;
wire    ap_block_state28_pp0_stage7_iter2;
wire    ap_block_pp0_stage7_11001;
reg   [16:0] exp_res_5_V_1_reg_2111_pp0_iter1_reg;
reg   [16:0] exp_res_6_V_1_reg_2122;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_state19_pp0_stage8_iter1;
wire    ap_block_state29_pp0_stage8_iter2;
wire    ap_block_pp0_stage8_11001;
reg   [16:0] exp_res_6_V_1_reg_2122_pp0_iter1_reg;
reg   [16:0] exp_res_7_V_1_reg_2132;
reg   [16:0] exp_res_7_V_1_reg_2132_pp0_iter1_reg;
reg   [16:0] exp_res_8_V_1_reg_2142;
reg   [16:0] exp_res_8_V_1_reg_2142_pp0_iter2_reg;
reg   [16:0] exp_res_9_V_1_reg_2149;
reg   [16:0] exp_res_9_V_1_reg_2149_pp0_iter2_reg;
wire   [17:0] grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_return;
reg  signed [17:0] p_Val2_19_reg_2156;
wire  signed [25:0] sext_ln241_fu_1896_p1;
reg  signed [25:0] sext_ln241_reg_2167;
wire   [25:0] zext_ln1118_fu_1901_p1;
wire   [25:0] zext_ln1118_1_fu_1905_p1;
wire   [25:0] zext_ln1118_2_fu_1909_p1;
reg   [15:0] tmp_data_0_V_reg_2187;
wire   [25:0] zext_ln1118_3_fu_1913_p1;
reg   [15:0] tmp_data_1_V_reg_2197;
wire   [25:0] zext_ln1118_4_fu_1917_p1;
reg   [15:0] tmp_data_2_V_reg_2207;
wire   [25:0] zext_ln1118_5_fu_1921_p1;
reg   [15:0] tmp_data_3_V_reg_2217;
wire   [25:0] zext_ln1118_6_fu_1925_p1;
reg   [15:0] tmp_data_4_V_reg_2227;
wire   [25:0] zext_ln1118_7_fu_1929_p1;
reg   [15:0] tmp_data_5_V_reg_2237;
wire   [25:0] zext_ln1118_8_fu_1933_p1;
reg   [15:0] tmp_data_6_V_reg_2247;
wire   [25:0] zext_ln1118_9_fu_1937_p1;
reg   [15:0] tmp_data_7_V_reg_2257;
reg   [15:0] tmp_data_8_V_reg_2262;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage9_subdone;
reg    ap_block_pp0_stage1_subdone;
wire    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_start;
wire    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_done;
wire    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_idle;
wire    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_ready;
reg   [4:0] grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_x_V_offset;
reg    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_ce;
wire    ap_block_state3_pp0_stage2_iter0_ignore_call233;
wire    ap_block_state13_pp0_stage2_iter1_ignore_call233;
wire    ap_block_state23_pp0_stage2_iter2_ignore_call233;
wire    ap_block_pp0_stage2_11001_ignoreCallOp263;
wire    ap_block_state4_pp0_stage3_iter0_ignore_call233;
wire    ap_block_state14_pp0_stage3_iter1_ignore_call233;
wire    ap_block_state24_pp0_stage3_iter2_ignore_call233;
wire    ap_block_pp0_stage3_11001_ignoreCallOp264;
wire    ap_block_state5_pp0_stage4_iter0_ignore_call233;
wire    ap_block_state15_pp0_stage4_iter1_ignore_call233;
wire    ap_block_state25_pp0_stage4_iter2_ignore_call233;
wire    ap_block_pp0_stage4_11001_ignoreCallOp265;
wire    ap_block_state6_pp0_stage5_iter0_ignore_call234;
wire    ap_block_state16_pp0_stage5_iter1_ignore_call234;
wire    ap_block_state26_pp0_stage5_iter2_ignore_call234;
wire    ap_block_pp0_stage5_11001_ignoreCallOp266;
wire    ap_block_state7_pp0_stage6_iter0_ignore_call234;
wire    ap_block_state17_pp0_stage6_iter1_ignore_call234;
wire    ap_block_state27_pp0_stage6_iter2_ignore_call234;
wire    ap_block_pp0_stage6_11001_ignoreCallOp267;
wire    ap_block_state8_pp0_stage7_iter0_ignore_call234;
wire    ap_block_state18_pp0_stage7_iter1_ignore_call234;
wire    ap_block_state28_pp0_stage7_iter2_ignore_call234;
wire    ap_block_pp0_stage7_11001_ignoreCallOp268;
reg    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_start_reg;
reg   [16:0] exp_res_0_V_fu_250;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage5;
reg   [16:0] exp_res_1_V_fu_254;
reg   [16:0] exp_res_2_V_fu_258;
reg   [16:0] exp_res_3_V_fu_262;
reg   [16:0] exp_res_4_V_fu_266;
reg   [16:0] exp_res_5_V_fu_270;
reg   [16:0] exp_res_6_V_fu_274;
reg   [16:0] exp_res_7_V_fu_278;
reg   [16:0] exp_res_8_V_fu_282;
reg   [16:0] exp_res_9_V_fu_286;
wire   [63:0] zext_ln225_fu_1276_p1;
wire   [63:0] zext_ln225_1_fu_1587_p1;
wire   [63:0] zext_ln225_2_fu_1591_p1;
wire   [63:0] zext_ln225_3_fu_1595_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln225_4_fu_1599_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln225_5_fu_1603_p1;
wire   [63:0] zext_ln225_6_fu_1607_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln225_7_fu_1611_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln225_8_fu_1644_p1;
wire    ap_block_pp0_stage8;
wire   [63:0] zext_ln225_9_fu_1653_p1;
wire    ap_block_pp0_stage9;
wire   [63:0] zext_ln235_fu_1891_p1;
wire    ap_block_pp0_stage1_01001;
reg   [16:0] grp_fu_446_p0;
reg  signed [17:0] grp_fu_446_p1;
wire   [25:0] grp_fu_446_p2;
wire  signed [15:0] icmp_ln1496_fu_552_p0;
wire  signed [15:0] icmp_ln1496_fu_552_p1;
wire   [0:0] icmp_ln1496_fu_552_p2;
wire  signed [15:0] select_ln65_fu_558_p1;
wire  signed [15:0] select_ln65_fu_558_p2;
wire  signed [15:0] icmp_ln1496_1_fu_566_p0;
wire  signed [15:0] icmp_ln1496_1_fu_566_p1;
wire   [0:0] icmp_ln1496_1_fu_566_p2;
wire  signed [15:0] select_ln65_1_fu_572_p1;
wire  signed [15:0] select_ln65_1_fu_572_p2;
wire   [15:0] select_ln65_fu_558_p3;
wire   [15:0] select_ln65_1_fu_572_p3;
wire   [0:0] icmp_ln1496_2_fu_580_p2;
wire  signed [15:0] icmp_ln1496_3_fu_594_p0;
wire  signed [15:0] icmp_ln1496_3_fu_594_p1;
wire   [0:0] icmp_ln1496_3_fu_594_p2;
wire  signed [15:0] select_ln65_3_fu_600_p1;
wire  signed [15:0] select_ln65_3_fu_600_p2;
wire  signed [15:0] icmp_ln1496_4_fu_608_p0;
wire  signed [15:0] icmp_ln1496_4_fu_608_p1;
wire   [0:0] icmp_ln1496_4_fu_608_p2;
wire  signed [15:0] select_ln65_4_fu_614_p1;
wire  signed [15:0] select_ln65_4_fu_614_p2;
wire   [15:0] select_ln65_3_fu_600_p3;
wire   [15:0] select_ln65_4_fu_614_p3;
wire   [0:0] icmp_ln1496_5_fu_622_p2;
wire   [15:0] select_ln65_2_fu_586_p3;
wire   [15:0] select_ln65_5_fu_628_p3;
wire   [0:0] icmp_ln1496_6_fu_636_p2;
wire  signed [15:0] icmp_ln1496_7_fu_650_p0;
wire  signed [15:0] icmp_ln1496_7_fu_650_p1;
wire   [0:0] icmp_ln1496_7_fu_650_p2;
wire  signed [15:0] select_ln65_7_fu_656_p1;
wire  signed [15:0] select_ln65_7_fu_656_p2;
wire   [15:0] select_ln65_6_fu_642_p3;
wire   [15:0] select_ln65_7_fu_656_p3;
wire   [0:0] icmp_ln1496_8_fu_664_p2;
wire  signed [15:0] sext_ln703_fu_678_p0;
wire   [15:0] x_max_V_fu_670_p3;
wire  signed [16:0] sext_ln703_fu_678_p1;
wire  signed [16:0] sext_ln703_1_fu_682_p1;
wire   [16:0] sub_ln1193_fu_686_p2;
wire   [0:0] tmp_22_fu_700_p3;
wire   [0:0] tmp_21_fu_692_p3;
wire   [0:0] xor_ln786_fu_708_p2;
wire   [0:0] xor_ln340_fu_726_p2;
wire  signed [15:0] sext_ln703_2_fu_738_p0;
wire  signed [16:0] sext_ln703_2_fu_738_p1;
wire   [16:0] sub_ln1193_1_fu_742_p2;
wire   [0:0] tmp_24_fu_756_p3;
wire   [0:0] tmp_23_fu_748_p3;
wire   [0:0] xor_ln786_1_fu_764_p2;
wire   [0:0] xor_ln340_1_fu_782_p2;
wire  signed [15:0] sext_ln703_3_fu_794_p0;
wire  signed [16:0] sext_ln703_3_fu_794_p1;
wire   [16:0] sub_ln1193_2_fu_798_p2;
wire   [0:0] tmp_26_fu_812_p3;
wire   [0:0] tmp_25_fu_804_p3;
wire   [0:0] xor_ln786_2_fu_820_p2;
wire   [0:0] xor_ln340_2_fu_838_p2;
wire  signed [15:0] sext_ln703_4_fu_850_p0;
wire  signed [16:0] sext_ln703_4_fu_850_p1;
wire   [16:0] sub_ln1193_3_fu_854_p2;
wire   [0:0] tmp_28_fu_868_p3;
wire   [0:0] tmp_27_fu_860_p3;
wire   [0:0] xor_ln786_3_fu_876_p2;
wire   [0:0] xor_ln340_3_fu_894_p2;
wire  signed [15:0] sext_ln703_5_fu_906_p0;
wire  signed [16:0] sext_ln703_5_fu_906_p1;
wire   [16:0] sub_ln1193_4_fu_910_p2;
wire   [0:0] tmp_30_fu_924_p3;
wire   [0:0] tmp_29_fu_916_p3;
wire   [0:0] xor_ln786_4_fu_932_p2;
wire   [0:0] xor_ln340_4_fu_950_p2;
wire  signed [15:0] sext_ln703_6_fu_962_p0;
wire  signed [16:0] sext_ln703_6_fu_962_p1;
wire   [16:0] sub_ln1193_5_fu_966_p2;
wire   [0:0] tmp_32_fu_980_p3;
wire   [0:0] tmp_31_fu_972_p3;
wire   [0:0] xor_ln786_5_fu_988_p2;
wire   [0:0] xor_ln340_5_fu_1006_p2;
wire  signed [15:0] sext_ln703_7_fu_1018_p0;
wire  signed [16:0] sext_ln703_7_fu_1018_p1;
wire   [16:0] sub_ln1193_6_fu_1022_p2;
wire   [0:0] tmp_34_fu_1036_p3;
wire   [0:0] tmp_33_fu_1028_p3;
wire   [0:0] xor_ln786_6_fu_1044_p2;
wire   [0:0] xor_ln340_6_fu_1062_p2;
wire  signed [15:0] sext_ln703_8_fu_1074_p0;
wire  signed [16:0] sext_ln703_8_fu_1074_p1;
wire   [16:0] sub_ln1193_7_fu_1078_p2;
wire   [0:0] tmp_36_fu_1092_p3;
wire   [0:0] tmp_35_fu_1084_p3;
wire   [0:0] xor_ln786_7_fu_1100_p2;
wire   [0:0] xor_ln340_7_fu_1118_p2;
wire  signed [15:0] sext_ln703_9_fu_1130_p0;
wire  signed [16:0] sext_ln703_9_fu_1130_p1;
wire   [16:0] sub_ln1193_8_fu_1134_p2;
wire   [0:0] tmp_38_fu_1148_p3;
wire   [0:0] tmp_37_fu_1140_p3;
wire   [0:0] xor_ln786_8_fu_1156_p2;
wire   [0:0] xor_ln340_8_fu_1174_p2;
wire  signed [15:0] sext_ln703_10_fu_1186_p0;
wire  signed [16:0] sext_ln703_10_fu_1186_p1;
wire   [16:0] sub_ln1193_9_fu_1190_p2;
wire   [0:0] tmp_40_fu_1204_p3;
wire   [0:0] tmp_39_fu_1196_p3;
wire   [0:0] xor_ln786_9_fu_1212_p2;
wire   [0:0] xor_ln340_9_fu_1230_p2;
wire   [0:0] xor_ln340_10_fu_720_p2;
wire   [9:0] tmp_fu_1242_p4;
wire   [0:0] and_ln786_fu_714_p2;
wire   [0:0] or_ln340_fu_732_p2;
wire   [9:0] select_ln340_fu_1252_p3;
wire   [9:0] select_ln388_fu_1260_p3;
wire   [9:0] y_V_fu_1268_p3;
wire   [0:0] xor_ln340_11_fu_776_p2;
wire   [9:0] tmp_11_fu_1281_p4;
wire   [0:0] and_ln786_1_fu_770_p2;
wire   [0:0] or_ln340_1_fu_788_p2;
wire   [9:0] select_ln340_2_fu_1291_p3;
wire   [9:0] select_ln388_1_fu_1299_p3;
wire   [0:0] xor_ln340_12_fu_832_p2;
wire   [9:0] tmp_12_fu_1315_p4;
wire   [0:0] and_ln786_2_fu_826_p2;
wire   [0:0] or_ln340_2_fu_844_p2;
wire   [9:0] select_ln340_4_fu_1325_p3;
wire   [9:0] select_ln388_2_fu_1333_p3;
wire   [0:0] xor_ln340_13_fu_888_p2;
wire   [9:0] tmp_13_fu_1349_p4;
wire   [0:0] and_ln786_3_fu_882_p2;
wire   [0:0] or_ln340_3_fu_900_p2;
wire   [9:0] select_ln340_6_fu_1359_p3;
wire   [9:0] select_ln388_3_fu_1367_p3;
wire   [0:0] xor_ln340_14_fu_944_p2;
wire   [9:0] tmp_14_fu_1383_p4;
wire   [0:0] and_ln786_4_fu_938_p2;
wire   [0:0] or_ln340_4_fu_956_p2;
wire   [9:0] select_ln340_8_fu_1393_p3;
wire   [9:0] select_ln388_4_fu_1401_p3;
wire   [0:0] xor_ln340_15_fu_1000_p2;
wire   [9:0] tmp_15_fu_1417_p4;
wire   [0:0] and_ln786_5_fu_994_p2;
wire   [0:0] or_ln340_5_fu_1012_p2;
wire   [9:0] select_ln340_10_fu_1427_p3;
wire   [9:0] select_ln388_5_fu_1435_p3;
wire   [0:0] xor_ln340_16_fu_1056_p2;
wire   [9:0] tmp_16_fu_1451_p4;
wire   [0:0] and_ln786_6_fu_1050_p2;
wire   [0:0] or_ln340_6_fu_1068_p2;
wire   [9:0] select_ln340_12_fu_1461_p3;
wire   [9:0] select_ln388_6_fu_1469_p3;
wire   [0:0] xor_ln340_17_fu_1112_p2;
wire   [9:0] tmp_17_fu_1485_p4;
wire   [0:0] and_ln786_7_fu_1106_p2;
wire   [0:0] or_ln340_7_fu_1124_p2;
wire   [9:0] select_ln340_14_fu_1495_p3;
wire   [9:0] select_ln388_7_fu_1503_p3;
wire   [0:0] xor_ln340_18_fu_1168_p2;
wire   [9:0] tmp_18_fu_1519_p4;
wire   [0:0] and_ln786_8_fu_1162_p2;
wire   [0:0] or_ln340_8_fu_1180_p2;
wire   [9:0] select_ln340_16_fu_1529_p3;
wire   [9:0] select_ln388_8_fu_1537_p3;
wire   [0:0] xor_ln340_19_fu_1224_p2;
wire   [9:0] tmp_19_fu_1553_p4;
wire   [0:0] and_ln786_9_fu_1218_p2;
wire   [0:0] or_ln340_9_fu_1236_p2;
wire   [9:0] select_ln340_18_fu_1563_p3;
wire   [9:0] select_ln388_9_fu_1571_p3;
wire  signed [17:0] rhs_V_fu_1670_p0;
wire  signed [18:0] lhs_V_fu_1667_p1;
wire  signed [18:0] rhs_V_fu_1670_p1;
wire   [18:0] ret_V_fu_1674_p2;
wire  signed [17:0] p_Val2_22_fu_1688_p0;
wire   [17:0] p_Val2_22_fu_1688_p2;
wire   [0:0] p_Result_18_fu_1693_p3;
wire   [0:0] p_Result_s_fu_1680_p3;
wire   [0:0] xor_ln786_10_fu_1701_p2;
wire   [0:0] xor_ln340_21_fu_1719_p2;
wire   [0:0] xor_ln340_20_fu_1713_p2;
wire   [0:0] underflow_fu_1707_p2;
wire   [0:0] or_ln340_10_fu_1725_p2;
wire   [17:0] select_ln340_20_fu_1731_p3;
wire   [17:0] select_ln388_10_fu_1739_p3;
wire   [17:0] p_Val2_24_fu_1758_p1;
wire   [17:0] p_Val2_23_fu_1755_p1;
wire   [17:0] p_Val2_25_fu_1761_p2;
wire   [0:0] p_Result_19_fu_1771_p3;
wire   [16:0] add_ln746_fu_1767_p2;
wire   [16:0] p_Val2_27_fu_1779_p3;
wire  signed [17:0] p_Val2_26_fu_1747_p3;
wire  signed [18:0] lhs_V_1_fu_1791_p1;
wire   [18:0] rhs_V_1_fu_1795_p1;
wire   [18:0] ret_V_1_fu_1799_p2;
wire   [17:0] zext_ln746_fu_1787_p1;
wire   [17:0] p_Val2_29_fu_1813_p2;
wire   [0:0] p_Result_21_fu_1819_p3;
wire   [0:0] p_Result_20_fu_1805_p3;
wire   [0:0] xor_ln786_11_fu_1827_p2;
wire   [0:0] xor_ln340_23_fu_1845_p2;
wire   [0:0] xor_ln340_22_fu_1839_p2;
wire   [9:0] tmp_20_fu_1857_p4;
wire   [0:0] underflow_1_fu_1833_p2;
wire   [0:0] or_ln340_11_fu_1851_p2;
wire   [9:0] select_ln340_22_fu_1867_p3;
wire   [9:0] select_ln388_11_fu_1875_p3;
wire   [9:0] y_V_10_fu_1883_p3;
reg    grp_fu_446_ce;
reg   [9:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to3;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_start_reg = 1'b0;
end

softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config16_s_exp_tabgZb #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table3_address0),
    .ce0(exp_table3_ce0),
    .q0(exp_table3_q0)
);

softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config16_s_invert_g0b #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table4_address0),
    .ce0(invert_table4_ce0),
    .q0(invert_table4_q0)
);

reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_start),
    .ap_done(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_done),
    .ap_idle(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_idle),
    .ap_ready(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_ready),
    .x_0_V(exp_res_0_V_fu_250),
    .x_1_V(exp_res_1_V_fu_254),
    .x_2_V(exp_res_2_V_fu_258),
    .x_3_V(exp_res_3_V_fu_262),
    .x_4_V(exp_res_4_V_fu_266),
    .x_5_V(exp_res_5_V_fu_270),
    .x_6_V(exp_res_6_V_fu_274),
    .x_7_V(exp_res_7_V_fu_278),
    .x_8_V(exp_res_8_V_fu_282),
    .x_9_V(exp_res_9_V_fu_286),
    .x_V_offset(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_x_V_offset),
    .ap_return(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_return),
    .ap_ce(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_ce)
);

myproject_mul_17ns_18s_26_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_17ns_18s_26_4_1_U4860(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_446_p0),
    .din1(grp_fu_446_p1),
    .ce(grp_fu_446_ce),
    .dout(grp_fu_446_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_start_reg <= 1'b1;
        end else if ((grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_ready == 1'b1)) begin
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exp_res_0_V_1_reg_2056 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exp_res_0_V_1_reg_2056_pp0_iter1_reg <= exp_res_0_V_1_reg_2056;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_0_V_fu_250 <= exp_res_0_V_1_reg_2056;
        exp_res_1_V_fu_254 <= exp_res_1_V_1_reg_2067;
        exp_res_2_V_fu_258 <= exp_res_2_V_1_reg_2078;
        exp_res_3_V_fu_262 <= exp_res_3_V_1_reg_2089;
        exp_res_4_V_fu_266 <= exp_res_4_V_1_reg_2100;
        exp_res_5_V_fu_270 <= exp_res_5_V_1_reg_2111;
        exp_res_6_V_1_reg_2122 <= exp_table3_q0;
        exp_res_6_V_fu_274 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_1_V_1_reg_2067 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        exp_res_1_V_1_reg_2067_pp0_iter1_reg <= exp_res_1_V_1_reg_2067;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_2_V_1_reg_2078 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        exp_res_2_V_1_reg_2078_pp0_iter1_reg <= exp_res_2_V_1_reg_2078;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_3_V_1_reg_2089 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        exp_res_3_V_1_reg_2089_pp0_iter1_reg <= exp_res_3_V_1_reg_2089;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_4_V_1_reg_2100 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        exp_res_4_V_1_reg_2100_pp0_iter1_reg <= exp_res_4_V_1_reg_2100;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_5_V_1_reg_2111 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        exp_res_5_V_1_reg_2111_pp0_iter1_reg <= exp_res_5_V_1_reg_2111;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        exp_res_6_V_1_reg_2122_pp0_iter1_reg <= exp_res_6_V_1_reg_2122;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_7_V_1_reg_2132 <= exp_table3_q0;
        exp_res_7_V_fu_278 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        exp_res_7_V_1_reg_2132_pp0_iter1_reg <= exp_res_7_V_1_reg_2132;
        sext_ln241_reg_2167 <= sext_ln241_fu_1896_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_res_8_V_1_reg_2142 <= exp_table3_q0;
        exp_res_8_V_fu_282 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_res_8_V_1_reg_2142_pp0_iter2_reg <= exp_res_8_V_1_reg_2142;
        y_V_1_reg_2006 <= y_V_1_fu_1307_p3;
        y_V_2_reg_2011 <= y_V_2_fu_1341_p3;
        y_V_3_reg_2016 <= y_V_3_fu_1375_p3;
        y_V_4_reg_2021 <= y_V_4_fu_1409_p3;
        y_V_5_reg_2026 <= y_V_5_fu_1443_p3;
        y_V_6_reg_2031 <= y_V_6_fu_1477_p3;
        y_V_7_reg_2036 <= y_V_7_fu_1511_p3;
        y_V_8_reg_2041 <= y_V_8_fu_1545_p3;
        y_V_9_reg_2046 <= y_V_9_fu_1579_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_res_9_V_1_reg_2149 <= exp_table3_q0;
        exp_res_9_V_fu_286 <= exp_table3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_res_9_V_1_reg_2149_pp0_iter2_reg <= exp_res_9_V_1_reg_2149;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        p_Val2_19_reg_2156 <= grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_data_0_V_reg_2187 <= {{grp_fu_446_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_data_1_V_reg_2197 <= {{grp_fu_446_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp_data_2_V_reg_2207 <= {{grp_fu_446_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        tmp_data_3_V_reg_2217 <= {{grp_fu_446_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        tmp_data_4_V_reg_2227 <= {{grp_fu_446_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        tmp_data_5_V_reg_2237 <= {{grp_fu_446_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        tmp_data_6_V_reg_2247 <= {{grp_fu_446_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_data_7_V_reg_2257 <= {{grp_fu_446_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_8_V_reg_2262 <= {{grp_fu_446_p2[25:10]}};
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            exp_table3_address0 = zext_ln225_9_fu_1653_p1;
        end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            exp_table3_address0 = zext_ln225_8_fu_1644_p1;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            exp_table3_address0 = zext_ln225_7_fu_1611_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            exp_table3_address0 = zext_ln225_6_fu_1607_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            exp_table3_address0 = zext_ln225_5_fu_1603_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            exp_table3_address0 = zext_ln225_4_fu_1599_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            exp_table3_address0 = zext_ln225_3_fu_1595_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            exp_table3_address0 = zext_ln225_2_fu_1591_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            exp_table3_address0 = zext_ln225_1_fu_1587_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            exp_table3_address0 = zext_ln225_fu_1276_p1;
        end else begin
            exp_table3_address0 = 'bx;
        end
    end else begin
        exp_table3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        exp_table3_ce0 = 1'b1;
    end else begin
        exp_table3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_446_ce = 1'b1;
    end else begin
        grp_fu_446_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        grp_fu_446_p0 = zext_ln1118_9_fu_1937_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_fu_446_p0 = zext_ln1118_8_fu_1933_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_446_p0 = zext_ln1118_7_fu_1929_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_446_p0 = zext_ln1118_6_fu_1925_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_446_p0 = zext_ln1118_5_fu_1921_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_446_p0 = zext_ln1118_4_fu_1917_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_446_p0 = zext_ln1118_3_fu_1913_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_446_p0 = zext_ln1118_2_fu_1909_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_446_p0 = zext_ln1118_1_fu_1905_p1;
    end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_446_p0 = zext_ln1118_fu_1901_p1;
    end else begin
        grp_fu_446_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)))) begin
        grp_fu_446_p1 = sext_ln241_reg_2167;
    end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_446_p1 = sext_ln241_fu_1896_p1;
    end else begin
        grp_fu_446_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001_ignoreCallOp268) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001_ignoreCallOp267) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001_ignoreCallOp266) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001_ignoreCallOp265) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001_ignoreCallOp264) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001_ignoreCallOp263) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_ce = 1'b1;
    end else begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_x_V_offset = 5'd4;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_x_V_offset = 5'd0;
        end else begin
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_x_V_offset = 'bx;
        end
    end else begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_x_V_offset = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        invert_table4_ce0 = 1'b1;
    end else begin
        invert_table4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_0_V_TDATA_blk_n = res_V_data_0_V_TREADY;
    end else begin
        res_V_data_0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_0_V_TVALID = 1'b1;
    end else begin
        res_V_data_0_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_1_V_TDATA_blk_n = res_V_data_1_V_TREADY;
    end else begin
        res_V_data_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_1_V_TVALID = 1'b1;
    end else begin
        res_V_data_1_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_2_V_TDATA_blk_n = res_V_data_2_V_TREADY;
    end else begin
        res_V_data_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_2_V_TVALID = 1'b1;
    end else begin
        res_V_data_2_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_3_V_TDATA_blk_n = res_V_data_3_V_TREADY;
    end else begin
        res_V_data_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_3_V_TVALID = 1'b1;
    end else begin
        res_V_data_3_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_4_V_TDATA_blk_n = res_V_data_4_V_TREADY;
    end else begin
        res_V_data_4_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_4_V_TVALID = 1'b1;
    end else begin
        res_V_data_4_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_5_V_TDATA_blk_n = res_V_data_5_V_TREADY;
    end else begin
        res_V_data_5_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_5_V_TVALID = 1'b1;
    end else begin
        res_V_data_5_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_6_V_TDATA_blk_n = res_V_data_6_V_TREADY;
    end else begin
        res_V_data_6_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_6_V_TVALID = 1'b1;
    end else begin
        res_V_data_6_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_7_V_TDATA_blk_n = res_V_data_7_V_TREADY;
    end else begin
        res_V_data_7_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_7_V_TVALID = 1'b1;
    end else begin
        res_V_data_7_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_8_V_TDATA_blk_n = res_V_data_8_V_TREADY;
    end else begin
        res_V_data_8_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_8_V_TVALID = 1'b1;
    end else begin
        res_V_data_8_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_9_V_TDATA_blk_n = res_V_data_9_V_TREADY;
    end else begin
        res_V_data_9_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_9_V_TVALID = 1'b1;
    end else begin
        res_V_data_9_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln746_fu_1767_p2 = (exp_res_8_V_1_reg_2142 + exp_res_9_V_1_reg_2149);

assign and_ln786_1_fu_770_p2 = (xor_ln786_1_fu_764_p2 & tmp_23_fu_748_p3);

assign and_ln786_2_fu_826_p2 = (xor_ln786_2_fu_820_p2 & tmp_25_fu_804_p3);

assign and_ln786_3_fu_882_p2 = (xor_ln786_3_fu_876_p2 & tmp_27_fu_860_p3);

assign and_ln786_4_fu_938_p2 = (xor_ln786_4_fu_932_p2 & tmp_29_fu_916_p3);

assign and_ln786_5_fu_994_p2 = (xor_ln786_5_fu_988_p2 & tmp_31_fu_972_p3);

assign and_ln786_6_fu_1050_p2 = (xor_ln786_6_fu_1044_p2 & tmp_33_fu_1028_p3);

assign and_ln786_7_fu_1106_p2 = (xor_ln786_7_fu_1100_p2 & tmp_35_fu_1084_p3);

assign and_ln786_8_fu_1162_p2 = (xor_ln786_8_fu_1156_p2 & tmp_37_fu_1140_p3);

assign and_ln786_9_fu_1218_p2 = (xor_ln786_9_fu_1212_p2 & tmp_39_fu_1196_p3);

assign and_ln786_fu_714_p2 = (xor_ln786_fu_708_p2 & tmp_21_fu_692_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((io_acc_block_signal_op43 == 1'b0) | (ap_start == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((io_acc_block_signal_op43 == 1'b0) | (ap_start == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001_ignoreCallOp263 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001_ignoreCallOp264 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001_ignoreCallOp265 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001_ignoreCallOp266 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001_ignoreCallOp267 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001_ignoreCallOp268 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter1_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter1_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage4_iter1_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage5_iter1_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage6_iter1_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage7_iter1_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((io_acc_block_signal_op43 == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state20_pp0_stage9_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage2_iter2_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage3_iter2_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage4_iter2_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage5_iter2_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage6_iter2_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage7_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage7_iter2_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage8_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage9_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_start = grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_start_reg;

assign icmp_ln1496_1_fu_566_p0 = data_V_data_2_V_dout;

assign icmp_ln1496_1_fu_566_p1 = data_V_data_3_V_dout;

assign icmp_ln1496_1_fu_566_p2 = (($signed(icmp_ln1496_1_fu_566_p0) < $signed(icmp_ln1496_1_fu_566_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_580_p2 = (($signed(select_ln65_fu_558_p3) < $signed(select_ln65_1_fu_572_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_594_p0 = data_V_data_4_V_dout;

assign icmp_ln1496_3_fu_594_p1 = data_V_data_5_V_dout;

assign icmp_ln1496_3_fu_594_p2 = (($signed(icmp_ln1496_3_fu_594_p0) < $signed(icmp_ln1496_3_fu_594_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_608_p0 = data_V_data_6_V_dout;

assign icmp_ln1496_4_fu_608_p1 = data_V_data_7_V_dout;

assign icmp_ln1496_4_fu_608_p2 = (($signed(icmp_ln1496_4_fu_608_p0) < $signed(icmp_ln1496_4_fu_608_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_622_p2 = (($signed(select_ln65_3_fu_600_p3) < $signed(select_ln65_4_fu_614_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_636_p2 = (($signed(select_ln65_2_fu_586_p3) < $signed(select_ln65_5_fu_628_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_650_p0 = data_V_data_8_V_dout;

assign icmp_ln1496_7_fu_650_p1 = data_V_data_9_V_dout;

assign icmp_ln1496_7_fu_650_p2 = (($signed(icmp_ln1496_7_fu_650_p0) < $signed(icmp_ln1496_7_fu_650_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_664_p2 = (($signed(select_ln65_6_fu_642_p3) < $signed(select_ln65_7_fu_656_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_552_p0 = data_V_data_0_V_dout;

assign icmp_ln1496_fu_552_p1 = data_V_data_1_V_dout;

assign icmp_ln1496_fu_552_p2 = (($signed(icmp_ln1496_fu_552_p0) < $signed(icmp_ln1496_fu_552_p1)) ? 1'b1 : 1'b0);

assign invert_table4_address0 = zext_ln235_fu_1891_p1;

assign io_acc_block_signal_op43 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign lhs_V_1_fu_1791_p1 = p_Val2_26_fu_1747_p3;

assign lhs_V_fu_1667_p1 = p_Val2_19_reg_2156;

assign or_ln340_10_fu_1725_p2 = (xor_ln340_21_fu_1719_p2 | p_Result_18_fu_1693_p3);

assign or_ln340_11_fu_1851_p2 = (xor_ln340_23_fu_1845_p2 | p_Result_21_fu_1819_p3);

assign or_ln340_1_fu_788_p2 = (xor_ln340_1_fu_782_p2 | tmp_24_fu_756_p3);

assign or_ln340_2_fu_844_p2 = (xor_ln340_2_fu_838_p2 | tmp_26_fu_812_p3);

assign or_ln340_3_fu_900_p2 = (xor_ln340_3_fu_894_p2 | tmp_28_fu_868_p3);

assign or_ln340_4_fu_956_p2 = (xor_ln340_4_fu_950_p2 | tmp_30_fu_924_p3);

assign or_ln340_5_fu_1012_p2 = (xor_ln340_5_fu_1006_p2 | tmp_32_fu_980_p3);

assign or_ln340_6_fu_1068_p2 = (xor_ln340_6_fu_1062_p2 | tmp_34_fu_1036_p3);

assign or_ln340_7_fu_1124_p2 = (xor_ln340_7_fu_1118_p2 | tmp_36_fu_1092_p3);

assign or_ln340_8_fu_1180_p2 = (xor_ln340_8_fu_1174_p2 | tmp_38_fu_1148_p3);

assign or_ln340_9_fu_1236_p2 = (xor_ln340_9_fu_1230_p2 | tmp_40_fu_1204_p3);

assign or_ln340_fu_732_p2 = (xor_ln340_fu_726_p2 | tmp_22_fu_700_p3);

assign p_Result_18_fu_1693_p3 = p_Val2_22_fu_1688_p2[32'd17];

assign p_Result_19_fu_1771_p3 = p_Val2_25_fu_1761_p2[32'd17];

assign p_Result_20_fu_1805_p3 = ret_V_1_fu_1799_p2[32'd18];

assign p_Result_21_fu_1819_p3 = p_Val2_29_fu_1813_p2[32'd17];

assign p_Result_s_fu_1680_p3 = ret_V_fu_1674_p2[32'd18];

assign p_Val2_22_fu_1688_p0 = grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_return;

assign p_Val2_22_fu_1688_p2 = ($signed(p_Val2_22_fu_1688_p0) + $signed(p_Val2_19_reg_2156));

assign p_Val2_23_fu_1755_p1 = exp_res_8_V_1_reg_2142;

assign p_Val2_24_fu_1758_p1 = exp_res_9_V_1_reg_2149;

assign p_Val2_25_fu_1761_p2 = (p_Val2_24_fu_1758_p1 + p_Val2_23_fu_1755_p1);

assign p_Val2_26_fu_1747_p3 = ((or_ln340_10_fu_1725_p2[0:0] === 1'b1) ? select_ln340_20_fu_1731_p3 : select_ln388_10_fu_1739_p3);

assign p_Val2_27_fu_1779_p3 = ((p_Result_19_fu_1771_p3[0:0] === 1'b1) ? 17'd131071 : add_ln746_fu_1767_p2);

assign p_Val2_29_fu_1813_p2 = ($signed(zext_ln746_fu_1787_p1) + $signed(p_Val2_26_fu_1747_p3));

assign res_V_data_0_V_TDATA = tmp_data_0_V_reg_2187;

assign res_V_data_1_V_TDATA = tmp_data_1_V_reg_2197;

assign res_V_data_2_V_TDATA = tmp_data_2_V_reg_2207;

assign res_V_data_3_V_TDATA = tmp_data_3_V_reg_2217;

assign res_V_data_4_V_TDATA = tmp_data_4_V_reg_2227;

assign res_V_data_5_V_TDATA = tmp_data_5_V_reg_2237;

assign res_V_data_6_V_TDATA = tmp_data_6_V_reg_2247;

assign res_V_data_7_V_TDATA = tmp_data_7_V_reg_2257;

assign res_V_data_8_V_TDATA = tmp_data_8_V_reg_2262;

assign res_V_data_9_V_TDATA = {{grp_fu_446_p2[25:10]}};

assign ret_V_1_fu_1799_p2 = ($signed(lhs_V_1_fu_1791_p1) + $signed(rhs_V_1_fu_1795_p1));

assign ret_V_fu_1674_p2 = ($signed(lhs_V_fu_1667_p1) + $signed(rhs_V_fu_1670_p1));

assign rhs_V_1_fu_1795_p1 = p_Val2_27_fu_1779_p3;

assign rhs_V_fu_1670_p0 = grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_484_ap_return;

assign rhs_V_fu_1670_p1 = rhs_V_fu_1670_p0;

assign select_ln340_10_fu_1427_p3 = ((xor_ln340_15_fu_1000_p2[0:0] === 1'b1) ? 10'd511 : tmp_15_fu_1417_p4);

assign select_ln340_12_fu_1461_p3 = ((xor_ln340_16_fu_1056_p2[0:0] === 1'b1) ? 10'd511 : tmp_16_fu_1451_p4);

assign select_ln340_14_fu_1495_p3 = ((xor_ln340_17_fu_1112_p2[0:0] === 1'b1) ? 10'd511 : tmp_17_fu_1485_p4);

assign select_ln340_16_fu_1529_p3 = ((xor_ln340_18_fu_1168_p2[0:0] === 1'b1) ? 10'd511 : tmp_18_fu_1519_p4);

assign select_ln340_18_fu_1563_p3 = ((xor_ln340_19_fu_1224_p2[0:0] === 1'b1) ? 10'd511 : tmp_19_fu_1553_p4);

assign select_ln340_20_fu_1731_p3 = ((xor_ln340_20_fu_1713_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_22_fu_1688_p2);

assign select_ln340_22_fu_1867_p3 = ((xor_ln340_22_fu_1839_p2[0:0] === 1'b1) ? 10'd511 : tmp_20_fu_1857_p4);

assign select_ln340_2_fu_1291_p3 = ((xor_ln340_11_fu_776_p2[0:0] === 1'b1) ? 10'd511 : tmp_11_fu_1281_p4);

assign select_ln340_4_fu_1325_p3 = ((xor_ln340_12_fu_832_p2[0:0] === 1'b1) ? 10'd511 : tmp_12_fu_1315_p4);

assign select_ln340_6_fu_1359_p3 = ((xor_ln340_13_fu_888_p2[0:0] === 1'b1) ? 10'd511 : tmp_13_fu_1349_p4);

assign select_ln340_8_fu_1393_p3 = ((xor_ln340_14_fu_944_p2[0:0] === 1'b1) ? 10'd511 : tmp_14_fu_1383_p4);

assign select_ln340_fu_1252_p3 = ((xor_ln340_10_fu_720_p2[0:0] === 1'b1) ? 10'd511 : tmp_fu_1242_p4);

assign select_ln388_10_fu_1739_p3 = ((underflow_fu_1707_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_22_fu_1688_p2);

assign select_ln388_11_fu_1875_p3 = ((underflow_1_fu_1833_p2[0:0] === 1'b1) ? 10'd512 : tmp_20_fu_1857_p4);

assign select_ln388_1_fu_1299_p3 = ((and_ln786_1_fu_770_p2[0:0] === 1'b1) ? 10'd512 : tmp_11_fu_1281_p4);

assign select_ln388_2_fu_1333_p3 = ((and_ln786_2_fu_826_p2[0:0] === 1'b1) ? 10'd512 : tmp_12_fu_1315_p4);

assign select_ln388_3_fu_1367_p3 = ((and_ln786_3_fu_882_p2[0:0] === 1'b1) ? 10'd512 : tmp_13_fu_1349_p4);

assign select_ln388_4_fu_1401_p3 = ((and_ln786_4_fu_938_p2[0:0] === 1'b1) ? 10'd512 : tmp_14_fu_1383_p4);

assign select_ln388_5_fu_1435_p3 = ((and_ln786_5_fu_994_p2[0:0] === 1'b1) ? 10'd512 : tmp_15_fu_1417_p4);

assign select_ln388_6_fu_1469_p3 = ((and_ln786_6_fu_1050_p2[0:0] === 1'b1) ? 10'd512 : tmp_16_fu_1451_p4);

assign select_ln388_7_fu_1503_p3 = ((and_ln786_7_fu_1106_p2[0:0] === 1'b1) ? 10'd512 : tmp_17_fu_1485_p4);

assign select_ln388_8_fu_1537_p3 = ((and_ln786_8_fu_1162_p2[0:0] === 1'b1) ? 10'd512 : tmp_18_fu_1519_p4);

assign select_ln388_9_fu_1571_p3 = ((and_ln786_9_fu_1218_p2[0:0] === 1'b1) ? 10'd512 : tmp_19_fu_1553_p4);

assign select_ln388_fu_1260_p3 = ((and_ln786_fu_714_p2[0:0] === 1'b1) ? 10'd512 : tmp_fu_1242_p4);

assign select_ln65_1_fu_572_p1 = data_V_data_3_V_dout;

assign select_ln65_1_fu_572_p2 = data_V_data_2_V_dout;

assign select_ln65_1_fu_572_p3 = ((icmp_ln1496_1_fu_566_p2[0:0] === 1'b1) ? select_ln65_1_fu_572_p1 : select_ln65_1_fu_572_p2);

assign select_ln65_2_fu_586_p3 = ((icmp_ln1496_2_fu_580_p2[0:0] === 1'b1) ? select_ln65_1_fu_572_p3 : select_ln65_fu_558_p3);

assign select_ln65_3_fu_600_p1 = data_V_data_5_V_dout;

assign select_ln65_3_fu_600_p2 = data_V_data_4_V_dout;

assign select_ln65_3_fu_600_p3 = ((icmp_ln1496_3_fu_594_p2[0:0] === 1'b1) ? select_ln65_3_fu_600_p1 : select_ln65_3_fu_600_p2);

assign select_ln65_4_fu_614_p1 = data_V_data_7_V_dout;

assign select_ln65_4_fu_614_p2 = data_V_data_6_V_dout;

assign select_ln65_4_fu_614_p3 = ((icmp_ln1496_4_fu_608_p2[0:0] === 1'b1) ? select_ln65_4_fu_614_p1 : select_ln65_4_fu_614_p2);

assign select_ln65_5_fu_628_p3 = ((icmp_ln1496_5_fu_622_p2[0:0] === 1'b1) ? select_ln65_4_fu_614_p3 : select_ln65_3_fu_600_p3);

assign select_ln65_6_fu_642_p3 = ((icmp_ln1496_6_fu_636_p2[0:0] === 1'b1) ? select_ln65_5_fu_628_p3 : select_ln65_2_fu_586_p3);

assign select_ln65_7_fu_656_p1 = data_V_data_9_V_dout;

assign select_ln65_7_fu_656_p2 = data_V_data_8_V_dout;

assign select_ln65_7_fu_656_p3 = ((icmp_ln1496_7_fu_650_p2[0:0] === 1'b1) ? select_ln65_7_fu_656_p1 : select_ln65_7_fu_656_p2);

assign select_ln65_fu_558_p1 = data_V_data_1_V_dout;

assign select_ln65_fu_558_p2 = data_V_data_0_V_dout;

assign select_ln65_fu_558_p3 = ((icmp_ln1496_fu_552_p2[0:0] === 1'b1) ? select_ln65_fu_558_p1 : select_ln65_fu_558_p2);

assign sext_ln241_fu_1896_p1 = $signed(invert_table4_q0);

assign sext_ln703_10_fu_1186_p0 = data_V_data_9_V_dout;

assign sext_ln703_10_fu_1186_p1 = sext_ln703_10_fu_1186_p0;

assign sext_ln703_1_fu_682_p1 = $signed(x_max_V_fu_670_p3);

assign sext_ln703_2_fu_738_p0 = data_V_data_1_V_dout;

assign sext_ln703_2_fu_738_p1 = sext_ln703_2_fu_738_p0;

assign sext_ln703_3_fu_794_p0 = data_V_data_2_V_dout;

assign sext_ln703_3_fu_794_p1 = sext_ln703_3_fu_794_p0;

assign sext_ln703_4_fu_850_p0 = data_V_data_3_V_dout;

assign sext_ln703_4_fu_850_p1 = sext_ln703_4_fu_850_p0;

assign sext_ln703_5_fu_906_p0 = data_V_data_4_V_dout;

assign sext_ln703_5_fu_906_p1 = sext_ln703_5_fu_906_p0;

assign sext_ln703_6_fu_962_p0 = data_V_data_5_V_dout;

assign sext_ln703_6_fu_962_p1 = sext_ln703_6_fu_962_p0;

assign sext_ln703_7_fu_1018_p0 = data_V_data_6_V_dout;

assign sext_ln703_7_fu_1018_p1 = sext_ln703_7_fu_1018_p0;

assign sext_ln703_8_fu_1074_p0 = data_V_data_7_V_dout;

assign sext_ln703_8_fu_1074_p1 = sext_ln703_8_fu_1074_p0;

assign sext_ln703_9_fu_1130_p0 = data_V_data_8_V_dout;

assign sext_ln703_9_fu_1130_p1 = sext_ln703_9_fu_1130_p0;

assign sext_ln703_fu_678_p0 = data_V_data_0_V_dout;

assign sext_ln703_fu_678_p1 = sext_ln703_fu_678_p0;

assign sub_ln1193_1_fu_742_p2 = ($signed(sext_ln703_2_fu_738_p1) - $signed(sext_ln703_1_fu_682_p1));

assign sub_ln1193_2_fu_798_p2 = ($signed(sext_ln703_3_fu_794_p1) - $signed(sext_ln703_1_fu_682_p1));

assign sub_ln1193_3_fu_854_p2 = ($signed(sext_ln703_4_fu_850_p1) - $signed(sext_ln703_1_fu_682_p1));

assign sub_ln1193_4_fu_910_p2 = ($signed(sext_ln703_5_fu_906_p1) - $signed(sext_ln703_1_fu_682_p1));

assign sub_ln1193_5_fu_966_p2 = ($signed(sext_ln703_6_fu_962_p1) - $signed(sext_ln703_1_fu_682_p1));

assign sub_ln1193_6_fu_1022_p2 = ($signed(sext_ln703_7_fu_1018_p1) - $signed(sext_ln703_1_fu_682_p1));

assign sub_ln1193_7_fu_1078_p2 = ($signed(sext_ln703_8_fu_1074_p1) - $signed(sext_ln703_1_fu_682_p1));

assign sub_ln1193_8_fu_1134_p2 = ($signed(sext_ln703_9_fu_1130_p1) - $signed(sext_ln703_1_fu_682_p1));

assign sub_ln1193_9_fu_1190_p2 = ($signed(sext_ln703_10_fu_1186_p1) - $signed(sext_ln703_1_fu_682_p1));

assign sub_ln1193_fu_686_p2 = ($signed(sext_ln703_fu_678_p1) - $signed(sext_ln703_1_fu_682_p1));

assign tmp_11_fu_1281_p4 = {{sub_ln1193_1_fu_742_p2[15:6]}};

assign tmp_12_fu_1315_p4 = {{sub_ln1193_2_fu_798_p2[15:6]}};

assign tmp_13_fu_1349_p4 = {{sub_ln1193_3_fu_854_p2[15:6]}};

assign tmp_14_fu_1383_p4 = {{sub_ln1193_4_fu_910_p2[15:6]}};

assign tmp_15_fu_1417_p4 = {{sub_ln1193_5_fu_966_p2[15:6]}};

assign tmp_16_fu_1451_p4 = {{sub_ln1193_6_fu_1022_p2[15:6]}};

assign tmp_17_fu_1485_p4 = {{sub_ln1193_7_fu_1078_p2[15:6]}};

assign tmp_18_fu_1519_p4 = {{sub_ln1193_8_fu_1134_p2[15:6]}};

assign tmp_19_fu_1553_p4 = {{sub_ln1193_9_fu_1190_p2[15:6]}};

assign tmp_20_fu_1857_p4 = {{p_Val2_29_fu_1813_p2[17:8]}};

assign tmp_21_fu_692_p3 = sub_ln1193_fu_686_p2[32'd16];

assign tmp_22_fu_700_p3 = sub_ln1193_fu_686_p2[32'd15];

assign tmp_23_fu_748_p3 = sub_ln1193_1_fu_742_p2[32'd16];

assign tmp_24_fu_756_p3 = sub_ln1193_1_fu_742_p2[32'd15];

assign tmp_25_fu_804_p3 = sub_ln1193_2_fu_798_p2[32'd16];

assign tmp_26_fu_812_p3 = sub_ln1193_2_fu_798_p2[32'd15];

assign tmp_27_fu_860_p3 = sub_ln1193_3_fu_854_p2[32'd16];

assign tmp_28_fu_868_p3 = sub_ln1193_3_fu_854_p2[32'd15];

assign tmp_29_fu_916_p3 = sub_ln1193_4_fu_910_p2[32'd16];

assign tmp_30_fu_924_p3 = sub_ln1193_4_fu_910_p2[32'd15];

assign tmp_31_fu_972_p3 = sub_ln1193_5_fu_966_p2[32'd16];

assign tmp_32_fu_980_p3 = sub_ln1193_5_fu_966_p2[32'd15];

assign tmp_33_fu_1028_p3 = sub_ln1193_6_fu_1022_p2[32'd16];

assign tmp_34_fu_1036_p3 = sub_ln1193_6_fu_1022_p2[32'd15];

assign tmp_35_fu_1084_p3 = sub_ln1193_7_fu_1078_p2[32'd16];

assign tmp_36_fu_1092_p3 = sub_ln1193_7_fu_1078_p2[32'd15];

assign tmp_37_fu_1140_p3 = sub_ln1193_8_fu_1134_p2[32'd16];

assign tmp_38_fu_1148_p3 = sub_ln1193_8_fu_1134_p2[32'd15];

assign tmp_39_fu_1196_p3 = sub_ln1193_9_fu_1190_p2[32'd16];

assign tmp_40_fu_1204_p3 = sub_ln1193_9_fu_1190_p2[32'd15];

assign tmp_fu_1242_p4 = {{sub_ln1193_fu_686_p2[15:6]}};

assign underflow_1_fu_1833_p2 = (xor_ln786_11_fu_1827_p2 & p_Result_20_fu_1805_p3);

assign underflow_fu_1707_p2 = (xor_ln786_10_fu_1701_p2 & p_Result_s_fu_1680_p3);

assign x_max_V_fu_670_p3 = ((icmp_ln1496_8_fu_664_p2[0:0] === 1'b1) ? select_ln65_7_fu_656_p3 : select_ln65_6_fu_642_p3);

assign xor_ln340_10_fu_720_p2 = (tmp_22_fu_700_p3 ^ tmp_21_fu_692_p3);

assign xor_ln340_11_fu_776_p2 = (tmp_24_fu_756_p3 ^ tmp_23_fu_748_p3);

assign xor_ln340_12_fu_832_p2 = (tmp_26_fu_812_p3 ^ tmp_25_fu_804_p3);

assign xor_ln340_13_fu_888_p2 = (tmp_28_fu_868_p3 ^ tmp_27_fu_860_p3);

assign xor_ln340_14_fu_944_p2 = (tmp_30_fu_924_p3 ^ tmp_29_fu_916_p3);

assign xor_ln340_15_fu_1000_p2 = (tmp_32_fu_980_p3 ^ tmp_31_fu_972_p3);

assign xor_ln340_16_fu_1056_p2 = (tmp_34_fu_1036_p3 ^ tmp_33_fu_1028_p3);

assign xor_ln340_17_fu_1112_p2 = (tmp_36_fu_1092_p3 ^ tmp_35_fu_1084_p3);

assign xor_ln340_18_fu_1168_p2 = (tmp_38_fu_1148_p3 ^ tmp_37_fu_1140_p3);

assign xor_ln340_19_fu_1224_p2 = (tmp_40_fu_1204_p3 ^ tmp_39_fu_1196_p3);

assign xor_ln340_1_fu_782_p2 = (tmp_23_fu_748_p3 ^ 1'd1);

assign xor_ln340_20_fu_1713_p2 = (p_Result_s_fu_1680_p3 ^ p_Result_18_fu_1693_p3);

assign xor_ln340_21_fu_1719_p2 = (p_Result_s_fu_1680_p3 ^ 1'd1);

assign xor_ln340_22_fu_1839_p2 = (p_Result_21_fu_1819_p3 ^ p_Result_20_fu_1805_p3);

assign xor_ln340_23_fu_1845_p2 = (p_Result_20_fu_1805_p3 ^ 1'd1);

assign xor_ln340_2_fu_838_p2 = (tmp_25_fu_804_p3 ^ 1'd1);

assign xor_ln340_3_fu_894_p2 = (tmp_27_fu_860_p3 ^ 1'd1);

assign xor_ln340_4_fu_950_p2 = (tmp_29_fu_916_p3 ^ 1'd1);

assign xor_ln340_5_fu_1006_p2 = (tmp_31_fu_972_p3 ^ 1'd1);

assign xor_ln340_6_fu_1062_p2 = (tmp_33_fu_1028_p3 ^ 1'd1);

assign xor_ln340_7_fu_1118_p2 = (tmp_35_fu_1084_p3 ^ 1'd1);

assign xor_ln340_8_fu_1174_p2 = (tmp_37_fu_1140_p3 ^ 1'd1);

assign xor_ln340_9_fu_1230_p2 = (tmp_39_fu_1196_p3 ^ 1'd1);

assign xor_ln340_fu_726_p2 = (tmp_21_fu_692_p3 ^ 1'd1);

assign xor_ln786_10_fu_1701_p2 = (p_Result_18_fu_1693_p3 ^ 1'd1);

assign xor_ln786_11_fu_1827_p2 = (p_Result_21_fu_1819_p3 ^ 1'd1);

assign xor_ln786_1_fu_764_p2 = (tmp_24_fu_756_p3 ^ 1'd1);

assign xor_ln786_2_fu_820_p2 = (tmp_26_fu_812_p3 ^ 1'd1);

assign xor_ln786_3_fu_876_p2 = (tmp_28_fu_868_p3 ^ 1'd1);

assign xor_ln786_4_fu_932_p2 = (tmp_30_fu_924_p3 ^ 1'd1);

assign xor_ln786_5_fu_988_p2 = (tmp_32_fu_980_p3 ^ 1'd1);

assign xor_ln786_6_fu_1044_p2 = (tmp_34_fu_1036_p3 ^ 1'd1);

assign xor_ln786_7_fu_1100_p2 = (tmp_36_fu_1092_p3 ^ 1'd1);

assign xor_ln786_8_fu_1156_p2 = (tmp_38_fu_1148_p3 ^ 1'd1);

assign xor_ln786_9_fu_1212_p2 = (tmp_40_fu_1204_p3 ^ 1'd1);

assign xor_ln786_fu_708_p2 = (tmp_22_fu_700_p3 ^ 1'd1);

assign y_V_10_fu_1883_p3 = ((or_ln340_11_fu_1851_p2[0:0] === 1'b1) ? select_ln340_22_fu_1867_p3 : select_ln388_11_fu_1875_p3);

assign y_V_1_fu_1307_p3 = ((or_ln340_1_fu_788_p2[0:0] === 1'b1) ? select_ln340_2_fu_1291_p3 : select_ln388_1_fu_1299_p3);

assign y_V_2_fu_1341_p3 = ((or_ln340_2_fu_844_p2[0:0] === 1'b1) ? select_ln340_4_fu_1325_p3 : select_ln388_2_fu_1333_p3);

assign y_V_3_fu_1375_p3 = ((or_ln340_3_fu_900_p2[0:0] === 1'b1) ? select_ln340_6_fu_1359_p3 : select_ln388_3_fu_1367_p3);

assign y_V_4_fu_1409_p3 = ((or_ln340_4_fu_956_p2[0:0] === 1'b1) ? select_ln340_8_fu_1393_p3 : select_ln388_4_fu_1401_p3);

assign y_V_5_fu_1443_p3 = ((or_ln340_5_fu_1012_p2[0:0] === 1'b1) ? select_ln340_10_fu_1427_p3 : select_ln388_5_fu_1435_p3);

assign y_V_6_fu_1477_p3 = ((or_ln340_6_fu_1068_p2[0:0] === 1'b1) ? select_ln340_12_fu_1461_p3 : select_ln388_6_fu_1469_p3);

assign y_V_7_fu_1511_p3 = ((or_ln340_7_fu_1124_p2[0:0] === 1'b1) ? select_ln340_14_fu_1495_p3 : select_ln388_7_fu_1503_p3);

assign y_V_8_fu_1545_p3 = ((or_ln340_8_fu_1180_p2[0:0] === 1'b1) ? select_ln340_16_fu_1529_p3 : select_ln388_8_fu_1537_p3);

assign y_V_9_fu_1579_p3 = ((or_ln340_9_fu_1236_p2[0:0] === 1'b1) ? select_ln340_18_fu_1563_p3 : select_ln388_9_fu_1571_p3);

assign y_V_fu_1268_p3 = ((or_ln340_fu_732_p2[0:0] === 1'b1) ? select_ln340_fu_1252_p3 : select_ln388_fu_1260_p3);

assign zext_ln1118_1_fu_1905_p1 = exp_res_1_V_1_reg_2067_pp0_iter1_reg;

assign zext_ln1118_2_fu_1909_p1 = exp_res_2_V_1_reg_2078_pp0_iter1_reg;

assign zext_ln1118_3_fu_1913_p1 = exp_res_3_V_1_reg_2089_pp0_iter1_reg;

assign zext_ln1118_4_fu_1917_p1 = exp_res_4_V_1_reg_2100_pp0_iter1_reg;

assign zext_ln1118_5_fu_1921_p1 = exp_res_5_V_1_reg_2111_pp0_iter1_reg;

assign zext_ln1118_6_fu_1925_p1 = exp_res_6_V_1_reg_2122_pp0_iter1_reg;

assign zext_ln1118_7_fu_1929_p1 = exp_res_7_V_1_reg_2132_pp0_iter1_reg;

assign zext_ln1118_8_fu_1933_p1 = exp_res_8_V_1_reg_2142_pp0_iter2_reg;

assign zext_ln1118_9_fu_1937_p1 = exp_res_9_V_1_reg_2149_pp0_iter2_reg;

assign zext_ln1118_fu_1901_p1 = exp_res_0_V_1_reg_2056_pp0_iter1_reg;

assign zext_ln225_1_fu_1587_p1 = y_V_1_reg_2006;

assign zext_ln225_2_fu_1591_p1 = y_V_2_reg_2011;

assign zext_ln225_3_fu_1595_p1 = y_V_3_reg_2016;

assign zext_ln225_4_fu_1599_p1 = y_V_4_reg_2021;

assign zext_ln225_5_fu_1603_p1 = y_V_5_reg_2026;

assign zext_ln225_6_fu_1607_p1 = y_V_6_reg_2031;

assign zext_ln225_7_fu_1611_p1 = y_V_7_reg_2036;

assign zext_ln225_8_fu_1644_p1 = y_V_8_reg_2041;

assign zext_ln225_9_fu_1653_p1 = y_V_9_reg_2046;

assign zext_ln225_fu_1276_p1 = y_V_fu_1268_p3;

assign zext_ln235_fu_1891_p1 = y_V_10_fu_1883_p3;

assign zext_ln746_fu_1787_p1 = p_Val2_27_fu_1779_p3;

endmodule //softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config16_s
