-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC );
end;


architecture behav of pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv10_2A4 : STD_LOGIC_VECTOR (9 downto 0) := "1010100100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal pX_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sX_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_2_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_20 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_21 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_22 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_23 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_36 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_37 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_38 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_39 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_52 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_53 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_54 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_55 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_10 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_11 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_24 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_25 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_26 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_27 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_40 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_41 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_42 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_43 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_56 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_57 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_58 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_59 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_12 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_13 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_14 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_15 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_28 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_29 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_30 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_31 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_44 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_45 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_46 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_47 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_60 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_61 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_62 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_63 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal line_buffer_Array_V_2_0_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_2_1_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_1_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_1_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_2_2_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_2_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_2_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_2_0_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_1_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_2_1_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_1_1_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_1_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_2_2_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_2_1_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_2_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_2_0_2_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_2_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_2_1_2_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_1_2_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_1_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_2_2_2_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_2_2_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_2_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_2_0_3_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_3_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_2_1_3_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_1_3_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_1_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_2_2_3_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_2_3_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_2_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln241_reg_3006 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_data_1_V_blk_n : STD_LOGIC;
    signal data_V_data_2_V_blk_n : STD_LOGIC;
    signal data_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal and_ln191_4_reg_3015 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_4_reg_3015_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_364 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln241_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal io_acc_block_signal_op57 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal io_acc_block_signal_op373 : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln241_fu_392_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal and_ln191_4_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_reg_3019 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln216_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln222_fu_530_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_window_15_V_reg_3032 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_15_V_1_reg_3060 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_15_V_2_reg_3088 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_15_V_3_reg_3116 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_11_V_reg_3144 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_7_V_reg_3164 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_reg_3178 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_11_V_1_reg_3184 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_7_V_1_reg_3204 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_8_reg_3218 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_11_V_2_reg_3224 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_7_V_2_reg_3244 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_9_reg_3258 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_11_V_3_reg_3264 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_7_V_3_reg_3284 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_10_reg_3298 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_reg_3304 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_8_reg_3310 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_9_reg_3316 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_10_reg_3322 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_4_V_reg_3328 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_4_V_1_reg_3334 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_4_V_2_reg_3340 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_4_V_3_reg_3346 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_8_V_reg_3352 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_8_V_1_reg_3360 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_8_V_2_reg_3368 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_8_V_3_reg_3376 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_12_V_reg_3384 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_12_V_1_reg_3392 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_12_V_2_reg_3400 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_12_V_3_reg_3408 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_reg_3416 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_8_reg_3422 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_9_reg_3428 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_10_reg_3434 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_5_V_reg_3440 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_5_V_1_reg_3446 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_5_V_2_reg_3452 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_5_V_3_reg_3458 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_9_V_reg_3464 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_9_V_1_reg_3472 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_9_V_2_reg_3480 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_9_V_3_reg_3488 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_13_V_reg_3496 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_13_V_1_reg_3504 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_13_V_2_reg_3512 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_13_V_3_reg_3520 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_reg_3528 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_8_reg_3534 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_9_reg_3540 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_10_reg_3546 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_6_V_reg_3552 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_6_V_1_reg_3558 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_6_V_2_reg_3564 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_6_V_3_reg_3570 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_10_V_reg_3576 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_10_V_1_reg_3584 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_10_V_2_reg_3592 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_10_V_3_reg_3600 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_14_V_reg_3608 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_14_V_1_reg_3616 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_14_V_2_reg_3624 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_14_V_3_reg_3632 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_40_fu_1366_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_40_reg_3640 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln1496_30_fu_1374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_30_reg_3645 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_31_fu_1380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_31_reg_3651 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_33_fu_1386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_33_reg_3657 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_34_fu_1392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_34_reg_3663 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_62_fu_1604_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_62_reg_3669 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln1496_44_fu_1612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_44_reg_3674 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_45_fu_1618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_45_reg_3680 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_47_fu_1624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_47_reg_3686 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_48_fu_1630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_48_reg_3692 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_83_fu_1842_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_83_reg_3698 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln1496_58_fu_1850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_58_reg_3703 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_59_fu_1856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_59_reg_3709 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_61_fu_1862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_61_reg_3715 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_62_fu_1868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_62_reg_3721 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_104_fu_2080_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_104_reg_3727 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln1496_73_fu_2088_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_73_reg_3732 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_74_fu_2094_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_74_reg_3738 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_76_fu_2100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_76_reg_3744 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_77_fu_2106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_77_reg_3750 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_reg_pp0_iter0_storemerge_i_i_reg_375 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln225_fu_462_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln227_fu_480_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln220_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_sY_1_load : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_0_V_fu_2317_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_data_1_V_fu_2539_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_fu_2761_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_fu_2983_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln191_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_4_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_5_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_6_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_3_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln227_fu_474_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln222_fu_524_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1496_fu_1160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_24_fu_1178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_1170_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_33_fu_1192_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_25_fu_1200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_32_fu_1184_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_fu_1166_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_34_fu_1206_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln_fu_1222_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_26_fu_1260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_27_fu_1282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_36_fu_1274_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_38_fu_1296_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_28_fu_1304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_48_fu_1288_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_35_fu_1266_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_39_fu_1310_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln65_1_fu_1322_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln_fu_1222_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_1_fu_1322_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_29_fu_1360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln65_8_fu_1214_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln1496_1_fu_1398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_38_fu_1416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_53_fu_1408_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_55_fu_1430_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_39_fu_1438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_54_fu_1422_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_10_fu_1404_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_56_fu_1444_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln65_6_fu_1460_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_40_fu_1498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_41_fu_1520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_58_fu_1512_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_60_fu_1534_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_42_fu_1542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_70_fu_1526_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_57_fu_1504_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_61_fu_1548_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln65_7_fu_1560_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_6_fu_1460_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_7_fu_1560_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_43_fu_1598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln65_11_fu_1452_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln1496_2_fu_1636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_52_fu_1654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_74_fu_1646_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_76_fu_1668_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_53_fu_1676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_75_fu_1660_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_13_fu_1642_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_77_fu_1682_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln65_11_fu_1698_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_54_fu_1736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_55_fu_1758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_79_fu_1750_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_81_fu_1772_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_56_fu_1780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_101_fu_1764_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_78_fu_1742_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_82_fu_1786_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln65_12_fu_1798_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_11_fu_1698_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_12_fu_1798_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_57_fu_1836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln65_14_fu_1690_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln1496_66_fu_1874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_67_fu_1892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_95_fu_1884_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_97_fu_1906_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_68_fu_1914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_96_fu_1898_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_16_fu_1880_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_98_fu_1920_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln65_17_fu_1936_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_69_fu_1974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_70_fu_1996_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_100_fu_1988_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_102_fu_2010_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_71_fu_2018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_117_fu_2002_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_99_fu_1980_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_103_fu_2024_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln65_18_fu_2036_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_17_fu_1936_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_18_fu_2036_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_72_fu_2074_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln65_17_fu_1928_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln65_9_fu_2118_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_42_fu_2150_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_44_fu_2162_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_32_fu_2167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_43_fu_2155_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_41_fu_2143_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_45_fu_2173_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_47_fu_2210_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_49_fu_2222_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_35_fu_2227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_52_fu_2215_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_46_fu_2203_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_50_fu_2233_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln65_fu_2241_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_3_fu_2181_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_4_fu_2245_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_36_fu_2267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_51_fu_2273_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_2_fu_2121_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_5_fu_2281_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_37_fu_2303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_0_V_fu_2317_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln65_12_fu_2340_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_64_fu_2372_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_66_fu_2384_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_46_fu_2389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_65_fu_2377_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_63_fu_2365_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_67_fu_2395_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_69_fu_2432_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_71_fu_2444_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_49_fu_2449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_80_fu_2437_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_68_fu_2425_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_72_fu_2455_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln65_1_fu_2463_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_9_fu_2403_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_s_fu_2467_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_50_fu_2489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_73_fu_2495_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_8_fu_2343_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_10_fu_2503_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_51_fu_2525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_1_V_fu_2539_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln65_15_fu_2562_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_85_fu_2594_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_87_fu_2606_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_60_fu_2611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_86_fu_2599_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_84_fu_2587_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_88_fu_2617_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_90_fu_2654_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_92_fu_2666_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_63_fu_2671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_112_fu_2659_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_89_fu_2647_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_93_fu_2677_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln65_2_fu_2685_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_14_fu_2625_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_15_fu_2689_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_64_fu_2711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_94_fu_2717_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_13_fu_2565_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_16_fu_2725_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_65_fu_2747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_2_V_fu_2761_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln65_18_fu_2784_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_106_fu_2816_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_108_fu_2828_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_75_fu_2833_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_107_fu_2821_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_105_fu_2809_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_109_fu_2839_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_111_fu_2876_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_113_fu_2888_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_78_fu_2893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_118_fu_2881_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_110_fu_2869_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_114_fu_2899_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln65_3_fu_2907_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_20_fu_2847_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_21_fu_2911_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_79_fu_2933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_115_fu_2939_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_19_fu_2787_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_22_fu_2947_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_80_fu_2969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_3_V_fu_2983_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_303 : BOOLEAN;
    signal ap_condition_500 : BOOLEAN;
    signal ap_condition_284 : BOOLEAN;
    signal ap_condition_493 : BOOLEAN;
    signal ap_condition_506 : BOOLEAN;

    component myproject_mux_164_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    line_buffer_Array_V_2_0_0_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_0_0_ce0,
        we0 => line_buffer_Array_V_2_0_0_we0,
        d0 => data_V_data_0_V_dout,
        q0 => line_buffer_Array_V_2_0_0_q0);

    line_buffer_Array_V_2_1_0_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_1_0_ce0,
        we0 => line_buffer_Array_V_2_1_0_we0,
        d0 => line_buffer_Array_V_2_0_0_q0,
        q0 => line_buffer_Array_V_2_1_0_q0);

    line_buffer_Array_V_2_2_0_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_2_0_ce0,
        we0 => line_buffer_Array_V_2_2_0_we0,
        d0 => line_buffer_Array_V_2_1_0_q0,
        q0 => line_buffer_Array_V_2_2_0_q0);

    line_buffer_Array_V_2_0_1_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_0_1_ce0,
        we0 => line_buffer_Array_V_2_0_1_we0,
        d0 => data_V_data_1_V_dout,
        q0 => line_buffer_Array_V_2_0_1_q0);

    line_buffer_Array_V_2_1_1_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_1_1_ce0,
        we0 => line_buffer_Array_V_2_1_1_we0,
        d0 => line_buffer_Array_V_2_0_1_q0,
        q0 => line_buffer_Array_V_2_1_1_q0);

    line_buffer_Array_V_2_2_1_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_2_1_ce0,
        we0 => line_buffer_Array_V_2_2_1_we0,
        d0 => line_buffer_Array_V_2_1_1_q0,
        q0 => line_buffer_Array_V_2_2_1_q0);

    line_buffer_Array_V_2_0_2_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_0_2_ce0,
        we0 => line_buffer_Array_V_2_0_2_we0,
        d0 => data_V_data_2_V_dout,
        q0 => line_buffer_Array_V_2_0_2_q0);

    line_buffer_Array_V_2_1_2_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_1_2_ce0,
        we0 => line_buffer_Array_V_2_1_2_we0,
        d0 => line_buffer_Array_V_2_0_2_q0,
        q0 => line_buffer_Array_V_2_1_2_q0);

    line_buffer_Array_V_2_2_2_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_2_2_ce0,
        we0 => line_buffer_Array_V_2_2_2_we0,
        d0 => line_buffer_Array_V_2_1_2_q0,
        q0 => line_buffer_Array_V_2_2_2_q0);

    line_buffer_Array_V_2_0_3_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_0_3_ce0,
        we0 => line_buffer_Array_V_2_0_3_we0,
        d0 => data_V_data_3_V_dout,
        q0 => line_buffer_Array_V_2_0_3_q0);

    line_buffer_Array_V_2_1_3_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_1_3_ce0,
        we0 => line_buffer_Array_V_2_1_3_we0,
        d0 => line_buffer_Array_V_2_0_3_q0,
        q0 => line_buffer_Array_V_2_1_3_q0);

    line_buffer_Array_V_2_2_3_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_2_3_ce0,
        we0 => line_buffer_Array_V_2_2_3_we0,
        d0 => line_buffer_Array_V_2_1_3_q0,
        q0 => line_buffer_Array_V_2_2_3_q0);

    myproject_mux_164_16_1_1_U37 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_2_4,
        din1 => kernel_data_V_2_8,
        din2 => kernel_data_V_2_12,
        din3 => line_buffer_Array_V_2_2_0_q0,
        din4 => line_buffer_Array_V_2_2_0_q0,
        din5 => line_buffer_Array_V_2_2_0_q0,
        din6 => line_buffer_Array_V_2_2_0_q0,
        din7 => line_buffer_Array_V_2_2_0_q0,
        din8 => line_buffer_Array_V_2_2_0_q0,
        din9 => line_buffer_Array_V_2_2_0_q0,
        din10 => line_buffer_Array_V_2_2_0_q0,
        din11 => line_buffer_Array_V_2_2_0_q0,
        din12 => line_buffer_Array_V_2_2_0_q0,
        din13 => line_buffer_Array_V_2_2_0_q0,
        din14 => line_buffer_Array_V_2_2_0_q0,
        din15 => line_buffer_Array_V_2_2_0_q0,
        din16 => phi_ln_fu_1222_p17,
        dout => phi_ln_fu_1222_p18);

    myproject_mux_164_16_1_1_U38 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => line_buffer_Array_V_2_1_0_q0,
        din1 => line_buffer_Array_V_2_1_0_q0,
        din2 => line_buffer_Array_V_2_1_0_q0,
        din3 => line_buffer_Array_V_2_1_0_q0,
        din4 => kernel_data_V_2_20,
        din5 => kernel_data_V_2_24,
        din6 => kernel_data_V_2_28,
        din7 => line_buffer_Array_V_2_1_0_q0,
        din8 => line_buffer_Array_V_2_1_0_q0,
        din9 => line_buffer_Array_V_2_1_0_q0,
        din10 => line_buffer_Array_V_2_1_0_q0,
        din11 => line_buffer_Array_V_2_1_0_q0,
        din12 => line_buffer_Array_V_2_1_0_q0,
        din13 => line_buffer_Array_V_2_1_0_q0,
        din14 => line_buffer_Array_V_2_1_0_q0,
        din15 => line_buffer_Array_V_2_1_0_q0,
        din16 => phi_ln65_1_fu_1322_p17,
        dout => phi_ln65_1_fu_1322_p18);

    myproject_mux_164_16_1_1_U39 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_2_5,
        din1 => kernel_data_V_2_9,
        din2 => kernel_data_V_2_13,
        din3 => line_buffer_Array_V_2_2_1_q0,
        din4 => line_buffer_Array_V_2_2_1_q0,
        din5 => line_buffer_Array_V_2_2_1_q0,
        din6 => line_buffer_Array_V_2_2_1_q0,
        din7 => line_buffer_Array_V_2_2_1_q0,
        din8 => line_buffer_Array_V_2_2_1_q0,
        din9 => line_buffer_Array_V_2_2_1_q0,
        din10 => line_buffer_Array_V_2_2_1_q0,
        din11 => line_buffer_Array_V_2_2_1_q0,
        din12 => line_buffer_Array_V_2_2_1_q0,
        din13 => line_buffer_Array_V_2_2_1_q0,
        din14 => line_buffer_Array_V_2_2_1_q0,
        din15 => line_buffer_Array_V_2_2_1_q0,
        din16 => phi_ln65_6_fu_1460_p17,
        dout => phi_ln65_6_fu_1460_p18);

    myproject_mux_164_16_1_1_U40 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => line_buffer_Array_V_2_1_1_q0,
        din1 => line_buffer_Array_V_2_1_1_q0,
        din2 => line_buffer_Array_V_2_1_1_q0,
        din3 => line_buffer_Array_V_2_1_1_q0,
        din4 => kernel_data_V_2_21,
        din5 => kernel_data_V_2_25,
        din6 => kernel_data_V_2_29,
        din7 => line_buffer_Array_V_2_1_1_q0,
        din8 => line_buffer_Array_V_2_1_1_q0,
        din9 => line_buffer_Array_V_2_1_1_q0,
        din10 => line_buffer_Array_V_2_1_1_q0,
        din11 => line_buffer_Array_V_2_1_1_q0,
        din12 => line_buffer_Array_V_2_1_1_q0,
        din13 => line_buffer_Array_V_2_1_1_q0,
        din14 => line_buffer_Array_V_2_1_1_q0,
        din15 => line_buffer_Array_V_2_1_1_q0,
        din16 => phi_ln65_7_fu_1560_p17,
        dout => phi_ln65_7_fu_1560_p18);

    myproject_mux_164_16_1_1_U41 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_2_6,
        din1 => kernel_data_V_2_10,
        din2 => kernel_data_V_2_14,
        din3 => line_buffer_Array_V_2_2_2_q0,
        din4 => line_buffer_Array_V_2_2_2_q0,
        din5 => line_buffer_Array_V_2_2_2_q0,
        din6 => line_buffer_Array_V_2_2_2_q0,
        din7 => line_buffer_Array_V_2_2_2_q0,
        din8 => line_buffer_Array_V_2_2_2_q0,
        din9 => line_buffer_Array_V_2_2_2_q0,
        din10 => line_buffer_Array_V_2_2_2_q0,
        din11 => line_buffer_Array_V_2_2_2_q0,
        din12 => line_buffer_Array_V_2_2_2_q0,
        din13 => line_buffer_Array_V_2_2_2_q0,
        din14 => line_buffer_Array_V_2_2_2_q0,
        din15 => line_buffer_Array_V_2_2_2_q0,
        din16 => phi_ln65_11_fu_1698_p17,
        dout => phi_ln65_11_fu_1698_p18);

    myproject_mux_164_16_1_1_U42 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => line_buffer_Array_V_2_1_2_q0,
        din1 => line_buffer_Array_V_2_1_2_q0,
        din2 => line_buffer_Array_V_2_1_2_q0,
        din3 => line_buffer_Array_V_2_1_2_q0,
        din4 => kernel_data_V_2_22,
        din5 => kernel_data_V_2_26,
        din6 => kernel_data_V_2_30,
        din7 => line_buffer_Array_V_2_1_2_q0,
        din8 => line_buffer_Array_V_2_1_2_q0,
        din9 => line_buffer_Array_V_2_1_2_q0,
        din10 => line_buffer_Array_V_2_1_2_q0,
        din11 => line_buffer_Array_V_2_1_2_q0,
        din12 => line_buffer_Array_V_2_1_2_q0,
        din13 => line_buffer_Array_V_2_1_2_q0,
        din14 => line_buffer_Array_V_2_1_2_q0,
        din15 => line_buffer_Array_V_2_1_2_q0,
        din16 => phi_ln65_12_fu_1798_p17,
        dout => phi_ln65_12_fu_1798_p18);

    myproject_mux_164_16_1_1_U43 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_2_7,
        din1 => kernel_data_V_2_11,
        din2 => kernel_data_V_2_15,
        din3 => line_buffer_Array_V_2_2_3_q0,
        din4 => line_buffer_Array_V_2_2_3_q0,
        din5 => line_buffer_Array_V_2_2_3_q0,
        din6 => line_buffer_Array_V_2_2_3_q0,
        din7 => line_buffer_Array_V_2_2_3_q0,
        din8 => line_buffer_Array_V_2_2_3_q0,
        din9 => line_buffer_Array_V_2_2_3_q0,
        din10 => line_buffer_Array_V_2_2_3_q0,
        din11 => line_buffer_Array_V_2_2_3_q0,
        din12 => line_buffer_Array_V_2_2_3_q0,
        din13 => line_buffer_Array_V_2_2_3_q0,
        din14 => line_buffer_Array_V_2_2_3_q0,
        din15 => line_buffer_Array_V_2_2_3_q0,
        din16 => phi_ln65_17_fu_1936_p17,
        dout => phi_ln65_17_fu_1936_p18);

    myproject_mux_164_16_1_1_U44 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => line_buffer_Array_V_2_1_3_q0,
        din1 => line_buffer_Array_V_2_1_3_q0,
        din2 => line_buffer_Array_V_2_1_3_q0,
        din3 => line_buffer_Array_V_2_1_3_q0,
        din4 => kernel_data_V_2_23,
        din5 => kernel_data_V_2_27,
        din6 => kernel_data_V_2_31,
        din7 => line_buffer_Array_V_2_1_3_q0,
        din8 => line_buffer_Array_V_2_1_3_q0,
        din9 => line_buffer_Array_V_2_1_3_q0,
        din10 => line_buffer_Array_V_2_1_3_q0,
        din11 => line_buffer_Array_V_2_1_3_q0,
        din12 => line_buffer_Array_V_2_1_3_q0,
        din13 => line_buffer_Array_V_2_1_3_q0,
        din14 => line_buffer_Array_V_2_1_3_q0,
        din15 => line_buffer_Array_V_2_1_3_q0,
        din16 => phi_ln65_18_fu_2036_p17,
        dout => phi_ln65_18_fu_2036_p18);

    myproject_mux_164_16_1_1_U45 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_0_V_reg_3304,
        din1 => pool_window_1_V_reg_3416,
        din2 => pool_window_2_V_reg_3528,
        din3 => pool_window_3_V_reg_3178,
        din4 => pool_window_4_V_reg_3328,
        din5 => pool_window_5_V_reg_3440,
        din6 => pool_window_6_V_reg_3552,
        din7 => pool_window_7_V_reg_3164,
        din8 => pool_window_7_V_reg_3164,
        din9 => pool_window_7_V_reg_3164,
        din10 => pool_window_7_V_reg_3164,
        din11 => pool_window_7_V_reg_3164,
        din12 => pool_window_7_V_reg_3164,
        din13 => pool_window_7_V_reg_3164,
        din14 => pool_window_7_V_reg_3164,
        din15 => pool_window_7_V_reg_3164,
        din16 => zext_ln65_9_fu_2118_p1,
        dout => phi_ln65_2_fu_2121_p18);

    myproject_mux_164_16_1_1_U46 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_11_V_reg_3144,
        din1 => pool_window_11_V_reg_3144,
        din2 => pool_window_11_V_reg_3144,
        din3 => pool_window_11_V_reg_3144,
        din4 => pool_window_11_V_reg_3144,
        din5 => pool_window_11_V_reg_3144,
        din6 => pool_window_11_V_reg_3144,
        din7 => pool_window_11_V_reg_3144,
        din8 => pool_window_8_V_reg_3352,
        din9 => pool_window_9_V_reg_3464,
        din10 => pool_window_10_V_reg_3576,
        din11 => pool_window_11_V_reg_3144,
        din12 => pool_window_11_V_reg_3144,
        din13 => pool_window_11_V_reg_3144,
        din14 => pool_window_11_V_reg_3144,
        din15 => pool_window_11_V_reg_3144,
        din16 => select_ln65_45_fu_2173_p3,
        dout => phi_ln65_3_fu_2181_p18);

    myproject_mux_164_16_1_1_U47 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_15_V_reg_3032,
        din1 => pool_window_15_V_reg_3032,
        din2 => pool_window_15_V_reg_3032,
        din3 => pool_window_15_V_reg_3032,
        din4 => pool_window_15_V_reg_3032,
        din5 => pool_window_15_V_reg_3032,
        din6 => pool_window_15_V_reg_3032,
        din7 => pool_window_15_V_reg_3032,
        din8 => pool_window_15_V_reg_3032,
        din9 => pool_window_15_V_reg_3032,
        din10 => pool_window_15_V_reg_3032,
        din11 => pool_window_15_V_reg_3032,
        din12 => pool_window_12_V_reg_3384,
        din13 => pool_window_13_V_reg_3496,
        din14 => pool_window_14_V_reg_3608,
        din15 => pool_window_15_V_reg_3032,
        din16 => sext_ln65_fu_2241_p1,
        dout => phi_ln65_4_fu_2245_p18);

    myproject_mux_164_16_1_1_U48 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_15_V_reg_3032,
        din1 => pool_window_15_V_reg_3032,
        din2 => pool_window_15_V_reg_3032,
        din3 => pool_window_15_V_reg_3032,
        din4 => pool_window_15_V_reg_3032,
        din5 => pool_window_15_V_reg_3032,
        din6 => pool_window_15_V_reg_3032,
        din7 => pool_window_15_V_reg_3032,
        din8 => pool_window_8_V_reg_3352,
        din9 => pool_window_9_V_reg_3464,
        din10 => pool_window_10_V_reg_3576,
        din11 => pool_window_11_V_reg_3144,
        din12 => pool_window_12_V_reg_3384,
        din13 => pool_window_13_V_reg_3496,
        din14 => pool_window_14_V_reg_3608,
        din15 => pool_window_15_V_reg_3032,
        din16 => select_ln65_51_fu_2273_p3,
        dout => phi_ln65_5_fu_2281_p18);

    myproject_mux_164_16_1_1_U49 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_0_V_reg_3304,
        din1 => pool_window_1_V_reg_3416,
        din2 => pool_window_2_V_reg_3528,
        din3 => pool_window_3_V_reg_3178,
        din4 => pool_window_4_V_reg_3328,
        din5 => pool_window_5_V_reg_3440,
        din6 => pool_window_6_V_reg_3552,
        din7 => pool_window_7_V_reg_3164,
        din8 => pool_window_8_V_reg_3352,
        din9 => pool_window_9_V_reg_3464,
        din10 => pool_window_10_V_reg_3576,
        din11 => pool_window_11_V_reg_3144,
        din12 => pool_window_12_V_reg_3384,
        din13 => pool_window_13_V_reg_3496,
        din14 => pool_window_14_V_reg_3608,
        din15 => pool_window_15_V_reg_3032,
        din16 => tmp_data_0_V_fu_2317_p17,
        dout => tmp_data_0_V_fu_2317_p18);

    myproject_mux_164_16_1_1_U50 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_0_V_8_reg_3310,
        din1 => pool_window_1_V_8_reg_3422,
        din2 => pool_window_2_V_8_reg_3534,
        din3 => pool_window_3_V_8_reg_3218,
        din4 => pool_window_4_V_1_reg_3334,
        din5 => pool_window_5_V_1_reg_3446,
        din6 => pool_window_6_V_1_reg_3558,
        din7 => pool_window_7_V_1_reg_3204,
        din8 => pool_window_7_V_1_reg_3204,
        din9 => pool_window_7_V_1_reg_3204,
        din10 => pool_window_7_V_1_reg_3204,
        din11 => pool_window_7_V_1_reg_3204,
        din12 => pool_window_7_V_1_reg_3204,
        din13 => pool_window_7_V_1_reg_3204,
        din14 => pool_window_7_V_1_reg_3204,
        din15 => pool_window_7_V_1_reg_3204,
        din16 => zext_ln65_12_fu_2340_p1,
        dout => phi_ln65_8_fu_2343_p18);

    myproject_mux_164_16_1_1_U51 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_11_V_1_reg_3184,
        din1 => pool_window_11_V_1_reg_3184,
        din2 => pool_window_11_V_1_reg_3184,
        din3 => pool_window_11_V_1_reg_3184,
        din4 => pool_window_11_V_1_reg_3184,
        din5 => pool_window_11_V_1_reg_3184,
        din6 => pool_window_11_V_1_reg_3184,
        din7 => pool_window_11_V_1_reg_3184,
        din8 => pool_window_8_V_1_reg_3360,
        din9 => pool_window_9_V_1_reg_3472,
        din10 => pool_window_10_V_1_reg_3584,
        din11 => pool_window_11_V_1_reg_3184,
        din12 => pool_window_11_V_1_reg_3184,
        din13 => pool_window_11_V_1_reg_3184,
        din14 => pool_window_11_V_1_reg_3184,
        din15 => pool_window_11_V_1_reg_3184,
        din16 => select_ln65_67_fu_2395_p3,
        dout => phi_ln65_9_fu_2403_p18);

    myproject_mux_164_16_1_1_U52 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_15_V_1_reg_3060,
        din1 => pool_window_15_V_1_reg_3060,
        din2 => pool_window_15_V_1_reg_3060,
        din3 => pool_window_15_V_1_reg_3060,
        din4 => pool_window_15_V_1_reg_3060,
        din5 => pool_window_15_V_1_reg_3060,
        din6 => pool_window_15_V_1_reg_3060,
        din7 => pool_window_15_V_1_reg_3060,
        din8 => pool_window_15_V_1_reg_3060,
        din9 => pool_window_15_V_1_reg_3060,
        din10 => pool_window_15_V_1_reg_3060,
        din11 => pool_window_15_V_1_reg_3060,
        din12 => pool_window_12_V_1_reg_3392,
        din13 => pool_window_13_V_1_reg_3504,
        din14 => pool_window_14_V_1_reg_3616,
        din15 => pool_window_15_V_1_reg_3060,
        din16 => sext_ln65_1_fu_2463_p1,
        dout => phi_ln65_s_fu_2467_p18);

    myproject_mux_164_16_1_1_U53 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_15_V_1_reg_3060,
        din1 => pool_window_15_V_1_reg_3060,
        din2 => pool_window_15_V_1_reg_3060,
        din3 => pool_window_15_V_1_reg_3060,
        din4 => pool_window_15_V_1_reg_3060,
        din5 => pool_window_15_V_1_reg_3060,
        din6 => pool_window_15_V_1_reg_3060,
        din7 => pool_window_15_V_1_reg_3060,
        din8 => pool_window_8_V_1_reg_3360,
        din9 => pool_window_9_V_1_reg_3472,
        din10 => pool_window_10_V_1_reg_3584,
        din11 => pool_window_11_V_1_reg_3184,
        din12 => pool_window_12_V_1_reg_3392,
        din13 => pool_window_13_V_1_reg_3504,
        din14 => pool_window_14_V_1_reg_3616,
        din15 => pool_window_15_V_1_reg_3060,
        din16 => select_ln65_73_fu_2495_p3,
        dout => phi_ln65_10_fu_2503_p18);

    myproject_mux_164_16_1_1_U54 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_0_V_8_reg_3310,
        din1 => pool_window_1_V_8_reg_3422,
        din2 => pool_window_2_V_8_reg_3534,
        din3 => pool_window_3_V_8_reg_3218,
        din4 => pool_window_4_V_1_reg_3334,
        din5 => pool_window_5_V_1_reg_3446,
        din6 => pool_window_6_V_1_reg_3558,
        din7 => pool_window_7_V_1_reg_3204,
        din8 => pool_window_8_V_1_reg_3360,
        din9 => pool_window_9_V_1_reg_3472,
        din10 => pool_window_10_V_1_reg_3584,
        din11 => pool_window_11_V_1_reg_3184,
        din12 => pool_window_12_V_1_reg_3392,
        din13 => pool_window_13_V_1_reg_3504,
        din14 => pool_window_14_V_1_reg_3616,
        din15 => pool_window_15_V_1_reg_3060,
        din16 => tmp_data_1_V_fu_2539_p17,
        dout => tmp_data_1_V_fu_2539_p18);

    myproject_mux_164_16_1_1_U55 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_0_V_9_reg_3316,
        din1 => pool_window_1_V_9_reg_3428,
        din2 => pool_window_2_V_9_reg_3540,
        din3 => pool_window_3_V_9_reg_3258,
        din4 => pool_window_4_V_2_reg_3340,
        din5 => pool_window_5_V_2_reg_3452,
        din6 => pool_window_6_V_2_reg_3564,
        din7 => pool_window_7_V_2_reg_3244,
        din8 => pool_window_7_V_2_reg_3244,
        din9 => pool_window_7_V_2_reg_3244,
        din10 => pool_window_7_V_2_reg_3244,
        din11 => pool_window_7_V_2_reg_3244,
        din12 => pool_window_7_V_2_reg_3244,
        din13 => pool_window_7_V_2_reg_3244,
        din14 => pool_window_7_V_2_reg_3244,
        din15 => pool_window_7_V_2_reg_3244,
        din16 => zext_ln65_15_fu_2562_p1,
        dout => phi_ln65_13_fu_2565_p18);

    myproject_mux_164_16_1_1_U56 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_11_V_2_reg_3224,
        din1 => pool_window_11_V_2_reg_3224,
        din2 => pool_window_11_V_2_reg_3224,
        din3 => pool_window_11_V_2_reg_3224,
        din4 => pool_window_11_V_2_reg_3224,
        din5 => pool_window_11_V_2_reg_3224,
        din6 => pool_window_11_V_2_reg_3224,
        din7 => pool_window_11_V_2_reg_3224,
        din8 => pool_window_8_V_2_reg_3368,
        din9 => pool_window_9_V_2_reg_3480,
        din10 => pool_window_10_V_2_reg_3592,
        din11 => pool_window_11_V_2_reg_3224,
        din12 => pool_window_11_V_2_reg_3224,
        din13 => pool_window_11_V_2_reg_3224,
        din14 => pool_window_11_V_2_reg_3224,
        din15 => pool_window_11_V_2_reg_3224,
        din16 => select_ln65_88_fu_2617_p3,
        dout => phi_ln65_14_fu_2625_p18);

    myproject_mux_164_16_1_1_U57 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_15_V_2_reg_3088,
        din1 => pool_window_15_V_2_reg_3088,
        din2 => pool_window_15_V_2_reg_3088,
        din3 => pool_window_15_V_2_reg_3088,
        din4 => pool_window_15_V_2_reg_3088,
        din5 => pool_window_15_V_2_reg_3088,
        din6 => pool_window_15_V_2_reg_3088,
        din7 => pool_window_15_V_2_reg_3088,
        din8 => pool_window_15_V_2_reg_3088,
        din9 => pool_window_15_V_2_reg_3088,
        din10 => pool_window_15_V_2_reg_3088,
        din11 => pool_window_15_V_2_reg_3088,
        din12 => pool_window_12_V_2_reg_3400,
        din13 => pool_window_13_V_2_reg_3512,
        din14 => pool_window_14_V_2_reg_3624,
        din15 => pool_window_15_V_2_reg_3088,
        din16 => sext_ln65_2_fu_2685_p1,
        dout => phi_ln65_15_fu_2689_p18);

    myproject_mux_164_16_1_1_U58 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_15_V_2_reg_3088,
        din1 => pool_window_15_V_2_reg_3088,
        din2 => pool_window_15_V_2_reg_3088,
        din3 => pool_window_15_V_2_reg_3088,
        din4 => pool_window_15_V_2_reg_3088,
        din5 => pool_window_15_V_2_reg_3088,
        din6 => pool_window_15_V_2_reg_3088,
        din7 => pool_window_15_V_2_reg_3088,
        din8 => pool_window_8_V_2_reg_3368,
        din9 => pool_window_9_V_2_reg_3480,
        din10 => pool_window_10_V_2_reg_3592,
        din11 => pool_window_11_V_2_reg_3224,
        din12 => pool_window_12_V_2_reg_3400,
        din13 => pool_window_13_V_2_reg_3512,
        din14 => pool_window_14_V_2_reg_3624,
        din15 => pool_window_15_V_2_reg_3088,
        din16 => select_ln65_94_fu_2717_p3,
        dout => phi_ln65_16_fu_2725_p18);

    myproject_mux_164_16_1_1_U59 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_0_V_9_reg_3316,
        din1 => pool_window_1_V_9_reg_3428,
        din2 => pool_window_2_V_9_reg_3540,
        din3 => pool_window_3_V_9_reg_3258,
        din4 => pool_window_4_V_2_reg_3340,
        din5 => pool_window_5_V_2_reg_3452,
        din6 => pool_window_6_V_2_reg_3564,
        din7 => pool_window_7_V_2_reg_3244,
        din8 => pool_window_8_V_2_reg_3368,
        din9 => pool_window_9_V_2_reg_3480,
        din10 => pool_window_10_V_2_reg_3592,
        din11 => pool_window_11_V_2_reg_3224,
        din12 => pool_window_12_V_2_reg_3400,
        din13 => pool_window_13_V_2_reg_3512,
        din14 => pool_window_14_V_2_reg_3624,
        din15 => pool_window_15_V_2_reg_3088,
        din16 => tmp_data_2_V_fu_2761_p17,
        dout => tmp_data_2_V_fu_2761_p18);

    myproject_mux_164_16_1_1_U60 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_0_V_10_reg_3322,
        din1 => pool_window_1_V_10_reg_3434,
        din2 => pool_window_2_V_10_reg_3546,
        din3 => pool_window_3_V_10_reg_3298,
        din4 => pool_window_4_V_3_reg_3346,
        din5 => pool_window_5_V_3_reg_3458,
        din6 => pool_window_6_V_3_reg_3570,
        din7 => pool_window_7_V_3_reg_3284,
        din8 => pool_window_7_V_3_reg_3284,
        din9 => pool_window_7_V_3_reg_3284,
        din10 => pool_window_7_V_3_reg_3284,
        din11 => pool_window_7_V_3_reg_3284,
        din12 => pool_window_7_V_3_reg_3284,
        din13 => pool_window_7_V_3_reg_3284,
        din14 => pool_window_7_V_3_reg_3284,
        din15 => pool_window_7_V_3_reg_3284,
        din16 => zext_ln65_18_fu_2784_p1,
        dout => phi_ln65_19_fu_2787_p18);

    myproject_mux_164_16_1_1_U61 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_11_V_3_reg_3264,
        din1 => pool_window_11_V_3_reg_3264,
        din2 => pool_window_11_V_3_reg_3264,
        din3 => pool_window_11_V_3_reg_3264,
        din4 => pool_window_11_V_3_reg_3264,
        din5 => pool_window_11_V_3_reg_3264,
        din6 => pool_window_11_V_3_reg_3264,
        din7 => pool_window_11_V_3_reg_3264,
        din8 => pool_window_8_V_3_reg_3376,
        din9 => pool_window_9_V_3_reg_3488,
        din10 => pool_window_10_V_3_reg_3600,
        din11 => pool_window_11_V_3_reg_3264,
        din12 => pool_window_11_V_3_reg_3264,
        din13 => pool_window_11_V_3_reg_3264,
        din14 => pool_window_11_V_3_reg_3264,
        din15 => pool_window_11_V_3_reg_3264,
        din16 => select_ln65_109_fu_2839_p3,
        dout => phi_ln65_20_fu_2847_p18);

    myproject_mux_164_16_1_1_U62 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_15_V_3_reg_3116,
        din1 => pool_window_15_V_3_reg_3116,
        din2 => pool_window_15_V_3_reg_3116,
        din3 => pool_window_15_V_3_reg_3116,
        din4 => pool_window_15_V_3_reg_3116,
        din5 => pool_window_15_V_3_reg_3116,
        din6 => pool_window_15_V_3_reg_3116,
        din7 => pool_window_15_V_3_reg_3116,
        din8 => pool_window_15_V_3_reg_3116,
        din9 => pool_window_15_V_3_reg_3116,
        din10 => pool_window_15_V_3_reg_3116,
        din11 => pool_window_15_V_3_reg_3116,
        din12 => pool_window_12_V_3_reg_3408,
        din13 => pool_window_13_V_3_reg_3520,
        din14 => pool_window_14_V_3_reg_3632,
        din15 => pool_window_15_V_3_reg_3116,
        din16 => sext_ln65_3_fu_2907_p1,
        dout => phi_ln65_21_fu_2911_p18);

    myproject_mux_164_16_1_1_U63 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_15_V_3_reg_3116,
        din1 => pool_window_15_V_3_reg_3116,
        din2 => pool_window_15_V_3_reg_3116,
        din3 => pool_window_15_V_3_reg_3116,
        din4 => pool_window_15_V_3_reg_3116,
        din5 => pool_window_15_V_3_reg_3116,
        din6 => pool_window_15_V_3_reg_3116,
        din7 => pool_window_15_V_3_reg_3116,
        din8 => pool_window_8_V_3_reg_3376,
        din9 => pool_window_9_V_3_reg_3488,
        din10 => pool_window_10_V_3_reg_3600,
        din11 => pool_window_11_V_3_reg_3264,
        din12 => pool_window_12_V_3_reg_3408,
        din13 => pool_window_13_V_3_reg_3520,
        din14 => pool_window_14_V_3_reg_3632,
        din15 => pool_window_15_V_3_reg_3116,
        din16 => select_ln65_115_fu_2939_p3,
        dout => phi_ln65_22_fu_2947_p18);

    myproject_mux_164_16_1_1_U64 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => pool_window_0_V_10_reg_3322,
        din1 => pool_window_1_V_10_reg_3434,
        din2 => pool_window_2_V_10_reg_3546,
        din3 => pool_window_3_V_10_reg_3298,
        din4 => pool_window_4_V_3_reg_3346,
        din5 => pool_window_5_V_3_reg_3458,
        din6 => pool_window_6_V_3_reg_3570,
        din7 => pool_window_7_V_3_reg_3284,
        din8 => pool_window_8_V_3_reg_3376,
        din9 => pool_window_9_V_3_reg_3488,
        din10 => pool_window_10_V_3_reg_3600,
        din11 => pool_window_11_V_3_reg_3264,
        din12 => pool_window_12_V_3_reg_3408,
        din13 => pool_window_13_V_3_reg_3520,
        din14 => pool_window_14_V_3_reg_3632,
        din15 => pool_window_15_V_3_reg_3116,
        din16 => tmp_data_3_V_fu_2983_p17,
        dout => tmp_data_3_V_fu_2983_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_284)) then
                if ((ap_const_boolean_1 = ap_condition_500)) then 
                    ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_303)) then 
                    ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375 <= select_ln222_fu_530_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_375;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_fu_386_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_364 <= add_ln241_fu_392_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_364 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    pX_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_493)) then
                if ((icmp_ln212_fu_456_p2 = ap_const_lv1_1)) then 
                    pX_1 <= ap_const_lv32_0;
                elsif ((icmp_ln212_fu_456_p2 = ap_const_lv1_0)) then 
                    pX_1 <= add_ln225_fu_462_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_506)) then
                if ((icmp_ln216_fu_506_p2 = ap_const_lv1_1)) then 
                    pY_1 <= ap_const_lv32_0;
                elsif ((icmp_ln216_fu_506_p2 = ap_const_lv1_0)) then 
                    pY_1 <= add_ln220_fu_512_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_493)) then
                if ((icmp_ln212_fu_456_p2 = ap_const_lv1_1)) then 
                    sX_1 <= ap_const_lv32_0;
                elsif ((icmp_ln212_fu_456_p2 = ap_const_lv1_0)) then 
                    sX_1 <= select_ln227_fu_480_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_fu_386_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln191_4_reg_3015 <= and_ln191_4_fu_450_p2;
                icmp_ln212_reg_3019 <= icmp_ln212_fu_456_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln191_4_reg_3015_pp0_iter1_reg <= and_ln191_4_reg_3015;
                icmp_ln241_reg_3006 <= icmp_ln241_fu_386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_4_reg_3015) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1496_30_reg_3645 <= icmp_ln1496_30_fu_1374_p2;
                icmp_ln1496_31_reg_3651 <= icmp_ln1496_31_fu_1380_p2;
                icmp_ln1496_33_reg_3657 <= icmp_ln1496_33_fu_1386_p2;
                icmp_ln1496_34_reg_3663 <= icmp_ln1496_34_fu_1392_p2;
                icmp_ln1496_44_reg_3674 <= icmp_ln1496_44_fu_1612_p2;
                icmp_ln1496_45_reg_3680 <= icmp_ln1496_45_fu_1618_p2;
                icmp_ln1496_47_reg_3686 <= icmp_ln1496_47_fu_1624_p2;
                icmp_ln1496_48_reg_3692 <= icmp_ln1496_48_fu_1630_p2;
                icmp_ln1496_58_reg_3703 <= icmp_ln1496_58_fu_1850_p2;
                icmp_ln1496_59_reg_3709 <= icmp_ln1496_59_fu_1856_p2;
                icmp_ln1496_61_reg_3715 <= icmp_ln1496_61_fu_1862_p2;
                icmp_ln1496_62_reg_3721 <= icmp_ln1496_62_fu_1868_p2;
                icmp_ln1496_73_reg_3732 <= icmp_ln1496_73_fu_2088_p2;
                icmp_ln1496_74_reg_3738 <= icmp_ln1496_74_fu_2094_p2;
                icmp_ln1496_76_reg_3744 <= icmp_ln1496_76_fu_2100_p2;
                icmp_ln1496_77_reg_3750 <= icmp_ln1496_77_fu_2106_p2;
                select_ln65_104_reg_3727 <= select_ln65_104_fu_2080_p3;
                select_ln65_40_reg_3640 <= select_ln65_40_fu_1366_p3;
                select_ln65_62_reg_3669 <= select_ln65_62_fu_1604_p3;
                select_ln65_83_reg_3698 <= select_ln65_83_fu_1842_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                kernel_data_V_2_10 <= kernel_data_V_2_14;
                kernel_data_V_2_11 <= kernel_data_V_2_15;
                kernel_data_V_2_12 <= line_buffer_Array_V_2_2_0_q0;
                kernel_data_V_2_13 <= line_buffer_Array_V_2_2_1_q0;
                kernel_data_V_2_14 <= line_buffer_Array_V_2_2_2_q0;
                kernel_data_V_2_15 <= line_buffer_Array_V_2_2_3_q0;
                kernel_data_V_2_20 <= kernel_data_V_2_24;
                kernel_data_V_2_21 <= kernel_data_V_2_25;
                kernel_data_V_2_22 <= kernel_data_V_2_26;
                kernel_data_V_2_23 <= kernel_data_V_2_27;
                kernel_data_V_2_24 <= kernel_data_V_2_28;
                kernel_data_V_2_25 <= kernel_data_V_2_29;
                kernel_data_V_2_26 <= kernel_data_V_2_30;
                kernel_data_V_2_27 <= kernel_data_V_2_31;
                kernel_data_V_2_28 <= line_buffer_Array_V_2_1_0_q0;
                kernel_data_V_2_29 <= line_buffer_Array_V_2_1_1_q0;
                kernel_data_V_2_30 <= line_buffer_Array_V_2_1_2_q0;
                kernel_data_V_2_31 <= line_buffer_Array_V_2_1_3_q0;
                kernel_data_V_2_36 <= kernel_data_V_2_40;
                kernel_data_V_2_37 <= kernel_data_V_2_41;
                kernel_data_V_2_38 <= kernel_data_V_2_42;
                kernel_data_V_2_39 <= kernel_data_V_2_43;
                kernel_data_V_2_4 <= kernel_data_V_2_8;
                kernel_data_V_2_40 <= kernel_data_V_2_44;
                kernel_data_V_2_41 <= kernel_data_V_2_45;
                kernel_data_V_2_42 <= kernel_data_V_2_46;
                kernel_data_V_2_43 <= kernel_data_V_2_47;
                kernel_data_V_2_44 <= line_buffer_Array_V_2_0_0_q0;
                kernel_data_V_2_45 <= line_buffer_Array_V_2_0_1_q0;
                kernel_data_V_2_46 <= line_buffer_Array_V_2_0_2_q0;
                kernel_data_V_2_47 <= line_buffer_Array_V_2_0_3_q0;
                kernel_data_V_2_5 <= kernel_data_V_2_9;
                kernel_data_V_2_52 <= kernel_data_V_2_56;
                kernel_data_V_2_53 <= kernel_data_V_2_57;
                kernel_data_V_2_54 <= kernel_data_V_2_58;
                kernel_data_V_2_55 <= kernel_data_V_2_59;
                kernel_data_V_2_56 <= kernel_data_V_2_60;
                kernel_data_V_2_57 <= kernel_data_V_2_61;
                kernel_data_V_2_58 <= kernel_data_V_2_62;
                kernel_data_V_2_59 <= kernel_data_V_2_63;
                kernel_data_V_2_6 <= kernel_data_V_2_10;
                kernel_data_V_2_60 <= data_V_data_0_V_dout;
                kernel_data_V_2_61 <= data_V_data_1_V_dout;
                kernel_data_V_2_62 <= data_V_data_2_V_dout;
                kernel_data_V_2_63 <= data_V_data_3_V_dout;
                kernel_data_V_2_7 <= kernel_data_V_2_11;
                kernel_data_V_2_8 <= kernel_data_V_2_12;
                kernel_data_V_2_9 <= kernel_data_V_2_13;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                pool_window_0_V_10_reg_3322 <= kernel_data_V_2_7;
                pool_window_0_V_8_reg_3310 <= kernel_data_V_2_5;
                pool_window_0_V_9_reg_3316 <= kernel_data_V_2_6;
                pool_window_0_V_reg_3304 <= kernel_data_V_2_4;
                pool_window_10_V_1_reg_3584 <= kernel_data_V_2_45;
                pool_window_10_V_2_reg_3592 <= kernel_data_V_2_46;
                pool_window_10_V_3_reg_3600 <= kernel_data_V_2_47;
                pool_window_10_V_reg_3576 <= kernel_data_V_2_44;
                pool_window_11_V_1_reg_3184 <= line_buffer_Array_V_2_0_1_q0;
                pool_window_11_V_2_reg_3224 <= line_buffer_Array_V_2_0_2_q0;
                pool_window_11_V_3_reg_3264 <= line_buffer_Array_V_2_0_3_q0;
                pool_window_11_V_reg_3144 <= line_buffer_Array_V_2_0_0_q0;
                pool_window_12_V_1_reg_3392 <= kernel_data_V_2_53;
                pool_window_12_V_2_reg_3400 <= kernel_data_V_2_54;
                pool_window_12_V_3_reg_3408 <= kernel_data_V_2_55;
                pool_window_12_V_reg_3384 <= kernel_data_V_2_52;
                pool_window_13_V_1_reg_3504 <= kernel_data_V_2_57;
                pool_window_13_V_2_reg_3512 <= kernel_data_V_2_58;
                pool_window_13_V_3_reg_3520 <= kernel_data_V_2_59;
                pool_window_13_V_reg_3496 <= kernel_data_V_2_56;
                pool_window_14_V_1_reg_3616 <= kernel_data_V_2_61;
                pool_window_14_V_2_reg_3624 <= kernel_data_V_2_62;
                pool_window_14_V_3_reg_3632 <= kernel_data_V_2_63;
                pool_window_14_V_reg_3608 <= kernel_data_V_2_60;
                pool_window_15_V_1_reg_3060 <= data_V_data_1_V_dout;
                pool_window_15_V_2_reg_3088 <= data_V_data_2_V_dout;
                pool_window_15_V_3_reg_3116 <= data_V_data_3_V_dout;
                pool_window_15_V_reg_3032 <= data_V_data_0_V_dout;
                pool_window_1_V_10_reg_3434 <= kernel_data_V_2_11;
                pool_window_1_V_8_reg_3422 <= kernel_data_V_2_9;
                pool_window_1_V_9_reg_3428 <= kernel_data_V_2_10;
                pool_window_1_V_reg_3416 <= kernel_data_V_2_8;
                pool_window_2_V_10_reg_3546 <= kernel_data_V_2_15;
                pool_window_2_V_8_reg_3534 <= kernel_data_V_2_13;
                pool_window_2_V_9_reg_3540 <= kernel_data_V_2_14;
                pool_window_2_V_reg_3528 <= kernel_data_V_2_12;
                pool_window_3_V_10_reg_3298 <= line_buffer_Array_V_2_2_3_q0;
                pool_window_3_V_8_reg_3218 <= line_buffer_Array_V_2_2_1_q0;
                pool_window_3_V_9_reg_3258 <= line_buffer_Array_V_2_2_2_q0;
                pool_window_3_V_reg_3178 <= line_buffer_Array_V_2_2_0_q0;
                pool_window_4_V_1_reg_3334 <= kernel_data_V_2_21;
                pool_window_4_V_2_reg_3340 <= kernel_data_V_2_22;
                pool_window_4_V_3_reg_3346 <= kernel_data_V_2_23;
                pool_window_4_V_reg_3328 <= kernel_data_V_2_20;
                pool_window_5_V_1_reg_3446 <= kernel_data_V_2_25;
                pool_window_5_V_2_reg_3452 <= kernel_data_V_2_26;
                pool_window_5_V_3_reg_3458 <= kernel_data_V_2_27;
                pool_window_5_V_reg_3440 <= kernel_data_V_2_24;
                pool_window_6_V_1_reg_3558 <= kernel_data_V_2_29;
                pool_window_6_V_2_reg_3564 <= kernel_data_V_2_30;
                pool_window_6_V_3_reg_3570 <= kernel_data_V_2_31;
                pool_window_6_V_reg_3552 <= kernel_data_V_2_28;
                pool_window_7_V_1_reg_3204 <= line_buffer_Array_V_2_1_1_q0;
                pool_window_7_V_2_reg_3244 <= line_buffer_Array_V_2_1_2_q0;
                pool_window_7_V_3_reg_3284 <= line_buffer_Array_V_2_1_3_q0;
                pool_window_7_V_reg_3164 <= line_buffer_Array_V_2_1_0_q0;
                pool_window_8_V_1_reg_3360 <= kernel_data_V_2_37;
                pool_window_8_V_2_reg_3368 <= kernel_data_V_2_38;
                pool_window_8_V_3_reg_3376 <= kernel_data_V_2_39;
                pool_window_8_V_reg_3352 <= kernel_data_V_2_36;
                pool_window_9_V_1_reg_3472 <= kernel_data_V_2_41;
                pool_window_9_V_2_reg_3480 <= kernel_data_V_2_42;
                pool_window_9_V_3_reg_3488 <= kernel_data_V_2_43;
                pool_window_9_V_reg_3464 <= kernel_data_V_2_40;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_reg_3019 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sY_1 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln241_fu_386_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln241_fu_386_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln241_fu_386_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln220_fu_512_p2 <= std_logic_vector(unsigned(pY_1) + unsigned(ap_const_lv32_1));
    add_ln222_fu_524_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_sY_1_load) + unsigned(ap_const_lv32_1));
    add_ln225_fu_462_p2 <= std_logic_vector(unsigned(pX_1) + unsigned(ap_const_lv32_1));
    add_ln227_fu_474_p2 <= std_logic_vector(unsigned(sX_1) + unsigned(ap_const_lv32_1));
    add_ln241_fu_392_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_364) + unsigned(ap_const_lv10_1));
    and_ln191_3_fu_444_p2 <= (icmp_ln191_6_fu_432_p2 and icmp_ln191_5_fu_422_p2);
    and_ln191_4_fu_450_p2 <= (and_ln191_fu_438_p2 and and_ln191_3_fu_444_p2);
    and_ln191_fu_438_p2 <= (icmp_ln191_fu_402_p2 and icmp_ln191_4_fu_412_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_enable_reg_pp0_iter2, and_ln191_4_reg_3015_pp0_iter1_reg, io_acc_block_signal_op57, io_acc_block_signal_op373)
    begin
                ap_block_pp0_stage0_01001 <= (((io_acc_block_signal_op373 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_4_reg_3015_pp0_iter1_reg) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((io_acc_block_signal_op57 = ap_const_logic_0) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_enable_reg_pp0_iter2, and_ln191_4_reg_3015_pp0_iter1_reg, io_acc_block_signal_op57, io_acc_block_signal_op373)
    begin
                ap_block_pp0_stage0_11001 <= (((io_acc_block_signal_op373 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_4_reg_3015_pp0_iter1_reg) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((io_acc_block_signal_op57 = ap_const_logic_0) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_enable_reg_pp0_iter2, and_ln191_4_reg_3015_pp0_iter1_reg, io_acc_block_signal_op57, io_acc_block_signal_op373)
    begin
                ap_block_pp0_stage0_subdone <= (((io_acc_block_signal_op373 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_4_reg_3015_pp0_iter1_reg) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((io_acc_block_signal_op57 = ap_const_logic_0) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(icmp_ln241_reg_3006, io_acc_block_signal_op57)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((io_acc_block_signal_op57 = ap_const_logic_0) and (icmp_ln241_reg_3006 = ap_const_lv1_0));
    end process;


    ap_block_state4_pp0_stage0_iter2_assign_proc : process(and_ln191_4_reg_3015_pp0_iter1_reg, io_acc_block_signal_op373)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((io_acc_block_signal_op373 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_4_reg_3015_pp0_iter1_reg));
    end process;


    ap_condition_284_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
                ap_condition_284 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_303_assign_proc : process(icmp_ln241_fu_386_p2, icmp_ln212_fu_456_p2, icmp_ln216_fu_506_p2)
    begin
                ap_condition_303 <= ((icmp_ln212_fu_456_p2 = ap_const_lv1_1) and (icmp_ln216_fu_506_p2 = ap_const_lv1_0) and (icmp_ln241_fu_386_p2 = ap_const_lv1_0));
    end process;


    ap_condition_493_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln241_fu_386_p2, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
                ap_condition_493 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_fu_386_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_500_assign_proc : process(icmp_ln241_fu_386_p2, icmp_ln212_fu_456_p2, icmp_ln216_fu_506_p2)
    begin
                ap_condition_500 <= ((icmp_ln216_fu_506_p2 = ap_const_lv1_1) and (icmp_ln212_fu_456_p2 = ap_const_lv1_1) and (icmp_ln241_fu_386_p2 = ap_const_lv1_0));
    end process;


    ap_condition_506_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln241_fu_386_p2, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, icmp_ln212_fu_456_p2)
    begin
                ap_condition_506 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_456_p2 = ap_const_lv1_1) and (icmp_ln241_fu_386_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln241_fu_386_p2)
    begin
        if ((icmp_ln241_fu_386_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge_i_i_reg_375 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    ap_sig_allocacmp_sY_1_load_assign_proc : process(sY_1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln212_reg_3019, ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375)
    begin
        if (((icmp_ln212_reg_3019 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_sY_1_load <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375;
        else 
            ap_sig_allocacmp_sY_1_load <= sY_1;
        end if; 
    end process;


    data_V_data_0_V_blk_n_assign_proc : process(data_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_3006)
    begin
        if (((icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(data_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_3006)
    begin
        if (((icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(data_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_3006)
    begin
        if (((icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(data_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_3006)
    begin
        if (((icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1496_1_fu_1398_p2 <= "1" when (signed(kernel_data_V_2_5) < signed(kernel_data_V_2_9)) else "0";
    icmp_ln1496_24_fu_1178_p2 <= "1" when (signed(kernel_data_V_2_12) < signed(line_buffer_Array_V_2_2_0_q0)) else "0";
    icmp_ln1496_25_fu_1200_p2 <= "1" when (signed(select_ln65_fu_1170_p3) < signed(select_ln65_33_fu_1192_p3)) else "0";
    icmp_ln1496_26_fu_1260_p2 <= "1" when (signed(kernel_data_V_2_20) < signed(kernel_data_V_2_24)) else "0";
    icmp_ln1496_27_fu_1282_p2 <= "1" when (signed(kernel_data_V_2_28) < signed(line_buffer_Array_V_2_1_0_q0)) else "0";
    icmp_ln1496_28_fu_1304_p2 <= "1" when (signed(select_ln65_36_fu_1274_p3) < signed(select_ln65_38_fu_1296_p3)) else "0";
    icmp_ln1496_29_fu_1360_p2 <= "1" when (signed(phi_ln_fu_1222_p18) < signed(phi_ln65_1_fu_1322_p18)) else "0";
    icmp_ln1496_2_fu_1636_p2 <= "1" when (signed(kernel_data_V_2_6) < signed(kernel_data_V_2_10)) else "0";
    icmp_ln1496_30_fu_1374_p2 <= "1" when (signed(kernel_data_V_2_36) < signed(kernel_data_V_2_40)) else "0";
    icmp_ln1496_31_fu_1380_p2 <= "1" when (signed(kernel_data_V_2_44) < signed(line_buffer_Array_V_2_0_0_q0)) else "0";
    icmp_ln1496_32_fu_2167_p2 <= "1" when (signed(select_ln65_42_fu_2150_p3) < signed(select_ln65_44_fu_2162_p3)) else "0";
    icmp_ln1496_33_fu_1386_p2 <= "1" when (signed(kernel_data_V_2_52) < signed(kernel_data_V_2_56)) else "0";
    icmp_ln1496_34_fu_1392_p2 <= "1" when (signed(kernel_data_V_2_60) < signed(data_V_data_0_V_dout)) else "0";
    icmp_ln1496_35_fu_2227_p2 <= "1" when (signed(select_ln65_47_fu_2210_p3) < signed(select_ln65_49_fu_2222_p3)) else "0";
    icmp_ln1496_36_fu_2267_p2 <= "1" when (signed(phi_ln65_3_fu_2181_p18) < signed(phi_ln65_4_fu_2245_p18)) else "0";
    icmp_ln1496_37_fu_2303_p2 <= "1" when (signed(phi_ln65_2_fu_2121_p18) < signed(phi_ln65_5_fu_2281_p18)) else "0";
    icmp_ln1496_38_fu_1416_p2 <= "1" when (signed(kernel_data_V_2_13) < signed(line_buffer_Array_V_2_2_1_q0)) else "0";
    icmp_ln1496_39_fu_1438_p2 <= "1" when (signed(select_ln65_53_fu_1408_p3) < signed(select_ln65_55_fu_1430_p3)) else "0";
    icmp_ln1496_40_fu_1498_p2 <= "1" when (signed(kernel_data_V_2_21) < signed(kernel_data_V_2_25)) else "0";
    icmp_ln1496_41_fu_1520_p2 <= "1" when (signed(kernel_data_V_2_29) < signed(line_buffer_Array_V_2_1_1_q0)) else "0";
    icmp_ln1496_42_fu_1542_p2 <= "1" when (signed(select_ln65_58_fu_1512_p3) < signed(select_ln65_60_fu_1534_p3)) else "0";
    icmp_ln1496_43_fu_1598_p2 <= "1" when (signed(phi_ln65_6_fu_1460_p18) < signed(phi_ln65_7_fu_1560_p18)) else "0";
    icmp_ln1496_44_fu_1612_p2 <= "1" when (signed(kernel_data_V_2_37) < signed(kernel_data_V_2_41)) else "0";
    icmp_ln1496_45_fu_1618_p2 <= "1" when (signed(kernel_data_V_2_45) < signed(line_buffer_Array_V_2_0_1_q0)) else "0";
    icmp_ln1496_46_fu_2389_p2 <= "1" when (signed(select_ln65_64_fu_2372_p3) < signed(select_ln65_66_fu_2384_p3)) else "0";
    icmp_ln1496_47_fu_1624_p2 <= "1" when (signed(kernel_data_V_2_53) < signed(kernel_data_V_2_57)) else "0";
    icmp_ln1496_48_fu_1630_p2 <= "1" when (signed(kernel_data_V_2_61) < signed(data_V_data_1_V_dout)) else "0";
    icmp_ln1496_49_fu_2449_p2 <= "1" when (signed(select_ln65_69_fu_2432_p3) < signed(select_ln65_71_fu_2444_p3)) else "0";
    icmp_ln1496_50_fu_2489_p2 <= "1" when (signed(phi_ln65_9_fu_2403_p18) < signed(phi_ln65_s_fu_2467_p18)) else "0";
    icmp_ln1496_51_fu_2525_p2 <= "1" when (signed(phi_ln65_8_fu_2343_p18) < signed(phi_ln65_10_fu_2503_p18)) else "0";
    icmp_ln1496_52_fu_1654_p2 <= "1" when (signed(kernel_data_V_2_14) < signed(line_buffer_Array_V_2_2_2_q0)) else "0";
    icmp_ln1496_53_fu_1676_p2 <= "1" when (signed(select_ln65_74_fu_1646_p3) < signed(select_ln65_76_fu_1668_p3)) else "0";
    icmp_ln1496_54_fu_1736_p2 <= "1" when (signed(kernel_data_V_2_22) < signed(kernel_data_V_2_26)) else "0";
    icmp_ln1496_55_fu_1758_p2 <= "1" when (signed(kernel_data_V_2_30) < signed(line_buffer_Array_V_2_1_2_q0)) else "0";
    icmp_ln1496_56_fu_1780_p2 <= "1" when (signed(select_ln65_79_fu_1750_p3) < signed(select_ln65_81_fu_1772_p3)) else "0";
    icmp_ln1496_57_fu_1836_p2 <= "1" when (signed(phi_ln65_11_fu_1698_p18) < signed(phi_ln65_12_fu_1798_p18)) else "0";
    icmp_ln1496_58_fu_1850_p2 <= "1" when (signed(kernel_data_V_2_38) < signed(kernel_data_V_2_42)) else "0";
    icmp_ln1496_59_fu_1856_p2 <= "1" when (signed(kernel_data_V_2_46) < signed(line_buffer_Array_V_2_0_2_q0)) else "0";
    icmp_ln1496_60_fu_2611_p2 <= "1" when (signed(select_ln65_85_fu_2594_p3) < signed(select_ln65_87_fu_2606_p3)) else "0";
    icmp_ln1496_61_fu_1862_p2 <= "1" when (signed(kernel_data_V_2_54) < signed(kernel_data_V_2_58)) else "0";
    icmp_ln1496_62_fu_1868_p2 <= "1" when (signed(kernel_data_V_2_62) < signed(data_V_data_2_V_dout)) else "0";
    icmp_ln1496_63_fu_2671_p2 <= "1" when (signed(select_ln65_90_fu_2654_p3) < signed(select_ln65_92_fu_2666_p3)) else "0";
    icmp_ln1496_64_fu_2711_p2 <= "1" when (signed(phi_ln65_14_fu_2625_p18) < signed(phi_ln65_15_fu_2689_p18)) else "0";
    icmp_ln1496_65_fu_2747_p2 <= "1" when (signed(phi_ln65_13_fu_2565_p18) < signed(phi_ln65_16_fu_2725_p18)) else "0";
    icmp_ln1496_66_fu_1874_p2 <= "1" when (signed(kernel_data_V_2_7) < signed(kernel_data_V_2_11)) else "0";
    icmp_ln1496_67_fu_1892_p2 <= "1" when (signed(kernel_data_V_2_15) < signed(line_buffer_Array_V_2_2_3_q0)) else "0";
    icmp_ln1496_68_fu_1914_p2 <= "1" when (signed(select_ln65_95_fu_1884_p3) < signed(select_ln65_97_fu_1906_p3)) else "0";
    icmp_ln1496_69_fu_1974_p2 <= "1" when (signed(kernel_data_V_2_23) < signed(kernel_data_V_2_27)) else "0";
    icmp_ln1496_70_fu_1996_p2 <= "1" when (signed(kernel_data_V_2_31) < signed(line_buffer_Array_V_2_1_3_q0)) else "0";
    icmp_ln1496_71_fu_2018_p2 <= "1" when (signed(select_ln65_100_fu_1988_p3) < signed(select_ln65_102_fu_2010_p3)) else "0";
    icmp_ln1496_72_fu_2074_p2 <= "1" when (signed(phi_ln65_17_fu_1936_p18) < signed(phi_ln65_18_fu_2036_p18)) else "0";
    icmp_ln1496_73_fu_2088_p2 <= "1" when (signed(kernel_data_V_2_39) < signed(kernel_data_V_2_43)) else "0";
    icmp_ln1496_74_fu_2094_p2 <= "1" when (signed(kernel_data_V_2_47) < signed(line_buffer_Array_V_2_0_3_q0)) else "0";
    icmp_ln1496_75_fu_2833_p2 <= "1" when (signed(select_ln65_106_fu_2816_p3) < signed(select_ln65_108_fu_2828_p3)) else "0";
    icmp_ln1496_76_fu_2100_p2 <= "1" when (signed(kernel_data_V_2_55) < signed(kernel_data_V_2_59)) else "0";
    icmp_ln1496_77_fu_2106_p2 <= "1" when (signed(kernel_data_V_2_63) < signed(data_V_data_3_V_dout)) else "0";
    icmp_ln1496_78_fu_2893_p2 <= "1" when (signed(select_ln65_111_fu_2876_p3) < signed(select_ln65_113_fu_2888_p3)) else "0";
    icmp_ln1496_79_fu_2933_p2 <= "1" when (signed(phi_ln65_20_fu_2847_p18) < signed(phi_ln65_21_fu_2911_p18)) else "0";
    icmp_ln1496_80_fu_2969_p2 <= "1" when (signed(phi_ln65_19_fu_2787_p18) < signed(phi_ln65_22_fu_2947_p18)) else "0";
    icmp_ln1496_fu_1160_p2 <= "1" when (signed(kernel_data_V_2_4) < signed(kernel_data_V_2_8)) else "0";
    icmp_ln191_4_fu_412_p2 <= "1" when (ap_sig_allocacmp_sY_1_load = ap_const_lv32_3) else "0";
    icmp_ln191_5_fu_422_p2 <= "1" when (signed(pY_1) > signed(ap_const_lv32_2)) else "0";
    icmp_ln191_6_fu_432_p2 <= "1" when (signed(pX_1) > signed(ap_const_lv32_2)) else "0";
    icmp_ln191_fu_402_p2 <= "1" when (sX_1 = ap_const_lv32_3) else "0";
    icmp_ln212_fu_456_p2 <= "1" when (pX_1 = ap_const_lv32_19) else "0";
    icmp_ln216_fu_506_p2 <= "1" when (pY_1 = ap_const_lv32_19) else "0";
    icmp_ln241_fu_386_p2 <= "1" when (indvar_flatten_reg_364 = ap_const_lv10_2A4) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op373 <= (res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    io_acc_block_signal_op57 <= (data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);

    line_buffer_Array_V_2_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_0_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_0_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_0_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_0_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_0_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_0_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_0_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_0_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_0_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_0_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_0_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_0_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_0_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_0_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_0_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_1_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_1_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_1_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_1_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_1_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_1_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_1_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_1_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_1_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_1_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_1_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_1_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_1_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_1_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_1_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_1_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_1_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_2_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_2_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_2_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_2_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_2_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_2_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_2_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_2_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_2_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_2_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_2_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_2_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_2_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_2_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_2_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_2_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3006, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3006 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_2_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_2_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    phi_ln65_11_fu_1698_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_77_fu_1682_p3),4));
    phi_ln65_12_fu_1798_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_82_fu_1786_p3),4));
    phi_ln65_17_fu_1936_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_98_fu_1920_p3),4));
    phi_ln65_18_fu_2036_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_103_fu_2024_p3),4));
    phi_ln65_1_fu_1322_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_39_fu_1310_p3),4));
    phi_ln65_6_fu_1460_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_56_fu_1444_p3),4));
    phi_ln65_7_fu_1560_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_61_fu_1548_p3),4));
    phi_ln_fu_1222_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_34_fu_1206_p3),4));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_4_reg_3015_pp0_iter1_reg)
    begin
        if (((ap_const_lv1_1 = and_ln191_4_reg_3015_pp0_iter1_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= tmp_data_0_V_fu_2317_p18;

    res_V_data_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_4_reg_3015_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_4_reg_3015_pp0_iter1_reg) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_4_reg_3015_pp0_iter1_reg)
    begin
        if (((ap_const_lv1_1 = and_ln191_4_reg_3015_pp0_iter1_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= tmp_data_1_V_fu_2539_p18;

    res_V_data_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_4_reg_3015_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_4_reg_3015_pp0_iter1_reg) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_4_reg_3015_pp0_iter1_reg)
    begin
        if (((ap_const_lv1_1 = and_ln191_4_reg_3015_pp0_iter1_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= tmp_data_2_V_fu_2761_p18;

    res_V_data_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_4_reg_3015_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_4_reg_3015_pp0_iter1_reg) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_4_reg_3015_pp0_iter1_reg)
    begin
        if (((ap_const_lv1_1 = and_ln191_4_reg_3015_pp0_iter1_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= tmp_data_3_V_fu_2983_p18;

    res_V_data_3_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_4_reg_3015_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_4_reg_3015_pp0_iter1_reg) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln222_fu_530_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_4_fu_412_p2(0) = '1') else 
        add_ln222_fu_524_p2;
    select_ln227_fu_480_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_fu_402_p2(0) = '1') else 
        add_ln227_fu_474_p2;
    select_ln65_100_fu_1988_p3 <= 
        kernel_data_V_2_27 when (icmp_ln1496_69_fu_1974_p2(0) = '1') else 
        kernel_data_V_2_23;
    select_ln65_101_fu_1764_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_55_fu_1758_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_102_fu_2010_p3 <= 
        line_buffer_Array_V_2_1_3_q0 when (icmp_ln1496_70_fu_1996_p2(0) = '1') else 
        kernel_data_V_2_31;
    select_ln65_103_fu_2024_p3 <= 
        select_ln65_117_fu_2002_p3 when (icmp_ln1496_71_fu_2018_p2(0) = '1') else 
        select_ln65_99_fu_1980_p3;
    select_ln65_104_fu_2080_p3 <= 
        select_ln65_103_fu_2024_p3 when (icmp_ln1496_72_fu_2074_p2(0) = '1') else 
        zext_ln65_17_fu_1928_p1;
    select_ln65_105_fu_2809_p3 <= 
        ap_const_lv4_9 when (icmp_ln1496_73_reg_3732(0) = '1') else 
        ap_const_lv4_8;
    select_ln65_106_fu_2816_p3 <= 
        pool_window_9_V_3_reg_3488 when (icmp_ln1496_73_reg_3732(0) = '1') else 
        pool_window_8_V_3_reg_3376;
    select_ln65_107_fu_2821_p3 <= 
        ap_const_lv4_B when (icmp_ln1496_74_reg_3738(0) = '1') else 
        ap_const_lv4_A;
    select_ln65_108_fu_2828_p3 <= 
        pool_window_11_V_3_reg_3264 when (icmp_ln1496_74_reg_3738(0) = '1') else 
        pool_window_10_V_3_reg_3600;
    select_ln65_109_fu_2839_p3 <= 
        select_ln65_107_fu_2821_p3 when (icmp_ln1496_75_fu_2833_p2(0) = '1') else 
        select_ln65_105_fu_2809_p3;
    select_ln65_110_fu_2869_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_76_reg_3744(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_111_fu_2876_p3 <= 
        pool_window_13_V_3_reg_3520 when (icmp_ln1496_76_reg_3744(0) = '1') else 
        pool_window_12_V_3_reg_3408;
    select_ln65_112_fu_2659_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_62_reg_3721(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_113_fu_2888_p3 <= 
        pool_window_15_V_3_reg_3116 when (icmp_ln1496_77_reg_3750(0) = '1') else 
        pool_window_14_V_3_reg_3632;
    select_ln65_114_fu_2899_p3 <= 
        select_ln65_118_fu_2881_p3 when (icmp_ln1496_78_fu_2893_p2(0) = '1') else 
        select_ln65_110_fu_2869_p3;
    select_ln65_115_fu_2939_p3 <= 
        sext_ln65_3_fu_2907_p1 when (icmp_ln1496_79_fu_2933_p2(0) = '1') else 
        select_ln65_109_fu_2839_p3;
    select_ln65_117_fu_2002_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_70_fu_1996_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_118_fu_2881_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_77_reg_3750(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_32_fu_1184_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_24_fu_1178_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_33_fu_1192_p3 <= 
        line_buffer_Array_V_2_2_0_q0 when (icmp_ln1496_24_fu_1178_p2(0) = '1') else 
        kernel_data_V_2_12;
    select_ln65_34_fu_1206_p3 <= 
        select_ln65_32_fu_1184_p3 when (icmp_ln1496_25_fu_1200_p2(0) = '1') else 
        zext_ln65_fu_1166_p1;
    select_ln65_35_fu_1266_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_26_fu_1260_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_36_fu_1274_p3 <= 
        kernel_data_V_2_24 when (icmp_ln1496_26_fu_1260_p2(0) = '1') else 
        kernel_data_V_2_20;
    select_ln65_38_fu_1296_p3 <= 
        line_buffer_Array_V_2_1_0_q0 when (icmp_ln1496_27_fu_1282_p2(0) = '1') else 
        kernel_data_V_2_28;
    select_ln65_39_fu_1310_p3 <= 
        select_ln65_48_fu_1288_p3 when (icmp_ln1496_28_fu_1304_p2(0) = '1') else 
        select_ln65_35_fu_1266_p3;
    select_ln65_40_fu_1366_p3 <= 
        select_ln65_39_fu_1310_p3 when (icmp_ln1496_29_fu_1360_p2(0) = '1') else 
        zext_ln65_8_fu_1214_p1;
    select_ln65_41_fu_2143_p3 <= 
        ap_const_lv4_9 when (icmp_ln1496_30_reg_3645(0) = '1') else 
        ap_const_lv4_8;
    select_ln65_42_fu_2150_p3 <= 
        pool_window_9_V_reg_3464 when (icmp_ln1496_30_reg_3645(0) = '1') else 
        pool_window_8_V_reg_3352;
    select_ln65_43_fu_2155_p3 <= 
        ap_const_lv4_B when (icmp_ln1496_31_reg_3651(0) = '1') else 
        ap_const_lv4_A;
    select_ln65_44_fu_2162_p3 <= 
        pool_window_11_V_reg_3144 when (icmp_ln1496_31_reg_3651(0) = '1') else 
        pool_window_10_V_reg_3576;
    select_ln65_45_fu_2173_p3 <= 
        select_ln65_43_fu_2155_p3 when (icmp_ln1496_32_fu_2167_p2(0) = '1') else 
        select_ln65_41_fu_2143_p3;
    select_ln65_46_fu_2203_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_33_reg_3657(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_47_fu_2210_p3 <= 
        pool_window_13_V_reg_3496 when (icmp_ln1496_33_reg_3657(0) = '1') else 
        pool_window_12_V_reg_3384;
    select_ln65_48_fu_1288_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_27_fu_1282_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_49_fu_2222_p3 <= 
        pool_window_15_V_reg_3032 when (icmp_ln1496_34_reg_3663(0) = '1') else 
        pool_window_14_V_reg_3608;
    select_ln65_50_fu_2233_p3 <= 
        select_ln65_52_fu_2215_p3 when (icmp_ln1496_35_fu_2227_p2(0) = '1') else 
        select_ln65_46_fu_2203_p3;
    select_ln65_51_fu_2273_p3 <= 
        sext_ln65_fu_2241_p1 when (icmp_ln1496_36_fu_2267_p2(0) = '1') else 
        select_ln65_45_fu_2173_p3;
    select_ln65_52_fu_2215_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_34_reg_3663(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_53_fu_1408_p3 <= 
        kernel_data_V_2_9 when (icmp_ln1496_1_fu_1398_p2(0) = '1') else 
        kernel_data_V_2_5;
    select_ln65_54_fu_1422_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_38_fu_1416_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_55_fu_1430_p3 <= 
        line_buffer_Array_V_2_2_1_q0 when (icmp_ln1496_38_fu_1416_p2(0) = '1') else 
        kernel_data_V_2_13;
    select_ln65_56_fu_1444_p3 <= 
        select_ln65_54_fu_1422_p3 when (icmp_ln1496_39_fu_1438_p2(0) = '1') else 
        zext_ln65_10_fu_1404_p1;
    select_ln65_57_fu_1504_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_40_fu_1498_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_58_fu_1512_p3 <= 
        kernel_data_V_2_25 when (icmp_ln1496_40_fu_1498_p2(0) = '1') else 
        kernel_data_V_2_21;
    select_ln65_60_fu_1534_p3 <= 
        line_buffer_Array_V_2_1_1_q0 when (icmp_ln1496_41_fu_1520_p2(0) = '1') else 
        kernel_data_V_2_29;
    select_ln65_61_fu_1548_p3 <= 
        select_ln65_70_fu_1526_p3 when (icmp_ln1496_42_fu_1542_p2(0) = '1') else 
        select_ln65_57_fu_1504_p3;
    select_ln65_62_fu_1604_p3 <= 
        select_ln65_61_fu_1548_p3 when (icmp_ln1496_43_fu_1598_p2(0) = '1') else 
        zext_ln65_11_fu_1452_p1;
    select_ln65_63_fu_2365_p3 <= 
        ap_const_lv4_9 when (icmp_ln1496_44_reg_3674(0) = '1') else 
        ap_const_lv4_8;
    select_ln65_64_fu_2372_p3 <= 
        pool_window_9_V_1_reg_3472 when (icmp_ln1496_44_reg_3674(0) = '1') else 
        pool_window_8_V_1_reg_3360;
    select_ln65_65_fu_2377_p3 <= 
        ap_const_lv4_B when (icmp_ln1496_45_reg_3680(0) = '1') else 
        ap_const_lv4_A;
    select_ln65_66_fu_2384_p3 <= 
        pool_window_11_V_1_reg_3184 when (icmp_ln1496_45_reg_3680(0) = '1') else 
        pool_window_10_V_1_reg_3584;
    select_ln65_67_fu_2395_p3 <= 
        select_ln65_65_fu_2377_p3 when (icmp_ln1496_46_fu_2389_p2(0) = '1') else 
        select_ln65_63_fu_2365_p3;
    select_ln65_68_fu_2425_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_47_reg_3686(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_69_fu_2432_p3 <= 
        pool_window_13_V_1_reg_3504 when (icmp_ln1496_47_reg_3686(0) = '1') else 
        pool_window_12_V_1_reg_3392;
    select_ln65_70_fu_1526_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_41_fu_1520_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_71_fu_2444_p3 <= 
        pool_window_15_V_1_reg_3060 when (icmp_ln1496_48_reg_3692(0) = '1') else 
        pool_window_14_V_1_reg_3616;
    select_ln65_72_fu_2455_p3 <= 
        select_ln65_80_fu_2437_p3 when (icmp_ln1496_49_fu_2449_p2(0) = '1') else 
        select_ln65_68_fu_2425_p3;
    select_ln65_73_fu_2495_p3 <= 
        sext_ln65_1_fu_2463_p1 when (icmp_ln1496_50_fu_2489_p2(0) = '1') else 
        select_ln65_67_fu_2395_p3;
    select_ln65_74_fu_1646_p3 <= 
        kernel_data_V_2_10 when (icmp_ln1496_2_fu_1636_p2(0) = '1') else 
        kernel_data_V_2_6;
    select_ln65_75_fu_1660_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_52_fu_1654_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_76_fu_1668_p3 <= 
        line_buffer_Array_V_2_2_2_q0 when (icmp_ln1496_52_fu_1654_p2(0) = '1') else 
        kernel_data_V_2_14;
    select_ln65_77_fu_1682_p3 <= 
        select_ln65_75_fu_1660_p3 when (icmp_ln1496_53_fu_1676_p2(0) = '1') else 
        zext_ln65_13_fu_1642_p1;
    select_ln65_78_fu_1742_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_54_fu_1736_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_79_fu_1750_p3 <= 
        kernel_data_V_2_26 when (icmp_ln1496_54_fu_1736_p2(0) = '1') else 
        kernel_data_V_2_22;
    select_ln65_80_fu_2437_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_48_reg_3692(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_81_fu_1772_p3 <= 
        line_buffer_Array_V_2_1_2_q0 when (icmp_ln1496_55_fu_1758_p2(0) = '1') else 
        kernel_data_V_2_30;
    select_ln65_82_fu_1786_p3 <= 
        select_ln65_101_fu_1764_p3 when (icmp_ln1496_56_fu_1780_p2(0) = '1') else 
        select_ln65_78_fu_1742_p3;
    select_ln65_83_fu_1842_p3 <= 
        select_ln65_82_fu_1786_p3 when (icmp_ln1496_57_fu_1836_p2(0) = '1') else 
        zext_ln65_14_fu_1690_p1;
    select_ln65_84_fu_2587_p3 <= 
        ap_const_lv4_9 when (icmp_ln1496_58_reg_3703(0) = '1') else 
        ap_const_lv4_8;
    select_ln65_85_fu_2594_p3 <= 
        pool_window_9_V_2_reg_3480 when (icmp_ln1496_58_reg_3703(0) = '1') else 
        pool_window_8_V_2_reg_3368;
    select_ln65_86_fu_2599_p3 <= 
        ap_const_lv4_B when (icmp_ln1496_59_reg_3709(0) = '1') else 
        ap_const_lv4_A;
    select_ln65_87_fu_2606_p3 <= 
        pool_window_11_V_2_reg_3224 when (icmp_ln1496_59_reg_3709(0) = '1') else 
        pool_window_10_V_2_reg_3592;
    select_ln65_88_fu_2617_p3 <= 
        select_ln65_86_fu_2599_p3 when (icmp_ln1496_60_fu_2611_p2(0) = '1') else 
        select_ln65_84_fu_2587_p3;
    select_ln65_89_fu_2647_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_61_reg_3715(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_90_fu_2654_p3 <= 
        pool_window_13_V_2_reg_3512 when (icmp_ln1496_61_reg_3715(0) = '1') else 
        pool_window_12_V_2_reg_3400;
    select_ln65_92_fu_2666_p3 <= 
        pool_window_15_V_2_reg_3088 when (icmp_ln1496_62_reg_3721(0) = '1') else 
        pool_window_14_V_2_reg_3624;
    select_ln65_93_fu_2677_p3 <= 
        select_ln65_112_fu_2659_p3 when (icmp_ln1496_63_fu_2671_p2(0) = '1') else 
        select_ln65_89_fu_2647_p3;
    select_ln65_94_fu_2717_p3 <= 
        sext_ln65_2_fu_2685_p1 when (icmp_ln1496_64_fu_2711_p2(0) = '1') else 
        select_ln65_88_fu_2617_p3;
    select_ln65_95_fu_1884_p3 <= 
        kernel_data_V_2_11 when (icmp_ln1496_66_fu_1874_p2(0) = '1') else 
        kernel_data_V_2_7;
    select_ln65_96_fu_1898_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_67_fu_1892_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_97_fu_1906_p3 <= 
        line_buffer_Array_V_2_2_3_q0 when (icmp_ln1496_67_fu_1892_p2(0) = '1') else 
        kernel_data_V_2_15;
    select_ln65_98_fu_1920_p3 <= 
        select_ln65_96_fu_1898_p3 when (icmp_ln1496_68_fu_1914_p2(0) = '1') else 
        zext_ln65_16_fu_1880_p1;
    select_ln65_99_fu_1980_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_69_fu_1974_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_fu_1170_p3 <= 
        kernel_data_V_2_8 when (icmp_ln1496_fu_1160_p2(0) = '1') else 
        kernel_data_V_2_4;
        sext_ln65_1_fu_2463_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln65_72_fu_2455_p3),4));

        sext_ln65_2_fu_2685_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln65_93_fu_2677_p3),4));

        sext_ln65_3_fu_2907_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln65_114_fu_2899_p3),4));

        sext_ln65_fu_2241_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln65_50_fu_2233_p3),4));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_data_0_V_fu_2317_p17 <= 
        select_ln65_51_fu_2273_p3 when (icmp_ln1496_37_fu_2303_p2(0) = '1') else 
        zext_ln65_9_fu_2118_p1;
    tmp_data_1_V_fu_2539_p17 <= 
        select_ln65_73_fu_2495_p3 when (icmp_ln1496_51_fu_2525_p2(0) = '1') else 
        zext_ln65_12_fu_2340_p1;
    tmp_data_2_V_fu_2761_p17 <= 
        select_ln65_94_fu_2717_p3 when (icmp_ln1496_65_fu_2747_p2(0) = '1') else 
        zext_ln65_15_fu_2562_p1;
    tmp_data_3_V_fu_2983_p17 <= 
        select_ln65_115_fu_2939_p3 when (icmp_ln1496_80_fu_2969_p2(0) = '1') else 
        zext_ln65_18_fu_2784_p1;
    zext_ln65_10_fu_1404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_1_fu_1398_p2),2));
    zext_ln65_11_fu_1452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_56_fu_1444_p3),3));
    zext_ln65_12_fu_2340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_62_reg_3669),4));
    zext_ln65_13_fu_1642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_2_fu_1636_p2),2));
    zext_ln65_14_fu_1690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_77_fu_1682_p3),3));
    zext_ln65_15_fu_2562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_83_reg_3698),4));
    zext_ln65_16_fu_1880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_66_fu_1874_p2),2));
    zext_ln65_17_fu_1928_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_98_fu_1920_p3),3));
    zext_ln65_18_fu_2784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_104_reg_3727),4));
    zext_ln65_8_fu_1214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_34_fu_1206_p3),3));
    zext_ln65_9_fu_2118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_40_reg_3640),4));
    zext_ln65_fu_1166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_fu_1160_p2),2));
end behav;
