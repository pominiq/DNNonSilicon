// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config10_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        res_V_data_0_V_TDATA,
        res_V_data_0_V_TVALID,
        res_V_data_0_V_TREADY,
        res_V_data_1_V_TDATA,
        res_V_data_1_V_TVALID,
        res_V_data_1_V_TREADY,
        res_V_data_2_V_TDATA,
        res_V_data_2_V_TVALID,
        res_V_data_2_V_TREADY,
        res_V_data_3_V_TDATA,
        res_V_data_3_V_TVALID,
        res_V_data_3_V_TREADY,
        res_V_data_4_V_TDATA,
        res_V_data_4_V_TVALID,
        res_V_data_4_V_TREADY,
        res_V_data_5_V_TDATA,
        res_V_data_5_V_TVALID,
        res_V_data_5_V_TREADY,
        res_V_data_6_V_TDATA,
        res_V_data_6_V_TVALID,
        res_V_data_6_V_TREADY,
        res_V_data_7_V_TDATA,
        res_V_data_7_V_TVALID,
        res_V_data_7_V_TREADY,
        res_V_data_8_V_TDATA,
        res_V_data_8_V_TVALID,
        res_V_data_8_V_TREADY,
        res_V_data_9_V_TDATA,
        res_V_data_9_V_TVALID,
        res_V_data_9_V_TREADY,
        data_V_data_0_V_blk_n,
        data_V_data_1_V_blk_n,
        data_V_data_2_V_blk_n,
        data_V_data_3_V_blk_n,
        data_V_data_4_V_blk_n,
        data_V_data_5_V_blk_n,
        data_V_data_6_V_blk_n,
        data_V_data_7_V_blk_n,
        data_V_data_8_V_blk_n,
        data_V_data_9_V_blk_n,
        res_V_data_0_V_TDATA_blk_n,
        res_V_data_1_V_TDATA_blk_n,
        res_V_data_2_V_TDATA_blk_n,
        res_V_data_3_V_TDATA_blk_n,
        res_V_data_4_V_TDATA_blk_n,
        res_V_data_5_V_TDATA_blk_n,
        res_V_data_6_V_TDATA_blk_n,
        res_V_data_7_V_TDATA_blk_n,
        res_V_data_8_V_TDATA_blk_n,
        res_V_data_9_V_TDATA_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [15:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [15:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
output  [15:0] res_V_data_0_V_TDATA;
output   res_V_data_0_V_TVALID;
input   res_V_data_0_V_TREADY;
output  [15:0] res_V_data_1_V_TDATA;
output   res_V_data_1_V_TVALID;
input   res_V_data_1_V_TREADY;
output  [15:0] res_V_data_2_V_TDATA;
output   res_V_data_2_V_TVALID;
input   res_V_data_2_V_TREADY;
output  [15:0] res_V_data_3_V_TDATA;
output   res_V_data_3_V_TVALID;
input   res_V_data_3_V_TREADY;
output  [15:0] res_V_data_4_V_TDATA;
output   res_V_data_4_V_TVALID;
input   res_V_data_4_V_TREADY;
output  [15:0] res_V_data_5_V_TDATA;
output   res_V_data_5_V_TVALID;
input   res_V_data_5_V_TREADY;
output  [15:0] res_V_data_6_V_TDATA;
output   res_V_data_6_V_TVALID;
input   res_V_data_6_V_TREADY;
output  [15:0] res_V_data_7_V_TDATA;
output   res_V_data_7_V_TVALID;
input   res_V_data_7_V_TREADY;
output  [15:0] res_V_data_8_V_TDATA;
output   res_V_data_8_V_TVALID;
input   res_V_data_8_V_TREADY;
output  [15:0] res_V_data_9_V_TDATA;
output   res_V_data_9_V_TVALID;
input   res_V_data_9_V_TREADY;
output   data_V_data_0_V_blk_n;
output   data_V_data_1_V_blk_n;
output   data_V_data_2_V_blk_n;
output   data_V_data_3_V_blk_n;
output   data_V_data_4_V_blk_n;
output   data_V_data_5_V_blk_n;
output   data_V_data_6_V_blk_n;
output   data_V_data_7_V_blk_n;
output   data_V_data_8_V_blk_n;
output   data_V_data_9_V_blk_n;
output   res_V_data_0_V_TDATA_blk_n;
output   res_V_data_1_V_TDATA_blk_n;
output   res_V_data_2_V_TDATA_blk_n;
output   res_V_data_3_V_TDATA_blk_n;
output   res_V_data_4_V_TDATA_blk_n;
output   res_V_data_5_V_TDATA_blk_n;
output   res_V_data_6_V_TDATA_blk_n;
output   res_V_data_7_V_TDATA_blk_n;
output   res_V_data_8_V_TDATA_blk_n;
output   res_V_data_9_V_TDATA_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg res_V_data_0_V_TVALID;
reg res_V_data_1_V_TVALID;
reg res_V_data_2_V_TVALID;
reg res_V_data_3_V_TVALID;
reg res_V_data_4_V_TVALID;
reg res_V_data_5_V_TVALID;
reg res_V_data_6_V_TVALID;
reg res_V_data_7_V_TVALID;
reg res_V_data_8_V_TVALID;
reg res_V_data_9_V_TVALID;
reg data_V_data_0_V_blk_n;
reg data_V_data_1_V_blk_n;
reg data_V_data_2_V_blk_n;
reg data_V_data_3_V_blk_n;
reg data_V_data_4_V_blk_n;
reg data_V_data_5_V_blk_n;
reg data_V_data_6_V_blk_n;
reg data_V_data_7_V_blk_n;
reg data_V_data_8_V_blk_n;
reg data_V_data_9_V_blk_n;
reg res_V_data_0_V_TDATA_blk_n;
reg res_V_data_1_V_TDATA_blk_n;
reg res_V_data_2_V_TDATA_blk_n;
reg res_V_data_3_V_TDATA_blk_n;
reg res_V_data_4_V_TDATA_blk_n;
reg res_V_data_5_V_TDATA_blk_n;
reg res_V_data_6_V_TDATA_blk_n;
reg res_V_data_7_V_TDATA_blk_n;
reg res_V_data_8_V_TDATA_blk_n;
reg res_V_data_9_V_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state8_pp0_stage3_iter1;
wire    ap_block_state12_pp0_stage3_iter2;
wire    ap_block_state16_pp0_stage3_iter3;
wire    ap_block_pp0_stage3_11001;
reg   [9:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [16:0] exp_table1_q0;
reg   [9:0] exp_table1_address1;
reg    exp_table1_ce1;
wire   [16:0] exp_table1_q1;
reg   [9:0] exp_table1_address2;
reg    exp_table1_ce2;
wire   [16:0] exp_table1_q2;
wire   [9:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [17:0] invert_table2_q0;
wire    io_acc_block_signal_op28;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
wire    ap_block_state13_pp0_stage0_iter3;
wire    ap_block_state17_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg  signed [15:0] data_array_0_V_reg_2027;
reg  signed [15:0] data_array_1_V_reg_2033;
reg  signed [15:0] data_array_2_V_reg_2039;
reg  signed [15:0] data_array_3_V_reg_2045;
reg  signed [15:0] data_array_4_V_reg_2051;
reg  signed [15:0] data_array_5_V_reg_2057;
reg  signed [15:0] data_array_6_V_reg_2063;
reg  signed [15:0] data_array_7_V_reg_2069;
reg  signed [15:0] data_array_8_V_reg_2075;
reg  signed [15:0] data_array_9_V_reg_2082;
wire   [0:0] icmp_ln1496_fu_614_p2;
reg   [0:0] icmp_ln1496_reg_2089;
wire   [0:0] icmp_ln1496_9_fu_620_p2;
reg   [0:0] icmp_ln1496_9_reg_2094;
wire   [0:0] icmp_ln1496_11_fu_626_p2;
reg   [0:0] icmp_ln1496_11_reg_2099;
wire   [0:0] icmp_ln1496_12_fu_632_p2;
reg   [0:0] icmp_ln1496_12_reg_2104;
wire   [15:0] select_ln65_14_fu_692_p3;
reg   [15:0] select_ln65_14_reg_2109;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state10_pp0_stage1_iter2;
wire    ap_block_state14_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] icmp_ln1496_15_fu_700_p2;
reg   [0:0] icmp_ln1496_15_reg_2115;
wire   [9:0] y_V_fu_1301_p3;
reg   [9:0] y_V_reg_2120;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_state11_pp0_stage2_iter2;
wire    ap_block_state15_pp0_stage2_iter3;
wire    ap_block_pp0_stage2_11001;
wire   [9:0] y_V_13_fu_1335_p3;
reg   [9:0] y_V_13_reg_2125;
wire   [9:0] y_V_14_fu_1369_p3;
reg   [9:0] y_V_14_reg_2130;
wire   [9:0] y_V_15_fu_1403_p3;
reg   [9:0] y_V_15_reg_2135;
wire   [9:0] y_V_16_fu_1437_p3;
reg   [9:0] y_V_16_reg_2140;
wire   [9:0] y_V_17_fu_1471_p3;
reg   [9:0] y_V_17_reg_2145;
wire   [9:0] y_V_18_fu_1505_p3;
reg   [9:0] y_V_18_reg_2150;
wire   [9:0] y_V_19_fu_1539_p3;
reg   [9:0] y_V_19_reg_2155;
wire   [9:0] y_V_20_fu_1573_p3;
reg   [9:0] y_V_20_reg_2160;
wire   [9:0] y_V_21_fu_1607_p3;
reg   [9:0] y_V_21_reg_2165;
reg   [16:0] exp_res_0_V_2_reg_2185;
reg   [16:0] exp_res_0_V_2_reg_2185_pp0_iter2_reg;
reg   [16:0] exp_res_0_V_2_reg_2185_pp0_iter3_reg;
reg   [16:0] exp_res_1_V_2_reg_2191;
reg   [16:0] exp_res_1_V_2_reg_2191_pp0_iter2_reg;
reg   [16:0] exp_res_1_V_2_reg_2191_pp0_iter3_reg;
reg   [16:0] exp_res_2_V_2_reg_2197;
reg   [16:0] exp_res_2_V_2_reg_2197_pp0_iter2_reg;
reg   [16:0] exp_res_2_V_2_reg_2197_pp0_iter3_reg;
reg   [16:0] exp_res_3_V_2_reg_2218;
reg   [16:0] exp_res_3_V_2_reg_2218_pp0_iter2_reg;
reg   [16:0] exp_res_3_V_2_reg_2218_pp0_iter3_reg;
reg   [16:0] exp_res_4_V_2_reg_2224;
reg   [16:0] exp_res_4_V_2_reg_2224_pp0_iter2_reg;
reg   [16:0] exp_res_4_V_2_reg_2224_pp0_iter3_reg;
reg   [16:0] exp_res_5_V_2_reg_2230;
reg   [16:0] exp_res_5_V_2_reg_2230_pp0_iter2_reg;
reg   [16:0] exp_res_5_V_2_reg_2230_pp0_iter3_reg;
reg   [16:0] exp_res_6_V_2_reg_2251;
reg   [16:0] exp_res_6_V_2_reg_2251_pp0_iter2_reg;
reg   [16:0] exp_res_6_V_2_reg_2251_pp0_iter3_reg;
reg   [16:0] exp_res_7_V_2_reg_2257;
reg   [16:0] exp_res_7_V_2_reg_2257_pp0_iter2_reg;
reg   [16:0] exp_res_7_V_2_reg_2257_pp0_iter3_reg;
reg   [16:0] exp_res_8_V_1_reg_2263;
reg   [16:0] exp_res_8_V_1_reg_2263_pp0_iter2_reg;
reg   [16:0] exp_res_8_V_1_reg_2263_pp0_iter3_reg;
reg   [16:0] exp_res_9_V_1_reg_2276;
reg   [16:0] exp_res_9_V_1_reg_2276_pp0_iter2_reg;
reg   [16:0] exp_res_9_V_1_reg_2276_pp0_iter3_reg;
wire   [17:0] grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_1_fu_526_ap_return;
reg  signed [17:0] p_Val2_39_reg_2283;
wire  signed [17:0] p_Val2_45_fu_1776_p3;
reg  signed [17:0] p_Val2_45_reg_2289;
wire   [16:0] p_Val2_46_fu_1808_p3;
reg   [16:0] p_Val2_46_reg_2295;
reg   [17:0] inv_exp_sum_V_reg_2306;
wire  signed [25:0] sext_ln241_fu_1921_p1;
reg  signed [25:0] sext_ln241_reg_2311;
reg   [15:0] tmp_data_0_V_reg_2318;
reg   [15:0] tmp_data_1_V_reg_2323;
reg   [15:0] tmp_data_2_V_reg_2328;
reg   [15:0] tmp_data_3_V_reg_2333;
reg   [15:0] tmp_data_4_V_reg_2338;
reg   [15:0] tmp_data_5_V_reg_2343;
reg   [15:0] tmp_data_6_V_reg_2348;
reg   [15:0] tmp_data_7_V_reg_2353;
reg   [15:0] tmp_data_8_V_reg_2358;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage0_subdone;
reg   [4:0] grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_1_fu_526_x_V_offset;
reg    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_1_fu_526_ap_ce;
reg    ap_block_state1_pp0_stage0_iter0_ignore_call233;
wire    ap_block_state5_pp0_stage0_iter1_ignore_call233;
wire    ap_block_state9_pp0_stage0_iter2_ignore_call233;
wire    ap_block_state13_pp0_stage0_iter3_ignore_call233;
wire    ap_block_state17_pp0_stage0_iter4_ignore_call233;
reg    ap_block_pp0_stage0_11001_ignoreCallOp238;
wire    ap_block_state2_pp0_stage1_iter0_ignore_call233;
wire    ap_block_state6_pp0_stage1_iter1_ignore_call233;
wire    ap_block_state10_pp0_stage1_iter2_ignore_call233;
wire    ap_block_state14_pp0_stage1_iter3_ignore_call233;
wire    ap_block_pp0_stage1_11001_ignoreCallOp239;
wire    ap_block_state3_pp0_stage2_iter0_ignore_call234;
wire    ap_block_state7_pp0_stage2_iter1_ignore_call234;
wire    ap_block_state11_pp0_stage2_iter2_ignore_call234;
wire    ap_block_state15_pp0_stage2_iter3_ignore_call234;
wire    ap_block_pp0_stage2_11001_ignoreCallOp241;
reg   [16:0] exp_res_0_V_fu_252;
wire    ap_block_pp0_stage1;
reg   [16:0] exp_res_1_V_fu_256;
reg   [16:0] exp_res_2_V_fu_260;
reg   [16:0] exp_res_3_V_fu_264;
reg   [16:0] exp_res_4_V_fu_268;
reg   [16:0] exp_res_5_V_fu_272;
reg   [16:0] exp_res_6_V_fu_276;
reg   [16:0] exp_res_7_V_fu_280;
reg   [16:0] exp_res_8_V_fu_284;
reg   [16:0] exp_res_9_V_fu_288;
wire   [63:0] zext_ln225_fu_1615_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln225_1_fu_1619_p1;
wire   [63:0] zext_ln225_2_fu_1623_p1;
wire   [63:0] zext_ln225_3_fu_1627_p1;
wire   [63:0] zext_ln225_4_fu_1631_p1;
wire   [63:0] zext_ln225_5_fu_1635_p1;
wire   [63:0] zext_ln225_6_fu_1639_p1;
wire   [63:0] zext_ln225_7_fu_1643_p1;
wire   [63:0] zext_ln225_8_fu_1647_p1;
wire   [63:0] zext_ln225_9_fu_1651_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln235_fu_1916_p1;
reg    ap_block_pp0_stage0_01001;
reg   [16:0] grp_fu_456_p0;
wire   [25:0] zext_ln1118_11_fu_1931_p1;
wire   [25:0] zext_ln1118_14_fu_1943_p1;
wire   [25:0] zext_ln1118_17_fu_1955_p1;
wire   [25:0] zext_ln1118_19_fu_1963_p1;
reg  signed [17:0] grp_fu_456_p1;
reg   [16:0] grp_fu_457_p0;
wire   [25:0] zext_ln1118_fu_1927_p1;
wire   [25:0] zext_ln1118_13_fu_1939_p1;
wire   [25:0] zext_ln1118_16_fu_1951_p1;
reg  signed [17:0] grp_fu_457_p1;
reg   [16:0] grp_fu_458_p0;
wire   [25:0] zext_ln1118_12_fu_1935_p1;
wire   [25:0] zext_ln1118_15_fu_1947_p1;
wire   [25:0] zext_ln1118_18_fu_1959_p1;
reg  signed [17:0] grp_fu_458_p1;
wire   [25:0] grp_fu_457_p2;
wire   [25:0] grp_fu_456_p2;
wire   [25:0] grp_fu_458_p2;
wire  signed [15:0] icmp_ln1496_fu_614_p0;
wire  signed [15:0] icmp_ln1496_fu_614_p1;
wire  signed [15:0] icmp_ln1496_9_fu_620_p0;
wire  signed [15:0] icmp_ln1496_9_fu_620_p1;
wire  signed [15:0] icmp_ln1496_11_fu_626_p0;
wire  signed [15:0] icmp_ln1496_11_fu_626_p1;
wire  signed [15:0] icmp_ln1496_12_fu_632_p0;
wire  signed [15:0] icmp_ln1496_12_fu_632_p1;
wire   [15:0] select_ln65_fu_638_p3;
wire   [15:0] select_ln65_9_fu_643_p3;
wire   [0:0] icmp_ln1496_10_fu_648_p2;
wire   [15:0] select_ln65_11_fu_662_p3;
wire   [15:0] select_ln65_12_fu_667_p3;
wire   [0:0] icmp_ln1496_13_fu_672_p2;
wire   [15:0] select_ln65_10_fu_654_p3;
wire   [15:0] select_ln65_13_fu_678_p3;
wire   [0:0] icmp_ln1496_14_fu_686_p2;
wire   [15:0] select_ln65_15_fu_704_p3;
wire   [0:0] icmp_ln1496_16_fu_709_p2;
wire   [15:0] x_max_V_fu_714_p3;
wire  signed [16:0] sext_ln703_fu_721_p1;
wire  signed [16:0] sext_ln703_13_fu_724_p1;
wire   [16:0] sub_ln1193_fu_728_p2;
wire   [0:0] tmp_48_fu_742_p3;
wire   [0:0] tmp_47_fu_734_p3;
wire   [0:0] xor_ln786_fu_750_p2;
wire   [0:0] xor_ln340_fu_768_p2;
wire  signed [16:0] sext_ln703_14_fu_780_p1;
wire   [16:0] sub_ln1193_11_fu_783_p2;
wire   [0:0] tmp_50_fu_797_p3;
wire   [0:0] tmp_49_fu_789_p3;
wire   [0:0] xor_ln786_1_fu_805_p2;
wire   [0:0] xor_ln340_1_fu_823_p2;
wire  signed [16:0] sext_ln703_15_fu_835_p1;
wire   [16:0] sub_ln1193_12_fu_838_p2;
wire   [0:0] tmp_52_fu_852_p3;
wire   [0:0] tmp_51_fu_844_p3;
wire   [0:0] xor_ln786_2_fu_860_p2;
wire   [0:0] xor_ln340_2_fu_878_p2;
wire  signed [16:0] sext_ln703_16_fu_890_p1;
wire   [16:0] sub_ln1193_13_fu_893_p2;
wire   [0:0] tmp_54_fu_907_p3;
wire   [0:0] tmp_53_fu_899_p3;
wire   [0:0] xor_ln786_3_fu_915_p2;
wire   [0:0] xor_ln340_3_fu_933_p2;
wire  signed [16:0] sext_ln703_17_fu_945_p1;
wire   [16:0] sub_ln1193_14_fu_948_p2;
wire   [0:0] tmp_56_fu_962_p3;
wire   [0:0] tmp_55_fu_954_p3;
wire   [0:0] xor_ln786_4_fu_970_p2;
wire   [0:0] xor_ln340_4_fu_988_p2;
wire  signed [16:0] sext_ln703_18_fu_1000_p1;
wire   [16:0] sub_ln1193_15_fu_1003_p2;
wire   [0:0] tmp_58_fu_1017_p3;
wire   [0:0] tmp_57_fu_1009_p3;
wire   [0:0] xor_ln786_5_fu_1025_p2;
wire   [0:0] xor_ln340_5_fu_1043_p2;
wire  signed [16:0] sext_ln703_19_fu_1055_p1;
wire   [16:0] sub_ln1193_16_fu_1058_p2;
wire   [0:0] tmp_60_fu_1072_p3;
wire   [0:0] tmp_59_fu_1064_p3;
wire   [0:0] xor_ln786_6_fu_1080_p2;
wire   [0:0] xor_ln340_6_fu_1098_p2;
wire  signed [16:0] sext_ln703_20_fu_1110_p1;
wire   [16:0] sub_ln1193_17_fu_1113_p2;
wire   [0:0] tmp_62_fu_1127_p3;
wire   [0:0] tmp_61_fu_1119_p3;
wire   [0:0] xor_ln786_7_fu_1135_p2;
wire   [0:0] xor_ln340_7_fu_1153_p2;
wire  signed [16:0] sext_ln703_21_fu_1165_p1;
wire   [16:0] sub_ln1193_18_fu_1168_p2;
wire   [0:0] tmp_64_fu_1182_p3;
wire   [0:0] tmp_63_fu_1174_p3;
wire   [0:0] xor_ln786_8_fu_1190_p2;
wire   [0:0] xor_ln340_8_fu_1208_p2;
wire  signed [16:0] sext_ln703_22_fu_1220_p1;
wire   [16:0] sub_ln1193_19_fu_1223_p2;
wire   [0:0] tmp_66_fu_1237_p3;
wire   [0:0] tmp_65_fu_1229_p3;
wire   [0:0] xor_ln786_9_fu_1245_p2;
wire   [0:0] xor_ln340_9_fu_1263_p2;
wire   [0:0] xor_ln340_23_fu_762_p2;
wire   [9:0] tmp_fu_1275_p4;
wire   [0:0] and_ln786_fu_756_p2;
wire   [0:0] or_ln340_fu_774_p2;
wire   [9:0] select_ln340_fu_1285_p3;
wire   [9:0] select_ln388_fu_1293_p3;
wire   [0:0] xor_ln340_24_fu_817_p2;
wire   [9:0] tmp_21_fu_1309_p4;
wire   [0:0] and_ln786_11_fu_811_p2;
wire   [0:0] or_ln340_13_fu_829_p2;
wire   [9:0] select_ln340_30_fu_1319_p3;
wire   [9:0] select_ln388_13_fu_1327_p3;
wire   [0:0] xor_ln340_25_fu_872_p2;
wire   [9:0] tmp_22_fu_1343_p4;
wire   [0:0] and_ln786_12_fu_866_p2;
wire   [0:0] or_ln340_14_fu_884_p2;
wire   [9:0] select_ln340_32_fu_1353_p3;
wire   [9:0] select_ln388_14_fu_1361_p3;
wire   [0:0] xor_ln340_26_fu_927_p2;
wire   [9:0] tmp_23_fu_1377_p4;
wire   [0:0] and_ln786_13_fu_921_p2;
wire   [0:0] or_ln340_15_fu_939_p2;
wire   [9:0] select_ln340_34_fu_1387_p3;
wire   [9:0] select_ln388_15_fu_1395_p3;
wire   [0:0] xor_ln340_27_fu_982_p2;
wire   [9:0] tmp_24_fu_1411_p4;
wire   [0:0] and_ln786_14_fu_976_p2;
wire   [0:0] or_ln340_16_fu_994_p2;
wire   [9:0] select_ln340_36_fu_1421_p3;
wire   [9:0] select_ln388_16_fu_1429_p3;
wire   [0:0] xor_ln340_28_fu_1037_p2;
wire   [9:0] tmp_25_fu_1445_p4;
wire   [0:0] and_ln786_15_fu_1031_p2;
wire   [0:0] or_ln340_17_fu_1049_p2;
wire   [9:0] select_ln340_38_fu_1455_p3;
wire   [9:0] select_ln388_17_fu_1463_p3;
wire   [0:0] xor_ln340_29_fu_1092_p2;
wire   [9:0] tmp_26_fu_1479_p4;
wire   [0:0] and_ln786_16_fu_1086_p2;
wire   [0:0] or_ln340_18_fu_1104_p2;
wire   [9:0] select_ln340_40_fu_1489_p3;
wire   [9:0] select_ln388_18_fu_1497_p3;
wire   [0:0] xor_ln340_30_fu_1147_p2;
wire   [9:0] tmp_27_fu_1513_p4;
wire   [0:0] and_ln786_17_fu_1141_p2;
wire   [0:0] or_ln340_19_fu_1159_p2;
wire   [9:0] select_ln340_42_fu_1523_p3;
wire   [9:0] select_ln388_19_fu_1531_p3;
wire   [0:0] xor_ln340_31_fu_1202_p2;
wire   [9:0] tmp_28_fu_1547_p4;
wire   [0:0] and_ln786_18_fu_1196_p2;
wire   [0:0] or_ln340_20_fu_1214_p2;
wire   [9:0] select_ln340_44_fu_1557_p3;
wire   [9:0] select_ln388_20_fu_1565_p3;
wire   [0:0] xor_ln340_32_fu_1257_p2;
wire   [9:0] tmp_29_fu_1581_p4;
wire   [0:0] and_ln786_19_fu_1251_p2;
wire   [0:0] or_ln340_21_fu_1269_p2;
wire   [9:0] select_ln340_46_fu_1591_p3;
wire   [9:0] select_ln388_21_fu_1599_p3;
wire  signed [17:0] rhs_V_fu_1699_p0;
wire  signed [18:0] lhs_V_fu_1696_p1;
wire  signed [18:0] rhs_V_fu_1699_p1;
wire   [18:0] ret_V_fu_1703_p2;
wire  signed [17:0] p_Val2_41_fu_1717_p0;
wire   [17:0] p_Val2_41_fu_1717_p2;
wire   [0:0] p_Result_42_fu_1722_p3;
wire   [0:0] p_Result_s_fu_1709_p3;
wire   [0:0] xor_ln786_10_fu_1730_p2;
wire   [0:0] xor_ln340_34_fu_1748_p2;
wire   [0:0] xor_ln340_33_fu_1742_p2;
wire   [0:0] underflow_fu_1736_p2;
wire   [0:0] or_ln340_22_fu_1754_p2;
wire   [17:0] select_ln340_48_fu_1760_p3;
wire   [17:0] select_ln388_22_fu_1768_p3;
wire   [17:0] p_Val2_43_fu_1787_p1;
wire   [17:0] p_Val2_42_fu_1784_p1;
wire   [17:0] p_Val2_44_fu_1790_p2;
wire   [0:0] p_Result_43_fu_1800_p3;
wire   [16:0] add_ln746_fu_1796_p2;
wire  signed [18:0] lhs_V_1_fu_1819_p1;
wire   [18:0] rhs_V_1_fu_1822_p1;
wire   [18:0] ret_V_1_fu_1825_p2;
wire   [17:0] zext_ln746_fu_1816_p1;
wire   [17:0] p_Val2_48_fu_1839_p2;
wire   [0:0] p_Result_45_fu_1844_p3;
wire   [0:0] p_Result_44_fu_1831_p3;
wire   [0:0] xor_ln786_11_fu_1852_p2;
wire   [0:0] xor_ln340_36_fu_1870_p2;
wire   [0:0] xor_ln340_35_fu_1864_p2;
wire   [9:0] tmp_30_fu_1882_p4;
wire   [0:0] underflow_1_fu_1858_p2;
wire   [0:0] or_ln340_23_fu_1876_p2;
wire   [9:0] select_ln340_50_fu_1892_p3;
wire   [9:0] select_ln388_23_fu_1900_p3;
wire   [9:0] y_V_22_fu_1908_p3;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_0to3;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to4;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config10_s_exp_tabHfu #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0),
    .address1(exp_table1_address1),
    .ce1(exp_table1_ce1),
    .q1(exp_table1_q1),
    .address2(exp_table1_address2),
    .ce2(exp_table1_ce2),
    .q2(exp_table1_q2)
);

softmax_stable_array_array_ap_fixed_16_6_5_3_0_4u_softmax_config3_s_invert_tadEe #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_1 grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_1_fu_526(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x_0_V(exp_res_0_V_fu_252),
    .x_1_V(exp_res_1_V_fu_256),
    .x_2_V(exp_res_2_V_fu_260),
    .x_3_V(exp_res_3_V_fu_264),
    .x_4_V(exp_res_4_V_fu_268),
    .x_5_V(exp_res_5_V_fu_272),
    .x_6_V(exp_res_6_V_fu_276),
    .x_7_V(exp_res_7_V_fu_280),
    .x_8_V(exp_res_8_V_fu_284),
    .x_9_V(exp_res_9_V_fu_288),
    .x_V_offset(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_1_fu_526_x_V_offset),
    .ap_return(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_1_fu_526_ap_return),
    .ap_ce(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_1_fu_526_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_array_0_V_reg_2027 <= data_V_data_0_V_dout;
        data_array_1_V_reg_2033 <= data_V_data_1_V_dout;
        data_array_2_V_reg_2039 <= data_V_data_2_V_dout;
        data_array_3_V_reg_2045 <= data_V_data_3_V_dout;
        data_array_4_V_reg_2051 <= data_V_data_4_V_dout;
        data_array_5_V_reg_2057 <= data_V_data_5_V_dout;
        data_array_6_V_reg_2063 <= data_V_data_6_V_dout;
        data_array_7_V_reg_2069 <= data_V_data_7_V_dout;
        data_array_8_V_reg_2075 <= data_V_data_8_V_dout;
        data_array_9_V_reg_2082 <= data_V_data_9_V_dout;
        exp_res_0_V_2_reg_2185_pp0_iter2_reg <= exp_res_0_V_2_reg_2185;
        exp_res_0_V_2_reg_2185_pp0_iter3_reg <= exp_res_0_V_2_reg_2185_pp0_iter2_reg;
        exp_res_1_V_2_reg_2191_pp0_iter2_reg <= exp_res_1_V_2_reg_2191;
        exp_res_1_V_2_reg_2191_pp0_iter3_reg <= exp_res_1_V_2_reg_2191_pp0_iter2_reg;
        exp_res_2_V_2_reg_2197_pp0_iter2_reg <= exp_res_2_V_2_reg_2197;
        exp_res_2_V_2_reg_2197_pp0_iter3_reg <= exp_res_2_V_2_reg_2197_pp0_iter2_reg;
        icmp_ln1496_11_reg_2099 <= icmp_ln1496_11_fu_626_p2;
        icmp_ln1496_12_reg_2104 <= icmp_ln1496_12_fu_632_p2;
        icmp_ln1496_9_reg_2094 <= icmp_ln1496_9_fu_620_p2;
        icmp_ln1496_reg_2089 <= icmp_ln1496_fu_614_p2;
        inv_exp_sum_V_reg_2306 <= invert_table2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_res_0_V_2_reg_2185 <= exp_table1_q0;
        exp_res_1_V_2_reg_2191 <= exp_table1_q1;
        exp_res_2_V_2_reg_2197 <= exp_table1_q2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        exp_res_0_V_fu_252 <= exp_res_0_V_2_reg_2185;
        exp_res_1_V_fu_256 <= exp_res_1_V_2_reg_2191;
        exp_res_2_V_fu_260 <= exp_res_2_V_2_reg_2197;
        exp_res_3_V_fu_264 <= exp_res_3_V_2_reg_2218;
        exp_res_4_V_fu_268 <= exp_res_4_V_2_reg_2224;
        exp_res_5_V_fu_272 <= exp_res_5_V_2_reg_2230;
        exp_res_6_V_fu_276 <= exp_res_6_V_2_reg_2251;
        exp_res_7_V_fu_280 <= exp_res_7_V_2_reg_2257;
        exp_res_8_V_fu_284 <= exp_res_8_V_1_reg_2263;
        exp_res_9_V_1_reg_2276 <= exp_table1_q0;
        exp_res_9_V_fu_288 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_res_3_V_2_reg_2218 <= exp_table1_q0;
        exp_res_4_V_2_reg_2224 <= exp_table1_q1;
        exp_res_5_V_2_reg_2230 <= exp_table1_q2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_res_3_V_2_reg_2218_pp0_iter2_reg <= exp_res_3_V_2_reg_2218;
        exp_res_3_V_2_reg_2218_pp0_iter3_reg <= exp_res_3_V_2_reg_2218_pp0_iter2_reg;
        exp_res_4_V_2_reg_2224_pp0_iter2_reg <= exp_res_4_V_2_reg_2224;
        exp_res_4_V_2_reg_2224_pp0_iter3_reg <= exp_res_4_V_2_reg_2224_pp0_iter2_reg;
        exp_res_5_V_2_reg_2230_pp0_iter2_reg <= exp_res_5_V_2_reg_2230;
        exp_res_5_V_2_reg_2230_pp0_iter3_reg <= exp_res_5_V_2_reg_2230_pp0_iter2_reg;
        icmp_ln1496_15_reg_2115 <= icmp_ln1496_15_fu_700_p2;
        select_ln65_14_reg_2109 <= select_ln65_14_fu_692_p3;
        sext_ln241_reg_2311 <= sext_ln241_fu_1921_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exp_res_6_V_2_reg_2251 <= exp_table1_q0;
        exp_res_7_V_2_reg_2257 <= exp_table1_q1;
        exp_res_8_V_1_reg_2263 <= exp_table1_q2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exp_res_6_V_2_reg_2251_pp0_iter2_reg <= exp_res_6_V_2_reg_2251;
        exp_res_6_V_2_reg_2251_pp0_iter3_reg <= exp_res_6_V_2_reg_2251_pp0_iter2_reg;
        exp_res_7_V_2_reg_2257_pp0_iter2_reg <= exp_res_7_V_2_reg_2257;
        exp_res_7_V_2_reg_2257_pp0_iter3_reg <= exp_res_7_V_2_reg_2257_pp0_iter2_reg;
        exp_res_8_V_1_reg_2263_pp0_iter2_reg <= exp_res_8_V_1_reg_2263;
        exp_res_8_V_1_reg_2263_pp0_iter3_reg <= exp_res_8_V_1_reg_2263_pp0_iter2_reg;
        p_Val2_45_reg_2289 <= p_Val2_45_fu_1776_p3;
        p_Val2_46_reg_2295 <= p_Val2_46_fu_1808_p3;
        y_V_13_reg_2125 <= y_V_13_fu_1335_p3;
        y_V_14_reg_2130 <= y_V_14_fu_1369_p3;
        y_V_15_reg_2135 <= y_V_15_fu_1403_p3;
        y_V_16_reg_2140 <= y_V_16_fu_1437_p3;
        y_V_17_reg_2145 <= y_V_17_fu_1471_p3;
        y_V_18_reg_2150 <= y_V_18_fu_1505_p3;
        y_V_19_reg_2155 <= y_V_19_fu_1539_p3;
        y_V_20_reg_2160 <= y_V_20_fu_1573_p3;
        y_V_21_reg_2165 <= y_V_21_fu_1607_p3;
        y_V_reg_2120 <= y_V_fu_1301_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        exp_res_9_V_1_reg_2276_pp0_iter2_reg <= exp_res_9_V_1_reg_2276;
        exp_res_9_V_1_reg_2276_pp0_iter3_reg <= exp_res_9_V_1_reg_2276_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_Val2_39_reg_2283 <= grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_1_fu_526_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_data_0_V_reg_2318 <= {{grp_fu_457_p2[25:10]}};
        tmp_data_1_V_reg_2323 <= {{grp_fu_456_p2[25:10]}};
        tmp_data_2_V_reg_2328 <= {{grp_fu_458_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_data_3_V_reg_2333 <= {{grp_fu_457_p2[25:10]}};
        tmp_data_4_V_reg_2338 <= {{grp_fu_456_p2[25:10]}};
        tmp_data_5_V_reg_2343 <= {{grp_fu_458_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        tmp_data_6_V_reg_2348 <= {{grp_fu_457_p2[25:10]}};
        tmp_data_7_V_reg_2353 <= {{grp_fu_456_p2[25:10]}};
        tmp_data_8_V_reg_2358 <= {{grp_fu_458_p2[25:10]}};
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exp_table1_address0 = zext_ln225_9_fu_1651_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_table1_address0 = zext_ln225_6_fu_1639_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_address0 = zext_ln225_3_fu_1627_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table1_address0 = zext_ln225_fu_1615_p1;
    end else begin
        exp_table1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_table1_address1 = zext_ln225_7_fu_1643_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_address1 = zext_ln225_4_fu_1631_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table1_address1 = zext_ln225_1_fu_1619_p1;
    end else begin
        exp_table1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_table1_address2 = zext_ln225_8_fu_1647_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_address2 = zext_ln225_5_fu_1635_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table1_address2 = zext_ln225_2_fu_1623_p1;
    end else begin
        exp_table1_address2 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        exp_table1_ce1 = 1'b1;
    end else begin
        exp_table1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        exp_table1_ce2 = 1'b1;
    end else begin
        exp_table1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_456_p0 = zext_ln1118_19_fu_1963_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_456_p0 = zext_ln1118_17_fu_1955_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_456_p0 = zext_ln1118_14_fu_1943_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_456_p0 = zext_ln1118_11_fu_1931_p1;
    end else begin
        grp_fu_456_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_456_p1 = sext_ln241_reg_2311;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_456_p1 = sext_ln241_fu_1921_p1;
    end else begin
        grp_fu_456_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_457_p0 = zext_ln1118_16_fu_1951_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_457_p0 = zext_ln1118_13_fu_1939_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_457_p0 = zext_ln1118_fu_1927_p1;
        end else begin
            grp_fu_457_p0 = 'bx;
        end
    end else begin
        grp_fu_457_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_457_p1 = sext_ln241_reg_2311;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_457_p1 = sext_ln241_fu_1921_p1;
    end else begin
        grp_fu_457_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_458_p0 = zext_ln1118_18_fu_1959_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_458_p0 = zext_ln1118_15_fu_1947_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_458_p0 = zext_ln1118_12_fu_1935_p1;
        end else begin
            grp_fu_458_p0 = 'bx;
        end
    end else begin
        grp_fu_458_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_458_p1 = sext_ln241_reg_2311;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_458_p1 = sext_ln241_fu_1921_p1;
    end else begin
        grp_fu_458_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001_ignoreCallOp241) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp239) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp238) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_1_fu_526_ap_ce = 1'b1;
    end else begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_1_fu_526_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_1_fu_526_x_V_offset = 5'd4;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_1_fu_526_x_V_offset = 5'd0;
        end else begin
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_1_fu_526_x_V_offset = 'bx;
        end
    end else begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_1_fu_526_x_V_offset = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_0_V_TDATA_blk_n = res_V_data_0_V_TREADY;
    end else begin
        res_V_data_0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_0_V_TVALID = 1'b1;
    end else begin
        res_V_data_0_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_1_V_TDATA_blk_n = res_V_data_1_V_TREADY;
    end else begin
        res_V_data_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_1_V_TVALID = 1'b1;
    end else begin
        res_V_data_1_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_2_V_TDATA_blk_n = res_V_data_2_V_TREADY;
    end else begin
        res_V_data_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_2_V_TVALID = 1'b1;
    end else begin
        res_V_data_2_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_3_V_TDATA_blk_n = res_V_data_3_V_TREADY;
    end else begin
        res_V_data_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_3_V_TVALID = 1'b1;
    end else begin
        res_V_data_3_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_4_V_TDATA_blk_n = res_V_data_4_V_TREADY;
    end else begin
        res_V_data_4_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_4_V_TVALID = 1'b1;
    end else begin
        res_V_data_4_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_5_V_TDATA_blk_n = res_V_data_5_V_TREADY;
    end else begin
        res_V_data_5_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_5_V_TVALID = 1'b1;
    end else begin
        res_V_data_5_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_6_V_TDATA_blk_n = res_V_data_6_V_TREADY;
    end else begin
        res_V_data_6_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_6_V_TVALID = 1'b1;
    end else begin
        res_V_data_6_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_7_V_TDATA_blk_n = res_V_data_7_V_TREADY;
    end else begin
        res_V_data_7_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_7_V_TVALID = 1'b1;
    end else begin
        res_V_data_7_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_8_V_TDATA_blk_n = res_V_data_8_V_TREADY;
    end else begin
        res_V_data_8_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_8_V_TVALID = 1'b1;
    end else begin
        res_V_data_8_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_9_V_TDATA_blk_n = res_V_data_9_V_TREADY;
    end else begin
        res_V_data_9_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_9_V_TVALID = 1'b1;
    end else begin
        res_V_data_9_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln746_fu_1796_p2 = (exp_res_8_V_1_reg_2263 + exp_res_9_V_1_reg_2276);

assign and_ln786_11_fu_811_p2 = (xor_ln786_1_fu_805_p2 & tmp_49_fu_789_p3);

assign and_ln786_12_fu_866_p2 = (xor_ln786_2_fu_860_p2 & tmp_51_fu_844_p3);

assign and_ln786_13_fu_921_p2 = (xor_ln786_3_fu_915_p2 & tmp_53_fu_899_p3);

assign and_ln786_14_fu_976_p2 = (xor_ln786_4_fu_970_p2 & tmp_55_fu_954_p3);

assign and_ln786_15_fu_1031_p2 = (xor_ln786_5_fu_1025_p2 & tmp_57_fu_1009_p3);

assign and_ln786_16_fu_1086_p2 = (xor_ln786_6_fu_1080_p2 & tmp_59_fu_1064_p3);

assign and_ln786_17_fu_1141_p2 = (xor_ln786_7_fu_1135_p2 & tmp_61_fu_1119_p3);

assign and_ln786_18_fu_1196_p2 = (xor_ln786_8_fu_1190_p2 & tmp_63_fu_1174_p3);

assign and_ln786_19_fu_1251_p2 = (xor_ln786_9_fu_1245_p2 & tmp_65_fu_1229_p3);

assign and_ln786_fu_756_p2 = (xor_ln786_fu_750_p2 & tmp_47_fu_734_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_start == 1'b0) | (io_acc_block_signal_op28 == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_start == 1'b0) | (io_acc_block_signal_op28 == 1'b0))) | ((res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp238 = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_start == 1'b0) | (io_acc_block_signal_op28 == 1'b0))) | ((res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_start == 1'b0) | (io_acc_block_signal_op28 == 1'b0))) | ((res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001_ignoreCallOp239 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001_ignoreCallOp241 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter2_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter2_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter3_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter3_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter3_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter4_ignore_call233 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (io_acc_block_signal_op28 == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0_ignore_call233 = ((ap_start == 1'b0) | (io_acc_block_signal_op28 == 1'b0));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_456_p2 = ($signed({{1'b0}, {grp_fu_456_p0}}) * $signed(grp_fu_456_p1));

assign grp_fu_457_p2 = ($signed({{1'b0}, {grp_fu_457_p0}}) * $signed(grp_fu_457_p1));

assign grp_fu_458_p2 = ($signed({{1'b0}, {grp_fu_458_p0}}) * $signed(grp_fu_458_p1));

assign icmp_ln1496_10_fu_648_p2 = (($signed(select_ln65_fu_638_p3) < $signed(select_ln65_9_fu_643_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_11_fu_626_p0 = data_V_data_4_V_dout;

assign icmp_ln1496_11_fu_626_p1 = data_V_data_5_V_dout;

assign icmp_ln1496_11_fu_626_p2 = (($signed(icmp_ln1496_11_fu_626_p0) < $signed(icmp_ln1496_11_fu_626_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_12_fu_632_p0 = data_V_data_6_V_dout;

assign icmp_ln1496_12_fu_632_p1 = data_V_data_7_V_dout;

assign icmp_ln1496_12_fu_632_p2 = (($signed(icmp_ln1496_12_fu_632_p0) < $signed(icmp_ln1496_12_fu_632_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_13_fu_672_p2 = (($signed(select_ln65_11_fu_662_p3) < $signed(select_ln65_12_fu_667_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_14_fu_686_p2 = (($signed(select_ln65_10_fu_654_p3) < $signed(select_ln65_13_fu_678_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_15_fu_700_p2 = (($signed(data_array_8_V_reg_2075) < $signed(data_array_9_V_reg_2082)) ? 1'b1 : 1'b0);

assign icmp_ln1496_16_fu_709_p2 = (($signed(select_ln65_14_reg_2109) < $signed(select_ln65_15_fu_704_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_9_fu_620_p0 = data_V_data_2_V_dout;

assign icmp_ln1496_9_fu_620_p1 = data_V_data_3_V_dout;

assign icmp_ln1496_9_fu_620_p2 = (($signed(icmp_ln1496_9_fu_620_p0) < $signed(icmp_ln1496_9_fu_620_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_614_p0 = data_V_data_0_V_dout;

assign icmp_ln1496_fu_614_p1 = data_V_data_1_V_dout;

assign icmp_ln1496_fu_614_p2 = (($signed(icmp_ln1496_fu_614_p0) < $signed(icmp_ln1496_fu_614_p1)) ? 1'b1 : 1'b0);

assign invert_table2_address0 = zext_ln235_fu_1916_p1;

assign io_acc_block_signal_op28 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign lhs_V_1_fu_1819_p1 = p_Val2_45_reg_2289;

assign lhs_V_fu_1696_p1 = p_Val2_39_reg_2283;

assign or_ln340_13_fu_829_p2 = (xor_ln340_1_fu_823_p2 | tmp_50_fu_797_p3);

assign or_ln340_14_fu_884_p2 = (xor_ln340_2_fu_878_p2 | tmp_52_fu_852_p3);

assign or_ln340_15_fu_939_p2 = (xor_ln340_3_fu_933_p2 | tmp_54_fu_907_p3);

assign or_ln340_16_fu_994_p2 = (xor_ln340_4_fu_988_p2 | tmp_56_fu_962_p3);

assign or_ln340_17_fu_1049_p2 = (xor_ln340_5_fu_1043_p2 | tmp_58_fu_1017_p3);

assign or_ln340_18_fu_1104_p2 = (xor_ln340_6_fu_1098_p2 | tmp_60_fu_1072_p3);

assign or_ln340_19_fu_1159_p2 = (xor_ln340_7_fu_1153_p2 | tmp_62_fu_1127_p3);

assign or_ln340_20_fu_1214_p2 = (xor_ln340_8_fu_1208_p2 | tmp_64_fu_1182_p3);

assign or_ln340_21_fu_1269_p2 = (xor_ln340_9_fu_1263_p2 | tmp_66_fu_1237_p3);

assign or_ln340_22_fu_1754_p2 = (xor_ln340_34_fu_1748_p2 | p_Result_42_fu_1722_p3);

assign or_ln340_23_fu_1876_p2 = (xor_ln340_36_fu_1870_p2 | p_Result_45_fu_1844_p3);

assign or_ln340_fu_774_p2 = (xor_ln340_fu_768_p2 | tmp_48_fu_742_p3);

assign p_Result_42_fu_1722_p3 = p_Val2_41_fu_1717_p2[32'd17];

assign p_Result_43_fu_1800_p3 = p_Val2_44_fu_1790_p2[32'd17];

assign p_Result_44_fu_1831_p3 = ret_V_1_fu_1825_p2[32'd18];

assign p_Result_45_fu_1844_p3 = p_Val2_48_fu_1839_p2[32'd17];

assign p_Result_s_fu_1709_p3 = ret_V_fu_1703_p2[32'd18];

assign p_Val2_41_fu_1717_p0 = grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_1_fu_526_ap_return;

assign p_Val2_41_fu_1717_p2 = ($signed(p_Val2_41_fu_1717_p0) + $signed(p_Val2_39_reg_2283));

assign p_Val2_42_fu_1784_p1 = exp_res_8_V_1_reg_2263;

assign p_Val2_43_fu_1787_p1 = exp_res_9_V_1_reg_2276;

assign p_Val2_44_fu_1790_p2 = (p_Val2_43_fu_1787_p1 + p_Val2_42_fu_1784_p1);

assign p_Val2_45_fu_1776_p3 = ((or_ln340_22_fu_1754_p2[0:0] === 1'b1) ? select_ln340_48_fu_1760_p3 : select_ln388_22_fu_1768_p3);

assign p_Val2_46_fu_1808_p3 = ((p_Result_43_fu_1800_p3[0:0] === 1'b1) ? 17'd131071 : add_ln746_fu_1796_p2);

assign p_Val2_48_fu_1839_p2 = ($signed(zext_ln746_fu_1816_p1) + $signed(p_Val2_45_reg_2289));

assign res_V_data_0_V_TDATA = tmp_data_0_V_reg_2318;

assign res_V_data_1_V_TDATA = tmp_data_1_V_reg_2323;

assign res_V_data_2_V_TDATA = tmp_data_2_V_reg_2328;

assign res_V_data_3_V_TDATA = tmp_data_3_V_reg_2333;

assign res_V_data_4_V_TDATA = tmp_data_4_V_reg_2338;

assign res_V_data_5_V_TDATA = tmp_data_5_V_reg_2343;

assign res_V_data_6_V_TDATA = tmp_data_6_V_reg_2348;

assign res_V_data_7_V_TDATA = tmp_data_7_V_reg_2353;

assign res_V_data_8_V_TDATA = tmp_data_8_V_reg_2358;

assign res_V_data_9_V_TDATA = {{grp_fu_456_p2[25:10]}};

assign ret_V_1_fu_1825_p2 = ($signed(lhs_V_1_fu_1819_p1) + $signed(rhs_V_1_fu_1822_p1));

assign ret_V_fu_1703_p2 = ($signed(lhs_V_fu_1696_p1) + $signed(rhs_V_fu_1699_p1));

assign rhs_V_1_fu_1822_p1 = p_Val2_46_reg_2295;

assign rhs_V_fu_1699_p0 = grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_1_fu_526_ap_return;

assign rhs_V_fu_1699_p1 = rhs_V_fu_1699_p0;

assign select_ln340_30_fu_1319_p3 = ((xor_ln340_24_fu_817_p2[0:0] === 1'b1) ? 10'd511 : tmp_21_fu_1309_p4);

assign select_ln340_32_fu_1353_p3 = ((xor_ln340_25_fu_872_p2[0:0] === 1'b1) ? 10'd511 : tmp_22_fu_1343_p4);

assign select_ln340_34_fu_1387_p3 = ((xor_ln340_26_fu_927_p2[0:0] === 1'b1) ? 10'd511 : tmp_23_fu_1377_p4);

assign select_ln340_36_fu_1421_p3 = ((xor_ln340_27_fu_982_p2[0:0] === 1'b1) ? 10'd511 : tmp_24_fu_1411_p4);

assign select_ln340_38_fu_1455_p3 = ((xor_ln340_28_fu_1037_p2[0:0] === 1'b1) ? 10'd511 : tmp_25_fu_1445_p4);

assign select_ln340_40_fu_1489_p3 = ((xor_ln340_29_fu_1092_p2[0:0] === 1'b1) ? 10'd511 : tmp_26_fu_1479_p4);

assign select_ln340_42_fu_1523_p3 = ((xor_ln340_30_fu_1147_p2[0:0] === 1'b1) ? 10'd511 : tmp_27_fu_1513_p4);

assign select_ln340_44_fu_1557_p3 = ((xor_ln340_31_fu_1202_p2[0:0] === 1'b1) ? 10'd511 : tmp_28_fu_1547_p4);

assign select_ln340_46_fu_1591_p3 = ((xor_ln340_32_fu_1257_p2[0:0] === 1'b1) ? 10'd511 : tmp_29_fu_1581_p4);

assign select_ln340_48_fu_1760_p3 = ((xor_ln340_33_fu_1742_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_41_fu_1717_p2);

assign select_ln340_50_fu_1892_p3 = ((xor_ln340_35_fu_1864_p2[0:0] === 1'b1) ? 10'd511 : tmp_30_fu_1882_p4);

assign select_ln340_fu_1285_p3 = ((xor_ln340_23_fu_762_p2[0:0] === 1'b1) ? 10'd511 : tmp_fu_1275_p4);

assign select_ln388_13_fu_1327_p3 = ((and_ln786_11_fu_811_p2[0:0] === 1'b1) ? 10'd512 : tmp_21_fu_1309_p4);

assign select_ln388_14_fu_1361_p3 = ((and_ln786_12_fu_866_p2[0:0] === 1'b1) ? 10'd512 : tmp_22_fu_1343_p4);

assign select_ln388_15_fu_1395_p3 = ((and_ln786_13_fu_921_p2[0:0] === 1'b1) ? 10'd512 : tmp_23_fu_1377_p4);

assign select_ln388_16_fu_1429_p3 = ((and_ln786_14_fu_976_p2[0:0] === 1'b1) ? 10'd512 : tmp_24_fu_1411_p4);

assign select_ln388_17_fu_1463_p3 = ((and_ln786_15_fu_1031_p2[0:0] === 1'b1) ? 10'd512 : tmp_25_fu_1445_p4);

assign select_ln388_18_fu_1497_p3 = ((and_ln786_16_fu_1086_p2[0:0] === 1'b1) ? 10'd512 : tmp_26_fu_1479_p4);

assign select_ln388_19_fu_1531_p3 = ((and_ln786_17_fu_1141_p2[0:0] === 1'b1) ? 10'd512 : tmp_27_fu_1513_p4);

assign select_ln388_20_fu_1565_p3 = ((and_ln786_18_fu_1196_p2[0:0] === 1'b1) ? 10'd512 : tmp_28_fu_1547_p4);

assign select_ln388_21_fu_1599_p3 = ((and_ln786_19_fu_1251_p2[0:0] === 1'b1) ? 10'd512 : tmp_29_fu_1581_p4);

assign select_ln388_22_fu_1768_p3 = ((underflow_fu_1736_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_41_fu_1717_p2);

assign select_ln388_23_fu_1900_p3 = ((underflow_1_fu_1858_p2[0:0] === 1'b1) ? 10'd512 : tmp_30_fu_1882_p4);

assign select_ln388_fu_1293_p3 = ((and_ln786_fu_756_p2[0:0] === 1'b1) ? 10'd512 : tmp_fu_1275_p4);

assign select_ln65_10_fu_654_p3 = ((icmp_ln1496_10_fu_648_p2[0:0] === 1'b1) ? select_ln65_9_fu_643_p3 : select_ln65_fu_638_p3);

assign select_ln65_11_fu_662_p3 = ((icmp_ln1496_11_reg_2099[0:0] === 1'b1) ? data_array_5_V_reg_2057 : data_array_4_V_reg_2051);

assign select_ln65_12_fu_667_p3 = ((icmp_ln1496_12_reg_2104[0:0] === 1'b1) ? data_array_7_V_reg_2069 : data_array_6_V_reg_2063);

assign select_ln65_13_fu_678_p3 = ((icmp_ln1496_13_fu_672_p2[0:0] === 1'b1) ? select_ln65_12_fu_667_p3 : select_ln65_11_fu_662_p3);

assign select_ln65_14_fu_692_p3 = ((icmp_ln1496_14_fu_686_p2[0:0] === 1'b1) ? select_ln65_13_fu_678_p3 : select_ln65_10_fu_654_p3);

assign select_ln65_15_fu_704_p3 = ((icmp_ln1496_15_reg_2115[0:0] === 1'b1) ? data_array_9_V_reg_2082 : data_array_8_V_reg_2075);

assign select_ln65_9_fu_643_p3 = ((icmp_ln1496_9_reg_2094[0:0] === 1'b1) ? data_array_3_V_reg_2045 : data_array_2_V_reg_2039);

assign select_ln65_fu_638_p3 = ((icmp_ln1496_reg_2089[0:0] === 1'b1) ? data_array_1_V_reg_2033 : data_array_0_V_reg_2027);

assign sext_ln241_fu_1921_p1 = $signed(inv_exp_sum_V_reg_2306);

assign sext_ln703_13_fu_724_p1 = $signed(x_max_V_fu_714_p3);

assign sext_ln703_14_fu_780_p1 = data_array_1_V_reg_2033;

assign sext_ln703_15_fu_835_p1 = data_array_2_V_reg_2039;

assign sext_ln703_16_fu_890_p1 = data_array_3_V_reg_2045;

assign sext_ln703_17_fu_945_p1 = data_array_4_V_reg_2051;

assign sext_ln703_18_fu_1000_p1 = data_array_5_V_reg_2057;

assign sext_ln703_19_fu_1055_p1 = data_array_6_V_reg_2063;

assign sext_ln703_20_fu_1110_p1 = data_array_7_V_reg_2069;

assign sext_ln703_21_fu_1165_p1 = data_array_8_V_reg_2075;

assign sext_ln703_22_fu_1220_p1 = data_array_9_V_reg_2082;

assign sext_ln703_fu_721_p1 = data_array_0_V_reg_2027;

assign sub_ln1193_11_fu_783_p2 = ($signed(sext_ln703_14_fu_780_p1) - $signed(sext_ln703_13_fu_724_p1));

assign sub_ln1193_12_fu_838_p2 = ($signed(sext_ln703_15_fu_835_p1) - $signed(sext_ln703_13_fu_724_p1));

assign sub_ln1193_13_fu_893_p2 = ($signed(sext_ln703_16_fu_890_p1) - $signed(sext_ln703_13_fu_724_p1));

assign sub_ln1193_14_fu_948_p2 = ($signed(sext_ln703_17_fu_945_p1) - $signed(sext_ln703_13_fu_724_p1));

assign sub_ln1193_15_fu_1003_p2 = ($signed(sext_ln703_18_fu_1000_p1) - $signed(sext_ln703_13_fu_724_p1));

assign sub_ln1193_16_fu_1058_p2 = ($signed(sext_ln703_19_fu_1055_p1) - $signed(sext_ln703_13_fu_724_p1));

assign sub_ln1193_17_fu_1113_p2 = ($signed(sext_ln703_20_fu_1110_p1) - $signed(sext_ln703_13_fu_724_p1));

assign sub_ln1193_18_fu_1168_p2 = ($signed(sext_ln703_21_fu_1165_p1) - $signed(sext_ln703_13_fu_724_p1));

assign sub_ln1193_19_fu_1223_p2 = ($signed(sext_ln703_22_fu_1220_p1) - $signed(sext_ln703_13_fu_724_p1));

assign sub_ln1193_fu_728_p2 = ($signed(sext_ln703_fu_721_p1) - $signed(sext_ln703_13_fu_724_p1));

assign tmp_21_fu_1309_p4 = {{sub_ln1193_11_fu_783_p2[15:6]}};

assign tmp_22_fu_1343_p4 = {{sub_ln1193_12_fu_838_p2[15:6]}};

assign tmp_23_fu_1377_p4 = {{sub_ln1193_13_fu_893_p2[15:6]}};

assign tmp_24_fu_1411_p4 = {{sub_ln1193_14_fu_948_p2[15:6]}};

assign tmp_25_fu_1445_p4 = {{sub_ln1193_15_fu_1003_p2[15:6]}};

assign tmp_26_fu_1479_p4 = {{sub_ln1193_16_fu_1058_p2[15:6]}};

assign tmp_27_fu_1513_p4 = {{sub_ln1193_17_fu_1113_p2[15:6]}};

assign tmp_28_fu_1547_p4 = {{sub_ln1193_18_fu_1168_p2[15:6]}};

assign tmp_29_fu_1581_p4 = {{sub_ln1193_19_fu_1223_p2[15:6]}};

assign tmp_30_fu_1882_p4 = {{p_Val2_48_fu_1839_p2[17:8]}};

assign tmp_47_fu_734_p3 = sub_ln1193_fu_728_p2[32'd16];

assign tmp_48_fu_742_p3 = sub_ln1193_fu_728_p2[32'd15];

assign tmp_49_fu_789_p3 = sub_ln1193_11_fu_783_p2[32'd16];

assign tmp_50_fu_797_p3 = sub_ln1193_11_fu_783_p2[32'd15];

assign tmp_51_fu_844_p3 = sub_ln1193_12_fu_838_p2[32'd16];

assign tmp_52_fu_852_p3 = sub_ln1193_12_fu_838_p2[32'd15];

assign tmp_53_fu_899_p3 = sub_ln1193_13_fu_893_p2[32'd16];

assign tmp_54_fu_907_p3 = sub_ln1193_13_fu_893_p2[32'd15];

assign tmp_55_fu_954_p3 = sub_ln1193_14_fu_948_p2[32'd16];

assign tmp_56_fu_962_p3 = sub_ln1193_14_fu_948_p2[32'd15];

assign tmp_57_fu_1009_p3 = sub_ln1193_15_fu_1003_p2[32'd16];

assign tmp_58_fu_1017_p3 = sub_ln1193_15_fu_1003_p2[32'd15];

assign tmp_59_fu_1064_p3 = sub_ln1193_16_fu_1058_p2[32'd16];

assign tmp_60_fu_1072_p3 = sub_ln1193_16_fu_1058_p2[32'd15];

assign tmp_61_fu_1119_p3 = sub_ln1193_17_fu_1113_p2[32'd16];

assign tmp_62_fu_1127_p3 = sub_ln1193_17_fu_1113_p2[32'd15];

assign tmp_63_fu_1174_p3 = sub_ln1193_18_fu_1168_p2[32'd16];

assign tmp_64_fu_1182_p3 = sub_ln1193_18_fu_1168_p2[32'd15];

assign tmp_65_fu_1229_p3 = sub_ln1193_19_fu_1223_p2[32'd16];

assign tmp_66_fu_1237_p3 = sub_ln1193_19_fu_1223_p2[32'd15];

assign tmp_fu_1275_p4 = {{sub_ln1193_fu_728_p2[15:6]}};

assign underflow_1_fu_1858_p2 = (xor_ln786_11_fu_1852_p2 & p_Result_44_fu_1831_p3);

assign underflow_fu_1736_p2 = (xor_ln786_10_fu_1730_p2 & p_Result_s_fu_1709_p3);

assign x_max_V_fu_714_p3 = ((icmp_ln1496_16_fu_709_p2[0:0] === 1'b1) ? select_ln65_15_fu_704_p3 : select_ln65_14_reg_2109);

assign xor_ln340_1_fu_823_p2 = (tmp_49_fu_789_p3 ^ 1'd1);

assign xor_ln340_23_fu_762_p2 = (tmp_48_fu_742_p3 ^ tmp_47_fu_734_p3);

assign xor_ln340_24_fu_817_p2 = (tmp_50_fu_797_p3 ^ tmp_49_fu_789_p3);

assign xor_ln340_25_fu_872_p2 = (tmp_52_fu_852_p3 ^ tmp_51_fu_844_p3);

assign xor_ln340_26_fu_927_p2 = (tmp_54_fu_907_p3 ^ tmp_53_fu_899_p3);

assign xor_ln340_27_fu_982_p2 = (tmp_56_fu_962_p3 ^ tmp_55_fu_954_p3);

assign xor_ln340_28_fu_1037_p2 = (tmp_58_fu_1017_p3 ^ tmp_57_fu_1009_p3);

assign xor_ln340_29_fu_1092_p2 = (tmp_60_fu_1072_p3 ^ tmp_59_fu_1064_p3);

assign xor_ln340_2_fu_878_p2 = (tmp_51_fu_844_p3 ^ 1'd1);

assign xor_ln340_30_fu_1147_p2 = (tmp_62_fu_1127_p3 ^ tmp_61_fu_1119_p3);

assign xor_ln340_31_fu_1202_p2 = (tmp_64_fu_1182_p3 ^ tmp_63_fu_1174_p3);

assign xor_ln340_32_fu_1257_p2 = (tmp_66_fu_1237_p3 ^ tmp_65_fu_1229_p3);

assign xor_ln340_33_fu_1742_p2 = (p_Result_s_fu_1709_p3 ^ p_Result_42_fu_1722_p3);

assign xor_ln340_34_fu_1748_p2 = (p_Result_s_fu_1709_p3 ^ 1'd1);

assign xor_ln340_35_fu_1864_p2 = (p_Result_45_fu_1844_p3 ^ p_Result_44_fu_1831_p3);

assign xor_ln340_36_fu_1870_p2 = (p_Result_44_fu_1831_p3 ^ 1'd1);

assign xor_ln340_3_fu_933_p2 = (tmp_53_fu_899_p3 ^ 1'd1);

assign xor_ln340_4_fu_988_p2 = (tmp_55_fu_954_p3 ^ 1'd1);

assign xor_ln340_5_fu_1043_p2 = (tmp_57_fu_1009_p3 ^ 1'd1);

assign xor_ln340_6_fu_1098_p2 = (tmp_59_fu_1064_p3 ^ 1'd1);

assign xor_ln340_7_fu_1153_p2 = (tmp_61_fu_1119_p3 ^ 1'd1);

assign xor_ln340_8_fu_1208_p2 = (tmp_63_fu_1174_p3 ^ 1'd1);

assign xor_ln340_9_fu_1263_p2 = (tmp_65_fu_1229_p3 ^ 1'd1);

assign xor_ln340_fu_768_p2 = (tmp_47_fu_734_p3 ^ 1'd1);

assign xor_ln786_10_fu_1730_p2 = (p_Result_42_fu_1722_p3 ^ 1'd1);

assign xor_ln786_11_fu_1852_p2 = (p_Result_45_fu_1844_p3 ^ 1'd1);

assign xor_ln786_1_fu_805_p2 = (tmp_50_fu_797_p3 ^ 1'd1);

assign xor_ln786_2_fu_860_p2 = (tmp_52_fu_852_p3 ^ 1'd1);

assign xor_ln786_3_fu_915_p2 = (tmp_54_fu_907_p3 ^ 1'd1);

assign xor_ln786_4_fu_970_p2 = (tmp_56_fu_962_p3 ^ 1'd1);

assign xor_ln786_5_fu_1025_p2 = (tmp_58_fu_1017_p3 ^ 1'd1);

assign xor_ln786_6_fu_1080_p2 = (tmp_60_fu_1072_p3 ^ 1'd1);

assign xor_ln786_7_fu_1135_p2 = (tmp_62_fu_1127_p3 ^ 1'd1);

assign xor_ln786_8_fu_1190_p2 = (tmp_64_fu_1182_p3 ^ 1'd1);

assign xor_ln786_9_fu_1245_p2 = (tmp_66_fu_1237_p3 ^ 1'd1);

assign xor_ln786_fu_750_p2 = (tmp_48_fu_742_p3 ^ 1'd1);

assign y_V_13_fu_1335_p3 = ((or_ln340_13_fu_829_p2[0:0] === 1'b1) ? select_ln340_30_fu_1319_p3 : select_ln388_13_fu_1327_p3);

assign y_V_14_fu_1369_p3 = ((or_ln340_14_fu_884_p2[0:0] === 1'b1) ? select_ln340_32_fu_1353_p3 : select_ln388_14_fu_1361_p3);

assign y_V_15_fu_1403_p3 = ((or_ln340_15_fu_939_p2[0:0] === 1'b1) ? select_ln340_34_fu_1387_p3 : select_ln388_15_fu_1395_p3);

assign y_V_16_fu_1437_p3 = ((or_ln340_16_fu_994_p2[0:0] === 1'b1) ? select_ln340_36_fu_1421_p3 : select_ln388_16_fu_1429_p3);

assign y_V_17_fu_1471_p3 = ((or_ln340_17_fu_1049_p2[0:0] === 1'b1) ? select_ln340_38_fu_1455_p3 : select_ln388_17_fu_1463_p3);

assign y_V_18_fu_1505_p3 = ((or_ln340_18_fu_1104_p2[0:0] === 1'b1) ? select_ln340_40_fu_1489_p3 : select_ln388_18_fu_1497_p3);

assign y_V_19_fu_1539_p3 = ((or_ln340_19_fu_1159_p2[0:0] === 1'b1) ? select_ln340_42_fu_1523_p3 : select_ln388_19_fu_1531_p3);

assign y_V_20_fu_1573_p3 = ((or_ln340_20_fu_1214_p2[0:0] === 1'b1) ? select_ln340_44_fu_1557_p3 : select_ln388_20_fu_1565_p3);

assign y_V_21_fu_1607_p3 = ((or_ln340_21_fu_1269_p2[0:0] === 1'b1) ? select_ln340_46_fu_1591_p3 : select_ln388_21_fu_1599_p3);

assign y_V_22_fu_1908_p3 = ((or_ln340_23_fu_1876_p2[0:0] === 1'b1) ? select_ln340_50_fu_1892_p3 : select_ln388_23_fu_1900_p3);

assign y_V_fu_1301_p3 = ((or_ln340_fu_774_p2[0:0] === 1'b1) ? select_ln340_fu_1285_p3 : select_ln388_fu_1293_p3);

assign zext_ln1118_11_fu_1931_p1 = exp_res_1_V_2_reg_2191_pp0_iter3_reg;

assign zext_ln1118_12_fu_1935_p1 = exp_res_2_V_2_reg_2197_pp0_iter3_reg;

assign zext_ln1118_13_fu_1939_p1 = exp_res_3_V_2_reg_2218_pp0_iter3_reg;

assign zext_ln1118_14_fu_1943_p1 = exp_res_4_V_2_reg_2224_pp0_iter3_reg;

assign zext_ln1118_15_fu_1947_p1 = exp_res_5_V_2_reg_2230_pp0_iter3_reg;

assign zext_ln1118_16_fu_1951_p1 = exp_res_6_V_2_reg_2251_pp0_iter3_reg;

assign zext_ln1118_17_fu_1955_p1 = exp_res_7_V_2_reg_2257_pp0_iter3_reg;

assign zext_ln1118_18_fu_1959_p1 = exp_res_8_V_1_reg_2263_pp0_iter3_reg;

assign zext_ln1118_19_fu_1963_p1 = exp_res_9_V_1_reg_2276_pp0_iter3_reg;

assign zext_ln1118_fu_1927_p1 = exp_res_0_V_2_reg_2185_pp0_iter3_reg;

assign zext_ln225_1_fu_1619_p1 = y_V_13_reg_2125;

assign zext_ln225_2_fu_1623_p1 = y_V_14_reg_2130;

assign zext_ln225_3_fu_1627_p1 = y_V_15_reg_2135;

assign zext_ln225_4_fu_1631_p1 = y_V_16_reg_2140;

assign zext_ln225_5_fu_1635_p1 = y_V_17_reg_2145;

assign zext_ln225_6_fu_1639_p1 = y_V_18_reg_2150;

assign zext_ln225_7_fu_1643_p1 = y_V_19_reg_2155;

assign zext_ln225_8_fu_1647_p1 = y_V_20_reg_2160;

assign zext_ln225_9_fu_1651_p1 = y_V_21_reg_2165;

assign zext_ln225_fu_1615_p1 = y_V_reg_2120;

assign zext_ln235_fu_1916_p1 = y_V_22_fu_1908_p3;

assign zext_ln746_fu_1816_p1 = p_Val2_46_reg_2295;

endmodule //softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config10_s
