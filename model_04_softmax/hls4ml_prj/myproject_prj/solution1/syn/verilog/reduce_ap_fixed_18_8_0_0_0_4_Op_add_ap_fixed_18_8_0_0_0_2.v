// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_0_V,
        x_1_V,
        x_2_V,
        x_3_V,
        x_4_V,
        x_5_V,
        x_6_V,
        x_7_V,
        x_V_offset,
        ap_return,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [16:0] x_0_V;
input  [16:0] x_1_V;
input  [16:0] x_2_V;
input  [16:0] x_3_V;
input  [16:0] x_4_V;
input  [16:0] x_5_V;
input  [16:0] x_6_V;
input  [16:0] x_7_V;
input  [4:0] x_V_offset;
output  [17:0] ap_return;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [17:0] p_Val2_56_fu_266_p3;
reg  signed [17:0] p_Val2_56_reg_506;
wire  signed [17:0] p_Val2_57_fu_412_p3;
reg  signed [17:0] p_Val2_57_reg_512;
wire   [17:0] zext_ln43_fu_102_p1;
wire   [17:0] zext_ln43_4_fu_106_p1;
wire   [17:0] zext_ln43_5_fu_110_p1;
wire   [17:0] zext_ln43_6_fu_114_p1;
wire   [17:0] zext_ln43_7_fu_118_p1;
wire   [17:0] zext_ln43_8_fu_122_p1;
wire   [17:0] zext_ln43_9_fu_126_p1;
wire   [17:0] zext_ln43_10_fu_130_p1;
wire   [2:0] empty_fu_98_p1;
wire   [2:0] p_Val2_50_fu_162_p9;
wire  signed [17:0] p_Val2_s_fu_134_p10;
wire  signed [17:0] p_Val2_50_fu_162_p10;
wire  signed [18:0] rhs_V_2_fu_188_p1;
wire  signed [18:0] lhs_V_2_fu_184_p1;
wire   [18:0] ret_V_fu_192_p2;
wire   [17:0] p_Val2_52_fu_206_p2;
wire   [0:0] p_Result_46_fu_212_p3;
wire   [0:0] p_Result_s_fu_198_p3;
wire   [0:0] xor_ln786_12_fu_220_p2;
wire   [0:0] xor_ln340_38_fu_238_p2;
wire   [0:0] xor_ln340_37_fu_232_p2;
wire   [0:0] underflow_fu_226_p2;
wire   [0:0] or_ln340_24_fu_244_p2;
wire   [17:0] select_ln340_52_fu_250_p3;
wire   [17:0] select_ln388_24_fu_258_p3;
wire   [2:0] p_Val2_53_fu_280_p9;
wire   [2:0] p_Val2_2_fu_308_p9;
wire  signed [17:0] p_Val2_53_fu_280_p10;
wire  signed [17:0] p_Val2_2_fu_308_p10;
wire  signed [18:0] rhs_V_3_fu_334_p1;
wire  signed [18:0] lhs_V_3_fu_330_p1;
wire   [18:0] ret_V_2_fu_338_p2;
wire   [17:0] p_Val2_55_fu_352_p2;
wire   [0:0] p_Result_48_fu_358_p3;
wire   [0:0] p_Result_47_fu_344_p3;
wire   [0:0] xor_ln786_13_fu_366_p2;
wire   [0:0] xor_ln340_40_fu_384_p2;
wire   [0:0] xor_ln340_39_fu_378_p2;
wire   [0:0] underflow_2_fu_372_p2;
wire   [0:0] or_ln340_25_fu_390_p2;
wire   [17:0] select_ln340_54_fu_396_p3;
wire   [17:0] select_ln388_25_fu_404_p3;
wire    ap_CS_fsm_state2;
wire  signed [18:0] lhs_V_fu_420_p1;
wire  signed [18:0] rhs_V_fu_423_p1;
wire   [18:0] ret_V_3_fu_426_p2;
wire   [17:0] p_Val2_59_fu_440_p2;
wire   [0:0] p_Result_50_fu_444_p3;
wire   [0:0] p_Result_49_fu_432_p3;
wire   [0:0] xor_ln786_fu_452_p2;
wire   [0:0] xor_ln340_fu_470_p2;
wire   [0:0] xor_ln340_41_fu_464_p2;
wire   [0:0] underflow_3_fu_458_p2;
wire   [0:0] or_ln340_fu_476_p2;
wire   [17:0] select_ln340_fu_482_p3;
wire   [17:0] select_ln388_fu_490_p3;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

myproject_mux_83_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 18 ),
    .din3_WIDTH( 18 ),
    .din4_WIDTH( 18 ),
    .din5_WIDTH( 18 ),
    .din6_WIDTH( 18 ),
    .din7_WIDTH( 18 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 18 ))
myproject_mux_83_18_1_1_U172(
    .din0(zext_ln43_fu_102_p1),
    .din1(zext_ln43_4_fu_106_p1),
    .din2(zext_ln43_5_fu_110_p1),
    .din3(zext_ln43_6_fu_114_p1),
    .din4(zext_ln43_7_fu_118_p1),
    .din5(zext_ln43_8_fu_122_p1),
    .din6(zext_ln43_9_fu_126_p1),
    .din7(zext_ln43_10_fu_130_p1),
    .din8(empty_fu_98_p1),
    .dout(p_Val2_s_fu_134_p10)
);

myproject_mux_83_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 18 ),
    .din3_WIDTH( 18 ),
    .din4_WIDTH( 18 ),
    .din5_WIDTH( 18 ),
    .din6_WIDTH( 18 ),
    .din7_WIDTH( 18 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 18 ))
myproject_mux_83_18_1_1_U173(
    .din0(zext_ln43_fu_102_p1),
    .din1(zext_ln43_4_fu_106_p1),
    .din2(zext_ln43_5_fu_110_p1),
    .din3(zext_ln43_6_fu_114_p1),
    .din4(zext_ln43_7_fu_118_p1),
    .din5(zext_ln43_8_fu_122_p1),
    .din6(zext_ln43_9_fu_126_p1),
    .din7(zext_ln43_10_fu_130_p1),
    .din8(p_Val2_50_fu_162_p9),
    .dout(p_Val2_50_fu_162_p10)
);

myproject_mux_83_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 18 ),
    .din3_WIDTH( 18 ),
    .din4_WIDTH( 18 ),
    .din5_WIDTH( 18 ),
    .din6_WIDTH( 18 ),
    .din7_WIDTH( 18 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 18 ))
myproject_mux_83_18_1_1_U174(
    .din0(zext_ln43_fu_102_p1),
    .din1(zext_ln43_4_fu_106_p1),
    .din2(zext_ln43_5_fu_110_p1),
    .din3(zext_ln43_6_fu_114_p1),
    .din4(zext_ln43_7_fu_118_p1),
    .din5(zext_ln43_8_fu_122_p1),
    .din6(zext_ln43_9_fu_126_p1),
    .din7(zext_ln43_10_fu_130_p1),
    .din8(p_Val2_53_fu_280_p9),
    .dout(p_Val2_53_fu_280_p10)
);

myproject_mux_83_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 18 ),
    .din3_WIDTH( 18 ),
    .din4_WIDTH( 18 ),
    .din5_WIDTH( 18 ),
    .din6_WIDTH( 18 ),
    .din7_WIDTH( 18 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 18 ))
myproject_mux_83_18_1_1_U175(
    .din0(zext_ln43_fu_102_p1),
    .din1(zext_ln43_4_fu_106_p1),
    .din2(zext_ln43_5_fu_110_p1),
    .din3(zext_ln43_6_fu_114_p1),
    .din4(zext_ln43_7_fu_118_p1),
    .din5(zext_ln43_8_fu_122_p1),
    .din6(zext_ln43_9_fu_126_p1),
    .din7(zext_ln43_10_fu_130_p1),
    .din8(p_Val2_2_fu_308_p9),
    .dout(p_Val2_2_fu_308_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_56_reg_506 <= p_Val2_56_fu_266_p3;
        p_Val2_57_reg_512 <= p_Val2_57_fu_412_p3;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return = ((or_ln340_fu_476_p2[0:0] === 1'b1) ? select_ln340_fu_482_p3 : select_ln388_fu_490_p3);

assign empty_fu_98_p1 = x_V_offset[2:0];

assign lhs_V_2_fu_184_p1 = p_Val2_s_fu_134_p10;

assign lhs_V_3_fu_330_p1 = p_Val2_53_fu_280_p10;

assign lhs_V_fu_420_p1 = p_Val2_56_reg_506;

assign or_ln340_24_fu_244_p2 = (xor_ln340_38_fu_238_p2 | p_Result_46_fu_212_p3);

assign or_ln340_25_fu_390_p2 = (xor_ln340_40_fu_384_p2 | p_Result_48_fu_358_p3);

assign or_ln340_fu_476_p2 = (xor_ln340_fu_470_p2 | p_Result_50_fu_444_p3);

assign p_Result_46_fu_212_p3 = p_Val2_52_fu_206_p2[32'd17];

assign p_Result_47_fu_344_p3 = ret_V_2_fu_338_p2[32'd18];

assign p_Result_48_fu_358_p3 = p_Val2_55_fu_352_p2[32'd17];

assign p_Result_49_fu_432_p3 = ret_V_3_fu_426_p2[32'd18];

assign p_Result_50_fu_444_p3 = p_Val2_59_fu_440_p2[32'd17];

assign p_Result_s_fu_198_p3 = ret_V_fu_192_p2[32'd18];

assign p_Val2_2_fu_308_p9 = (3'd3 + empty_fu_98_p1);

assign p_Val2_50_fu_162_p9 = (3'd1 + empty_fu_98_p1);

assign p_Val2_52_fu_206_p2 = ($signed(p_Val2_s_fu_134_p10) + $signed(p_Val2_50_fu_162_p10));

assign p_Val2_53_fu_280_p9 = (3'd2 + empty_fu_98_p1);

assign p_Val2_55_fu_352_p2 = ($signed(p_Val2_53_fu_280_p10) + $signed(p_Val2_2_fu_308_p10));

assign p_Val2_56_fu_266_p3 = ((or_ln340_24_fu_244_p2[0:0] === 1'b1) ? select_ln340_52_fu_250_p3 : select_ln388_24_fu_258_p3);

assign p_Val2_57_fu_412_p3 = ((or_ln340_25_fu_390_p2[0:0] === 1'b1) ? select_ln340_54_fu_396_p3 : select_ln388_25_fu_404_p3);

assign p_Val2_59_fu_440_p2 = ($signed(p_Val2_57_reg_512) + $signed(p_Val2_56_reg_506));

assign ret_V_2_fu_338_p2 = ($signed(rhs_V_3_fu_334_p1) + $signed(lhs_V_3_fu_330_p1));

assign ret_V_3_fu_426_p2 = ($signed(lhs_V_fu_420_p1) + $signed(rhs_V_fu_423_p1));

assign ret_V_fu_192_p2 = ($signed(rhs_V_2_fu_188_p1) + $signed(lhs_V_2_fu_184_p1));

assign rhs_V_2_fu_188_p1 = p_Val2_50_fu_162_p10;

assign rhs_V_3_fu_334_p1 = p_Val2_2_fu_308_p10;

assign rhs_V_fu_423_p1 = p_Val2_57_reg_512;

assign select_ln340_52_fu_250_p3 = ((xor_ln340_37_fu_232_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_52_fu_206_p2);

assign select_ln340_54_fu_396_p3 = ((xor_ln340_39_fu_378_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_55_fu_352_p2);

assign select_ln340_fu_482_p3 = ((xor_ln340_41_fu_464_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_59_fu_440_p2);

assign select_ln388_24_fu_258_p3 = ((underflow_fu_226_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_52_fu_206_p2);

assign select_ln388_25_fu_404_p3 = ((underflow_2_fu_372_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_55_fu_352_p2);

assign select_ln388_fu_490_p3 = ((underflow_3_fu_458_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_59_fu_440_p2);

assign underflow_2_fu_372_p2 = (xor_ln786_13_fu_366_p2 & p_Result_47_fu_344_p3);

assign underflow_3_fu_458_p2 = (xor_ln786_fu_452_p2 & p_Result_49_fu_432_p3);

assign underflow_fu_226_p2 = (xor_ln786_12_fu_220_p2 & p_Result_s_fu_198_p3);

assign xor_ln340_37_fu_232_p2 = (p_Result_s_fu_198_p3 ^ p_Result_46_fu_212_p3);

assign xor_ln340_38_fu_238_p2 = (p_Result_s_fu_198_p3 ^ 1'd1);

assign xor_ln340_39_fu_378_p2 = (p_Result_48_fu_358_p3 ^ p_Result_47_fu_344_p3);

assign xor_ln340_40_fu_384_p2 = (p_Result_47_fu_344_p3 ^ 1'd1);

assign xor_ln340_41_fu_464_p2 = (p_Result_50_fu_444_p3 ^ p_Result_49_fu_432_p3);

assign xor_ln340_fu_470_p2 = (p_Result_49_fu_432_p3 ^ 1'd1);

assign xor_ln786_12_fu_220_p2 = (p_Result_46_fu_212_p3 ^ 1'd1);

assign xor_ln786_13_fu_366_p2 = (p_Result_48_fu_358_p3 ^ 1'd1);

assign xor_ln786_fu_452_p2 = (p_Result_50_fu_444_p3 ^ 1'd1);

assign zext_ln43_10_fu_130_p1 = x_7_V;

assign zext_ln43_4_fu_106_p1 = x_1_V;

assign zext_ln43_5_fu_110_p1 = x_2_V;

assign zext_ln43_6_fu_114_p1 = x_3_V;

assign zext_ln43_7_fu_118_p1 = x_4_V;

assign zext_ln43_8_fu_122_p1 = x_5_V;

assign zext_ln43_9_fu_126_p1 = x_6_V;

assign zext_ln43_fu_102_p1 = x_0_V;

endmodule //reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_2
