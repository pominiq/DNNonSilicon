-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2d_cl_array_ap_fixed_1u_array_ap_fixed_16_6_5_3_0_4u_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_V_TVALID : IN STD_LOGIC;
    data_V_data_V_TREADY : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC );
end;


architecture behav of conv_2d_cl_array_ap_fixed_1u_array_ap_fixed_16_6_5_3_0_4u_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv16_FE52 : STD_LOGIC_VECTOR (15 downto 0) := "1111111001010010";
    constant ap_const_lv16_FFF1 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111110001";
    constant ap_const_lv16_FF67 : STD_LOGIC_VECTOR (15 downto 0) := "1111111101100111";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv10_30F : STD_LOGIC_VECTOR (9 downto 0) := "1100001111";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal kernel_data_V_1143 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2144 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sX_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pX_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_3145 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal w2_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal w2_V_ce0 : STD_LOGIC;
    signal w2_V_q0 : STD_LOGIC_VECTOR (59 downto 0);
    signal line_buffer_Array_V_0_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_0_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_0_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_1142_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1142_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1142_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_data_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal and_ln289_4_reg_1041 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal w_index40_reg_272 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_data_0_V_738_reg_284 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_1_V_736_reg_295 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_734_reg_306 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_732_reg_317 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_0_V_reg_963 : STD_LOGIC_VECTOR (15 downto 0);
    signal DataOut_V_8_reg_968 : STD_LOGIC_VECTOR (15 downto 0);
    signal DataOut_V_reg_973 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_2144_load_reg_978 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_5_load_reg_983 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_8_load_reg_988 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln79_fu_382_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln79_reg_993 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_iw_fu_394_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sX_3_load_reg_1009 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln289_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln289_reg_1014 : STD_LOGIC_VECTOR (0 downto 0);
    signal sY_3_load_reg_1019 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln289_4_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln289_4_reg_1024 : STD_LOGIC_VECTOR (0 downto 0);
    signal pY_3_load_reg_1029 : STD_LOGIC_VECTOR (31 downto 0);
    signal pX_3_load_reg_1035 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln289_4_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal w_index_fu_559_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_index_reg_1050 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln43_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_1055 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_1055_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_1055_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_7_fu_729_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln19_7_reg_1059 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln56_fu_737_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln56_reg_1064 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_82_reg_1069 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_83_reg_1074 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_84_reg_1079 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln3_reg_1084 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_s_reg_1089 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_69_reg_1094 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_70_reg_1099 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_0_V_fu_822_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_0_V_reg_1104 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal acc_1_V_fu_827_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_1_V_reg_1110 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_2_V_fu_832_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_2_V_reg_1116 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_3_V_fu_837_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_3_V_reg_1122 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal indvar_flatten41_reg_249 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal io_acc_block_signal_op151 : STD_LOGIC;
    signal ap_block_state9 : BOOLEAN;
    signal icmp_ln79_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_iw_0_i_i_i_i_reg_261 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln194_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_w_index40_phi_fu_276_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal select_ln323_fu_909_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_storemerge_i_i_phi_fu_331_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln313_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln317_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln56_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln203_fu_404_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln201_fu_400_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln203_12_fu_423_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln203_13_fu_442_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln328_fu_863_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln321_fu_893_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln326_fu_847_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_500_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_520_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln289_5_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln289_6_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln289_3_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln289_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_7_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_6_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_5_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_4_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_3_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_2_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_1_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_fu_631_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln19_1_fu_645_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln19_1_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_2_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_2_fu_659_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln19_3_fu_673_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln19_3_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_4_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_4_fu_687_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln19_5_fu_701_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln19_5_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_6_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_6_fu_715_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_fu_935_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_71_fu_942_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_72_fu_949_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_73_fu_956_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln328_fu_858_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln323_fu_904_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_fu_935_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1116_cast_fu_771_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_71_fu_942_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_72_fu_949_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_73_fu_956_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal regslice_both_data_V_data_V_U_apdone_blk : STD_LOGIC;
    signal data_V_data_V_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_data_V_TVALID_int : STD_LOGIC;
    signal data_V_data_V_TREADY_int : STD_LOGIC;
    signal regslice_both_data_V_data_V_U_ack_in : STD_LOGIC;
    signal ap_condition_250 : BOOLEAN;
    signal ap_condition_326 : BOOLEAN;

    component myproject_mul_mul_16s_16s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_mul_mul_12s_16s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component conv_2d_cl_array_ap_fixed_1u_array_ap_fixed_16_6_5_3_0_4u_config2_s_w2_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;


    component conv_2d_cl_array_ap_fixed_1u_array_ap_fixed_16_6_5_3_0_4u_config2_s_line_buffbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    w2_V_U : component conv_2d_cl_array_ap_fixed_1u_array_ap_fixed_16_6_5_3_0_4u_config2_s_w2_V
    generic map (
        DataWidth => 60,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w2_V_address0,
        ce0 => w2_V_ce0,
        q0 => w2_V_q0);

    line_buffer_Array_V_0_0_U : component conv_2d_cl_array_ap_fixed_1u_array_ap_fixed_16_6_5_3_0_4u_config2_s_line_buffbkb
    generic map (
        DataWidth => 16,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1B,
        ce0 => line_buffer_Array_V_0_0_ce0,
        we0 => line_buffer_Array_V_0_0_we0,
        d0 => data_V_data_V_TDATA_int,
        q0 => line_buffer_Array_V_0_0_q0);

    line_buffer_Array_V_1142_0_U : component conv_2d_cl_array_ap_fixed_1u_array_ap_fixed_16_6_5_3_0_4u_config2_s_line_buffbkb
    generic map (
        DataWidth => 16,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1B,
        ce0 => line_buffer_Array_V_1142_0_ce0,
        we0 => line_buffer_Array_V_1142_0_we0,
        d0 => line_buffer_Array_V_0_0_q0,
        q0 => line_buffer_Array_V_1142_0_q0);

    myproject_mul_mul_16s_16s_26_1_1_U1 : component myproject_mul_mul_16s_16s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_fu_935_p0,
        din1 => trunc_ln56_reg_1064,
        dout => mul_ln1118_fu_935_p2);

    myproject_mul_mul_16s_16s_26_1_1_U2 : component myproject_mul_mul_16s_16s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_71_fu_942_p0,
        din1 => tmp_82_reg_1069,
        dout => mul_ln1118_71_fu_942_p2);

    myproject_mul_mul_16s_16s_26_1_1_U3 : component myproject_mul_mul_16s_16s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_72_fu_949_p0,
        din1 => tmp_83_reg_1074,
        dout => mul_ln1118_72_fu_949_p2);

    myproject_mul_mul_12s_16s_26_1_1_U4 : component myproject_mul_mul_12s_16s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        dout_WIDTH => 26)
    port map (
        din0 => tmp_84_reg_1079,
        din1 => mul_ln1118_73_fu_956_p1,
        dout => mul_ln1118_73_fu_956_p2);

    regslice_both_data_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => data_V_data_V_TDATA,
        vld_in => data_V_data_V_TVALID,
        ack_in => regslice_both_data_V_data_V_U_ack_in,
        data_out => data_V_data_V_TDATA_int,
        vld_out => data_V_data_V_TVALID_int,
        ack_out => data_V_data_V_TREADY_int,
        apdone_blk => regslice_both_data_V_data_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((io_acc_block_signal_op151 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1041))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln79_fu_929_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln43_fu_565_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_4_fu_548_p2))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_4_fu_548_p2))) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_iw_0_i_i_i_i_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln194_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_iw_0_i_i_i_i_reg_261 <= i_iw_fu_394_p2;
            elsif (((data_V_data_V_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_iw_0_i_i_i_i_reg_261 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten41_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((io_acc_block_signal_op151 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1041))) and (icmp_ln79_fu_929_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                indvar_flatten41_reg_249 <= add_ln79_reg_993;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten41_reg_249 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    pX_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_250)) then
                if ((icmp_ln313_fu_842_p2 = ap_const_lv1_1)) then 
                    pX_3 <= ap_const_lv32_0;
                elsif ((icmp_ln313_fu_842_p2 = ap_const_lv1_0)) then 
                    pX_3 <= add_ln326_fu_847_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_326)) then
                if ((icmp_ln317_fu_888_p2 = ap_const_lv1_1)) then 
                    pY_3 <= ap_const_lv32_0;
                elsif ((icmp_ln317_fu_888_p2 = ap_const_lv1_0)) then 
                    pY_3 <= add_ln321_fu_893_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_250)) then
                if ((icmp_ln313_fu_842_p2 = ap_const_lv1_1)) then 
                    sX_3 <= ap_const_lv32_0;
                elsif ((icmp_ln313_fu_842_p2 = ap_const_lv1_0)) then 
                    sX_3 <= select_ln328_fu_863_p3;
                end if;
            end if; 
        end if;
    end process;

    tmp_data_0_V_738_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln43_reg_1055_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                tmp_data_0_V_738_reg_284 <= acc_0_V_fu_822_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_4_fu_548_p2))) then 
                tmp_data_0_V_738_reg_284 <= ap_const_lv16_2;
            end if; 
        end if;
    end process;

    tmp_data_1_V_736_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln43_reg_1055_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                tmp_data_1_V_736_reg_295 <= acc_1_V_fu_827_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_4_fu_548_p2))) then 
                tmp_data_1_V_736_reg_295 <= ap_const_lv16_FE52;
            end if; 
        end if;
    end process;

    tmp_data_2_V_734_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln43_reg_1055_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                tmp_data_2_V_734_reg_306 <= acc_2_V_fu_832_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_4_fu_548_p2))) then 
                tmp_data_2_V_734_reg_306 <= ap_const_lv16_FFF1;
            end if; 
        end if;
    end process;

    tmp_data_3_V_732_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln43_reg_1055_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                tmp_data_3_V_732_reg_317 <= acc_3_V_fu_837_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_4_fu_548_p2))) then 
                tmp_data_3_V_732_reg_317 <= ap_const_lv16_FF67;
            end if; 
        end if;
    end process;

    w_index40_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln43_reg_1055 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                w_index40_reg_272 <= w_index_reg_1050;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_4_fu_548_p2))) then 
                w_index40_reg_272 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_data_V_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                DataOut_V_8_reg_968 <= line_buffer_Array_V_0_0_q0;
                DataOut_V_reg_973 <= line_buffer_Array_V_1142_0_q0;
                add_ln79_reg_993 <= add_ln79_fu_382_p2;
                kernel_data_V_2144_load_reg_978 <= kernel_data_V_2144;
                kernel_data_V_5_load_reg_983 <= kernel_data_V_5;
                kernel_data_V_8_load_reg_988 <= kernel_data_V_8;
                tmp_data_0_V_reg_963 <= data_V_data_V_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                acc_0_V_reg_1104 <= acc_0_V_fu_822_p2;
                acc_1_V_reg_1110 <= acc_1_V_fu_827_p2;
                acc_2_V_reg_1116 <= acc_2_V_fu_832_p2;
                acc_3_V_reg_1122 <= acc_3_V_fu_837_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                and_ln289_4_reg_1041 <= and_ln289_4_fu_548_p2;
                icmp_ln289_4_reg_1024 <= icmp_ln289_4_fu_490_p2;
                icmp_ln289_reg_1014 <= icmp_ln289_fu_480_p2;
                kernel_data_V_2144 <= DataOut_V_reg_973;
                kernel_data_V_5 <= DataOut_V_8_reg_968;
                kernel_data_V_8 <= tmp_data_0_V_reg_963;
                pX_3_load_reg_1035 <= pX_3;
                pY_3_load_reg_1029 <= pY_3;
                sX_3_load_reg_1009 <= sX_3;
                sY_3_load_reg_1019 <= sY_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln43_reg_1055 <= icmp_ln43_fu_565_p2;
                icmp_ln43_reg_1055_pp1_iter1_reg <= icmp_ln43_reg_1055;
                select_ln19_7_reg_1059 <= select_ln19_7_fu_729_p3;
                tmp_82_reg_1069 <= w2_V_q0(31 downto 16);
                tmp_83_reg_1074 <= w2_V_q0(47 downto 32);
                tmp_84_reg_1079 <= w2_V_q0(59 downto 48);
                trunc_ln56_reg_1064 <= trunc_ln56_fu_737_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln43_reg_1055_pp1_iter2_reg <= icmp_ln43_reg_1055_pp1_iter1_reg;
                trunc_ln3_reg_1084 <= mul_ln1118_fu_935_p2(25 downto 10);
                trunc_ln708_69_reg_1094 <= mul_ln1118_72_fu_949_p2(25 downto 10);
                trunc_ln708_70_reg_1099 <= mul_ln1118_73_fu_956_p2(25 downto 10);
                trunc_ln708_s_reg_1089 <= mul_ln1118_71_fu_942_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln201_fu_400_p1 = ap_const_lv1_0) and (icmp_ln194_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_data_V_0 <= select_ln203_fu_404_p3;
                kernel_data_V_3145 <= select_ln203_12_fu_423_p3;
                kernel_data_V_6 <= select_ln203_13_fu_442_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln194_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (trunc_ln201_fu_400_p1 = ap_const_lv1_1))) then
                kernel_data_V_1143 <= select_ln203_fu_404_p3;
                kernel_data_V_4 <= select_ln203_12_fu_423_p3;
                kernel_data_V_7 <= select_ln203_13_fu_442_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((io_acc_block_signal_op151 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1041))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln313_fu_842_p2 = ap_const_lv1_1))) then
                sY_3 <= ap_phi_mux_storemerge_i_i_phi_fu_331_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                w_index_reg_1050 <= w_index_fu_559_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, and_ln289_4_reg_1041, ap_CS_fsm_state3, ap_CS_fsm_state4, and_ln289_4_fu_548_p2, ap_enable_reg_pp1_iter3, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, io_acc_block_signal_op151, icmp_ln79_fu_929_p2, icmp_ln194_fu_388_p2, data_V_data_V_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((data_V_data_V_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln194_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_4_fu_548_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((io_acc_block_signal_op151 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1041))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln79_fu_929_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((io_acc_block_signal_op151 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1041))) and (icmp_ln79_fu_929_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    acc_0_V_fu_822_p2 <= std_logic_vector(unsigned(tmp_data_0_V_738_reg_284) + unsigned(trunc_ln3_reg_1084));
    acc_1_V_fu_827_p2 <= std_logic_vector(unsigned(tmp_data_1_V_736_reg_295) + unsigned(trunc_ln708_s_reg_1089));
    acc_2_V_fu_832_p2 <= std_logic_vector(unsigned(tmp_data_2_V_734_reg_306) + unsigned(trunc_ln708_69_reg_1094));
    acc_3_V_fu_837_p2 <= std_logic_vector(unsigned(tmp_data_3_V_732_reg_317) + unsigned(trunc_ln708_70_reg_1099));
    add_ln321_fu_893_p2 <= std_logic_vector(unsigned(pY_3_load_reg_1029) + unsigned(ap_const_lv32_1));
    add_ln323_fu_904_p2 <= std_logic_vector(unsigned(sY_3_load_reg_1019) + unsigned(ap_const_lv32_1));
    add_ln326_fu_847_p2 <= std_logic_vector(unsigned(pX_3_load_reg_1035) + unsigned(ap_const_lv32_1));
    add_ln328_fu_858_p2 <= std_logic_vector(unsigned(sX_3_load_reg_1009) + unsigned(ap_const_lv32_1));
    add_ln79_fu_382_p2 <= std_logic_vector(unsigned(indvar_flatten41_reg_249) + unsigned(ap_const_lv10_1));
    and_ln289_3_fu_542_p2 <= (icmp_ln289_6_fu_530_p2 and icmp_ln289_5_fu_510_p2);
    and_ln289_4_fu_548_p2 <= (and_ln289_fu_536_p2 and and_ln289_3_fu_542_p2);
    and_ln289_fu_536_p2 <= (icmp_ln289_fu_480_p2 and icmp_ln289_4_fu_490_p2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_assign_proc : process(and_ln289_4_reg_1041, io_acc_block_signal_op151)
    begin
                ap_block_state9 <= ((io_acc_block_signal_op151 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1041));
    end process;


    ap_condition_250_assign_proc : process(ap_CS_fsm_state9, and_ln289_4_reg_1041, io_acc_block_signal_op151)
    begin
                ap_condition_250 <= (not(((io_acc_block_signal_op151 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1041))) and (ap_const_logic_1 = ap_CS_fsm_state9));
    end process;


    ap_condition_326_assign_proc : process(ap_CS_fsm_state9, and_ln289_4_reg_1041, io_acc_block_signal_op151, icmp_ln313_fu_842_p2)
    begin
                ap_condition_326 <= (not(((io_acc_block_signal_op151 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1041))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln313_fu_842_p2 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state9, and_ln289_4_reg_1041, io_acc_block_signal_op151, icmp_ln79_fu_929_p2)
    begin
        if ((not(((io_acc_block_signal_op151 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1041))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln79_fu_929_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_storemerge_i_i_phi_fu_331_p4_assign_proc : process(ap_CS_fsm_state9, select_ln323_fu_909_p3, icmp_ln313_fu_842_p2, icmp_ln317_fu_888_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln313_fu_842_p2 = ap_const_lv1_1))) then
            if ((icmp_ln317_fu_888_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge_i_i_phi_fu_331_p4 <= ap_const_lv32_0;
            elsif ((icmp_ln317_fu_888_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge_i_i_phi_fu_331_p4 <= select_ln323_fu_909_p3;
            else 
                ap_phi_mux_storemerge_i_i_phi_fu_331_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_storemerge_i_i_phi_fu_331_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_w_index40_phi_fu_276_p4_assign_proc : process(w_index40_reg_272, ap_CS_fsm_pp1_stage0, w_index_reg_1050, icmp_ln43_reg_1055, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln43_reg_1055 = ap_const_lv1_0))) then 
            ap_phi_mux_w_index40_phi_fu_276_p4 <= w_index_reg_1050;
        else 
            ap_phi_mux_w_index40_phi_fu_276_p4 <= w_index40_reg_272;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_V_data_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, data_V_data_V_TVALID_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_V_data_V_TDATA_blk_n <= data_V_data_V_TVALID_int;
        else 
            data_V_data_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_V_TREADY_assign_proc : process(data_V_data_V_TVALID, regslice_both_data_V_data_V_U_ack_in)
    begin
        if (((regslice_both_data_V_data_V_U_ack_in = ap_const_logic_1) and (data_V_data_V_TVALID = ap_const_logic_1))) then 
            data_V_data_V_TREADY <= ap_const_logic_1;
        else 
            data_V_data_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_V_TREADY_int_assign_proc : process(ap_CS_fsm_state2, data_V_data_V_TVALID_int)
    begin
        if (((data_V_data_V_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_V_data_V_TREADY_int <= ap_const_logic_1;
        else 
            data_V_data_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    i_iw_fu_394_p2 <= std_logic_vector(unsigned(i_iw_0_i_i_i_i_reg_261) + unsigned(ap_const_lv2_1));
    icmp_ln194_fu_388_p2 <= "1" when (i_iw_0_i_i_i_i_reg_261 = ap_const_lv2_2) else "0";
    icmp_ln19_1_fu_589_p2 <= "1" when (w_index40_reg_272 = ap_const_lv4_1) else "0";
    icmp_ln19_2_fu_595_p2 <= "1" when (w_index40_reg_272 = ap_const_lv4_2) else "0";
    icmp_ln19_3_fu_601_p2 <= "1" when (w_index40_reg_272 = ap_const_lv4_3) else "0";
    icmp_ln19_4_fu_607_p2 <= "1" when (w_index40_reg_272 = ap_const_lv4_4) else "0";
    icmp_ln19_5_fu_613_p2 <= "1" when (w_index40_reg_272 = ap_const_lv4_5) else "0";
    icmp_ln19_6_fu_619_p2 <= "1" when (w_index40_reg_272 = ap_const_lv4_6) else "0";
    icmp_ln19_7_fu_625_p2 <= "1" when (w_index40_reg_272 = ap_const_lv4_7) else "0";
    icmp_ln19_fu_583_p2 <= "1" when (w_index40_reg_272 = ap_const_lv4_0) else "0";
    icmp_ln289_4_fu_490_p2 <= "1" when (sY_3 = ap_const_lv32_2) else "0";
    icmp_ln289_5_fu_510_p2 <= "1" when (signed(tmp_fu_500_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln289_6_fu_530_p2 <= "1" when (signed(tmp_2_fu_520_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln289_fu_480_p2 <= "1" when (sX_3 = ap_const_lv32_2) else "0";
    icmp_ln313_fu_842_p2 <= "1" when (pX_3_load_reg_1035 = ap_const_lv32_1B) else "0";
    icmp_ln317_fu_888_p2 <= "1" when (pY_3_load_reg_1029 = ap_const_lv32_1B) else "0";
    icmp_ln43_fu_565_p2 <= "1" when (ap_phi_mux_w_index40_phi_fu_276_p4 = ap_const_lv4_8) else "0";
    icmp_ln79_fu_929_p2 <= "1" when (indvar_flatten41_reg_249 = ap_const_lv10_30F) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state9, and_ln289_4_reg_1041, io_acc_block_signal_op151, icmp_ln79_fu_929_p2)
    begin
        if ((not(((io_acc_block_signal_op151 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1041))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln79_fu_929_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op151 <= (res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);

    line_buffer_Array_V_0_0_ce0_assign_proc : process(ap_CS_fsm_state2, data_V_data_V_TVALID_int)
    begin
        if (((data_V_data_V_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            line_buffer_Array_V_0_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_0_0_we0_assign_proc : process(ap_CS_fsm_state2, data_V_data_V_TVALID_int)
    begin
        if (((data_V_data_V_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            line_buffer_Array_V_0_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1142_0_ce0_assign_proc : process(ap_CS_fsm_state2, data_V_data_V_TVALID_int)
    begin
        if (((data_V_data_V_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            line_buffer_Array_V_1142_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1142_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1142_0_we0_assign_proc : process(ap_CS_fsm_state2, data_V_data_V_TVALID_int)
    begin
        if (((data_V_data_V_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            line_buffer_Array_V_1142_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1142_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1118_71_fu_942_p0 <= sext_ln1116_cast_fu_771_p1(16 - 1 downto 0);
    mul_ln1118_72_fu_949_p0 <= sext_ln1116_cast_fu_771_p1(16 - 1 downto 0);
    mul_ln1118_73_fu_956_p1 <= sext_ln1116_cast_fu_771_p1(16 - 1 downto 0);
    mul_ln1118_fu_935_p0 <= sext_ln1116_cast_fu_771_p1(16 - 1 downto 0);
    or_ln19_1_fu_653_p2 <= (icmp_ln19_5_fu_613_p2 or icmp_ln19_4_fu_607_p2);
    or_ln19_2_fu_667_p2 <= (icmp_ln19_3_fu_601_p2 or icmp_ln19_2_fu_595_p2);
    or_ln19_3_fu_681_p2 <= (icmp_ln19_fu_583_p2 or icmp_ln19_1_fu_589_p2);
    or_ln19_4_fu_695_p2 <= (or_ln19_fu_639_p2 or or_ln19_1_fu_653_p2);
    or_ln19_5_fu_709_p2 <= (or_ln19_3_fu_681_p2 or or_ln19_2_fu_667_p2);
    or_ln19_6_fu_723_p2 <= (or_ln19_5_fu_709_p2 or or_ln19_4_fu_695_p2);
    or_ln19_fu_639_p2 <= (icmp_ln19_7_fu_625_p2 or icmp_ln19_6_fu_619_p2);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_CS_fsm_state9, and_ln289_4_reg_1041)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln289_4_reg_1041))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= acc_0_V_reg_1104;

    res_V_data_0_V_write_assign_proc : process(ap_CS_fsm_state9, and_ln289_4_reg_1041, io_acc_block_signal_op151)
    begin
        if ((not(((io_acc_block_signal_op151 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1041))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln289_4_reg_1041))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_CS_fsm_state9, and_ln289_4_reg_1041)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln289_4_reg_1041))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= acc_1_V_reg_1110;

    res_V_data_1_V_write_assign_proc : process(ap_CS_fsm_state9, and_ln289_4_reg_1041, io_acc_block_signal_op151)
    begin
        if ((not(((io_acc_block_signal_op151 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1041))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln289_4_reg_1041))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_CS_fsm_state9, and_ln289_4_reg_1041)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln289_4_reg_1041))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= acc_2_V_reg_1116;

    res_V_data_2_V_write_assign_proc : process(ap_CS_fsm_state9, and_ln289_4_reg_1041, io_acc_block_signal_op151)
    begin
        if ((not(((io_acc_block_signal_op151 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1041))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln289_4_reg_1041))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_CS_fsm_state9, and_ln289_4_reg_1041)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln289_4_reg_1041))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= acc_3_V_reg_1122;

    res_V_data_3_V_write_assign_proc : process(ap_CS_fsm_state9, and_ln289_4_reg_1041, io_acc_block_signal_op151)
    begin
        if ((not(((io_acc_block_signal_op151 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1041))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln289_4_reg_1041))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln19_1_fu_645_p3 <= 
        kernel_data_V_5 when (icmp_ln19_5_fu_613_p2(0) = '1') else 
        kernel_data_V_4;
    select_ln19_2_fu_659_p3 <= 
        kernel_data_V_3145 when (icmp_ln19_3_fu_601_p2(0) = '1') else 
        kernel_data_V_2144;
    select_ln19_3_fu_673_p3 <= 
        kernel_data_V_1143 when (icmp_ln19_1_fu_589_p2(0) = '1') else 
        kernel_data_V_0;
    select_ln19_4_fu_687_p3 <= 
        select_ln19_fu_631_p3 when (or_ln19_fu_639_p2(0) = '1') else 
        select_ln19_1_fu_645_p3;
    select_ln19_5_fu_701_p3 <= 
        select_ln19_2_fu_659_p3 when (or_ln19_2_fu_667_p2(0) = '1') else 
        select_ln19_3_fu_673_p3;
    select_ln19_6_fu_715_p3 <= 
        select_ln19_4_fu_687_p3 when (or_ln19_4_fu_695_p2(0) = '1') else 
        select_ln19_5_fu_701_p3;
    select_ln19_7_fu_729_p3 <= 
        select_ln19_6_fu_715_p3 when (or_ln19_6_fu_723_p2(0) = '1') else 
        kernel_data_V_8;
    select_ln19_fu_631_p3 <= 
        kernel_data_V_7 when (icmp_ln19_7_fu_625_p2(0) = '1') else 
        kernel_data_V_6;
    select_ln203_12_fu_423_p3 <= 
        kernel_data_V_5_load_reg_983 when (trunc_ln201_fu_400_p1(0) = '1') else 
        kernel_data_V_4;
    select_ln203_13_fu_442_p3 <= 
        kernel_data_V_8_load_reg_988 when (trunc_ln201_fu_400_p1(0) = '1') else 
        kernel_data_V_7;
    select_ln203_fu_404_p3 <= 
        kernel_data_V_2144_load_reg_978 when (trunc_ln201_fu_400_p1(0) = '1') else 
        kernel_data_V_1143;
    select_ln323_fu_909_p3 <= 
        ap_const_lv32_2 when (icmp_ln289_4_reg_1024(0) = '1') else 
        add_ln323_fu_904_p2;
    select_ln328_fu_863_p3 <= 
        ap_const_lv32_2 when (icmp_ln289_reg_1014(0) = '1') else 
        add_ln328_fu_858_p2;
        sext_ln1116_cast_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln19_7_reg_1059),26));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_520_p4 <= pX_3(31 downto 1);
    tmp_fu_500_p4 <= pY_3(31 downto 1);
    trunc_ln201_fu_400_p1 <= i_iw_0_i_i_i_i_reg_261(1 - 1 downto 0);
    trunc_ln56_fu_737_p1 <= w2_V_q0(16 - 1 downto 0);
    w2_V_address0 <= zext_ln56_fu_554_p1(4 - 1 downto 0);

    w2_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w2_V_ce0 <= ap_const_logic_1;
        else 
            w2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_index_fu_559_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_w_index40_phi_fu_276_p4));
    zext_ln56_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_w_index40_phi_fu_276_p4),64));
end behav;
