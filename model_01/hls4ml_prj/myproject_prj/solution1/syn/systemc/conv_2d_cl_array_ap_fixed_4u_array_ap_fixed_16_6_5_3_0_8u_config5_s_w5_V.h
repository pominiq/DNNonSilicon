// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_H__
#define __conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 507;
  static const unsigned AddressRange = 9;
  static const unsigned AddressWidth = 4;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_ram) {
        ram[0] = "0b
        ram[1] = "0b
        ram[2] = "0b111101100011111111010010000111111110101010100000000000101110000000010001001111111011100000011111101011101111111110111000111111111111000000100000000011011000000000010000011000000000000110000000011010110011111110111110010111111101011010111111111111000100000000111111101000000000010110011111111010010001111111110111111000000000100000100000000001011011111111000100010000000001000010111111110111111011111111110001101000000101100101111111111110000110000000000000000111111111100001111111110111100101111111011000101";
        ram[3] = "0b001101101010000000001111010111111111100111011111110101000111111111110001101111111110101011000000010111000001111101101000000111111101110110111111110000001100000000010110010111111111111010011111111110010001111111101110101000000001000100000000000000100110000000001101111111111111011011111111111011111010000001001111101111111111110011000000011011000011111111000011111000000000110011000000001111110001111111111001110111111101010101100000000110001110000001000100100000000000010101000000000101001111111111011101100";
        ram[4] = "0b
        ram[5] = "0b
        ram[6] = "0b000111010111111111111000101000000100001110111111110001000010000000001111001000000010001101111111111100001000000000000011000000000000000110111111111010010011111111101101000111111110001011111111111011101100000000101111110111111100111000100000000001000000000000100101100000000010000000011111110110010110000000000110000000000000110011111111111010000100000000110011000000000010000111111111111001101000000000001100110000000100110000100000010001110010000000100000001000000011001010011111110011111111111111111001100";
        ram[7] = "0b
        ram[8] = "0b


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V) {


static const unsigned DataWidth = 507;
static const unsigned AddressRange = 9;
static const unsigned AddressWidth = 4;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_ram* meminst;


SC_CTOR(conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V) {
meminst = new conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_ram("conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V() {
    delete meminst;
}


};//endmodule
#endif
