// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [15:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [15:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [15:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [15:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] pX;
reg   [31:0] sX;
reg   [31:0] pY;
reg   [31:0] sY;
reg   [15:0] kernel_data_V_3_8;
reg   [15:0] kernel_data_V_3_9;
reg   [15:0] kernel_data_V_3_10;
reg   [15:0] kernel_data_V_3_11;
reg   [15:0] kernel_data_V_3_12;
reg   [15:0] kernel_data_V_3_13;
reg   [15:0] kernel_data_V_3_14;
reg   [15:0] kernel_data_V_3_15;
reg   [15:0] kernel_data_V_3_24;
reg   [15:0] kernel_data_V_3_25;
reg   [15:0] kernel_data_V_3_26;
reg   [15:0] kernel_data_V_3_27;
reg   [15:0] kernel_data_V_3_28;
reg   [15:0] kernel_data_V_3_29;
reg   [15:0] kernel_data_V_3_30;
reg   [15:0] kernel_data_V_3_31;
reg    line_buffer_Array_V_3_0_0_ce0;
reg    line_buffer_Array_V_3_0_0_we0;
wire   [15:0] line_buffer_Array_V_3_0_0_q0;
reg    line_buffer_Array_V_3_0_1_ce0;
reg    line_buffer_Array_V_3_0_1_we0;
wire   [15:0] line_buffer_Array_V_3_0_1_q0;
reg    line_buffer_Array_V_3_0_2_ce0;
reg    line_buffer_Array_V_3_0_2_we0;
wire   [15:0] line_buffer_Array_V_3_0_2_q0;
reg    line_buffer_Array_V_3_0_3_ce0;
reg    line_buffer_Array_V_3_0_3_we0;
wire   [15:0] line_buffer_Array_V_3_0_3_q0;
reg    line_buffer_Array_V_3_0_4_ce0;
reg    line_buffer_Array_V_3_0_4_we0;
wire   [15:0] line_buffer_Array_V_3_0_4_q0;
reg    line_buffer_Array_V_3_0_5_ce0;
reg    line_buffer_Array_V_3_0_5_we0;
wire   [15:0] line_buffer_Array_V_3_0_5_q0;
reg    line_buffer_Array_V_3_0_6_ce0;
reg    line_buffer_Array_V_3_0_6_we0;
wire   [15:0] line_buffer_Array_V_3_0_6_q0;
reg    line_buffer_Array_V_3_0_7_ce0;
reg    line_buffer_Array_V_3_0_7_we0;
wire   [15:0] line_buffer_Array_V_3_0_7_q0;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln241_reg_1408;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg   [0:0] and_ln191_2_reg_1417;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg   [4:0] indvar_flatten_reg_398;
wire   [0:0] icmp_ln241_fu_420_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op62;
wire    io_acc_block_signal_op183;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] add_ln241_fu_426_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] and_ln191_2_fu_484_p2;
wire   [0:0] icmp_ln212_fu_490_p2;
reg   [0:0] icmp_ln212_reg_1421;
wire   [0:0] icmp_ln216_fu_540_p2;
wire   [31:0] select_ln222_fu_564_p3;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge_i_i_reg_409;
reg   [31:0] ap_phi_reg_pp0_iter1_storemerge_i_i_reg_409;
wire   [31:0] add_ln225_fu_496_p2;
wire   [31:0] select_ln227_fu_514_p3;
wire   [31:0] add_ln220_fu_546_p2;
reg   [31:0] ap_sig_allocacmp_sY_load;
wire   [15:0] tmp_data_0_V_fu_904_p6;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] tmp_data_1_V_fu_973_p6;
wire   [15:0] tmp_data_2_V_fu_1042_p6;
wire   [15:0] tmp_data_3_V_fu_1111_p6;
wire   [15:0] tmp_data_4_V_fu_1180_p6;
wire   [15:0] tmp_data_5_V_fu_1249_p6;
wire   [15:0] tmp_data_6_V_fu_1318_p6;
wire   [15:0] tmp_data_7_V_fu_1387_p6;
wire   [0:0] icmp_ln191_fu_436_p2;
wire   [0:0] icmp_ln191_1_fu_446_p2;
wire   [0:0] icmp_ln191_2_fu_456_p2;
wire   [0:0] icmp_ln191_3_fu_466_p2;
wire   [0:0] and_ln191_1_fu_478_p2;
wire   [0:0] and_ln191_fu_472_p2;
wire   [31:0] add_ln227_fu_508_p2;
wire   [31:0] add_ln222_fu_558_p2;
wire   [0:0] icmp_ln1496_fu_850_p2;
wire   [0:0] icmp_ln1496_1_fu_864_p2;
wire   [15:0] select_ln65_fu_856_p3;
wire   [15:0] select_ln65_9_fu_878_p3;
wire   [0:0] icmp_ln1496_2_fu_886_p2;
wire   [1:0] select_ln65_10_fu_870_p3;
wire   [1:0] zext_ln65_fu_892_p1;
wire   [1:0] tmp_data_0_V_fu_904_p5;
wire   [0:0] icmp_ln1496_8_fu_919_p2;
wire   [0:0] icmp_ln1496_9_fu_933_p2;
wire   [15:0] select_ln65_11_fu_925_p3;
wire   [15:0] select_ln65_13_fu_947_p3;
wire   [0:0] icmp_ln1496_10_fu_955_p2;
wire   [1:0] select_ln65_15_fu_939_p3;
wire   [1:0] zext_ln65_1_fu_961_p1;
wire   [1:0] tmp_data_1_V_fu_973_p5;
wire   [0:0] icmp_ln1496_11_fu_988_p2;
wire   [0:0] icmp_ln1496_12_fu_1002_p2;
wire   [15:0] select_ln65_14_fu_994_p3;
wire   [15:0] select_ln65_16_fu_1016_p3;
wire   [0:0] icmp_ln1496_13_fu_1024_p2;
wire   [1:0] select_ln65_21_fu_1008_p3;
wire   [1:0] zext_ln65_2_fu_1030_p1;
wire   [1:0] tmp_data_2_V_fu_1042_p5;
wire   [0:0] icmp_ln1496_3_fu_1057_p2;
wire   [0:0] icmp_ln1496_14_fu_1071_p2;
wire   [15:0] select_ln65_17_fu_1063_p3;
wire   [15:0] select_ln65_19_fu_1085_p3;
wire   [0:0] icmp_ln1496_15_fu_1093_p2;
wire   [1:0] select_ln65_27_fu_1077_p3;
wire   [1:0] zext_ln65_3_fu_1099_p1;
wire   [1:0] tmp_data_3_V_fu_1111_p5;
wire   [0:0] icmp_ln1496_4_fu_1126_p2;
wire   [0:0] icmp_ln1496_16_fu_1140_p2;
wire   [15:0] select_ln65_20_fu_1132_p3;
wire   [15:0] select_ln65_22_fu_1154_p3;
wire   [0:0] icmp_ln1496_17_fu_1162_p2;
wire   [1:0] select_ln65_32_fu_1146_p3;
wire   [1:0] zext_ln65_4_fu_1168_p1;
wire   [1:0] tmp_data_4_V_fu_1180_p5;
wire   [0:0] icmp_ln1496_5_fu_1195_p2;
wire   [0:0] icmp_ln1496_18_fu_1209_p2;
wire   [15:0] select_ln65_23_fu_1201_p3;
wire   [15:0] select_ln65_25_fu_1223_p3;
wire   [0:0] icmp_ln1496_19_fu_1231_p2;
wire   [1:0] select_ln65_34_fu_1215_p3;
wire   [1:0] zext_ln65_5_fu_1237_p1;
wire   [1:0] tmp_data_5_V_fu_1249_p5;
wire   [0:0] icmp_ln1496_6_fu_1264_p2;
wire   [0:0] icmp_ln1496_20_fu_1278_p2;
wire   [15:0] select_ln65_26_fu_1270_p3;
wire   [15:0] select_ln65_28_fu_1292_p3;
wire   [0:0] icmp_ln1496_21_fu_1300_p2;
wire   [1:0] select_ln65_36_fu_1284_p3;
wire   [1:0] zext_ln65_6_fu_1306_p1;
wire   [1:0] tmp_data_6_V_fu_1318_p5;
wire   [0:0] icmp_ln1496_7_fu_1333_p2;
wire   [0:0] icmp_ln1496_22_fu_1347_p2;
wire   [15:0] select_ln65_29_fu_1339_p3;
wire   [15:0] select_ln65_31_fu_1361_p3;
wire   [0:0] icmp_ln1496_23_fu_1369_p2;
wire   [1:0] select_ln65_38_fu_1353_p3;
wire   [1:0] zext_ln65_7_fu_1375_p1;
wire   [1:0] tmp_data_7_V_fu_1387_p5;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_266;
reg    ap_condition_292;
reg    ap_condition_252;
reg    ap_condition_285;
reg    ap_condition_298;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 pX = 32'd0;
#0 sX = 32'd0;
#0 pY = 32'd0;
#0 sY = 32'd0;
#0 kernel_data_V_3_8 = 16'd0;
#0 kernel_data_V_3_9 = 16'd0;
#0 kernel_data_V_3_10 = 16'd0;
#0 kernel_data_V_3_11 = 16'd0;
#0 kernel_data_V_3_12 = 16'd0;
#0 kernel_data_V_3_13 = 16'd0;
#0 kernel_data_V_3_14 = 16'd0;
#0 kernel_data_V_3_15 = 16'd0;
#0 kernel_data_V_3_24 = 16'd0;
#0 kernel_data_V_3_25 = 16'd0;
#0 kernel_data_V_3_26 = 16'd0;
#0 kernel_data_V_3_27 = 16'd0;
#0 kernel_data_V_3_28 = 16'd0;
#0 kernel_data_V_3_29 = 16'd0;
#0 kernel_data_V_3_30 = 16'd0;
#0 kernel_data_V_3_31 = 16'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_buxdS #(
    .DataWidth( 16 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
line_buffer_Array_V_3_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(line_buffer_Array_V_3_0_0_ce0),
    .we0(line_buffer_Array_V_3_0_0_we0),
    .d0(data_V_data_0_V_dout),
    .q0(line_buffer_Array_V_3_0_0_q0)
);

pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_buxdS #(
    .DataWidth( 16 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
line_buffer_Array_V_3_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(line_buffer_Array_V_3_0_1_ce0),
    .we0(line_buffer_Array_V_3_0_1_we0),
    .d0(data_V_data_1_V_dout),
    .q0(line_buffer_Array_V_3_0_1_q0)
);

pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_buxdS #(
    .DataWidth( 16 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
line_buffer_Array_V_3_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(line_buffer_Array_V_3_0_2_ce0),
    .we0(line_buffer_Array_V_3_0_2_we0),
    .d0(data_V_data_2_V_dout),
    .q0(line_buffer_Array_V_3_0_2_q0)
);

pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_buxdS #(
    .DataWidth( 16 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
line_buffer_Array_V_3_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(line_buffer_Array_V_3_0_3_ce0),
    .we0(line_buffer_Array_V_3_0_3_we0),
    .d0(data_V_data_3_V_dout),
    .q0(line_buffer_Array_V_3_0_3_q0)
);

pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_buxdS #(
    .DataWidth( 16 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
line_buffer_Array_V_3_0_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(line_buffer_Array_V_3_0_4_ce0),
    .we0(line_buffer_Array_V_3_0_4_we0),
    .d0(data_V_data_4_V_dout),
    .q0(line_buffer_Array_V_3_0_4_q0)
);

pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_buxdS #(
    .DataWidth( 16 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
line_buffer_Array_V_3_0_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(line_buffer_Array_V_3_0_5_ce0),
    .we0(line_buffer_Array_V_3_0_5_we0),
    .d0(data_V_data_5_V_dout),
    .q0(line_buffer_Array_V_3_0_5_q0)
);

pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_buxdS #(
    .DataWidth( 16 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
line_buffer_Array_V_3_0_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(line_buffer_Array_V_3_0_6_ce0),
    .we0(line_buffer_Array_V_3_0_6_we0),
    .d0(data_V_data_6_V_dout),
    .q0(line_buffer_Array_V_3_0_6_q0)
);

pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_buxdS #(
    .DataWidth( 16 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
line_buffer_Array_V_3_0_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(line_buffer_Array_V_3_0_7_ce0),
    .we0(line_buffer_Array_V_3_0_7_we0),
    .d0(data_V_data_7_V_dout),
    .q0(line_buffer_Array_V_3_0_7_q0)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U168(
    .din0(kernel_data_V_3_8),
    .din1(line_buffer_Array_V_3_0_0_q0),
    .din2(kernel_data_V_3_24),
    .din3(data_V_data_0_V_dout),
    .din4(tmp_data_0_V_fu_904_p5),
    .dout(tmp_data_0_V_fu_904_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U169(
    .din0(kernel_data_V_3_9),
    .din1(line_buffer_Array_V_3_0_1_q0),
    .din2(kernel_data_V_3_25),
    .din3(data_V_data_1_V_dout),
    .din4(tmp_data_1_V_fu_973_p5),
    .dout(tmp_data_1_V_fu_973_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U170(
    .din0(kernel_data_V_3_10),
    .din1(line_buffer_Array_V_3_0_2_q0),
    .din2(kernel_data_V_3_26),
    .din3(data_V_data_2_V_dout),
    .din4(tmp_data_2_V_fu_1042_p5),
    .dout(tmp_data_2_V_fu_1042_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U171(
    .din0(kernel_data_V_3_11),
    .din1(line_buffer_Array_V_3_0_3_q0),
    .din2(kernel_data_V_3_27),
    .din3(data_V_data_3_V_dout),
    .din4(tmp_data_3_V_fu_1111_p5),
    .dout(tmp_data_3_V_fu_1111_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U172(
    .din0(kernel_data_V_3_12),
    .din1(line_buffer_Array_V_3_0_4_q0),
    .din2(kernel_data_V_3_28),
    .din3(data_V_data_4_V_dout),
    .din4(tmp_data_4_V_fu_1180_p5),
    .dout(tmp_data_4_V_fu_1180_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U173(
    .din0(kernel_data_V_3_13),
    .din1(line_buffer_Array_V_3_0_5_q0),
    .din2(kernel_data_V_3_29),
    .din3(data_V_data_5_V_dout),
    .din4(tmp_data_5_V_fu_1249_p5),
    .dout(tmp_data_5_V_fu_1249_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U174(
    .din0(kernel_data_V_3_14),
    .din1(line_buffer_Array_V_3_0_6_q0),
    .din2(kernel_data_V_3_30),
    .din3(data_V_data_6_V_dout),
    .din4(tmp_data_6_V_fu_1318_p5),
    .dout(tmp_data_6_V_fu_1318_p6)
);

myproject_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_mux_42_16_1_1_U175(
    .din0(kernel_data_V_3_15),
    .din1(line_buffer_Array_V_3_0_7_q0),
    .din2(kernel_data_V_3_31),
    .din3(data_V_data_7_V_dout),
    .din4(tmp_data_7_V_fu_1387_p5),
    .dout(tmp_data_7_V_fu_1387_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_252)) begin
        if ((1'b1 == ap_condition_292)) begin
            ap_phi_reg_pp0_iter1_storemerge_i_i_reg_409 <= 32'd0;
        end else if ((1'b1 == ap_condition_266)) begin
            ap_phi_reg_pp0_iter1_storemerge_i_i_reg_409 <= select_ln222_fu_564_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_storemerge_i_i_reg_409 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_409;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_420_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_398 <= add_ln241_fu_426_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_398 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_285)) begin
        if ((icmp_ln212_fu_490_p2 == 1'd1)) begin
            pX <= 32'd0;
        end else if ((icmp_ln212_fu_490_p2 == 1'd0)) begin
            pX <= add_ln225_fu_496_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_298)) begin
        if ((icmp_ln216_fu_540_p2 == 1'd1)) begin
            pY <= 32'd0;
        end else if ((icmp_ln216_fu_540_p2 == 1'd0)) begin
            pY <= add_ln220_fu_546_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_285)) begin
        if ((icmp_ln212_fu_490_p2 == 1'd1)) begin
            sX <= 32'd0;
        end else if ((icmp_ln212_fu_490_p2 == 1'd0)) begin
            sX <= select_ln227_fu_514_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_420_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln191_2_reg_1417 <= and_ln191_2_fu_484_p2;
        icmp_ln212_reg_1421 <= icmp_ln212_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln241_reg_1408 <= icmp_ln241_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_data_V_3_10 <= line_buffer_Array_V_3_0_2_q0;
        kernel_data_V_3_11 <= line_buffer_Array_V_3_0_3_q0;
        kernel_data_V_3_12 <= line_buffer_Array_V_3_0_4_q0;
        kernel_data_V_3_13 <= line_buffer_Array_V_3_0_5_q0;
        kernel_data_V_3_14 <= line_buffer_Array_V_3_0_6_q0;
        kernel_data_V_3_15 <= line_buffer_Array_V_3_0_7_q0;
        kernel_data_V_3_24 <= data_V_data_0_V_dout;
        kernel_data_V_3_25 <= data_V_data_1_V_dout;
        kernel_data_V_3_26 <= data_V_data_2_V_dout;
        kernel_data_V_3_27 <= data_V_data_3_V_dout;
        kernel_data_V_3_28 <= data_V_data_4_V_dout;
        kernel_data_V_3_29 <= data_V_data_5_V_dout;
        kernel_data_V_3_30 <= data_V_data_6_V_dout;
        kernel_data_V_3_31 <= data_V_data_7_V_dout;
        kernel_data_V_3_8 <= line_buffer_Array_V_3_0_0_q0;
        kernel_data_V_3_9 <= line_buffer_Array_V_3_0_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_reg_1421 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sY <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_409;
    end
end

always @ (*) begin
    if ((icmp_ln241_fu_420_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln212_reg_1421 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_sY_load = ap_phi_reg_pp0_iter1_storemerge_i_i_reg_409;
    end else begin
        ap_sig_allocacmp_sY_load = sY;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_3_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_3_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_3_0_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_3_0_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_3_0_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_3_0_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_3_0_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_3_0_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_3_0_4_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_3_0_4_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_3_0_5_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_3_0_5_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_3_0_6_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_3_0_6_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_3_0_7_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1408 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_3_0_7_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1417) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_reg_1417) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1417) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_reg_1417) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1417) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_reg_1417) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1417) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_reg_1417) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1417) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_reg_1417) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1417) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_reg_1417) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1417) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_reg_1417) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1417) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_reg_1417) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln241_fu_420_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln241_fu_420_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln220_fu_546_p2 = (pY + 32'd1);

assign add_ln222_fu_558_p2 = (ap_sig_allocacmp_sY_load + 32'd1);

assign add_ln225_fu_496_p2 = (pX + 32'd1);

assign add_ln227_fu_508_p2 = (sX + 32'd1);

assign add_ln241_fu_426_p2 = (indvar_flatten_reg_398 + 5'd1);

assign and_ln191_1_fu_478_p2 = (icmp_ln191_3_fu_466_p2 & icmp_ln191_2_fu_456_p2);

assign and_ln191_2_fu_484_p2 = (and_ln191_fu_472_p2 & and_ln191_1_fu_478_p2);

assign and_ln191_fu_472_p2 = (icmp_ln191_fu_436_p2 & icmp_ln191_1_fu_446_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((io_acc_block_signal_op183 == 1'b0) & (1'd1 == and_ln191_2_reg_1417)) | ((io_acc_block_signal_op62 == 1'b0) & (icmp_ln241_reg_1408 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((io_acc_block_signal_op183 == 1'b0) & (1'd1 == and_ln191_2_reg_1417)) | ((io_acc_block_signal_op62 == 1'b0) & (icmp_ln241_reg_1408 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((io_acc_block_signal_op183 == 1'b0) & (1'd1 == and_ln191_2_reg_1417)) | ((io_acc_block_signal_op62 == 1'b0) & (icmp_ln241_reg_1408 == 1'd0))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((io_acc_block_signal_op183 == 1'b0) & (1'd1 == and_ln191_2_reg_1417)) | ((io_acc_block_signal_op62 == 1'b0) & (icmp_ln241_reg_1408 == 1'd0)));
end

always @ (*) begin
    ap_condition_252 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_266 = ((icmp_ln212_fu_490_p2 == 1'd1) & (icmp_ln216_fu_540_p2 == 1'd0) & (icmp_ln241_fu_420_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_285 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_420_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_292 = ((icmp_ln216_fu_540_p2 == 1'd1) & (icmp_ln212_fu_490_p2 == 1'd1) & (icmp_ln241_fu_420_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_298 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_490_p2 == 1'd1) & (icmp_ln241_fu_420_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_storemerge_i_i_reg_409 = 'bx;

assign ap_ready = internal_ap_ready;

assign icmp_ln1496_10_fu_955_p2 = (($signed(select_ln65_11_fu_925_p3) < $signed(select_ln65_13_fu_947_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_11_fu_988_p2 = (($signed(kernel_data_V_3_10) < $signed(line_buffer_Array_V_3_0_2_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_12_fu_1002_p2 = (($signed(kernel_data_V_3_26) < $signed(data_V_data_2_V_dout)) ? 1'b1 : 1'b0);

assign icmp_ln1496_13_fu_1024_p2 = (($signed(select_ln65_14_fu_994_p3) < $signed(select_ln65_16_fu_1016_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_14_fu_1071_p2 = (($signed(kernel_data_V_3_27) < $signed(data_V_data_3_V_dout)) ? 1'b1 : 1'b0);

assign icmp_ln1496_15_fu_1093_p2 = (($signed(select_ln65_17_fu_1063_p3) < $signed(select_ln65_19_fu_1085_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_16_fu_1140_p2 = (($signed(kernel_data_V_3_28) < $signed(data_V_data_4_V_dout)) ? 1'b1 : 1'b0);

assign icmp_ln1496_17_fu_1162_p2 = (($signed(select_ln65_20_fu_1132_p3) < $signed(select_ln65_22_fu_1154_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_18_fu_1209_p2 = (($signed(kernel_data_V_3_29) < $signed(data_V_data_5_V_dout)) ? 1'b1 : 1'b0);

assign icmp_ln1496_19_fu_1231_p2 = (($signed(select_ln65_23_fu_1201_p3) < $signed(select_ln65_25_fu_1223_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_1_fu_864_p2 = (($signed(kernel_data_V_3_24) < $signed(data_V_data_0_V_dout)) ? 1'b1 : 1'b0);

assign icmp_ln1496_20_fu_1278_p2 = (($signed(kernel_data_V_3_30) < $signed(data_V_data_6_V_dout)) ? 1'b1 : 1'b0);

assign icmp_ln1496_21_fu_1300_p2 = (($signed(select_ln65_26_fu_1270_p3) < $signed(select_ln65_28_fu_1292_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_22_fu_1347_p2 = (($signed(kernel_data_V_3_31) < $signed(data_V_data_7_V_dout)) ? 1'b1 : 1'b0);

assign icmp_ln1496_23_fu_1369_p2 = (($signed(select_ln65_29_fu_1339_p3) < $signed(select_ln65_31_fu_1361_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_886_p2 = (($signed(select_ln65_fu_856_p3) < $signed(select_ln65_9_fu_878_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_1057_p2 = (($signed(kernel_data_V_3_11) < $signed(line_buffer_Array_V_3_0_3_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_1126_p2 = (($signed(kernel_data_V_3_12) < $signed(line_buffer_Array_V_3_0_4_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_1195_p2 = (($signed(kernel_data_V_3_13) < $signed(line_buffer_Array_V_3_0_5_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_1264_p2 = (($signed(kernel_data_V_3_14) < $signed(line_buffer_Array_V_3_0_6_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_1333_p2 = (($signed(kernel_data_V_3_15) < $signed(line_buffer_Array_V_3_0_7_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_919_p2 = (($signed(kernel_data_V_3_9) < $signed(line_buffer_Array_V_3_0_1_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_9_fu_933_p2 = (($signed(kernel_data_V_3_25) < $signed(data_V_data_1_V_dout)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_850_p2 = (($signed(kernel_data_V_3_8) < $signed(line_buffer_Array_V_3_0_0_q0)) ? 1'b1 : 1'b0);

assign icmp_ln191_1_fu_446_p2 = ((ap_sig_allocacmp_sY_load == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln191_2_fu_456_p2 = (($signed(pY) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_3_fu_466_p2 = (($signed(pX) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_436_p2 = ((sX == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_490_p2 = ((pX == 32'd3) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_540_p2 = ((pY == 32'd3) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_420_p2 = ((indvar_flatten_reg_398 == 5'd16) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op183 = (res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op62 = (data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign res_V_data_0_V_din = tmp_data_0_V_fu_904_p6;

assign res_V_data_1_V_din = tmp_data_1_V_fu_973_p6;

assign res_V_data_2_V_din = tmp_data_2_V_fu_1042_p6;

assign res_V_data_3_V_din = tmp_data_3_V_fu_1111_p6;

assign res_V_data_4_V_din = tmp_data_4_V_fu_1180_p6;

assign res_V_data_5_V_din = tmp_data_5_V_fu_1249_p6;

assign res_V_data_6_V_din = tmp_data_6_V_fu_1318_p6;

assign res_V_data_7_V_din = tmp_data_7_V_fu_1387_p6;

assign select_ln222_fu_564_p3 = ((icmp_ln191_1_fu_446_p2[0:0] === 1'b1) ? 32'd0 : add_ln222_fu_558_p2);

assign select_ln227_fu_514_p3 = ((icmp_ln191_fu_436_p2[0:0] === 1'b1) ? 32'd0 : add_ln227_fu_508_p2);

assign select_ln65_10_fu_870_p3 = ((icmp_ln1496_1_fu_864_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_11_fu_925_p3 = ((icmp_ln1496_8_fu_919_p2[0:0] === 1'b1) ? line_buffer_Array_V_3_0_1_q0 : kernel_data_V_3_9);

assign select_ln65_13_fu_947_p3 = ((icmp_ln1496_9_fu_933_p2[0:0] === 1'b1) ? data_V_data_1_V_dout : kernel_data_V_3_25);

assign select_ln65_14_fu_994_p3 = ((icmp_ln1496_11_fu_988_p2[0:0] === 1'b1) ? line_buffer_Array_V_3_0_2_q0 : kernel_data_V_3_10);

assign select_ln65_15_fu_939_p3 = ((icmp_ln1496_9_fu_933_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_16_fu_1016_p3 = ((icmp_ln1496_12_fu_1002_p2[0:0] === 1'b1) ? data_V_data_2_V_dout : kernel_data_V_3_26);

assign select_ln65_17_fu_1063_p3 = ((icmp_ln1496_3_fu_1057_p2[0:0] === 1'b1) ? line_buffer_Array_V_3_0_3_q0 : kernel_data_V_3_11);

assign select_ln65_19_fu_1085_p3 = ((icmp_ln1496_14_fu_1071_p2[0:0] === 1'b1) ? data_V_data_3_V_dout : kernel_data_V_3_27);

assign select_ln65_20_fu_1132_p3 = ((icmp_ln1496_4_fu_1126_p2[0:0] === 1'b1) ? line_buffer_Array_V_3_0_4_q0 : kernel_data_V_3_12);

assign select_ln65_21_fu_1008_p3 = ((icmp_ln1496_12_fu_1002_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_22_fu_1154_p3 = ((icmp_ln1496_16_fu_1140_p2[0:0] === 1'b1) ? data_V_data_4_V_dout : kernel_data_V_3_28);

assign select_ln65_23_fu_1201_p3 = ((icmp_ln1496_5_fu_1195_p2[0:0] === 1'b1) ? line_buffer_Array_V_3_0_5_q0 : kernel_data_V_3_13);

assign select_ln65_25_fu_1223_p3 = ((icmp_ln1496_18_fu_1209_p2[0:0] === 1'b1) ? data_V_data_5_V_dout : kernel_data_V_3_29);

assign select_ln65_26_fu_1270_p3 = ((icmp_ln1496_6_fu_1264_p2[0:0] === 1'b1) ? line_buffer_Array_V_3_0_6_q0 : kernel_data_V_3_14);

assign select_ln65_27_fu_1077_p3 = ((icmp_ln1496_14_fu_1071_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_28_fu_1292_p3 = ((icmp_ln1496_20_fu_1278_p2[0:0] === 1'b1) ? data_V_data_6_V_dout : kernel_data_V_3_30);

assign select_ln65_29_fu_1339_p3 = ((icmp_ln1496_7_fu_1333_p2[0:0] === 1'b1) ? line_buffer_Array_V_3_0_7_q0 : kernel_data_V_3_15);

assign select_ln65_31_fu_1361_p3 = ((icmp_ln1496_22_fu_1347_p2[0:0] === 1'b1) ? data_V_data_7_V_dout : kernel_data_V_3_31);

assign select_ln65_32_fu_1146_p3 = ((icmp_ln1496_16_fu_1140_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_34_fu_1215_p3 = ((icmp_ln1496_18_fu_1209_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_36_fu_1284_p3 = ((icmp_ln1496_20_fu_1278_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_38_fu_1353_p3 = ((icmp_ln1496_22_fu_1347_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_9_fu_878_p3 = ((icmp_ln1496_1_fu_864_p2[0:0] === 1'b1) ? data_V_data_0_V_dout : kernel_data_V_3_24);

assign select_ln65_fu_856_p3 = ((icmp_ln1496_fu_850_p2[0:0] === 1'b1) ? line_buffer_Array_V_3_0_0_q0 : kernel_data_V_3_8);

assign start_out = real_start;

assign tmp_data_0_V_fu_904_p5 = ((icmp_ln1496_2_fu_886_p2[0:0] === 1'b1) ? select_ln65_10_fu_870_p3 : zext_ln65_fu_892_p1);

assign tmp_data_1_V_fu_973_p5 = ((icmp_ln1496_10_fu_955_p2[0:0] === 1'b1) ? select_ln65_15_fu_939_p3 : zext_ln65_1_fu_961_p1);

assign tmp_data_2_V_fu_1042_p5 = ((icmp_ln1496_13_fu_1024_p2[0:0] === 1'b1) ? select_ln65_21_fu_1008_p3 : zext_ln65_2_fu_1030_p1);

assign tmp_data_3_V_fu_1111_p5 = ((icmp_ln1496_15_fu_1093_p2[0:0] === 1'b1) ? select_ln65_27_fu_1077_p3 : zext_ln65_3_fu_1099_p1);

assign tmp_data_4_V_fu_1180_p5 = ((icmp_ln1496_17_fu_1162_p2[0:0] === 1'b1) ? select_ln65_32_fu_1146_p3 : zext_ln65_4_fu_1168_p1);

assign tmp_data_5_V_fu_1249_p5 = ((icmp_ln1496_19_fu_1231_p2[0:0] === 1'b1) ? select_ln65_34_fu_1215_p3 : zext_ln65_5_fu_1237_p1);

assign tmp_data_6_V_fu_1318_p5 = ((icmp_ln1496_21_fu_1300_p2[0:0] === 1'b1) ? select_ln65_36_fu_1284_p3 : zext_ln65_6_fu_1306_p1);

assign tmp_data_7_V_fu_1387_p5 = ((icmp_ln1496_23_fu_1369_p2[0:0] === 1'b1) ? select_ln65_38_fu_1353_p3 : zext_ln65_7_fu_1375_p1);

assign zext_ln65_1_fu_961_p1 = icmp_ln1496_8_fu_919_p2;

assign zext_ln65_2_fu_1030_p1 = icmp_ln1496_11_fu_988_p2;

assign zext_ln65_3_fu_1099_p1 = icmp_ln1496_3_fu_1057_p2;

assign zext_ln65_4_fu_1168_p1 = icmp_ln1496_4_fu_1126_p2;

assign zext_ln65_5_fu_1237_p1 = icmp_ln1496_5_fu_1195_p2;

assign zext_ln65_6_fu_1306_p1 = icmp_ln1496_6_fu_1264_p2;

assign zext_ln65_7_fu_1375_p1 = icmp_ln1496_7_fu_1333_p2;

assign zext_ln65_fu_892_p1 = icmp_ln1496_fu_850_p2;

endmodule //pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s
