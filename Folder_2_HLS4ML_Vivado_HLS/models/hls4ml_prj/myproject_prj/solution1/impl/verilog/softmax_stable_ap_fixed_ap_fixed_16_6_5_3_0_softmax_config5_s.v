// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config5_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] data_0_V_read;
input  [15:0] data_1_V_read;
input  [15:0] data_2_V_read;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [16:0] exp_table1_q0;
wire   [9:0] exp_table1_address1;
reg    exp_table1_ce1;
wire   [16:0] exp_table1_q1;
wire   [9:0] exp_table1_address2;
reg    exp_table1_ce2;
wire   [16:0] exp_table1_q2;
wire   [9:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [17:0] invert_table2_q0;
reg   [16:0] exp_res_0_V_reg_618;
reg   [16:0] exp_res_1_V_reg_623;
reg   [16:0] exp_res_2_V_reg_628;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln255_fu_360_p1;
wire   [63:0] zext_ln255_1_fu_399_p1;
wire   [63:0] zext_ln255_2_fu_438_p1;
wire   [63:0] zext_ln265_fu_519_p1;
wire  signed [15:0] icmp_ln1496_fu_126_p0;
wire  signed [15:0] icmp_ln1496_fu_126_p1;
wire   [0:0] icmp_ln1496_fu_126_p2;
wire  signed [15:0] select_ln65_fu_132_p1;
wire  signed [15:0] select_ln65_fu_132_p2;
wire   [15:0] select_ln65_fu_132_p3;
wire  signed [15:0] icmp_ln1496_1_fu_140_p1;
wire   [0:0] icmp_ln1496_1_fu_140_p2;
wire  signed [15:0] x_max_V_fu_146_p1;
wire  signed [15:0] sext_ln703_fu_154_p0;
wire   [15:0] x_max_V_fu_146_p3;
wire  signed [16:0] sext_ln703_fu_154_p1;
wire  signed [16:0] sext_ln703_1_fu_158_p1;
wire   [16:0] sub_ln1193_fu_162_p2;
wire   [0:0] tmp_3_fu_176_p3;
wire   [0:0] tmp_1_fu_168_p3;
wire   [0:0] xor_ln786_fu_184_p2;
wire   [0:0] xor_ln340_fu_202_p2;
wire  signed [15:0] sext_ln703_2_fu_214_p0;
wire  signed [16:0] sext_ln703_2_fu_214_p1;
wire   [16:0] sub_ln1193_1_fu_218_p2;
wire   [0:0] tmp_7_fu_232_p3;
wire   [0:0] tmp_5_fu_224_p3;
wire   [0:0] xor_ln786_1_fu_240_p2;
wire   [0:0] xor_ln340_1_fu_258_p2;
wire  signed [15:0] sext_ln703_3_fu_270_p0;
wire  signed [16:0] sext_ln703_3_fu_270_p1;
wire   [16:0] sub_ln1193_2_fu_274_p2;
wire   [0:0] tmp_9_fu_288_p3;
wire   [0:0] tmp_8_fu_280_p3;
wire   [0:0] xor_ln786_2_fu_296_p2;
wire   [0:0] xor_ln340_2_fu_314_p2;
wire   [0:0] xor_ln340_3_fu_196_p2;
wire   [9:0] tmp_fu_326_p4;
wire   [0:0] and_ln786_fu_190_p2;
wire   [0:0] or_ln340_fu_208_p2;
wire   [9:0] select_ln340_fu_336_p3;
wire   [9:0] select_ln388_fu_344_p3;
wire   [9:0] y_V_fu_352_p3;
wire   [0:0] xor_ln340_4_fu_252_p2;
wire   [9:0] tmp_2_fu_365_p4;
wire   [0:0] and_ln786_1_fu_246_p2;
wire   [0:0] or_ln340_1_fu_264_p2;
wire   [9:0] select_ln340_2_fu_375_p3;
wire   [9:0] select_ln388_1_fu_383_p3;
wire   [9:0] y_V_1_fu_391_p3;
wire   [0:0] xor_ln340_5_fu_308_p2;
wire   [9:0] tmp_4_fu_404_p4;
wire   [0:0] and_ln786_2_fu_302_p2;
wire   [0:0] or_ln340_2_fu_320_p2;
wire   [9:0] select_ln340_4_fu_414_p3;
wire   [9:0] select_ln388_2_fu_422_p3;
wire   [9:0] y_V_2_fu_430_p3;
wire   [17:0] zext_ln203_1_fu_447_p1;
wire   [17:0] zext_ln203_fu_443_p1;
wire   [17:0] p_Val2_6_fu_455_p2;
wire   [0:0] p_Result_s_fu_467_p3;
wire   [16:0] add_ln746_fu_461_p2;
wire   [16:0] p_Val2_7_fu_475_p3;
wire   [17:0] zext_ln746_fu_483_p1;
wire   [17:0] zext_ln203_2_fu_451_p1;
wire   [17:0] p_Val2_9_fu_487_p2;
wire   [0:0] p_Result_6_fu_493_p3;
wire   [9:0] tmp_6_fu_501_p4;
wire   [9:0] y_V_3_fu_511_p3;
wire  signed [25:0] mul_ln1118_fu_582_p2;
wire  signed [25:0] mul_ln1118_1_fu_589_p2;
wire  signed [25:0] mul_ln1118_2_fu_596_p2;
wire   [16:0] mul_ln1118_fu_582_p0;
wire  signed [17:0] mul_ln1118_fu_582_p1;
wire  signed [25:0] sext_ln1116_fu_524_p1;
wire   [16:0] mul_ln1118_1_fu_589_p0;
wire  signed [17:0] mul_ln1118_1_fu_589_p1;
wire   [16:0] mul_ln1118_2_fu_596_p0;
wire  signed [17:0] mul_ln1118_2_fu_596_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [25:0] mul_ln1118_1_fu_589_p00;
wire   [25:0] mul_ln1118_2_fu_596_p00;
wire   [25:0] mul_ln1118_fu_582_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config5_s_exp_table1 #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0),
    .address1(exp_table1_address1),
    .ce1(exp_table1_ce1),
    .q1(exp_table1_q1),
    .address2(exp_table1_address2),
    .ce2(exp_table1_ce2),
    .q2(exp_table1_q2)
);

softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config5_s_invert_table2 #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

myproject_mul_mul_17ns_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_17ns_18s_26_1_1_U118(
    .din0(mul_ln1118_fu_582_p0),
    .din1(mul_ln1118_fu_582_p1),
    .dout(mul_ln1118_fu_582_p2)
);

myproject_mul_mul_17ns_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_17ns_18s_26_1_1_U119(
    .din0(mul_ln1118_1_fu_589_p0),
    .din1(mul_ln1118_1_fu_589_p1),
    .dout(mul_ln1118_1_fu_589_p2)
);

myproject_mul_mul_17ns_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_17ns_18s_26_1_1_U120(
    .din0(mul_ln1118_2_fu_596_p0),
    .din1(mul_ln1118_2_fu_596_p1),
    .dout(mul_ln1118_2_fu_596_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_res_0_V_reg_618 <= exp_table1_q0;
        exp_res_1_V_reg_623 <= exp_table1_q1;
        exp_res_2_V_reg_628 <= exp_table1_q2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce1 = 1'b1;
    end else begin
        exp_table1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce2 = 1'b1;
    end else begin
        exp_table1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln746_fu_461_p2 = (exp_table1_q0 + exp_table1_q1);

assign and_ln786_1_fu_246_p2 = (xor_ln786_1_fu_240_p2 & tmp_5_fu_224_p3);

assign and_ln786_2_fu_302_p2 = (xor_ln786_2_fu_296_p2 & tmp_8_fu_280_p3);

assign and_ln786_fu_190_p2 = (xor_ln786_fu_184_p2 & tmp_1_fu_168_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = {{mul_ln1118_fu_582_p2[25:10]}};

assign ap_return_1 = {{mul_ln1118_1_fu_589_p2[25:10]}};

assign ap_return_2 = {{mul_ln1118_2_fu_596_p2[25:10]}};

assign exp_table1_address0 = zext_ln255_fu_360_p1;

assign exp_table1_address1 = zext_ln255_1_fu_399_p1;

assign exp_table1_address2 = zext_ln255_2_fu_438_p1;

assign icmp_ln1496_1_fu_140_p1 = data_2_V_read;

assign icmp_ln1496_1_fu_140_p2 = (($signed(select_ln65_fu_132_p3) < $signed(icmp_ln1496_1_fu_140_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_126_p0 = data_0_V_read;

assign icmp_ln1496_fu_126_p1 = data_1_V_read;

assign icmp_ln1496_fu_126_p2 = (($signed(icmp_ln1496_fu_126_p0) < $signed(icmp_ln1496_fu_126_p1)) ? 1'b1 : 1'b0);

assign invert_table2_address0 = zext_ln265_fu_519_p1;

assign mul_ln1118_1_fu_589_p0 = mul_ln1118_1_fu_589_p00;

assign mul_ln1118_1_fu_589_p00 = exp_res_1_V_reg_623;

assign mul_ln1118_1_fu_589_p1 = sext_ln1116_fu_524_p1;

assign mul_ln1118_2_fu_596_p0 = mul_ln1118_2_fu_596_p00;

assign mul_ln1118_2_fu_596_p00 = exp_res_2_V_reg_628;

assign mul_ln1118_2_fu_596_p1 = sext_ln1116_fu_524_p1;

assign mul_ln1118_fu_582_p0 = mul_ln1118_fu_582_p00;

assign mul_ln1118_fu_582_p00 = exp_res_0_V_reg_618;

assign mul_ln1118_fu_582_p1 = sext_ln1116_fu_524_p1;

assign or_ln340_1_fu_264_p2 = (xor_ln340_1_fu_258_p2 | tmp_7_fu_232_p3);

assign or_ln340_2_fu_320_p2 = (xor_ln340_2_fu_314_p2 | tmp_9_fu_288_p3);

assign or_ln340_fu_208_p2 = (xor_ln340_fu_202_p2 | tmp_3_fu_176_p3);

assign p_Result_6_fu_493_p3 = p_Val2_9_fu_487_p2[32'd17];

assign p_Result_s_fu_467_p3 = p_Val2_6_fu_455_p2[32'd17];

assign p_Val2_6_fu_455_p2 = (zext_ln203_1_fu_447_p1 + zext_ln203_fu_443_p1);

assign p_Val2_7_fu_475_p3 = ((p_Result_s_fu_467_p3[0:0] === 1'b1) ? 17'd131071 : add_ln746_fu_461_p2);

assign p_Val2_9_fu_487_p2 = (zext_ln746_fu_483_p1 + zext_ln203_2_fu_451_p1);

assign select_ln340_2_fu_375_p3 = ((xor_ln340_4_fu_252_p2[0:0] === 1'b1) ? 10'd511 : tmp_2_fu_365_p4);

assign select_ln340_4_fu_414_p3 = ((xor_ln340_5_fu_308_p2[0:0] === 1'b1) ? 10'd511 : tmp_4_fu_404_p4);

assign select_ln340_fu_336_p3 = ((xor_ln340_3_fu_196_p2[0:0] === 1'b1) ? 10'd511 : tmp_fu_326_p4);

assign select_ln388_1_fu_383_p3 = ((and_ln786_1_fu_246_p2[0:0] === 1'b1) ? 10'd512 : tmp_2_fu_365_p4);

assign select_ln388_2_fu_422_p3 = ((and_ln786_2_fu_302_p2[0:0] === 1'b1) ? 10'd512 : tmp_4_fu_404_p4);

assign select_ln388_fu_344_p3 = ((and_ln786_fu_190_p2[0:0] === 1'b1) ? 10'd512 : tmp_fu_326_p4);

assign select_ln65_fu_132_p1 = data_1_V_read;

assign select_ln65_fu_132_p2 = data_0_V_read;

assign select_ln65_fu_132_p3 = ((icmp_ln1496_fu_126_p2[0:0] === 1'b1) ? select_ln65_fu_132_p1 : select_ln65_fu_132_p2);

assign sext_ln1116_fu_524_p1 = $signed(invert_table2_q0);

assign sext_ln703_1_fu_158_p1 = $signed(x_max_V_fu_146_p3);

assign sext_ln703_2_fu_214_p0 = data_1_V_read;

assign sext_ln703_2_fu_214_p1 = sext_ln703_2_fu_214_p0;

assign sext_ln703_3_fu_270_p0 = data_2_V_read;

assign sext_ln703_3_fu_270_p1 = sext_ln703_3_fu_270_p0;

assign sext_ln703_fu_154_p0 = data_0_V_read;

assign sext_ln703_fu_154_p1 = sext_ln703_fu_154_p0;

assign sub_ln1193_1_fu_218_p2 = ($signed(sext_ln703_2_fu_214_p1) - $signed(sext_ln703_1_fu_158_p1));

assign sub_ln1193_2_fu_274_p2 = ($signed(sext_ln703_3_fu_270_p1) - $signed(sext_ln703_1_fu_158_p1));

assign sub_ln1193_fu_162_p2 = ($signed(sext_ln703_fu_154_p1) - $signed(sext_ln703_1_fu_158_p1));

assign tmp_1_fu_168_p3 = sub_ln1193_fu_162_p2[32'd16];

assign tmp_2_fu_365_p4 = {{sub_ln1193_1_fu_218_p2[15:6]}};

assign tmp_3_fu_176_p3 = sub_ln1193_fu_162_p2[32'd15];

assign tmp_4_fu_404_p4 = {{sub_ln1193_2_fu_274_p2[15:6]}};

assign tmp_5_fu_224_p3 = sub_ln1193_1_fu_218_p2[32'd16];

assign tmp_6_fu_501_p4 = {{p_Val2_9_fu_487_p2[17:8]}};

assign tmp_7_fu_232_p3 = sub_ln1193_1_fu_218_p2[32'd15];

assign tmp_8_fu_280_p3 = sub_ln1193_2_fu_274_p2[32'd16];

assign tmp_9_fu_288_p3 = sub_ln1193_2_fu_274_p2[32'd15];

assign tmp_fu_326_p4 = {{sub_ln1193_fu_162_p2[15:6]}};

assign x_max_V_fu_146_p1 = data_2_V_read;

assign x_max_V_fu_146_p3 = ((icmp_ln1496_1_fu_140_p2[0:0] === 1'b1) ? x_max_V_fu_146_p1 : select_ln65_fu_132_p3);

assign xor_ln340_1_fu_258_p2 = (tmp_5_fu_224_p3 ^ 1'd1);

assign xor_ln340_2_fu_314_p2 = (tmp_8_fu_280_p3 ^ 1'd1);

assign xor_ln340_3_fu_196_p2 = (tmp_3_fu_176_p3 ^ tmp_1_fu_168_p3);

assign xor_ln340_4_fu_252_p2 = (tmp_7_fu_232_p3 ^ tmp_5_fu_224_p3);

assign xor_ln340_5_fu_308_p2 = (tmp_9_fu_288_p3 ^ tmp_8_fu_280_p3);

assign xor_ln340_fu_202_p2 = (tmp_1_fu_168_p3 ^ 1'd1);

assign xor_ln786_1_fu_240_p2 = (tmp_7_fu_232_p3 ^ 1'd1);

assign xor_ln786_2_fu_296_p2 = (tmp_9_fu_288_p3 ^ 1'd1);

assign xor_ln786_fu_184_p2 = (tmp_3_fu_176_p3 ^ 1'd1);

assign y_V_1_fu_391_p3 = ((or_ln340_1_fu_264_p2[0:0] === 1'b1) ? select_ln340_2_fu_375_p3 : select_ln388_1_fu_383_p3);

assign y_V_2_fu_430_p3 = ((or_ln340_2_fu_320_p2[0:0] === 1'b1) ? select_ln340_4_fu_414_p3 : select_ln388_2_fu_422_p3);

assign y_V_3_fu_511_p3 = ((p_Result_6_fu_493_p3[0:0] === 1'b1) ? 10'd511 : tmp_6_fu_501_p4);

assign y_V_fu_352_p3 = ((or_ln340_fu_208_p2[0:0] === 1'b1) ? select_ln340_fu_336_p3 : select_ln388_fu_344_p3);

assign zext_ln203_1_fu_447_p1 = exp_table1_q1;

assign zext_ln203_2_fu_451_p1 = exp_table1_q2;

assign zext_ln203_fu_443_p1 = exp_table1_q0;

assign zext_ln255_1_fu_399_p1 = y_V_1_fu_391_p3;

assign zext_ln255_2_fu_438_p1 = y_V_2_fu_430_p3;

assign zext_ln255_fu_360_p1 = y_V_fu_352_p3;

assign zext_ln265_fu_519_p1 = y_V_3_fu_511_p3;

assign zext_ln746_fu_483_p1 = p_Val2_7_fu_475_p3;

endmodule //softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config5_s
