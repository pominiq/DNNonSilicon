// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] pX_1;
reg   [31:0] sX_1;
reg   [31:0] pY_1;
reg   [31:0] sY_1;
reg   [15:0] kernel_data_V_2_4;
reg   [15:0] kernel_data_V_2_5;
reg   [15:0] kernel_data_V_2_6;
reg   [15:0] kernel_data_V_2_7;
reg   [15:0] kernel_data_V_2_20;
reg   [15:0] kernel_data_V_2_21;
reg   [15:0] kernel_data_V_2_22;
reg   [15:0] kernel_data_V_2_23;
reg   [15:0] kernel_data_V_2_36;
reg   [15:0] kernel_data_V_2_37;
reg   [15:0] kernel_data_V_2_38;
reg   [15:0] kernel_data_V_2_39;
reg   [15:0] kernel_data_V_2_52;
reg   [15:0] kernel_data_V_2_53;
reg   [15:0] kernel_data_V_2_54;
reg   [15:0] kernel_data_V_2_55;
reg   [15:0] kernel_data_V_2_8;
reg   [15:0] kernel_data_V_2_9;
reg   [15:0] kernel_data_V_2_10;
reg   [15:0] kernel_data_V_2_11;
reg   [15:0] kernel_data_V_2_24;
reg   [15:0] kernel_data_V_2_25;
reg   [15:0] kernel_data_V_2_26;
reg   [15:0] kernel_data_V_2_27;
reg   [15:0] kernel_data_V_2_40;
reg   [15:0] kernel_data_V_2_41;
reg   [15:0] kernel_data_V_2_42;
reg   [15:0] kernel_data_V_2_43;
reg   [15:0] kernel_data_V_2_56;
reg   [15:0] kernel_data_V_2_57;
reg   [15:0] kernel_data_V_2_58;
reg   [15:0] kernel_data_V_2_59;
reg   [15:0] kernel_data_V_2_12;
reg   [15:0] kernel_data_V_2_13;
reg   [15:0] kernel_data_V_2_14;
reg   [15:0] kernel_data_V_2_15;
reg   [15:0] kernel_data_V_2_28;
reg   [15:0] kernel_data_V_2_29;
reg   [15:0] kernel_data_V_2_30;
reg   [15:0] kernel_data_V_2_31;
reg   [15:0] kernel_data_V_2_44;
reg   [15:0] kernel_data_V_2_45;
reg   [15:0] kernel_data_V_2_46;
reg   [15:0] kernel_data_V_2_47;
reg   [15:0] kernel_data_V_2_60;
reg   [15:0] kernel_data_V_2_61;
reg   [15:0] kernel_data_V_2_62;
reg   [15:0] kernel_data_V_2_63;
reg    line_buffer_Array_V_2_0_0_ce0;
reg    line_buffer_Array_V_2_0_0_we0;
wire   [15:0] line_buffer_Array_V_2_0_0_q0;
reg    line_buffer_Array_V_2_1_0_ce0;
reg    line_buffer_Array_V_2_1_0_we0;
wire   [15:0] line_buffer_Array_V_2_1_0_q0;
reg    line_buffer_Array_V_2_2_0_ce0;
reg    line_buffer_Array_V_2_2_0_we0;
wire   [15:0] line_buffer_Array_V_2_2_0_q0;
reg    line_buffer_Array_V_2_0_1_ce0;
reg    line_buffer_Array_V_2_0_1_we0;
wire   [15:0] line_buffer_Array_V_2_0_1_q0;
reg    line_buffer_Array_V_2_1_1_ce0;
reg    line_buffer_Array_V_2_1_1_we0;
wire   [15:0] line_buffer_Array_V_2_1_1_q0;
reg    line_buffer_Array_V_2_2_1_ce0;
reg    line_buffer_Array_V_2_2_1_we0;
wire   [15:0] line_buffer_Array_V_2_2_1_q0;
reg    line_buffer_Array_V_2_0_2_ce0;
reg    line_buffer_Array_V_2_0_2_we0;
wire   [15:0] line_buffer_Array_V_2_0_2_q0;
reg    line_buffer_Array_V_2_1_2_ce0;
reg    line_buffer_Array_V_2_1_2_we0;
wire   [15:0] line_buffer_Array_V_2_1_2_q0;
reg    line_buffer_Array_V_2_2_2_ce0;
reg    line_buffer_Array_V_2_2_2_we0;
wire   [15:0] line_buffer_Array_V_2_2_2_q0;
reg    line_buffer_Array_V_2_0_3_ce0;
reg    line_buffer_Array_V_2_0_3_we0;
wire   [15:0] line_buffer_Array_V_2_0_3_q0;
reg    line_buffer_Array_V_2_1_3_ce0;
reg    line_buffer_Array_V_2_1_3_we0;
wire   [15:0] line_buffer_Array_V_2_1_3_q0;
reg    line_buffer_Array_V_2_2_3_ce0;
reg    line_buffer_Array_V_2_2_3_we0;
wire   [15:0] line_buffer_Array_V_2_2_3_q0;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln241_reg_3006;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] and_ln191_4_reg_3015;
reg   [0:0] and_ln191_4_reg_3015_pp0_iter1_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg   [9:0] indvar_flatten_reg_364;
wire   [0:0] icmp_ln241_fu_386_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op57;
reg    ap_block_state3_pp0_stage0_iter1;
wire    io_acc_block_signal_op373;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] add_ln241_fu_392_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] and_ln191_4_fu_450_p2;
wire   [0:0] icmp_ln212_fu_456_p2;
reg   [0:0] icmp_ln212_reg_3019;
wire   [0:0] icmp_ln216_fu_506_p2;
wire   [31:0] select_ln222_fu_530_p3;
reg   [15:0] pool_window_15_V_reg_3032;
reg   [15:0] pool_window_15_V_1_reg_3060;
reg   [15:0] pool_window_15_V_2_reg_3088;
reg   [15:0] pool_window_15_V_3_reg_3116;
reg   [15:0] pool_window_11_V_reg_3144;
reg   [15:0] pool_window_7_V_reg_3164;
reg   [15:0] pool_window_3_V_reg_3178;
reg   [15:0] pool_window_11_V_1_reg_3184;
reg   [15:0] pool_window_7_V_1_reg_3204;
reg   [15:0] pool_window_3_V_8_reg_3218;
reg   [15:0] pool_window_11_V_2_reg_3224;
reg   [15:0] pool_window_7_V_2_reg_3244;
reg   [15:0] pool_window_3_V_9_reg_3258;
reg   [15:0] pool_window_11_V_3_reg_3264;
reg   [15:0] pool_window_7_V_3_reg_3284;
reg   [15:0] pool_window_3_V_10_reg_3298;
reg   [15:0] pool_window_0_V_reg_3304;
reg   [15:0] pool_window_0_V_8_reg_3310;
reg   [15:0] pool_window_0_V_9_reg_3316;
reg   [15:0] pool_window_0_V_10_reg_3322;
reg   [15:0] pool_window_4_V_reg_3328;
reg   [15:0] pool_window_4_V_1_reg_3334;
reg   [15:0] pool_window_4_V_2_reg_3340;
reg   [15:0] pool_window_4_V_3_reg_3346;
reg   [15:0] pool_window_8_V_reg_3352;
reg   [15:0] pool_window_8_V_1_reg_3360;
reg   [15:0] pool_window_8_V_2_reg_3368;
reg   [15:0] pool_window_8_V_3_reg_3376;
reg   [15:0] pool_window_12_V_reg_3384;
reg   [15:0] pool_window_12_V_1_reg_3392;
reg   [15:0] pool_window_12_V_2_reg_3400;
reg   [15:0] pool_window_12_V_3_reg_3408;
reg   [15:0] pool_window_1_V_reg_3416;
reg   [15:0] pool_window_1_V_8_reg_3422;
reg   [15:0] pool_window_1_V_9_reg_3428;
reg   [15:0] pool_window_1_V_10_reg_3434;
reg   [15:0] pool_window_5_V_reg_3440;
reg   [15:0] pool_window_5_V_1_reg_3446;
reg   [15:0] pool_window_5_V_2_reg_3452;
reg   [15:0] pool_window_5_V_3_reg_3458;
reg   [15:0] pool_window_9_V_reg_3464;
reg   [15:0] pool_window_9_V_1_reg_3472;
reg   [15:0] pool_window_9_V_2_reg_3480;
reg   [15:0] pool_window_9_V_3_reg_3488;
reg   [15:0] pool_window_13_V_reg_3496;
reg   [15:0] pool_window_13_V_1_reg_3504;
reg   [15:0] pool_window_13_V_2_reg_3512;
reg   [15:0] pool_window_13_V_3_reg_3520;
reg   [15:0] pool_window_2_V_reg_3528;
reg   [15:0] pool_window_2_V_8_reg_3534;
reg   [15:0] pool_window_2_V_9_reg_3540;
reg   [15:0] pool_window_2_V_10_reg_3546;
reg   [15:0] pool_window_6_V_reg_3552;
reg   [15:0] pool_window_6_V_1_reg_3558;
reg   [15:0] pool_window_6_V_2_reg_3564;
reg   [15:0] pool_window_6_V_3_reg_3570;
reg   [15:0] pool_window_10_V_reg_3576;
reg   [15:0] pool_window_10_V_1_reg_3584;
reg   [15:0] pool_window_10_V_2_reg_3592;
reg   [15:0] pool_window_10_V_3_reg_3600;
reg   [15:0] pool_window_14_V_reg_3608;
reg   [15:0] pool_window_14_V_1_reg_3616;
reg   [15:0] pool_window_14_V_2_reg_3624;
reg   [15:0] pool_window_14_V_3_reg_3632;
wire   [2:0] select_ln65_40_fu_1366_p3;
reg   [2:0] select_ln65_40_reg_3640;
wire   [0:0] icmp_ln1496_30_fu_1374_p2;
reg   [0:0] icmp_ln1496_30_reg_3645;
wire   [0:0] icmp_ln1496_31_fu_1380_p2;
reg   [0:0] icmp_ln1496_31_reg_3651;
wire   [0:0] icmp_ln1496_33_fu_1386_p2;
reg   [0:0] icmp_ln1496_33_reg_3657;
wire   [0:0] icmp_ln1496_34_fu_1392_p2;
reg   [0:0] icmp_ln1496_34_reg_3663;
wire   [2:0] select_ln65_62_fu_1604_p3;
reg   [2:0] select_ln65_62_reg_3669;
wire   [0:0] icmp_ln1496_44_fu_1612_p2;
reg   [0:0] icmp_ln1496_44_reg_3674;
wire   [0:0] icmp_ln1496_45_fu_1618_p2;
reg   [0:0] icmp_ln1496_45_reg_3680;
wire   [0:0] icmp_ln1496_47_fu_1624_p2;
reg   [0:0] icmp_ln1496_47_reg_3686;
wire   [0:0] icmp_ln1496_48_fu_1630_p2;
reg   [0:0] icmp_ln1496_48_reg_3692;
wire   [2:0] select_ln65_83_fu_1842_p3;
reg   [2:0] select_ln65_83_reg_3698;
wire   [0:0] icmp_ln1496_58_fu_1850_p2;
reg   [0:0] icmp_ln1496_58_reg_3703;
wire   [0:0] icmp_ln1496_59_fu_1856_p2;
reg   [0:0] icmp_ln1496_59_reg_3709;
wire   [0:0] icmp_ln1496_61_fu_1862_p2;
reg   [0:0] icmp_ln1496_61_reg_3715;
wire   [0:0] icmp_ln1496_62_fu_1868_p2;
reg   [0:0] icmp_ln1496_62_reg_3721;
wire   [2:0] select_ln65_104_fu_2080_p3;
reg   [2:0] select_ln65_104_reg_3727;
wire   [0:0] icmp_ln1496_73_fu_2088_p2;
reg   [0:0] icmp_ln1496_73_reg_3732;
wire   [0:0] icmp_ln1496_74_fu_2094_p2;
reg   [0:0] icmp_ln1496_74_reg_3738;
wire   [0:0] icmp_ln1496_76_fu_2100_p2;
reg   [0:0] icmp_ln1496_76_reg_3744;
wire   [0:0] icmp_ln1496_77_fu_2106_p2;
reg   [0:0] icmp_ln1496_77_reg_3750;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge_i_i_reg_375;
reg   [31:0] ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375;
wire   [31:0] add_ln225_fu_462_p2;
wire   [31:0] select_ln227_fu_480_p3;
wire   [31:0] add_ln220_fu_512_p2;
reg   [31:0] ap_sig_allocacmp_sY_1_load;
wire   [15:0] tmp_data_0_V_fu_2317_p18;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] tmp_data_1_V_fu_2539_p18;
wire   [15:0] tmp_data_2_V_fu_2761_p18;
wire   [15:0] tmp_data_3_V_fu_2983_p18;
wire   [0:0] icmp_ln191_fu_402_p2;
wire   [0:0] icmp_ln191_4_fu_412_p2;
wire   [0:0] icmp_ln191_5_fu_422_p2;
wire   [0:0] icmp_ln191_6_fu_432_p2;
wire   [0:0] and_ln191_3_fu_444_p2;
wire   [0:0] and_ln191_fu_438_p2;
wire   [31:0] add_ln227_fu_474_p2;
wire   [31:0] add_ln222_fu_524_p2;
wire   [0:0] icmp_ln1496_fu_1160_p2;
wire   [0:0] icmp_ln1496_24_fu_1178_p2;
wire   [15:0] select_ln65_fu_1170_p3;
wire   [15:0] select_ln65_33_fu_1192_p3;
wire   [0:0] icmp_ln1496_25_fu_1200_p2;
wire   [1:0] select_ln65_32_fu_1184_p3;
wire   [1:0] zext_ln65_fu_1166_p1;
wire   [1:0] select_ln65_34_fu_1206_p3;
wire   [3:0] phi_ln_fu_1222_p17;
wire   [0:0] icmp_ln1496_26_fu_1260_p2;
wire   [0:0] icmp_ln1496_27_fu_1282_p2;
wire   [15:0] select_ln65_36_fu_1274_p3;
wire   [15:0] select_ln65_38_fu_1296_p3;
wire   [0:0] icmp_ln1496_28_fu_1304_p2;
wire   [2:0] select_ln65_48_fu_1288_p3;
wire   [2:0] select_ln65_35_fu_1266_p3;
wire   [2:0] select_ln65_39_fu_1310_p3;
wire   [3:0] phi_ln65_1_fu_1322_p17;
wire   [15:0] phi_ln_fu_1222_p18;
wire   [15:0] phi_ln65_1_fu_1322_p18;
wire   [0:0] icmp_ln1496_29_fu_1360_p2;
wire   [2:0] zext_ln65_8_fu_1214_p1;
wire   [0:0] icmp_ln1496_1_fu_1398_p2;
wire   [0:0] icmp_ln1496_38_fu_1416_p2;
wire   [15:0] select_ln65_53_fu_1408_p3;
wire   [15:0] select_ln65_55_fu_1430_p3;
wire   [0:0] icmp_ln1496_39_fu_1438_p2;
wire   [1:0] select_ln65_54_fu_1422_p3;
wire   [1:0] zext_ln65_10_fu_1404_p1;
wire   [1:0] select_ln65_56_fu_1444_p3;
wire   [3:0] phi_ln65_6_fu_1460_p17;
wire   [0:0] icmp_ln1496_40_fu_1498_p2;
wire   [0:0] icmp_ln1496_41_fu_1520_p2;
wire   [15:0] select_ln65_58_fu_1512_p3;
wire   [15:0] select_ln65_60_fu_1534_p3;
wire   [0:0] icmp_ln1496_42_fu_1542_p2;
wire   [2:0] select_ln65_70_fu_1526_p3;
wire   [2:0] select_ln65_57_fu_1504_p3;
wire   [2:0] select_ln65_61_fu_1548_p3;
wire   [3:0] phi_ln65_7_fu_1560_p17;
wire   [15:0] phi_ln65_6_fu_1460_p18;
wire   [15:0] phi_ln65_7_fu_1560_p18;
wire   [0:0] icmp_ln1496_43_fu_1598_p2;
wire   [2:0] zext_ln65_11_fu_1452_p1;
wire   [0:0] icmp_ln1496_2_fu_1636_p2;
wire   [0:0] icmp_ln1496_52_fu_1654_p2;
wire   [15:0] select_ln65_74_fu_1646_p3;
wire   [15:0] select_ln65_76_fu_1668_p3;
wire   [0:0] icmp_ln1496_53_fu_1676_p2;
wire   [1:0] select_ln65_75_fu_1660_p3;
wire   [1:0] zext_ln65_13_fu_1642_p1;
wire   [1:0] select_ln65_77_fu_1682_p3;
wire   [3:0] phi_ln65_11_fu_1698_p17;
wire   [0:0] icmp_ln1496_54_fu_1736_p2;
wire   [0:0] icmp_ln1496_55_fu_1758_p2;
wire   [15:0] select_ln65_79_fu_1750_p3;
wire   [15:0] select_ln65_81_fu_1772_p3;
wire   [0:0] icmp_ln1496_56_fu_1780_p2;
wire   [2:0] select_ln65_101_fu_1764_p3;
wire   [2:0] select_ln65_78_fu_1742_p3;
wire   [2:0] select_ln65_82_fu_1786_p3;
wire   [3:0] phi_ln65_12_fu_1798_p17;
wire   [15:0] phi_ln65_11_fu_1698_p18;
wire   [15:0] phi_ln65_12_fu_1798_p18;
wire   [0:0] icmp_ln1496_57_fu_1836_p2;
wire   [2:0] zext_ln65_14_fu_1690_p1;
wire   [0:0] icmp_ln1496_66_fu_1874_p2;
wire   [0:0] icmp_ln1496_67_fu_1892_p2;
wire   [15:0] select_ln65_95_fu_1884_p3;
wire   [15:0] select_ln65_97_fu_1906_p3;
wire   [0:0] icmp_ln1496_68_fu_1914_p2;
wire   [1:0] select_ln65_96_fu_1898_p3;
wire   [1:0] zext_ln65_16_fu_1880_p1;
wire   [1:0] select_ln65_98_fu_1920_p3;
wire   [3:0] phi_ln65_17_fu_1936_p17;
wire   [0:0] icmp_ln1496_69_fu_1974_p2;
wire   [0:0] icmp_ln1496_70_fu_1996_p2;
wire   [15:0] select_ln65_100_fu_1988_p3;
wire   [15:0] select_ln65_102_fu_2010_p3;
wire   [0:0] icmp_ln1496_71_fu_2018_p2;
wire   [2:0] select_ln65_117_fu_2002_p3;
wire   [2:0] select_ln65_99_fu_1980_p3;
wire   [2:0] select_ln65_103_fu_2024_p3;
wire   [3:0] phi_ln65_18_fu_2036_p17;
wire   [15:0] phi_ln65_17_fu_1936_p18;
wire   [15:0] phi_ln65_18_fu_2036_p18;
wire   [0:0] icmp_ln1496_72_fu_2074_p2;
wire   [2:0] zext_ln65_17_fu_1928_p1;
wire   [3:0] zext_ln65_9_fu_2118_p1;
wire   [15:0] select_ln65_42_fu_2150_p3;
wire   [15:0] select_ln65_44_fu_2162_p3;
wire   [0:0] icmp_ln1496_32_fu_2167_p2;
wire   [3:0] select_ln65_43_fu_2155_p3;
wire   [3:0] select_ln65_41_fu_2143_p3;
wire   [3:0] select_ln65_45_fu_2173_p3;
wire   [15:0] select_ln65_47_fu_2210_p3;
wire   [15:0] select_ln65_49_fu_2222_p3;
wire   [0:0] icmp_ln1496_35_fu_2227_p2;
wire   [2:0] select_ln65_52_fu_2215_p3;
wire   [2:0] select_ln65_46_fu_2203_p3;
wire   [2:0] select_ln65_50_fu_2233_p3;
wire  signed [3:0] sext_ln65_fu_2241_p1;
wire   [15:0] phi_ln65_3_fu_2181_p18;
wire   [15:0] phi_ln65_4_fu_2245_p18;
wire   [0:0] icmp_ln1496_36_fu_2267_p2;
wire   [3:0] select_ln65_51_fu_2273_p3;
wire   [15:0] phi_ln65_2_fu_2121_p18;
wire   [15:0] phi_ln65_5_fu_2281_p18;
wire   [0:0] icmp_ln1496_37_fu_2303_p2;
wire   [3:0] tmp_data_0_V_fu_2317_p17;
wire   [3:0] zext_ln65_12_fu_2340_p1;
wire   [15:0] select_ln65_64_fu_2372_p3;
wire   [15:0] select_ln65_66_fu_2384_p3;
wire   [0:0] icmp_ln1496_46_fu_2389_p2;
wire   [3:0] select_ln65_65_fu_2377_p3;
wire   [3:0] select_ln65_63_fu_2365_p3;
wire   [3:0] select_ln65_67_fu_2395_p3;
wire   [15:0] select_ln65_69_fu_2432_p3;
wire   [15:0] select_ln65_71_fu_2444_p3;
wire   [0:0] icmp_ln1496_49_fu_2449_p2;
wire   [2:0] select_ln65_80_fu_2437_p3;
wire   [2:0] select_ln65_68_fu_2425_p3;
wire   [2:0] select_ln65_72_fu_2455_p3;
wire  signed [3:0] sext_ln65_1_fu_2463_p1;
wire   [15:0] phi_ln65_9_fu_2403_p18;
wire   [15:0] phi_ln65_s_fu_2467_p18;
wire   [0:0] icmp_ln1496_50_fu_2489_p2;
wire   [3:0] select_ln65_73_fu_2495_p3;
wire   [15:0] phi_ln65_8_fu_2343_p18;
wire   [15:0] phi_ln65_10_fu_2503_p18;
wire   [0:0] icmp_ln1496_51_fu_2525_p2;
wire   [3:0] tmp_data_1_V_fu_2539_p17;
wire   [3:0] zext_ln65_15_fu_2562_p1;
wire   [15:0] select_ln65_85_fu_2594_p3;
wire   [15:0] select_ln65_87_fu_2606_p3;
wire   [0:0] icmp_ln1496_60_fu_2611_p2;
wire   [3:0] select_ln65_86_fu_2599_p3;
wire   [3:0] select_ln65_84_fu_2587_p3;
wire   [3:0] select_ln65_88_fu_2617_p3;
wire   [15:0] select_ln65_90_fu_2654_p3;
wire   [15:0] select_ln65_92_fu_2666_p3;
wire   [0:0] icmp_ln1496_63_fu_2671_p2;
wire   [2:0] select_ln65_112_fu_2659_p3;
wire   [2:0] select_ln65_89_fu_2647_p3;
wire   [2:0] select_ln65_93_fu_2677_p3;
wire  signed [3:0] sext_ln65_2_fu_2685_p1;
wire   [15:0] phi_ln65_14_fu_2625_p18;
wire   [15:0] phi_ln65_15_fu_2689_p18;
wire   [0:0] icmp_ln1496_64_fu_2711_p2;
wire   [3:0] select_ln65_94_fu_2717_p3;
wire   [15:0] phi_ln65_13_fu_2565_p18;
wire   [15:0] phi_ln65_16_fu_2725_p18;
wire   [0:0] icmp_ln1496_65_fu_2747_p2;
wire   [3:0] tmp_data_2_V_fu_2761_p17;
wire   [3:0] zext_ln65_18_fu_2784_p1;
wire   [15:0] select_ln65_106_fu_2816_p3;
wire   [15:0] select_ln65_108_fu_2828_p3;
wire   [0:0] icmp_ln1496_75_fu_2833_p2;
wire   [3:0] select_ln65_107_fu_2821_p3;
wire   [3:0] select_ln65_105_fu_2809_p3;
wire   [3:0] select_ln65_109_fu_2839_p3;
wire   [15:0] select_ln65_111_fu_2876_p3;
wire   [15:0] select_ln65_113_fu_2888_p3;
wire   [0:0] icmp_ln1496_78_fu_2893_p2;
wire   [2:0] select_ln65_118_fu_2881_p3;
wire   [2:0] select_ln65_110_fu_2869_p3;
wire   [2:0] select_ln65_114_fu_2899_p3;
wire  signed [3:0] sext_ln65_3_fu_2907_p1;
wire   [15:0] phi_ln65_20_fu_2847_p18;
wire   [15:0] phi_ln65_21_fu_2911_p18;
wire   [0:0] icmp_ln1496_79_fu_2933_p2;
wire   [3:0] select_ln65_115_fu_2939_p3;
wire   [15:0] phi_ln65_19_fu_2787_p18;
wire   [15:0] phi_ln65_22_fu_2947_p18;
wire   [0:0] icmp_ln1496_80_fu_2969_p2;
wire   [3:0] tmp_data_3_V_fu_2983_p17;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_303;
reg    ap_condition_500;
reg    ap_condition_284;
reg    ap_condition_493;
reg    ap_condition_506;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 pX_1 = 32'd0;
#0 sX_1 = 32'd0;
#0 pY_1 = 32'd0;
#0 sY_1 = 32'd0;
#0 kernel_data_V_2_4 = 16'd0;
#0 kernel_data_V_2_5 = 16'd0;
#0 kernel_data_V_2_6 = 16'd0;
#0 kernel_data_V_2_7 = 16'd0;
#0 kernel_data_V_2_20 = 16'd0;
#0 kernel_data_V_2_21 = 16'd0;
#0 kernel_data_V_2_22 = 16'd0;
#0 kernel_data_V_2_23 = 16'd0;
#0 kernel_data_V_2_36 = 16'd0;
#0 kernel_data_V_2_37 = 16'd0;
#0 kernel_data_V_2_38 = 16'd0;
#0 kernel_data_V_2_39 = 16'd0;
#0 kernel_data_V_2_52 = 16'd0;
#0 kernel_data_V_2_53 = 16'd0;
#0 kernel_data_V_2_54 = 16'd0;
#0 kernel_data_V_2_55 = 16'd0;
#0 kernel_data_V_2_8 = 16'd0;
#0 kernel_data_V_2_9 = 16'd0;
#0 kernel_data_V_2_10 = 16'd0;
#0 kernel_data_V_2_11 = 16'd0;
#0 kernel_data_V_2_24 = 16'd0;
#0 kernel_data_V_2_25 = 16'd0;
#0 kernel_data_V_2_26 = 16'd0;
#0 kernel_data_V_2_27 = 16'd0;
#0 kernel_data_V_2_40 = 16'd0;
#0 kernel_data_V_2_41 = 16'd0;
#0 kernel_data_V_2_42 = 16'd0;
#0 kernel_data_V_2_43 = 16'd0;
#0 kernel_data_V_2_56 = 16'd0;
#0 kernel_data_V_2_57 = 16'd0;
#0 kernel_data_V_2_58 = 16'd0;
#0 kernel_data_V_2_59 = 16'd0;
#0 kernel_data_V_2_12 = 16'd0;
#0 kernel_data_V_2_13 = 16'd0;
#0 kernel_data_V_2_14 = 16'd0;
#0 kernel_data_V_2_15 = 16'd0;
#0 kernel_data_V_2_28 = 16'd0;
#0 kernel_data_V_2_29 = 16'd0;
#0 kernel_data_V_2_30 = 16'd0;
#0 kernel_data_V_2_31 = 16'd0;
#0 kernel_data_V_2_44 = 16'd0;
#0 kernel_data_V_2_45 = 16'd0;
#0 kernel_data_V_2_46 = 16'd0;
#0 kernel_data_V_2_47 = 16'd0;
#0 kernel_data_V_2_60 = 16'd0;
#0 kernel_data_V_2_61 = 16'd0;
#0 kernel_data_V_2_62 = 16'd0;
#0 kernel_data_V_2_63 = 16'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_0_ce0),
    .we0(line_buffer_Array_V_2_0_0_we0),
    .d0(data_V_data_0_V_dout),
    .q0(line_buffer_Array_V_2_0_0_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_1_0_ce0),
    .we0(line_buffer_Array_V_2_1_0_we0),
    .d0(line_buffer_Array_V_2_0_0_q0),
    .q0(line_buffer_Array_V_2_1_0_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_2_0_ce0),
    .we0(line_buffer_Array_V_2_2_0_we0),
    .d0(line_buffer_Array_V_2_1_0_q0),
    .q0(line_buffer_Array_V_2_2_0_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_1_ce0),
    .we0(line_buffer_Array_V_2_0_1_we0),
    .d0(data_V_data_1_V_dout),
    .q0(line_buffer_Array_V_2_0_1_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_1_1_ce0),
    .we0(line_buffer_Array_V_2_1_1_we0),
    .d0(line_buffer_Array_V_2_0_1_q0),
    .q0(line_buffer_Array_V_2_1_1_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_2_1_ce0),
    .we0(line_buffer_Array_V_2_2_1_we0),
    .d0(line_buffer_Array_V_2_1_1_q0),
    .q0(line_buffer_Array_V_2_2_1_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_2_ce0),
    .we0(line_buffer_Array_V_2_0_2_we0),
    .d0(data_V_data_2_V_dout),
    .q0(line_buffer_Array_V_2_0_2_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_1_2_ce0),
    .we0(line_buffer_Array_V_2_1_2_we0),
    .d0(line_buffer_Array_V_2_0_2_q0),
    .q0(line_buffer_Array_V_2_1_2_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_2_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_2_2_ce0),
    .we0(line_buffer_Array_V_2_2_2_we0),
    .d0(line_buffer_Array_V_2_1_2_q0),
    .q0(line_buffer_Array_V_2_2_2_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_3_ce0),
    .we0(line_buffer_Array_V_2_0_3_we0),
    .d0(data_V_data_3_V_dout),
    .q0(line_buffer_Array_V_2_0_3_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_1_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_1_3_ce0),
    .we0(line_buffer_Array_V_2_1_3_we0),
    .d0(line_buffer_Array_V_2_0_3_q0),
    .q0(line_buffer_Array_V_2_1_3_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_2_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_2_3_ce0),
    .we0(line_buffer_Array_V_2_2_3_we0),
    .d0(line_buffer_Array_V_2_1_3_q0),
    .q0(line_buffer_Array_V_2_2_3_q0)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U32(
    .din0(kernel_data_V_2_4),
    .din1(kernel_data_V_2_8),
    .din2(kernel_data_V_2_12),
    .din3(line_buffer_Array_V_2_2_0_q0),
    .din4(line_buffer_Array_V_2_2_0_q0),
    .din5(line_buffer_Array_V_2_2_0_q0),
    .din6(line_buffer_Array_V_2_2_0_q0),
    .din7(line_buffer_Array_V_2_2_0_q0),
    .din8(line_buffer_Array_V_2_2_0_q0),
    .din9(line_buffer_Array_V_2_2_0_q0),
    .din10(line_buffer_Array_V_2_2_0_q0),
    .din11(line_buffer_Array_V_2_2_0_q0),
    .din12(line_buffer_Array_V_2_2_0_q0),
    .din13(line_buffer_Array_V_2_2_0_q0),
    .din14(line_buffer_Array_V_2_2_0_q0),
    .din15(line_buffer_Array_V_2_2_0_q0),
    .din16(phi_ln_fu_1222_p17),
    .dout(phi_ln_fu_1222_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U33(
    .din0(line_buffer_Array_V_2_1_0_q0),
    .din1(line_buffer_Array_V_2_1_0_q0),
    .din2(line_buffer_Array_V_2_1_0_q0),
    .din3(line_buffer_Array_V_2_1_0_q0),
    .din4(kernel_data_V_2_20),
    .din5(kernel_data_V_2_24),
    .din6(kernel_data_V_2_28),
    .din7(line_buffer_Array_V_2_1_0_q0),
    .din8(line_buffer_Array_V_2_1_0_q0),
    .din9(line_buffer_Array_V_2_1_0_q0),
    .din10(line_buffer_Array_V_2_1_0_q0),
    .din11(line_buffer_Array_V_2_1_0_q0),
    .din12(line_buffer_Array_V_2_1_0_q0),
    .din13(line_buffer_Array_V_2_1_0_q0),
    .din14(line_buffer_Array_V_2_1_0_q0),
    .din15(line_buffer_Array_V_2_1_0_q0),
    .din16(phi_ln65_1_fu_1322_p17),
    .dout(phi_ln65_1_fu_1322_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U34(
    .din0(kernel_data_V_2_5),
    .din1(kernel_data_V_2_9),
    .din2(kernel_data_V_2_13),
    .din3(line_buffer_Array_V_2_2_1_q0),
    .din4(line_buffer_Array_V_2_2_1_q0),
    .din5(line_buffer_Array_V_2_2_1_q0),
    .din6(line_buffer_Array_V_2_2_1_q0),
    .din7(line_buffer_Array_V_2_2_1_q0),
    .din8(line_buffer_Array_V_2_2_1_q0),
    .din9(line_buffer_Array_V_2_2_1_q0),
    .din10(line_buffer_Array_V_2_2_1_q0),
    .din11(line_buffer_Array_V_2_2_1_q0),
    .din12(line_buffer_Array_V_2_2_1_q0),
    .din13(line_buffer_Array_V_2_2_1_q0),
    .din14(line_buffer_Array_V_2_2_1_q0),
    .din15(line_buffer_Array_V_2_2_1_q0),
    .din16(phi_ln65_6_fu_1460_p17),
    .dout(phi_ln65_6_fu_1460_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U35(
    .din0(line_buffer_Array_V_2_1_1_q0),
    .din1(line_buffer_Array_V_2_1_1_q0),
    .din2(line_buffer_Array_V_2_1_1_q0),
    .din3(line_buffer_Array_V_2_1_1_q0),
    .din4(kernel_data_V_2_21),
    .din5(kernel_data_V_2_25),
    .din6(kernel_data_V_2_29),
    .din7(line_buffer_Array_V_2_1_1_q0),
    .din8(line_buffer_Array_V_2_1_1_q0),
    .din9(line_buffer_Array_V_2_1_1_q0),
    .din10(line_buffer_Array_V_2_1_1_q0),
    .din11(line_buffer_Array_V_2_1_1_q0),
    .din12(line_buffer_Array_V_2_1_1_q0),
    .din13(line_buffer_Array_V_2_1_1_q0),
    .din14(line_buffer_Array_V_2_1_1_q0),
    .din15(line_buffer_Array_V_2_1_1_q0),
    .din16(phi_ln65_7_fu_1560_p17),
    .dout(phi_ln65_7_fu_1560_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U36(
    .din0(kernel_data_V_2_6),
    .din1(kernel_data_V_2_10),
    .din2(kernel_data_V_2_14),
    .din3(line_buffer_Array_V_2_2_2_q0),
    .din4(line_buffer_Array_V_2_2_2_q0),
    .din5(line_buffer_Array_V_2_2_2_q0),
    .din6(line_buffer_Array_V_2_2_2_q0),
    .din7(line_buffer_Array_V_2_2_2_q0),
    .din8(line_buffer_Array_V_2_2_2_q0),
    .din9(line_buffer_Array_V_2_2_2_q0),
    .din10(line_buffer_Array_V_2_2_2_q0),
    .din11(line_buffer_Array_V_2_2_2_q0),
    .din12(line_buffer_Array_V_2_2_2_q0),
    .din13(line_buffer_Array_V_2_2_2_q0),
    .din14(line_buffer_Array_V_2_2_2_q0),
    .din15(line_buffer_Array_V_2_2_2_q0),
    .din16(phi_ln65_11_fu_1698_p17),
    .dout(phi_ln65_11_fu_1698_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U37(
    .din0(line_buffer_Array_V_2_1_2_q0),
    .din1(line_buffer_Array_V_2_1_2_q0),
    .din2(line_buffer_Array_V_2_1_2_q0),
    .din3(line_buffer_Array_V_2_1_2_q0),
    .din4(kernel_data_V_2_22),
    .din5(kernel_data_V_2_26),
    .din6(kernel_data_V_2_30),
    .din7(line_buffer_Array_V_2_1_2_q0),
    .din8(line_buffer_Array_V_2_1_2_q0),
    .din9(line_buffer_Array_V_2_1_2_q0),
    .din10(line_buffer_Array_V_2_1_2_q0),
    .din11(line_buffer_Array_V_2_1_2_q0),
    .din12(line_buffer_Array_V_2_1_2_q0),
    .din13(line_buffer_Array_V_2_1_2_q0),
    .din14(line_buffer_Array_V_2_1_2_q0),
    .din15(line_buffer_Array_V_2_1_2_q0),
    .din16(phi_ln65_12_fu_1798_p17),
    .dout(phi_ln65_12_fu_1798_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U38(
    .din0(kernel_data_V_2_7),
    .din1(kernel_data_V_2_11),
    .din2(kernel_data_V_2_15),
    .din3(line_buffer_Array_V_2_2_3_q0),
    .din4(line_buffer_Array_V_2_2_3_q0),
    .din5(line_buffer_Array_V_2_2_3_q0),
    .din6(line_buffer_Array_V_2_2_3_q0),
    .din7(line_buffer_Array_V_2_2_3_q0),
    .din8(line_buffer_Array_V_2_2_3_q0),
    .din9(line_buffer_Array_V_2_2_3_q0),
    .din10(line_buffer_Array_V_2_2_3_q0),
    .din11(line_buffer_Array_V_2_2_3_q0),
    .din12(line_buffer_Array_V_2_2_3_q0),
    .din13(line_buffer_Array_V_2_2_3_q0),
    .din14(line_buffer_Array_V_2_2_3_q0),
    .din15(line_buffer_Array_V_2_2_3_q0),
    .din16(phi_ln65_17_fu_1936_p17),
    .dout(phi_ln65_17_fu_1936_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U39(
    .din0(line_buffer_Array_V_2_1_3_q0),
    .din1(line_buffer_Array_V_2_1_3_q0),
    .din2(line_buffer_Array_V_2_1_3_q0),
    .din3(line_buffer_Array_V_2_1_3_q0),
    .din4(kernel_data_V_2_23),
    .din5(kernel_data_V_2_27),
    .din6(kernel_data_V_2_31),
    .din7(line_buffer_Array_V_2_1_3_q0),
    .din8(line_buffer_Array_V_2_1_3_q0),
    .din9(line_buffer_Array_V_2_1_3_q0),
    .din10(line_buffer_Array_V_2_1_3_q0),
    .din11(line_buffer_Array_V_2_1_3_q0),
    .din12(line_buffer_Array_V_2_1_3_q0),
    .din13(line_buffer_Array_V_2_1_3_q0),
    .din14(line_buffer_Array_V_2_1_3_q0),
    .din15(line_buffer_Array_V_2_1_3_q0),
    .din16(phi_ln65_18_fu_2036_p17),
    .dout(phi_ln65_18_fu_2036_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U40(
    .din0(pool_window_0_V_reg_3304),
    .din1(pool_window_1_V_reg_3416),
    .din2(pool_window_2_V_reg_3528),
    .din3(pool_window_3_V_reg_3178),
    .din4(pool_window_4_V_reg_3328),
    .din5(pool_window_5_V_reg_3440),
    .din6(pool_window_6_V_reg_3552),
    .din7(pool_window_7_V_reg_3164),
    .din8(pool_window_7_V_reg_3164),
    .din9(pool_window_7_V_reg_3164),
    .din10(pool_window_7_V_reg_3164),
    .din11(pool_window_7_V_reg_3164),
    .din12(pool_window_7_V_reg_3164),
    .din13(pool_window_7_V_reg_3164),
    .din14(pool_window_7_V_reg_3164),
    .din15(pool_window_7_V_reg_3164),
    .din16(zext_ln65_9_fu_2118_p1),
    .dout(phi_ln65_2_fu_2121_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U41(
    .din0(pool_window_11_V_reg_3144),
    .din1(pool_window_11_V_reg_3144),
    .din2(pool_window_11_V_reg_3144),
    .din3(pool_window_11_V_reg_3144),
    .din4(pool_window_11_V_reg_3144),
    .din5(pool_window_11_V_reg_3144),
    .din6(pool_window_11_V_reg_3144),
    .din7(pool_window_11_V_reg_3144),
    .din8(pool_window_8_V_reg_3352),
    .din9(pool_window_9_V_reg_3464),
    .din10(pool_window_10_V_reg_3576),
    .din11(pool_window_11_V_reg_3144),
    .din12(pool_window_11_V_reg_3144),
    .din13(pool_window_11_V_reg_3144),
    .din14(pool_window_11_V_reg_3144),
    .din15(pool_window_11_V_reg_3144),
    .din16(select_ln65_45_fu_2173_p3),
    .dout(phi_ln65_3_fu_2181_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U42(
    .din0(pool_window_15_V_reg_3032),
    .din1(pool_window_15_V_reg_3032),
    .din2(pool_window_15_V_reg_3032),
    .din3(pool_window_15_V_reg_3032),
    .din4(pool_window_15_V_reg_3032),
    .din5(pool_window_15_V_reg_3032),
    .din6(pool_window_15_V_reg_3032),
    .din7(pool_window_15_V_reg_3032),
    .din8(pool_window_15_V_reg_3032),
    .din9(pool_window_15_V_reg_3032),
    .din10(pool_window_15_V_reg_3032),
    .din11(pool_window_15_V_reg_3032),
    .din12(pool_window_12_V_reg_3384),
    .din13(pool_window_13_V_reg_3496),
    .din14(pool_window_14_V_reg_3608),
    .din15(pool_window_15_V_reg_3032),
    .din16(sext_ln65_fu_2241_p1),
    .dout(phi_ln65_4_fu_2245_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U43(
    .din0(pool_window_15_V_reg_3032),
    .din1(pool_window_15_V_reg_3032),
    .din2(pool_window_15_V_reg_3032),
    .din3(pool_window_15_V_reg_3032),
    .din4(pool_window_15_V_reg_3032),
    .din5(pool_window_15_V_reg_3032),
    .din6(pool_window_15_V_reg_3032),
    .din7(pool_window_15_V_reg_3032),
    .din8(pool_window_8_V_reg_3352),
    .din9(pool_window_9_V_reg_3464),
    .din10(pool_window_10_V_reg_3576),
    .din11(pool_window_11_V_reg_3144),
    .din12(pool_window_12_V_reg_3384),
    .din13(pool_window_13_V_reg_3496),
    .din14(pool_window_14_V_reg_3608),
    .din15(pool_window_15_V_reg_3032),
    .din16(select_ln65_51_fu_2273_p3),
    .dout(phi_ln65_5_fu_2281_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U44(
    .din0(pool_window_0_V_reg_3304),
    .din1(pool_window_1_V_reg_3416),
    .din2(pool_window_2_V_reg_3528),
    .din3(pool_window_3_V_reg_3178),
    .din4(pool_window_4_V_reg_3328),
    .din5(pool_window_5_V_reg_3440),
    .din6(pool_window_6_V_reg_3552),
    .din7(pool_window_7_V_reg_3164),
    .din8(pool_window_8_V_reg_3352),
    .din9(pool_window_9_V_reg_3464),
    .din10(pool_window_10_V_reg_3576),
    .din11(pool_window_11_V_reg_3144),
    .din12(pool_window_12_V_reg_3384),
    .din13(pool_window_13_V_reg_3496),
    .din14(pool_window_14_V_reg_3608),
    .din15(pool_window_15_V_reg_3032),
    .din16(tmp_data_0_V_fu_2317_p17),
    .dout(tmp_data_0_V_fu_2317_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U45(
    .din0(pool_window_0_V_8_reg_3310),
    .din1(pool_window_1_V_8_reg_3422),
    .din2(pool_window_2_V_8_reg_3534),
    .din3(pool_window_3_V_8_reg_3218),
    .din4(pool_window_4_V_1_reg_3334),
    .din5(pool_window_5_V_1_reg_3446),
    .din6(pool_window_6_V_1_reg_3558),
    .din7(pool_window_7_V_1_reg_3204),
    .din8(pool_window_7_V_1_reg_3204),
    .din9(pool_window_7_V_1_reg_3204),
    .din10(pool_window_7_V_1_reg_3204),
    .din11(pool_window_7_V_1_reg_3204),
    .din12(pool_window_7_V_1_reg_3204),
    .din13(pool_window_7_V_1_reg_3204),
    .din14(pool_window_7_V_1_reg_3204),
    .din15(pool_window_7_V_1_reg_3204),
    .din16(zext_ln65_12_fu_2340_p1),
    .dout(phi_ln65_8_fu_2343_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U46(
    .din0(pool_window_11_V_1_reg_3184),
    .din1(pool_window_11_V_1_reg_3184),
    .din2(pool_window_11_V_1_reg_3184),
    .din3(pool_window_11_V_1_reg_3184),
    .din4(pool_window_11_V_1_reg_3184),
    .din5(pool_window_11_V_1_reg_3184),
    .din6(pool_window_11_V_1_reg_3184),
    .din7(pool_window_11_V_1_reg_3184),
    .din8(pool_window_8_V_1_reg_3360),
    .din9(pool_window_9_V_1_reg_3472),
    .din10(pool_window_10_V_1_reg_3584),
    .din11(pool_window_11_V_1_reg_3184),
    .din12(pool_window_11_V_1_reg_3184),
    .din13(pool_window_11_V_1_reg_3184),
    .din14(pool_window_11_V_1_reg_3184),
    .din15(pool_window_11_V_1_reg_3184),
    .din16(select_ln65_67_fu_2395_p3),
    .dout(phi_ln65_9_fu_2403_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U47(
    .din0(pool_window_15_V_1_reg_3060),
    .din1(pool_window_15_V_1_reg_3060),
    .din2(pool_window_15_V_1_reg_3060),
    .din3(pool_window_15_V_1_reg_3060),
    .din4(pool_window_15_V_1_reg_3060),
    .din5(pool_window_15_V_1_reg_3060),
    .din6(pool_window_15_V_1_reg_3060),
    .din7(pool_window_15_V_1_reg_3060),
    .din8(pool_window_15_V_1_reg_3060),
    .din9(pool_window_15_V_1_reg_3060),
    .din10(pool_window_15_V_1_reg_3060),
    .din11(pool_window_15_V_1_reg_3060),
    .din12(pool_window_12_V_1_reg_3392),
    .din13(pool_window_13_V_1_reg_3504),
    .din14(pool_window_14_V_1_reg_3616),
    .din15(pool_window_15_V_1_reg_3060),
    .din16(sext_ln65_1_fu_2463_p1),
    .dout(phi_ln65_s_fu_2467_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U48(
    .din0(pool_window_15_V_1_reg_3060),
    .din1(pool_window_15_V_1_reg_3060),
    .din2(pool_window_15_V_1_reg_3060),
    .din3(pool_window_15_V_1_reg_3060),
    .din4(pool_window_15_V_1_reg_3060),
    .din5(pool_window_15_V_1_reg_3060),
    .din6(pool_window_15_V_1_reg_3060),
    .din7(pool_window_15_V_1_reg_3060),
    .din8(pool_window_8_V_1_reg_3360),
    .din9(pool_window_9_V_1_reg_3472),
    .din10(pool_window_10_V_1_reg_3584),
    .din11(pool_window_11_V_1_reg_3184),
    .din12(pool_window_12_V_1_reg_3392),
    .din13(pool_window_13_V_1_reg_3504),
    .din14(pool_window_14_V_1_reg_3616),
    .din15(pool_window_15_V_1_reg_3060),
    .din16(select_ln65_73_fu_2495_p3),
    .dout(phi_ln65_10_fu_2503_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U49(
    .din0(pool_window_0_V_8_reg_3310),
    .din1(pool_window_1_V_8_reg_3422),
    .din2(pool_window_2_V_8_reg_3534),
    .din3(pool_window_3_V_8_reg_3218),
    .din4(pool_window_4_V_1_reg_3334),
    .din5(pool_window_5_V_1_reg_3446),
    .din6(pool_window_6_V_1_reg_3558),
    .din7(pool_window_7_V_1_reg_3204),
    .din8(pool_window_8_V_1_reg_3360),
    .din9(pool_window_9_V_1_reg_3472),
    .din10(pool_window_10_V_1_reg_3584),
    .din11(pool_window_11_V_1_reg_3184),
    .din12(pool_window_12_V_1_reg_3392),
    .din13(pool_window_13_V_1_reg_3504),
    .din14(pool_window_14_V_1_reg_3616),
    .din15(pool_window_15_V_1_reg_3060),
    .din16(tmp_data_1_V_fu_2539_p17),
    .dout(tmp_data_1_V_fu_2539_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U50(
    .din0(pool_window_0_V_9_reg_3316),
    .din1(pool_window_1_V_9_reg_3428),
    .din2(pool_window_2_V_9_reg_3540),
    .din3(pool_window_3_V_9_reg_3258),
    .din4(pool_window_4_V_2_reg_3340),
    .din5(pool_window_5_V_2_reg_3452),
    .din6(pool_window_6_V_2_reg_3564),
    .din7(pool_window_7_V_2_reg_3244),
    .din8(pool_window_7_V_2_reg_3244),
    .din9(pool_window_7_V_2_reg_3244),
    .din10(pool_window_7_V_2_reg_3244),
    .din11(pool_window_7_V_2_reg_3244),
    .din12(pool_window_7_V_2_reg_3244),
    .din13(pool_window_7_V_2_reg_3244),
    .din14(pool_window_7_V_2_reg_3244),
    .din15(pool_window_7_V_2_reg_3244),
    .din16(zext_ln65_15_fu_2562_p1),
    .dout(phi_ln65_13_fu_2565_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U51(
    .din0(pool_window_11_V_2_reg_3224),
    .din1(pool_window_11_V_2_reg_3224),
    .din2(pool_window_11_V_2_reg_3224),
    .din3(pool_window_11_V_2_reg_3224),
    .din4(pool_window_11_V_2_reg_3224),
    .din5(pool_window_11_V_2_reg_3224),
    .din6(pool_window_11_V_2_reg_3224),
    .din7(pool_window_11_V_2_reg_3224),
    .din8(pool_window_8_V_2_reg_3368),
    .din9(pool_window_9_V_2_reg_3480),
    .din10(pool_window_10_V_2_reg_3592),
    .din11(pool_window_11_V_2_reg_3224),
    .din12(pool_window_11_V_2_reg_3224),
    .din13(pool_window_11_V_2_reg_3224),
    .din14(pool_window_11_V_2_reg_3224),
    .din15(pool_window_11_V_2_reg_3224),
    .din16(select_ln65_88_fu_2617_p3),
    .dout(phi_ln65_14_fu_2625_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U52(
    .din0(pool_window_15_V_2_reg_3088),
    .din1(pool_window_15_V_2_reg_3088),
    .din2(pool_window_15_V_2_reg_3088),
    .din3(pool_window_15_V_2_reg_3088),
    .din4(pool_window_15_V_2_reg_3088),
    .din5(pool_window_15_V_2_reg_3088),
    .din6(pool_window_15_V_2_reg_3088),
    .din7(pool_window_15_V_2_reg_3088),
    .din8(pool_window_15_V_2_reg_3088),
    .din9(pool_window_15_V_2_reg_3088),
    .din10(pool_window_15_V_2_reg_3088),
    .din11(pool_window_15_V_2_reg_3088),
    .din12(pool_window_12_V_2_reg_3400),
    .din13(pool_window_13_V_2_reg_3512),
    .din14(pool_window_14_V_2_reg_3624),
    .din15(pool_window_15_V_2_reg_3088),
    .din16(sext_ln65_2_fu_2685_p1),
    .dout(phi_ln65_15_fu_2689_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U53(
    .din0(pool_window_15_V_2_reg_3088),
    .din1(pool_window_15_V_2_reg_3088),
    .din2(pool_window_15_V_2_reg_3088),
    .din3(pool_window_15_V_2_reg_3088),
    .din4(pool_window_15_V_2_reg_3088),
    .din5(pool_window_15_V_2_reg_3088),
    .din6(pool_window_15_V_2_reg_3088),
    .din7(pool_window_15_V_2_reg_3088),
    .din8(pool_window_8_V_2_reg_3368),
    .din9(pool_window_9_V_2_reg_3480),
    .din10(pool_window_10_V_2_reg_3592),
    .din11(pool_window_11_V_2_reg_3224),
    .din12(pool_window_12_V_2_reg_3400),
    .din13(pool_window_13_V_2_reg_3512),
    .din14(pool_window_14_V_2_reg_3624),
    .din15(pool_window_15_V_2_reg_3088),
    .din16(select_ln65_94_fu_2717_p3),
    .dout(phi_ln65_16_fu_2725_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U54(
    .din0(pool_window_0_V_9_reg_3316),
    .din1(pool_window_1_V_9_reg_3428),
    .din2(pool_window_2_V_9_reg_3540),
    .din3(pool_window_3_V_9_reg_3258),
    .din4(pool_window_4_V_2_reg_3340),
    .din5(pool_window_5_V_2_reg_3452),
    .din6(pool_window_6_V_2_reg_3564),
    .din7(pool_window_7_V_2_reg_3244),
    .din8(pool_window_8_V_2_reg_3368),
    .din9(pool_window_9_V_2_reg_3480),
    .din10(pool_window_10_V_2_reg_3592),
    .din11(pool_window_11_V_2_reg_3224),
    .din12(pool_window_12_V_2_reg_3400),
    .din13(pool_window_13_V_2_reg_3512),
    .din14(pool_window_14_V_2_reg_3624),
    .din15(pool_window_15_V_2_reg_3088),
    .din16(tmp_data_2_V_fu_2761_p17),
    .dout(tmp_data_2_V_fu_2761_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U55(
    .din0(pool_window_0_V_10_reg_3322),
    .din1(pool_window_1_V_10_reg_3434),
    .din2(pool_window_2_V_10_reg_3546),
    .din3(pool_window_3_V_10_reg_3298),
    .din4(pool_window_4_V_3_reg_3346),
    .din5(pool_window_5_V_3_reg_3458),
    .din6(pool_window_6_V_3_reg_3570),
    .din7(pool_window_7_V_3_reg_3284),
    .din8(pool_window_7_V_3_reg_3284),
    .din9(pool_window_7_V_3_reg_3284),
    .din10(pool_window_7_V_3_reg_3284),
    .din11(pool_window_7_V_3_reg_3284),
    .din12(pool_window_7_V_3_reg_3284),
    .din13(pool_window_7_V_3_reg_3284),
    .din14(pool_window_7_V_3_reg_3284),
    .din15(pool_window_7_V_3_reg_3284),
    .din16(zext_ln65_18_fu_2784_p1),
    .dout(phi_ln65_19_fu_2787_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U56(
    .din0(pool_window_11_V_3_reg_3264),
    .din1(pool_window_11_V_3_reg_3264),
    .din2(pool_window_11_V_3_reg_3264),
    .din3(pool_window_11_V_3_reg_3264),
    .din4(pool_window_11_V_3_reg_3264),
    .din5(pool_window_11_V_3_reg_3264),
    .din6(pool_window_11_V_3_reg_3264),
    .din7(pool_window_11_V_3_reg_3264),
    .din8(pool_window_8_V_3_reg_3376),
    .din9(pool_window_9_V_3_reg_3488),
    .din10(pool_window_10_V_3_reg_3600),
    .din11(pool_window_11_V_3_reg_3264),
    .din12(pool_window_11_V_3_reg_3264),
    .din13(pool_window_11_V_3_reg_3264),
    .din14(pool_window_11_V_3_reg_3264),
    .din15(pool_window_11_V_3_reg_3264),
    .din16(select_ln65_109_fu_2839_p3),
    .dout(phi_ln65_20_fu_2847_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U57(
    .din0(pool_window_15_V_3_reg_3116),
    .din1(pool_window_15_V_3_reg_3116),
    .din2(pool_window_15_V_3_reg_3116),
    .din3(pool_window_15_V_3_reg_3116),
    .din4(pool_window_15_V_3_reg_3116),
    .din5(pool_window_15_V_3_reg_3116),
    .din6(pool_window_15_V_3_reg_3116),
    .din7(pool_window_15_V_3_reg_3116),
    .din8(pool_window_15_V_3_reg_3116),
    .din9(pool_window_15_V_3_reg_3116),
    .din10(pool_window_15_V_3_reg_3116),
    .din11(pool_window_15_V_3_reg_3116),
    .din12(pool_window_12_V_3_reg_3408),
    .din13(pool_window_13_V_3_reg_3520),
    .din14(pool_window_14_V_3_reg_3632),
    .din15(pool_window_15_V_3_reg_3116),
    .din16(sext_ln65_3_fu_2907_p1),
    .dout(phi_ln65_21_fu_2911_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U58(
    .din0(pool_window_15_V_3_reg_3116),
    .din1(pool_window_15_V_3_reg_3116),
    .din2(pool_window_15_V_3_reg_3116),
    .din3(pool_window_15_V_3_reg_3116),
    .din4(pool_window_15_V_3_reg_3116),
    .din5(pool_window_15_V_3_reg_3116),
    .din6(pool_window_15_V_3_reg_3116),
    .din7(pool_window_15_V_3_reg_3116),
    .din8(pool_window_8_V_3_reg_3376),
    .din9(pool_window_9_V_3_reg_3488),
    .din10(pool_window_10_V_3_reg_3600),
    .din11(pool_window_11_V_3_reg_3264),
    .din12(pool_window_12_V_3_reg_3408),
    .din13(pool_window_13_V_3_reg_3520),
    .din14(pool_window_14_V_3_reg_3632),
    .din15(pool_window_15_V_3_reg_3116),
    .din16(select_ln65_115_fu_2939_p3),
    .dout(phi_ln65_22_fu_2947_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U59(
    .din0(pool_window_0_V_10_reg_3322),
    .din1(pool_window_1_V_10_reg_3434),
    .din2(pool_window_2_V_10_reg_3546),
    .din3(pool_window_3_V_10_reg_3298),
    .din4(pool_window_4_V_3_reg_3346),
    .din5(pool_window_5_V_3_reg_3458),
    .din6(pool_window_6_V_3_reg_3570),
    .din7(pool_window_7_V_3_reg_3284),
    .din8(pool_window_8_V_3_reg_3376),
    .din9(pool_window_9_V_3_reg_3488),
    .din10(pool_window_10_V_3_reg_3600),
    .din11(pool_window_11_V_3_reg_3264),
    .din12(pool_window_12_V_3_reg_3408),
    .din13(pool_window_13_V_3_reg_3520),
    .din14(pool_window_14_V_3_reg_3632),
    .din15(pool_window_15_V_3_reg_3116),
    .din16(tmp_data_3_V_fu_2983_p17),
    .dout(tmp_data_3_V_fu_2983_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_284)) begin
        if ((1'b1 == ap_condition_500)) begin
            ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375 <= 32'd0;
        end else if ((1'b1 == ap_condition_303)) begin
            ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375 <= select_ln222_fu_530_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_375;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_386_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_364 <= add_ln241_fu_392_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_364 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_493)) begin
        if ((icmp_ln212_fu_456_p2 == 1'd1)) begin
            pX_1 <= 32'd0;
        end else if ((icmp_ln212_fu_456_p2 == 1'd0)) begin
            pX_1 <= add_ln225_fu_462_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_506)) begin
        if ((icmp_ln216_fu_506_p2 == 1'd1)) begin
            pY_1 <= 32'd0;
        end else if ((icmp_ln216_fu_506_p2 == 1'd0)) begin
            pY_1 <= add_ln220_fu_512_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_493)) begin
        if ((icmp_ln212_fu_456_p2 == 1'd1)) begin
            sX_1 <= 32'd0;
        end else if ((icmp_ln212_fu_456_p2 == 1'd0)) begin
            sX_1 <= select_ln227_fu_480_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_386_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln191_4_reg_3015 <= and_ln191_4_fu_450_p2;
        icmp_ln212_reg_3019 <= icmp_ln212_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln191_4_reg_3015_pp0_iter1_reg <= and_ln191_4_reg_3015;
        icmp_ln241_reg_3006 <= icmp_ln241_fu_386_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3015) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1496_30_reg_3645 <= icmp_ln1496_30_fu_1374_p2;
        icmp_ln1496_31_reg_3651 <= icmp_ln1496_31_fu_1380_p2;
        icmp_ln1496_33_reg_3657 <= icmp_ln1496_33_fu_1386_p2;
        icmp_ln1496_34_reg_3663 <= icmp_ln1496_34_fu_1392_p2;
        icmp_ln1496_44_reg_3674 <= icmp_ln1496_44_fu_1612_p2;
        icmp_ln1496_45_reg_3680 <= icmp_ln1496_45_fu_1618_p2;
        icmp_ln1496_47_reg_3686 <= icmp_ln1496_47_fu_1624_p2;
        icmp_ln1496_48_reg_3692 <= icmp_ln1496_48_fu_1630_p2;
        icmp_ln1496_58_reg_3703 <= icmp_ln1496_58_fu_1850_p2;
        icmp_ln1496_59_reg_3709 <= icmp_ln1496_59_fu_1856_p2;
        icmp_ln1496_61_reg_3715 <= icmp_ln1496_61_fu_1862_p2;
        icmp_ln1496_62_reg_3721 <= icmp_ln1496_62_fu_1868_p2;
        icmp_ln1496_73_reg_3732 <= icmp_ln1496_73_fu_2088_p2;
        icmp_ln1496_74_reg_3738 <= icmp_ln1496_74_fu_2094_p2;
        icmp_ln1496_76_reg_3744 <= icmp_ln1496_76_fu_2100_p2;
        icmp_ln1496_77_reg_3750 <= icmp_ln1496_77_fu_2106_p2;
        select_ln65_104_reg_3727 <= select_ln65_104_fu_2080_p3;
        select_ln65_40_reg_3640 <= select_ln65_40_fu_1366_p3;
        select_ln65_62_reg_3669 <= select_ln65_62_fu_1604_p3;
        select_ln65_83_reg_3698 <= select_ln65_83_fu_1842_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_data_V_2_10 <= kernel_data_V_2_14;
        kernel_data_V_2_11 <= kernel_data_V_2_15;
        kernel_data_V_2_12 <= line_buffer_Array_V_2_2_0_q0;
        kernel_data_V_2_13 <= line_buffer_Array_V_2_2_1_q0;
        kernel_data_V_2_14 <= line_buffer_Array_V_2_2_2_q0;
        kernel_data_V_2_15 <= line_buffer_Array_V_2_2_3_q0;
        kernel_data_V_2_20 <= kernel_data_V_2_24;
        kernel_data_V_2_21 <= kernel_data_V_2_25;
        kernel_data_V_2_22 <= kernel_data_V_2_26;
        kernel_data_V_2_23 <= kernel_data_V_2_27;
        kernel_data_V_2_24 <= kernel_data_V_2_28;
        kernel_data_V_2_25 <= kernel_data_V_2_29;
        kernel_data_V_2_26 <= kernel_data_V_2_30;
        kernel_data_V_2_27 <= kernel_data_V_2_31;
        kernel_data_V_2_28 <= line_buffer_Array_V_2_1_0_q0;
        kernel_data_V_2_29 <= line_buffer_Array_V_2_1_1_q0;
        kernel_data_V_2_30 <= line_buffer_Array_V_2_1_2_q0;
        kernel_data_V_2_31 <= line_buffer_Array_V_2_1_3_q0;
        kernel_data_V_2_36 <= kernel_data_V_2_40;
        kernel_data_V_2_37 <= kernel_data_V_2_41;
        kernel_data_V_2_38 <= kernel_data_V_2_42;
        kernel_data_V_2_39 <= kernel_data_V_2_43;
        kernel_data_V_2_4 <= kernel_data_V_2_8;
        kernel_data_V_2_40 <= kernel_data_V_2_44;
        kernel_data_V_2_41 <= kernel_data_V_2_45;
        kernel_data_V_2_42 <= kernel_data_V_2_46;
        kernel_data_V_2_43 <= kernel_data_V_2_47;
        kernel_data_V_2_44 <= line_buffer_Array_V_2_0_0_q0;
        kernel_data_V_2_45 <= line_buffer_Array_V_2_0_1_q0;
        kernel_data_V_2_46 <= line_buffer_Array_V_2_0_2_q0;
        kernel_data_V_2_47 <= line_buffer_Array_V_2_0_3_q0;
        kernel_data_V_2_5 <= kernel_data_V_2_9;
        kernel_data_V_2_52 <= kernel_data_V_2_56;
        kernel_data_V_2_53 <= kernel_data_V_2_57;
        kernel_data_V_2_54 <= kernel_data_V_2_58;
        kernel_data_V_2_55 <= kernel_data_V_2_59;
        kernel_data_V_2_56 <= kernel_data_V_2_60;
        kernel_data_V_2_57 <= kernel_data_V_2_61;
        kernel_data_V_2_58 <= kernel_data_V_2_62;
        kernel_data_V_2_59 <= kernel_data_V_2_63;
        kernel_data_V_2_6 <= kernel_data_V_2_10;
        kernel_data_V_2_60 <= data_V_data_0_V_dout;
        kernel_data_V_2_61 <= data_V_data_1_V_dout;
        kernel_data_V_2_62 <= data_V_data_2_V_dout;
        kernel_data_V_2_63 <= data_V_data_3_V_dout;
        kernel_data_V_2_7 <= kernel_data_V_2_11;
        kernel_data_V_2_8 <= kernel_data_V_2_12;
        kernel_data_V_2_9 <= kernel_data_V_2_13;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pool_window_0_V_10_reg_3322 <= kernel_data_V_2_7;
        pool_window_0_V_8_reg_3310 <= kernel_data_V_2_5;
        pool_window_0_V_9_reg_3316 <= kernel_data_V_2_6;
        pool_window_0_V_reg_3304 <= kernel_data_V_2_4;
        pool_window_10_V_1_reg_3584 <= kernel_data_V_2_45;
        pool_window_10_V_2_reg_3592 <= kernel_data_V_2_46;
        pool_window_10_V_3_reg_3600 <= kernel_data_V_2_47;
        pool_window_10_V_reg_3576 <= kernel_data_V_2_44;
        pool_window_11_V_1_reg_3184 <= line_buffer_Array_V_2_0_1_q0;
        pool_window_11_V_2_reg_3224 <= line_buffer_Array_V_2_0_2_q0;
        pool_window_11_V_3_reg_3264 <= line_buffer_Array_V_2_0_3_q0;
        pool_window_11_V_reg_3144 <= line_buffer_Array_V_2_0_0_q0;
        pool_window_12_V_1_reg_3392 <= kernel_data_V_2_53;
        pool_window_12_V_2_reg_3400 <= kernel_data_V_2_54;
        pool_window_12_V_3_reg_3408 <= kernel_data_V_2_55;
        pool_window_12_V_reg_3384 <= kernel_data_V_2_52;
        pool_window_13_V_1_reg_3504 <= kernel_data_V_2_57;
        pool_window_13_V_2_reg_3512 <= kernel_data_V_2_58;
        pool_window_13_V_3_reg_3520 <= kernel_data_V_2_59;
        pool_window_13_V_reg_3496 <= kernel_data_V_2_56;
        pool_window_14_V_1_reg_3616 <= kernel_data_V_2_61;
        pool_window_14_V_2_reg_3624 <= kernel_data_V_2_62;
        pool_window_14_V_3_reg_3632 <= kernel_data_V_2_63;
        pool_window_14_V_reg_3608 <= kernel_data_V_2_60;
        pool_window_15_V_1_reg_3060 <= data_V_data_1_V_dout;
        pool_window_15_V_2_reg_3088 <= data_V_data_2_V_dout;
        pool_window_15_V_3_reg_3116 <= data_V_data_3_V_dout;
        pool_window_15_V_reg_3032 <= data_V_data_0_V_dout;
        pool_window_1_V_10_reg_3434 <= kernel_data_V_2_11;
        pool_window_1_V_8_reg_3422 <= kernel_data_V_2_9;
        pool_window_1_V_9_reg_3428 <= kernel_data_V_2_10;
        pool_window_1_V_reg_3416 <= kernel_data_V_2_8;
        pool_window_2_V_10_reg_3546 <= kernel_data_V_2_15;
        pool_window_2_V_8_reg_3534 <= kernel_data_V_2_13;
        pool_window_2_V_9_reg_3540 <= kernel_data_V_2_14;
        pool_window_2_V_reg_3528 <= kernel_data_V_2_12;
        pool_window_3_V_10_reg_3298 <= line_buffer_Array_V_2_2_3_q0;
        pool_window_3_V_8_reg_3218 <= line_buffer_Array_V_2_2_1_q0;
        pool_window_3_V_9_reg_3258 <= line_buffer_Array_V_2_2_2_q0;
        pool_window_3_V_reg_3178 <= line_buffer_Array_V_2_2_0_q0;
        pool_window_4_V_1_reg_3334 <= kernel_data_V_2_21;
        pool_window_4_V_2_reg_3340 <= kernel_data_V_2_22;
        pool_window_4_V_3_reg_3346 <= kernel_data_V_2_23;
        pool_window_4_V_reg_3328 <= kernel_data_V_2_20;
        pool_window_5_V_1_reg_3446 <= kernel_data_V_2_25;
        pool_window_5_V_2_reg_3452 <= kernel_data_V_2_26;
        pool_window_5_V_3_reg_3458 <= kernel_data_V_2_27;
        pool_window_5_V_reg_3440 <= kernel_data_V_2_24;
        pool_window_6_V_1_reg_3558 <= kernel_data_V_2_29;
        pool_window_6_V_2_reg_3564 <= kernel_data_V_2_30;
        pool_window_6_V_3_reg_3570 <= kernel_data_V_2_31;
        pool_window_6_V_reg_3552 <= kernel_data_V_2_28;
        pool_window_7_V_1_reg_3204 <= line_buffer_Array_V_2_1_1_q0;
        pool_window_7_V_2_reg_3244 <= line_buffer_Array_V_2_1_2_q0;
        pool_window_7_V_3_reg_3284 <= line_buffer_Array_V_2_1_3_q0;
        pool_window_7_V_reg_3164 <= line_buffer_Array_V_2_1_0_q0;
        pool_window_8_V_1_reg_3360 <= kernel_data_V_2_37;
        pool_window_8_V_2_reg_3368 <= kernel_data_V_2_38;
        pool_window_8_V_3_reg_3376 <= kernel_data_V_2_39;
        pool_window_8_V_reg_3352 <= kernel_data_V_2_36;
        pool_window_9_V_1_reg_3472 <= kernel_data_V_2_41;
        pool_window_9_V_2_reg_3480 <= kernel_data_V_2_42;
        pool_window_9_V_3_reg_3488 <= kernel_data_V_2_43;
        pool_window_9_V_reg_3464 <= kernel_data_V_2_40;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_reg_3019 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sY_1 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375;
    end
end

always @ (*) begin
    if ((icmp_ln241_fu_386_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln212_reg_3019 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_sY_1_load = ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375;
    end else begin
        ap_sig_allocacmp_sY_1_load = sY_1;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3006 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3006 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3006 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3006 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_0_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_0_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_0_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_0_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_0_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_0_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_1_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_1_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_1_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_1_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_1_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_1_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_1_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_1_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_1_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_2_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_2_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_2_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_2_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_2_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_2_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_2_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_2_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_2_2_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_2_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3015_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3015_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3015_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3015_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3015_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3015_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3015_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3015_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln241_fu_386_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln241_fu_386_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln220_fu_512_p2 = (pY_1 + 32'd1);

assign add_ln222_fu_524_p2 = (ap_sig_allocacmp_sY_1_load + 32'd1);

assign add_ln225_fu_462_p2 = (pX_1 + 32'd1);

assign add_ln227_fu_474_p2 = (sX_1 + 32'd1);

assign add_ln241_fu_392_p2 = (indvar_flatten_reg_364 + 10'd1);

assign and_ln191_3_fu_444_p2 = (icmp_ln191_6_fu_432_p2 & icmp_ln191_5_fu_422_p2);

assign and_ln191_4_fu_450_p2 = (and_ln191_fu_438_p2 & and_ln191_3_fu_444_p2);

assign and_ln191_fu_438_p2 = (icmp_ln191_fu_402_p2 & icmp_ln191_4_fu_412_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((io_acc_block_signal_op373 == 1'b0) & (1'd1 == and_ln191_4_reg_3015_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((io_acc_block_signal_op57 == 1'b0) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((io_acc_block_signal_op373 == 1'b0) & (1'd1 == and_ln191_4_reg_3015_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((io_acc_block_signal_op57 == 1'b0) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((io_acc_block_signal_op373 == 1'b0) & (1'd1 == and_ln191_4_reg_3015_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((io_acc_block_signal_op57 == 1'b0) & (icmp_ln241_reg_3006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((io_acc_block_signal_op57 == 1'b0) & (icmp_ln241_reg_3006 == 1'd0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((io_acc_block_signal_op373 == 1'b0) & (1'd1 == and_ln191_4_reg_3015_pp0_iter1_reg));
end

always @ (*) begin
    ap_condition_284 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_303 = ((icmp_ln212_fu_456_p2 == 1'd1) & (icmp_ln216_fu_506_p2 == 1'd0) & (icmp_ln241_fu_386_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_493 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_386_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_500 = ((icmp_ln216_fu_506_p2 == 1'd1) & (icmp_ln212_fu_456_p2 == 1'd1) & (icmp_ln241_fu_386_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_506 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_456_p2 == 1'd1) & (icmp_ln241_fu_386_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_storemerge_i_i_reg_375 = 'bx;

assign ap_ready = internal_ap_ready;

assign icmp_ln1496_1_fu_1398_p2 = (($signed(kernel_data_V_2_5) < $signed(kernel_data_V_2_9)) ? 1'b1 : 1'b0);

assign icmp_ln1496_24_fu_1178_p2 = (($signed(kernel_data_V_2_12) < $signed(line_buffer_Array_V_2_2_0_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_25_fu_1200_p2 = (($signed(select_ln65_fu_1170_p3) < $signed(select_ln65_33_fu_1192_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_26_fu_1260_p2 = (($signed(kernel_data_V_2_20) < $signed(kernel_data_V_2_24)) ? 1'b1 : 1'b0);

assign icmp_ln1496_27_fu_1282_p2 = (($signed(kernel_data_V_2_28) < $signed(line_buffer_Array_V_2_1_0_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_28_fu_1304_p2 = (($signed(select_ln65_36_fu_1274_p3) < $signed(select_ln65_38_fu_1296_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_29_fu_1360_p2 = (($signed(phi_ln_fu_1222_p18) < $signed(phi_ln65_1_fu_1322_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_1636_p2 = (($signed(kernel_data_V_2_6) < $signed(kernel_data_V_2_10)) ? 1'b1 : 1'b0);

assign icmp_ln1496_30_fu_1374_p2 = (($signed(kernel_data_V_2_36) < $signed(kernel_data_V_2_40)) ? 1'b1 : 1'b0);

assign icmp_ln1496_31_fu_1380_p2 = (($signed(kernel_data_V_2_44) < $signed(line_buffer_Array_V_2_0_0_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_32_fu_2167_p2 = (($signed(select_ln65_42_fu_2150_p3) < $signed(select_ln65_44_fu_2162_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_33_fu_1386_p2 = (($signed(kernel_data_V_2_52) < $signed(kernel_data_V_2_56)) ? 1'b1 : 1'b0);

assign icmp_ln1496_34_fu_1392_p2 = (($signed(kernel_data_V_2_60) < $signed(data_V_data_0_V_dout)) ? 1'b1 : 1'b0);

assign icmp_ln1496_35_fu_2227_p2 = (($signed(select_ln65_47_fu_2210_p3) < $signed(select_ln65_49_fu_2222_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_36_fu_2267_p2 = (($signed(phi_ln65_3_fu_2181_p18) < $signed(phi_ln65_4_fu_2245_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_37_fu_2303_p2 = (($signed(phi_ln65_2_fu_2121_p18) < $signed(phi_ln65_5_fu_2281_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_38_fu_1416_p2 = (($signed(kernel_data_V_2_13) < $signed(line_buffer_Array_V_2_2_1_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_39_fu_1438_p2 = (($signed(select_ln65_53_fu_1408_p3) < $signed(select_ln65_55_fu_1430_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_40_fu_1498_p2 = (($signed(kernel_data_V_2_21) < $signed(kernel_data_V_2_25)) ? 1'b1 : 1'b0);

assign icmp_ln1496_41_fu_1520_p2 = (($signed(kernel_data_V_2_29) < $signed(line_buffer_Array_V_2_1_1_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_42_fu_1542_p2 = (($signed(select_ln65_58_fu_1512_p3) < $signed(select_ln65_60_fu_1534_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_43_fu_1598_p2 = (($signed(phi_ln65_6_fu_1460_p18) < $signed(phi_ln65_7_fu_1560_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_44_fu_1612_p2 = (($signed(kernel_data_V_2_37) < $signed(kernel_data_V_2_41)) ? 1'b1 : 1'b0);

assign icmp_ln1496_45_fu_1618_p2 = (($signed(kernel_data_V_2_45) < $signed(line_buffer_Array_V_2_0_1_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_46_fu_2389_p2 = (($signed(select_ln65_64_fu_2372_p3) < $signed(select_ln65_66_fu_2384_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_47_fu_1624_p2 = (($signed(kernel_data_V_2_53) < $signed(kernel_data_V_2_57)) ? 1'b1 : 1'b0);

assign icmp_ln1496_48_fu_1630_p2 = (($signed(kernel_data_V_2_61) < $signed(data_V_data_1_V_dout)) ? 1'b1 : 1'b0);

assign icmp_ln1496_49_fu_2449_p2 = (($signed(select_ln65_69_fu_2432_p3) < $signed(select_ln65_71_fu_2444_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_50_fu_2489_p2 = (($signed(phi_ln65_9_fu_2403_p18) < $signed(phi_ln65_s_fu_2467_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_51_fu_2525_p2 = (($signed(phi_ln65_8_fu_2343_p18) < $signed(phi_ln65_10_fu_2503_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_52_fu_1654_p2 = (($signed(kernel_data_V_2_14) < $signed(line_buffer_Array_V_2_2_2_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_53_fu_1676_p2 = (($signed(select_ln65_74_fu_1646_p3) < $signed(select_ln65_76_fu_1668_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_54_fu_1736_p2 = (($signed(kernel_data_V_2_22) < $signed(kernel_data_V_2_26)) ? 1'b1 : 1'b0);

assign icmp_ln1496_55_fu_1758_p2 = (($signed(kernel_data_V_2_30) < $signed(line_buffer_Array_V_2_1_2_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_56_fu_1780_p2 = (($signed(select_ln65_79_fu_1750_p3) < $signed(select_ln65_81_fu_1772_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_57_fu_1836_p2 = (($signed(phi_ln65_11_fu_1698_p18) < $signed(phi_ln65_12_fu_1798_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_58_fu_1850_p2 = (($signed(kernel_data_V_2_38) < $signed(kernel_data_V_2_42)) ? 1'b1 : 1'b0);

assign icmp_ln1496_59_fu_1856_p2 = (($signed(kernel_data_V_2_46) < $signed(line_buffer_Array_V_2_0_2_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_60_fu_2611_p2 = (($signed(select_ln65_85_fu_2594_p3) < $signed(select_ln65_87_fu_2606_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_61_fu_1862_p2 = (($signed(kernel_data_V_2_54) < $signed(kernel_data_V_2_58)) ? 1'b1 : 1'b0);

assign icmp_ln1496_62_fu_1868_p2 = (($signed(kernel_data_V_2_62) < $signed(data_V_data_2_V_dout)) ? 1'b1 : 1'b0);

assign icmp_ln1496_63_fu_2671_p2 = (($signed(select_ln65_90_fu_2654_p3) < $signed(select_ln65_92_fu_2666_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_64_fu_2711_p2 = (($signed(phi_ln65_14_fu_2625_p18) < $signed(phi_ln65_15_fu_2689_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_65_fu_2747_p2 = (($signed(phi_ln65_13_fu_2565_p18) < $signed(phi_ln65_16_fu_2725_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_66_fu_1874_p2 = (($signed(kernel_data_V_2_7) < $signed(kernel_data_V_2_11)) ? 1'b1 : 1'b0);

assign icmp_ln1496_67_fu_1892_p2 = (($signed(kernel_data_V_2_15) < $signed(line_buffer_Array_V_2_2_3_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_68_fu_1914_p2 = (($signed(select_ln65_95_fu_1884_p3) < $signed(select_ln65_97_fu_1906_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_69_fu_1974_p2 = (($signed(kernel_data_V_2_23) < $signed(kernel_data_V_2_27)) ? 1'b1 : 1'b0);

assign icmp_ln1496_70_fu_1996_p2 = (($signed(kernel_data_V_2_31) < $signed(line_buffer_Array_V_2_1_3_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_71_fu_2018_p2 = (($signed(select_ln65_100_fu_1988_p3) < $signed(select_ln65_102_fu_2010_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_72_fu_2074_p2 = (($signed(phi_ln65_17_fu_1936_p18) < $signed(phi_ln65_18_fu_2036_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_73_fu_2088_p2 = (($signed(kernel_data_V_2_39) < $signed(kernel_data_V_2_43)) ? 1'b1 : 1'b0);

assign icmp_ln1496_74_fu_2094_p2 = (($signed(kernel_data_V_2_47) < $signed(line_buffer_Array_V_2_0_3_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_75_fu_2833_p2 = (($signed(select_ln65_106_fu_2816_p3) < $signed(select_ln65_108_fu_2828_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_76_fu_2100_p2 = (($signed(kernel_data_V_2_55) < $signed(kernel_data_V_2_59)) ? 1'b1 : 1'b0);

assign icmp_ln1496_77_fu_2106_p2 = (($signed(kernel_data_V_2_63) < $signed(data_V_data_3_V_dout)) ? 1'b1 : 1'b0);

assign icmp_ln1496_78_fu_2893_p2 = (($signed(select_ln65_111_fu_2876_p3) < $signed(select_ln65_113_fu_2888_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_79_fu_2933_p2 = (($signed(phi_ln65_20_fu_2847_p18) < $signed(phi_ln65_21_fu_2911_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_80_fu_2969_p2 = (($signed(phi_ln65_19_fu_2787_p18) < $signed(phi_ln65_22_fu_2947_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_1160_p2 = (($signed(kernel_data_V_2_4) < $signed(kernel_data_V_2_8)) ? 1'b1 : 1'b0);

assign icmp_ln191_4_fu_412_p2 = ((ap_sig_allocacmp_sY_1_load == 32'd3) ? 1'b1 : 1'b0);

assign icmp_ln191_5_fu_422_p2 = (($signed(pY_1) > $signed(32'd2)) ? 1'b1 : 1'b0);

assign icmp_ln191_6_fu_432_p2 = (($signed(pX_1) > $signed(32'd2)) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_402_p2 = ((sX_1 == 32'd3) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_456_p2 = ((pX_1 == 32'd25) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_506_p2 = ((pY_1 == 32'd25) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_386_p2 = ((indvar_flatten_reg_364 == 10'd676) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op373 = (res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op57 = (data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign phi_ln65_11_fu_1698_p17 = select_ln65_77_fu_1682_p3;

assign phi_ln65_12_fu_1798_p17 = select_ln65_82_fu_1786_p3;

assign phi_ln65_17_fu_1936_p17 = select_ln65_98_fu_1920_p3;

assign phi_ln65_18_fu_2036_p17 = select_ln65_103_fu_2024_p3;

assign phi_ln65_1_fu_1322_p17 = select_ln65_39_fu_1310_p3;

assign phi_ln65_6_fu_1460_p17 = select_ln65_56_fu_1444_p3;

assign phi_ln65_7_fu_1560_p17 = select_ln65_61_fu_1548_p3;

assign phi_ln_fu_1222_p17 = select_ln65_34_fu_1206_p3;

assign res_V_data_0_V_din = tmp_data_0_V_fu_2317_p18;

assign res_V_data_1_V_din = tmp_data_1_V_fu_2539_p18;

assign res_V_data_2_V_din = tmp_data_2_V_fu_2761_p18;

assign res_V_data_3_V_din = tmp_data_3_V_fu_2983_p18;

assign select_ln222_fu_530_p3 = ((icmp_ln191_4_fu_412_p2[0:0] === 1'b1) ? 32'd0 : add_ln222_fu_524_p2);

assign select_ln227_fu_480_p3 = ((icmp_ln191_fu_402_p2[0:0] === 1'b1) ? 32'd0 : add_ln227_fu_474_p2);

assign select_ln65_100_fu_1988_p3 = ((icmp_ln1496_69_fu_1974_p2[0:0] === 1'b1) ? kernel_data_V_2_27 : kernel_data_V_2_23);

assign select_ln65_101_fu_1764_p3 = ((icmp_ln1496_55_fu_1758_p2[0:0] === 1'b1) ? 3'd7 : 3'd6);

assign select_ln65_102_fu_2010_p3 = ((icmp_ln1496_70_fu_1996_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_1_3_q0 : kernel_data_V_2_31);

assign select_ln65_103_fu_2024_p3 = ((icmp_ln1496_71_fu_2018_p2[0:0] === 1'b1) ? select_ln65_117_fu_2002_p3 : select_ln65_99_fu_1980_p3);

assign select_ln65_104_fu_2080_p3 = ((icmp_ln1496_72_fu_2074_p2[0:0] === 1'b1) ? select_ln65_103_fu_2024_p3 : zext_ln65_17_fu_1928_p1);

assign select_ln65_105_fu_2809_p3 = ((icmp_ln1496_73_reg_3732[0:0] === 1'b1) ? 4'd9 : 4'd8);

assign select_ln65_106_fu_2816_p3 = ((icmp_ln1496_73_reg_3732[0:0] === 1'b1) ? pool_window_9_V_3_reg_3488 : pool_window_8_V_3_reg_3376);

assign select_ln65_107_fu_2821_p3 = ((icmp_ln1496_74_reg_3738[0:0] === 1'b1) ? 4'd11 : 4'd10);

assign select_ln65_108_fu_2828_p3 = ((icmp_ln1496_74_reg_3738[0:0] === 1'b1) ? pool_window_11_V_3_reg_3264 : pool_window_10_V_3_reg_3600);

assign select_ln65_109_fu_2839_p3 = ((icmp_ln1496_75_fu_2833_p2[0:0] === 1'b1) ? select_ln65_107_fu_2821_p3 : select_ln65_105_fu_2809_p3);

assign select_ln65_110_fu_2869_p3 = ((icmp_ln1496_76_reg_3744[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign select_ln65_111_fu_2876_p3 = ((icmp_ln1496_76_reg_3744[0:0] === 1'b1) ? pool_window_13_V_3_reg_3520 : pool_window_12_V_3_reg_3408);

assign select_ln65_112_fu_2659_p3 = ((icmp_ln1496_62_reg_3721[0:0] === 1'b1) ? 3'd7 : 3'd6);

assign select_ln65_113_fu_2888_p3 = ((icmp_ln1496_77_reg_3750[0:0] === 1'b1) ? pool_window_15_V_3_reg_3116 : pool_window_14_V_3_reg_3632);

assign select_ln65_114_fu_2899_p3 = ((icmp_ln1496_78_fu_2893_p2[0:0] === 1'b1) ? select_ln65_118_fu_2881_p3 : select_ln65_110_fu_2869_p3);

assign select_ln65_115_fu_2939_p3 = ((icmp_ln1496_79_fu_2933_p2[0:0] === 1'b1) ? sext_ln65_3_fu_2907_p1 : select_ln65_109_fu_2839_p3);

assign select_ln65_117_fu_2002_p3 = ((icmp_ln1496_70_fu_1996_p2[0:0] === 1'b1) ? 3'd7 : 3'd6);

assign select_ln65_118_fu_2881_p3 = ((icmp_ln1496_77_reg_3750[0:0] === 1'b1) ? 3'd7 : 3'd6);

assign select_ln65_32_fu_1184_p3 = ((icmp_ln1496_24_fu_1178_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_33_fu_1192_p3 = ((icmp_ln1496_24_fu_1178_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_2_0_q0 : kernel_data_V_2_12);

assign select_ln65_34_fu_1206_p3 = ((icmp_ln1496_25_fu_1200_p2[0:0] === 1'b1) ? select_ln65_32_fu_1184_p3 : zext_ln65_fu_1166_p1);

assign select_ln65_35_fu_1266_p3 = ((icmp_ln1496_26_fu_1260_p2[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign select_ln65_36_fu_1274_p3 = ((icmp_ln1496_26_fu_1260_p2[0:0] === 1'b1) ? kernel_data_V_2_24 : kernel_data_V_2_20);

assign select_ln65_38_fu_1296_p3 = ((icmp_ln1496_27_fu_1282_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_1_0_q0 : kernel_data_V_2_28);

assign select_ln65_39_fu_1310_p3 = ((icmp_ln1496_28_fu_1304_p2[0:0] === 1'b1) ? select_ln65_48_fu_1288_p3 : select_ln65_35_fu_1266_p3);

assign select_ln65_40_fu_1366_p3 = ((icmp_ln1496_29_fu_1360_p2[0:0] === 1'b1) ? select_ln65_39_fu_1310_p3 : zext_ln65_8_fu_1214_p1);

assign select_ln65_41_fu_2143_p3 = ((icmp_ln1496_30_reg_3645[0:0] === 1'b1) ? 4'd9 : 4'd8);

assign select_ln65_42_fu_2150_p3 = ((icmp_ln1496_30_reg_3645[0:0] === 1'b1) ? pool_window_9_V_reg_3464 : pool_window_8_V_reg_3352);

assign select_ln65_43_fu_2155_p3 = ((icmp_ln1496_31_reg_3651[0:0] === 1'b1) ? 4'd11 : 4'd10);

assign select_ln65_44_fu_2162_p3 = ((icmp_ln1496_31_reg_3651[0:0] === 1'b1) ? pool_window_11_V_reg_3144 : pool_window_10_V_reg_3576);

assign select_ln65_45_fu_2173_p3 = ((icmp_ln1496_32_fu_2167_p2[0:0] === 1'b1) ? select_ln65_43_fu_2155_p3 : select_ln65_41_fu_2143_p3);

assign select_ln65_46_fu_2203_p3 = ((icmp_ln1496_33_reg_3657[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign select_ln65_47_fu_2210_p3 = ((icmp_ln1496_33_reg_3657[0:0] === 1'b1) ? pool_window_13_V_reg_3496 : pool_window_12_V_reg_3384);

assign select_ln65_48_fu_1288_p3 = ((icmp_ln1496_27_fu_1282_p2[0:0] === 1'b1) ? 3'd7 : 3'd6);

assign select_ln65_49_fu_2222_p3 = ((icmp_ln1496_34_reg_3663[0:0] === 1'b1) ? pool_window_15_V_reg_3032 : pool_window_14_V_reg_3608);

assign select_ln65_50_fu_2233_p3 = ((icmp_ln1496_35_fu_2227_p2[0:0] === 1'b1) ? select_ln65_52_fu_2215_p3 : select_ln65_46_fu_2203_p3);

assign select_ln65_51_fu_2273_p3 = ((icmp_ln1496_36_fu_2267_p2[0:0] === 1'b1) ? sext_ln65_fu_2241_p1 : select_ln65_45_fu_2173_p3);

assign select_ln65_52_fu_2215_p3 = ((icmp_ln1496_34_reg_3663[0:0] === 1'b1) ? 3'd7 : 3'd6);

assign select_ln65_53_fu_1408_p3 = ((icmp_ln1496_1_fu_1398_p2[0:0] === 1'b1) ? kernel_data_V_2_9 : kernel_data_V_2_5);

assign select_ln65_54_fu_1422_p3 = ((icmp_ln1496_38_fu_1416_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_55_fu_1430_p3 = ((icmp_ln1496_38_fu_1416_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_2_1_q0 : kernel_data_V_2_13);

assign select_ln65_56_fu_1444_p3 = ((icmp_ln1496_39_fu_1438_p2[0:0] === 1'b1) ? select_ln65_54_fu_1422_p3 : zext_ln65_10_fu_1404_p1);

assign select_ln65_57_fu_1504_p3 = ((icmp_ln1496_40_fu_1498_p2[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign select_ln65_58_fu_1512_p3 = ((icmp_ln1496_40_fu_1498_p2[0:0] === 1'b1) ? kernel_data_V_2_25 : kernel_data_V_2_21);

assign select_ln65_60_fu_1534_p3 = ((icmp_ln1496_41_fu_1520_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_1_1_q0 : kernel_data_V_2_29);

assign select_ln65_61_fu_1548_p3 = ((icmp_ln1496_42_fu_1542_p2[0:0] === 1'b1) ? select_ln65_70_fu_1526_p3 : select_ln65_57_fu_1504_p3);

assign select_ln65_62_fu_1604_p3 = ((icmp_ln1496_43_fu_1598_p2[0:0] === 1'b1) ? select_ln65_61_fu_1548_p3 : zext_ln65_11_fu_1452_p1);

assign select_ln65_63_fu_2365_p3 = ((icmp_ln1496_44_reg_3674[0:0] === 1'b1) ? 4'd9 : 4'd8);

assign select_ln65_64_fu_2372_p3 = ((icmp_ln1496_44_reg_3674[0:0] === 1'b1) ? pool_window_9_V_1_reg_3472 : pool_window_8_V_1_reg_3360);

assign select_ln65_65_fu_2377_p3 = ((icmp_ln1496_45_reg_3680[0:0] === 1'b1) ? 4'd11 : 4'd10);

assign select_ln65_66_fu_2384_p3 = ((icmp_ln1496_45_reg_3680[0:0] === 1'b1) ? pool_window_11_V_1_reg_3184 : pool_window_10_V_1_reg_3584);

assign select_ln65_67_fu_2395_p3 = ((icmp_ln1496_46_fu_2389_p2[0:0] === 1'b1) ? select_ln65_65_fu_2377_p3 : select_ln65_63_fu_2365_p3);

assign select_ln65_68_fu_2425_p3 = ((icmp_ln1496_47_reg_3686[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign select_ln65_69_fu_2432_p3 = ((icmp_ln1496_47_reg_3686[0:0] === 1'b1) ? pool_window_13_V_1_reg_3504 : pool_window_12_V_1_reg_3392);

assign select_ln65_70_fu_1526_p3 = ((icmp_ln1496_41_fu_1520_p2[0:0] === 1'b1) ? 3'd7 : 3'd6);

assign select_ln65_71_fu_2444_p3 = ((icmp_ln1496_48_reg_3692[0:0] === 1'b1) ? pool_window_15_V_1_reg_3060 : pool_window_14_V_1_reg_3616);

assign select_ln65_72_fu_2455_p3 = ((icmp_ln1496_49_fu_2449_p2[0:0] === 1'b1) ? select_ln65_80_fu_2437_p3 : select_ln65_68_fu_2425_p3);

assign select_ln65_73_fu_2495_p3 = ((icmp_ln1496_50_fu_2489_p2[0:0] === 1'b1) ? sext_ln65_1_fu_2463_p1 : select_ln65_67_fu_2395_p3);

assign select_ln65_74_fu_1646_p3 = ((icmp_ln1496_2_fu_1636_p2[0:0] === 1'b1) ? kernel_data_V_2_10 : kernel_data_V_2_6);

assign select_ln65_75_fu_1660_p3 = ((icmp_ln1496_52_fu_1654_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_76_fu_1668_p3 = ((icmp_ln1496_52_fu_1654_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_2_2_q0 : kernel_data_V_2_14);

assign select_ln65_77_fu_1682_p3 = ((icmp_ln1496_53_fu_1676_p2[0:0] === 1'b1) ? select_ln65_75_fu_1660_p3 : zext_ln65_13_fu_1642_p1);

assign select_ln65_78_fu_1742_p3 = ((icmp_ln1496_54_fu_1736_p2[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign select_ln65_79_fu_1750_p3 = ((icmp_ln1496_54_fu_1736_p2[0:0] === 1'b1) ? kernel_data_V_2_26 : kernel_data_V_2_22);

assign select_ln65_80_fu_2437_p3 = ((icmp_ln1496_48_reg_3692[0:0] === 1'b1) ? 3'd7 : 3'd6);

assign select_ln65_81_fu_1772_p3 = ((icmp_ln1496_55_fu_1758_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_1_2_q0 : kernel_data_V_2_30);

assign select_ln65_82_fu_1786_p3 = ((icmp_ln1496_56_fu_1780_p2[0:0] === 1'b1) ? select_ln65_101_fu_1764_p3 : select_ln65_78_fu_1742_p3);

assign select_ln65_83_fu_1842_p3 = ((icmp_ln1496_57_fu_1836_p2[0:0] === 1'b1) ? select_ln65_82_fu_1786_p3 : zext_ln65_14_fu_1690_p1);

assign select_ln65_84_fu_2587_p3 = ((icmp_ln1496_58_reg_3703[0:0] === 1'b1) ? 4'd9 : 4'd8);

assign select_ln65_85_fu_2594_p3 = ((icmp_ln1496_58_reg_3703[0:0] === 1'b1) ? pool_window_9_V_2_reg_3480 : pool_window_8_V_2_reg_3368);

assign select_ln65_86_fu_2599_p3 = ((icmp_ln1496_59_reg_3709[0:0] === 1'b1) ? 4'd11 : 4'd10);

assign select_ln65_87_fu_2606_p3 = ((icmp_ln1496_59_reg_3709[0:0] === 1'b1) ? pool_window_11_V_2_reg_3224 : pool_window_10_V_2_reg_3592);

assign select_ln65_88_fu_2617_p3 = ((icmp_ln1496_60_fu_2611_p2[0:0] === 1'b1) ? select_ln65_86_fu_2599_p3 : select_ln65_84_fu_2587_p3);

assign select_ln65_89_fu_2647_p3 = ((icmp_ln1496_61_reg_3715[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign select_ln65_90_fu_2654_p3 = ((icmp_ln1496_61_reg_3715[0:0] === 1'b1) ? pool_window_13_V_2_reg_3512 : pool_window_12_V_2_reg_3400);

assign select_ln65_92_fu_2666_p3 = ((icmp_ln1496_62_reg_3721[0:0] === 1'b1) ? pool_window_15_V_2_reg_3088 : pool_window_14_V_2_reg_3624);

assign select_ln65_93_fu_2677_p3 = ((icmp_ln1496_63_fu_2671_p2[0:0] === 1'b1) ? select_ln65_112_fu_2659_p3 : select_ln65_89_fu_2647_p3);

assign select_ln65_94_fu_2717_p3 = ((icmp_ln1496_64_fu_2711_p2[0:0] === 1'b1) ? sext_ln65_2_fu_2685_p1 : select_ln65_88_fu_2617_p3);

assign select_ln65_95_fu_1884_p3 = ((icmp_ln1496_66_fu_1874_p2[0:0] === 1'b1) ? kernel_data_V_2_11 : kernel_data_V_2_7);

assign select_ln65_96_fu_1898_p3 = ((icmp_ln1496_67_fu_1892_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_97_fu_1906_p3 = ((icmp_ln1496_67_fu_1892_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_2_3_q0 : kernel_data_V_2_15);

assign select_ln65_98_fu_1920_p3 = ((icmp_ln1496_68_fu_1914_p2[0:0] === 1'b1) ? select_ln65_96_fu_1898_p3 : zext_ln65_16_fu_1880_p1);

assign select_ln65_99_fu_1980_p3 = ((icmp_ln1496_69_fu_1974_p2[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign select_ln65_fu_1170_p3 = ((icmp_ln1496_fu_1160_p2[0:0] === 1'b1) ? kernel_data_V_2_8 : kernel_data_V_2_4);

assign sext_ln65_1_fu_2463_p1 = $signed(select_ln65_72_fu_2455_p3);

assign sext_ln65_2_fu_2685_p1 = $signed(select_ln65_93_fu_2677_p3);

assign sext_ln65_3_fu_2907_p1 = $signed(select_ln65_114_fu_2899_p3);

assign sext_ln65_fu_2241_p1 = $signed(select_ln65_50_fu_2233_p3);

assign start_out = real_start;

assign tmp_data_0_V_fu_2317_p17 = ((icmp_ln1496_37_fu_2303_p2[0:0] === 1'b1) ? select_ln65_51_fu_2273_p3 : zext_ln65_9_fu_2118_p1);

assign tmp_data_1_V_fu_2539_p17 = ((icmp_ln1496_51_fu_2525_p2[0:0] === 1'b1) ? select_ln65_73_fu_2495_p3 : zext_ln65_12_fu_2340_p1);

assign tmp_data_2_V_fu_2761_p17 = ((icmp_ln1496_65_fu_2747_p2[0:0] === 1'b1) ? select_ln65_94_fu_2717_p3 : zext_ln65_15_fu_2562_p1);

assign tmp_data_3_V_fu_2983_p17 = ((icmp_ln1496_80_fu_2969_p2[0:0] === 1'b1) ? select_ln65_115_fu_2939_p3 : zext_ln65_18_fu_2784_p1);

assign zext_ln65_10_fu_1404_p1 = icmp_ln1496_1_fu_1398_p2;

assign zext_ln65_11_fu_1452_p1 = select_ln65_56_fu_1444_p3;

assign zext_ln65_12_fu_2340_p1 = select_ln65_62_reg_3669;

assign zext_ln65_13_fu_1642_p1 = icmp_ln1496_2_fu_1636_p2;

assign zext_ln65_14_fu_1690_p1 = select_ln65_77_fu_1682_p3;

assign zext_ln65_15_fu_2562_p1 = select_ln65_83_reg_3698;

assign zext_ln65_16_fu_1880_p1 = icmp_ln1496_66_fu_1874_p2;

assign zext_ln65_17_fu_1928_p1 = select_ln65_98_fu_1920_p3;

assign zext_ln65_18_fu_2784_p1 = select_ln65_104_reg_3727;

assign zext_ln65_8_fu_1214_p1 = select_ln65_34_fu_1206_p3;

assign zext_ln65_9_fu_2118_p1 = select_ln65_40_reg_3640;

assign zext_ln65_fu_1166_p1 = icmp_ln1496_fu_1160_p2;

endmodule //pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s
