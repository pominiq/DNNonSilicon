// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_latency_ap_fixed_ap_fixed_16_6_5_3_0_config2_mult_0_0_0_0_0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_2_V_read,
        data_3_V_read,
        data_5_V_read,
        data_6_V_read,
        data_7_V_read,
        data_8_V_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] data_2_V_read;
input  [15:0] data_3_V_read;
input  [15:0] data_5_V_read;
input  [15:0] data_6_V_read;
input  [15:0] data_7_V_read;
input  [15:0] data_8_V_read;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;
output  [15:0] ap_return_3;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] grp_fu_185_p4;
reg   [15:0] reg_195;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [15:0] grp_fu_175_p4;
reg   [15:0] trunc_ln_reg_345;
reg   [15:0] trunc_ln708_s_reg_350;
reg   [15:0] trunc_ln708_79_reg_355;
wire   [15:0] acc_2_V_fu_227_p2;
reg   [15:0] acc_2_V_reg_360;
reg   [15:0] ap_port_reg_data_3_V_read;
reg   [15:0] ap_port_reg_data_5_V_read;
reg   [15:0] ap_port_reg_data_6_V_read;
reg   [15:0] ap_port_reg_data_7_V_read;
reg   [15:0] ap_port_reg_data_8_V_read;
wire    ap_CS_fsm_state4;
reg  signed [12:0] grp_fu_106_p0;
reg  signed [15:0] grp_fu_106_p1;
wire  signed [25:0] sext_ln1116_75_cast_fu_199_p1;
wire  signed [25:0] sext_ln1116_76_cast_fu_205_p1;
wire  signed [25:0] sext_ln1116_79_cast_fu_215_p1;
wire  signed [25:0] sext_ln1116_80_cast_fu_233_p1;
reg  signed [12:0] grp_fu_107_p0;
reg  signed [15:0] grp_fu_107_p1;
wire  signed [25:0] sext_ln1116_78_cast_fu_210_p1;
wire  signed [25:0] sext_ln1116_81_cast_fu_238_p1;
wire   [25:0] grp_fu_106_p2;
wire   [25:0] grp_fu_107_p2;
wire   [15:0] add_ln703_84_fu_221_p2;
wire  signed [15:0] sext_ln1116_81_cast_fu_238_p0;
wire  signed [15:0] trunc_ln1118_fu_243_p0;
wire   [14:0] trunc_ln1118_fu_243_p1;
wire  signed [15:0] shl_ln1118_s_fu_255_p1;
wire   [19:0] shl_ln1118_s_fu_255_p3;
wire  signed [25:0] sext_ln1118_fu_263_p1;
wire   [25:0] shl_ln_fu_247_p3;
wire   [25:0] add_ln1118_fu_267_p2;
wire   [15:0] trunc_ln708_84_fu_273_p4;
wire   [15:0] add_ln703_fu_283_p2;
wire   [15:0] add_ln703_82_fu_298_p2;
wire   [15:0] add_ln703_81_fu_294_p2;
wire   [15:0] add_ln703_86_fu_310_p2;
wire   [15:0] add_ln703_80_fu_289_p2;
wire   [15:0] acc_1_V_fu_304_p2;
wire   [15:0] acc_3_V_fu_316_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3))) begin
        acc_2_V_reg_360 <= acc_2_V_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_port_reg_data_3_V_read <= data_3_V_read;
        ap_port_reg_data_5_V_read <= data_5_V_read;
        ap_port_reg_data_6_V_read <= data_6_V_read;
        ap_port_reg_data_7_V_read <= data_7_V_read;
        ap_port_reg_data_8_V_read <= data_8_V_read;
        trunc_ln708_s_reg_350 <= {{grp_fu_107_p2[25:10]}};
        trunc_ln_reg_345 <= {{grp_fu_106_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_195 <= {{grp_fu_107_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln708_79_reg_355 <= {{grp_fu_106_p2[25:10]}};
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_106_p0 = 26'd1488;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_106_p0 = 26'd1560;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_106_p0 = 26'd67107556;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_106_p0 = 26'd67107012;
    end else begin
        grp_fu_106_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_106_p1 = sext_ln1116_80_cast_fu_233_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_106_p1 = sext_ln1116_79_cast_fu_215_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_106_p1 = sext_ln1116_76_cast_fu_205_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_106_p1 = sext_ln1116_75_cast_fu_199_p1;
    end else begin
        grp_fu_106_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_107_p0 = 26'd67107481;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_107_p0 = 26'd67107423;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_107_p0 = 26'd67107807;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_107_p0 = 26'd1710;
    end else begin
        grp_fu_107_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_107_p1 = sext_ln1116_81_cast_fu_238_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_107_p1 = sext_ln1116_79_cast_fu_215_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_107_p1 = sext_ln1116_78_cast_fu_210_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_107_p1 = sext_ln1116_75_cast_fu_199_p1;
    end else begin
        grp_fu_107_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_V_fu_304_p2 = (add_ln703_82_fu_298_p2 + add_ln703_81_fu_294_p2);

assign acc_2_V_fu_227_p2 = (add_ln703_84_fu_221_p2 + reg_195);

assign acc_3_V_fu_316_p2 = (add_ln703_86_fu_310_p2 + reg_195);

assign add_ln1118_fu_267_p2 = ($signed(sext_ln1118_fu_263_p1) + $signed(shl_ln_fu_247_p3));

assign add_ln703_80_fu_289_p2 = (add_ln703_fu_283_p2 + trunc_ln_reg_345);

assign add_ln703_81_fu_294_p2 = (trunc_ln708_s_reg_350 + trunc_ln708_79_reg_355);

assign add_ln703_82_fu_298_p2 = ($signed(16'd64668) + $signed(grp_fu_175_p4));

assign add_ln703_84_fu_221_p2 = ($signed(16'd65532) + $signed(grp_fu_175_p4));

assign add_ln703_86_fu_310_p2 = ($signed(16'd65529) + $signed(grp_fu_185_p4));

assign add_ln703_fu_283_p2 = (16'd71 + trunc_ln708_84_fu_273_p4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_return_0 = add_ln703_80_fu_289_p2;

assign ap_return_1 = acc_1_V_fu_304_p2;

assign ap_return_2 = acc_2_V_reg_360;

assign ap_return_3 = acc_3_V_fu_316_p2;

assign grp_fu_106_p2 = ($signed(grp_fu_106_p0) * $signed(grp_fu_106_p1));

assign grp_fu_107_p2 = ($signed(grp_fu_107_p0) * $signed(grp_fu_107_p1));

assign grp_fu_175_p4 = {{grp_fu_106_p2[25:10]}};

assign grp_fu_185_p4 = {{grp_fu_107_p2[25:10]}};

assign sext_ln1116_75_cast_fu_199_p1 = $signed(data_2_V_read);

assign sext_ln1116_76_cast_fu_205_p1 = $signed(ap_port_reg_data_3_V_read);

assign sext_ln1116_78_cast_fu_210_p1 = $signed(ap_port_reg_data_5_V_read);

assign sext_ln1116_79_cast_fu_215_p1 = $signed(ap_port_reg_data_6_V_read);

assign sext_ln1116_80_cast_fu_233_p1 = $signed(ap_port_reg_data_7_V_read);

assign sext_ln1116_81_cast_fu_238_p0 = ap_port_reg_data_8_V_read;

assign sext_ln1116_81_cast_fu_238_p1 = sext_ln1116_81_cast_fu_238_p0;

assign sext_ln1118_fu_263_p1 = $signed(shl_ln1118_s_fu_255_p3);

assign shl_ln1118_s_fu_255_p1 = ap_port_reg_data_8_V_read;

assign shl_ln1118_s_fu_255_p3 = {{shl_ln1118_s_fu_255_p1}, {4'd0}};

assign shl_ln_fu_247_p3 = {{trunc_ln1118_fu_243_p1}, {11'd0}};

assign trunc_ln1118_fu_243_p0 = ap_port_reg_data_8_V_read;

assign trunc_ln1118_fu_243_p1 = trunc_ln1118_fu_243_p0[14:0];

assign trunc_ln708_84_fu_273_p4 = {{add_ln1118_fu_267_p2[25:10]}};

endmodule //dense_latency_ap_fixed_ap_fixed_16_6_5_3_0_config2_mult_0_0_0_0_0
