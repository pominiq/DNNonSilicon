-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_stable_array_array_ap_fixed_16_6_5_3_0_3u_softmax_config5_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    res_V_data_0_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_TVALID : OUT STD_LOGIC;
    res_V_data_0_V_TREADY : IN STD_LOGIC;
    res_V_data_1_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_TVALID : OUT STD_LOGIC;
    res_V_data_1_V_TREADY : IN STD_LOGIC;
    res_V_data_2_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_TVALID : OUT STD_LOGIC;
    res_V_data_2_V_TREADY : IN STD_LOGIC;
    data_V_data_0_V_blk_n : OUT STD_LOGIC;
    data_V_data_1_V_blk_n : OUT STD_LOGIC;
    data_V_data_2_V_blk_n : OUT STD_LOGIC;
    res_V_data_0_V_TDATA_blk_n : OUT STD_LOGIC;
    res_V_data_1_V_TDATA_blk_n : OUT STD_LOGIC;
    res_V_data_2_V_TDATA_blk_n : OUT STD_LOGIC );
end;


architecture behav of softmax_stable_array_array_ap_fixed_16_6_5_3_0_3u_softmax_config5_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal exp_table1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce0 : STD_LOGIC;
    signal exp_table1_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal invert_table2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table2_ce0 : STD_LOGIC;
    signal invert_table2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal io_acc_block_signal_op8 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal y_V_1_fu_496_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_reg_689 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_fu_530_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_reg_694 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_res_0_V_reg_699 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal exp_res_1_V_reg_710 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_721 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln241_fu_667_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln241_reg_731 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_data_0_V_reg_736 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_1_V_reg_741 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln225_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln225_1_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln225_2_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln235_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_191_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1118_fu_672_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln1118_1_fu_676_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln1118_2_fu_680_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_191_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_191_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal icmp_ln1496_fu_231_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_fu_231_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_237_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_fu_237_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_fu_237_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_1_fu_245_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_1_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_max_V_fu_251_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_fu_259_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_max_V_fu_251_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_fu_259_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_1_fu_263_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_fu_267_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_7_fu_281_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_273_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_2_fu_319_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_2_fu_319_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_1_fu_323_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_fu_337_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_329_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_3_fu_375_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_3_fu_375_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_2_fu_379_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_12_fu_393_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_385_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_2_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_431_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_441_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_fu_449_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_fu_457_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_4_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_470_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_1_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_480_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_1_fu_488_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_5_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_504_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_2_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_4_fu_514_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_2_fu_522_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln36_2_fu_553_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln36_1_fu_550_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_fu_556_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_fu_566_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lhs_V_fu_562_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_1_fu_570_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln36_fu_546_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_9_fu_584_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_7_fu_590_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_576_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_3_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_7_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_6_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_628_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal underflow_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_6_fu_638_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_3_fu_646_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_fu_654_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;

    component softmax_stable_array_array_ap_fixed_16_6_5_3_0_3u_softmax_config5_s_exp_table1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component softmax_stable_array_array_ap_fixed_16_6_5_3_0_3u_softmax_config5_s_invert_tabkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table1_U : component softmax_stable_array_array_ap_fixed_16_6_5_3_0_3u_softmax_config5_s_exp_table1
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table1_address0,
        ce0 => exp_table1_ce0,
        q0 => exp_table1_q0);

    invert_table2_U : component softmax_stable_array_array_ap_fixed_16_6_5_3_0_3u_softmax_config5_s_invert_tabkb
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table2_address0,
        ce0 => invert_table2_ce0,
        q0 => invert_table2_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                exp_res_0_V_reg_699 <= exp_table1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                exp_res_1_V_reg_710 <= exp_table1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exp_res_2_V_reg_721 <= exp_table1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                sext_ln241_reg_731 <= sext_ln241_fu_667_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_data_0_V_reg_736 <= grp_fu_191_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                tmp_data_1_V_reg_741 <= grp_fu_191_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                y_V_1_reg_689 <= y_V_1_fu_496_p3;
                y_V_2_reg_694 <= y_V_2_fu_530_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    and_ln786_1_fu_351_p2 <= (xor_ln786_1_fu_345_p2 and tmp_9_fu_329_p3);
    and_ln786_2_fu_407_p2 <= (xor_ln786_2_fu_401_p2 and tmp_11_fu_385_p3);
    and_ln786_fu_295_p2 <= (xor_ln786_fu_289_p2 and tmp_5_fu_273_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, io_acc_block_signal_op8)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (io_acc_block_signal_op8 = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, res_V_data_0_V_TREADY, io_acc_block_signal_op8)
    begin
                ap_block_pp0_stage0_11001 <= (((res_V_data_0_V_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (io_acc_block_signal_op8 = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, res_V_data_0_V_TREADY, io_acc_block_signal_op8)
    begin
                ap_block_pp0_stage0_subdone <= (((res_V_data_0_V_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (io_acc_block_signal_op8 = ap_const_logic_0))));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, io_acc_block_signal_op8)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (io_acc_block_signal_op8 = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_0_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, data_V_data_0_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, data_V_data_1_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, data_V_data_2_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, zext_ln225_fu_465_p1, zext_ln225_1_fu_538_p1, ap_block_pp0_stage1, zext_ln225_2_fu_542_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                exp_table1_address0 <= zext_ln225_2_fu_542_p1(10 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                exp_table1_address0 <= zext_ln225_1_fu_538_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                exp_table1_address0 <= zext_ln225_fu_465_p1(10 - 1 downto 0);
            else 
                exp_table1_address0 <= "XXXXXXXXXX";
            end if;
        else 
            exp_table1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    exp_table1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            exp_table1_ce0 <= ap_const_logic_1;
        else 
            exp_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_191_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln1118_fu_672_p1, zext_ln1118_1_fu_676_p1, zext_ln1118_2_fu_680_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_191_p0 <= zext_ln1118_2_fu_680_p1(17 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_191_p0 <= zext_ln1118_1_fu_676_p1(17 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_191_p0 <= zext_ln1118_fu_672_p1(17 - 1 downto 0);
        else 
            grp_fu_191_p0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_191_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, sext_ln241_fu_667_p1, sext_ln241_reg_731, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_191_p1 <= sext_ln241_reg_731(18 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_191_p1 <= sext_ln241_fu_667_p1(18 - 1 downto 0);
        else 
            grp_fu_191_p1 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_191_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &grp_fu_191_p0) * signed(grp_fu_191_p1))), 26));
    icmp_ln1496_1_fu_245_p1 <= data_V_data_2_V_dout;
    icmp_ln1496_1_fu_245_p2 <= "1" when (signed(select_ln65_fu_237_p3) < signed(icmp_ln1496_1_fu_245_p1)) else "0";
    icmp_ln1496_fu_231_p0 <= data_V_data_0_V_dout;
    icmp_ln1496_fu_231_p1 <= data_V_data_1_V_dout;
    icmp_ln1496_fu_231_p2 <= "1" when (signed(icmp_ln1496_fu_231_p0) < signed(icmp_ln1496_fu_231_p1)) else "0";
    invert_table2_address0 <= zext_ln235_fu_662_p1(10 - 1 downto 0);

    invert_table2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            invert_table2_ce0 <= ap_const_logic_1;
        else 
            invert_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op8 <= (data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);
        lhs_V_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_556_p2),19));

    or_ln340_1_fu_369_p2 <= (xor_ln340_1_fu_363_p2 or tmp_10_fu_337_p3);
    or_ln340_2_fu_425_p2 <= (xor_ln340_2_fu_419_p2 or tmp_12_fu_393_p3);
    or_ln340_3_fu_622_p2 <= (xor_ln340_7_fu_616_p2 or p_Result_7_fu_590_p3);
    or_ln340_fu_313_p2 <= (xor_ln340_fu_307_p2 or tmp_7_fu_281_p3);
    p_Result_7_fu_590_p3 <= p_Val2_9_fu_584_p2(17 downto 17);
    p_Result_s_fu_576_p3 <= ret_V_1_fu_570_p2(18 downto 18);
    p_Val2_9_fu_584_p2 <= std_logic_vector(unsigned(zext_ln36_fu_546_p1) + unsigned(ret_V_fu_556_p2));
    res_V_data_0_V_TDATA <= tmp_data_0_V_reg_736;

    res_V_data_0_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, res_V_data_0_V_TREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_0_V_TDATA_blk_n <= res_V_data_0_V_TREADY;
        else 
            res_V_data_0_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    res_V_data_0_V_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_0_V_TVALID <= ap_const_logic_1;
        else 
            res_V_data_0_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    res_V_data_1_V_TDATA <= tmp_data_1_V_reg_741;

    res_V_data_1_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, res_V_data_1_V_TREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_1_V_TDATA_blk_n <= res_V_data_1_V_TREADY;
        else 
            res_V_data_1_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    res_V_data_1_V_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_1_V_TVALID <= ap_const_logic_1;
        else 
            res_V_data_1_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    res_V_data_2_V_TDATA <= grp_fu_191_p2(25 downto 10);

    res_V_data_2_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, res_V_data_2_V_TREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_2_V_TDATA_blk_n <= res_V_data_2_V_TREADY;
        else 
            res_V_data_2_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    res_V_data_2_V_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_2_V_TVALID <= ap_const_logic_1;
        else 
            res_V_data_2_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_1_fu_570_p2 <= std_logic_vector(unsigned(rhs_V_fu_566_p1) + unsigned(lhs_V_fu_562_p1));
    ret_V_fu_556_p2 <= std_logic_vector(unsigned(zext_ln36_2_fu_553_p1) + unsigned(zext_ln36_1_fu_550_p1));
    rhs_V_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q0),19));
    select_ln340_2_fu_480_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_4_fu_357_p2(0) = '1') else 
        tmp_6_fu_470_p4;
    select_ln340_4_fu_514_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_5_fu_413_p2(0) = '1') else 
        tmp_8_fu_504_p4;
    select_ln340_6_fu_638_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_6_fu_610_p2(0) = '1') else 
        tmp_s_fu_628_p4;
    select_ln340_fu_441_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_3_fu_301_p2(0) = '1') else 
        tmp_fu_431_p4;
    select_ln388_1_fu_488_p3 <= 
        ap_const_lv10_200 when (and_ln786_1_fu_351_p2(0) = '1') else 
        tmp_6_fu_470_p4;
    select_ln388_2_fu_522_p3 <= 
        ap_const_lv10_200 when (and_ln786_2_fu_407_p2(0) = '1') else 
        tmp_8_fu_504_p4;
    select_ln388_3_fu_646_p3 <= 
        ap_const_lv10_200 when (underflow_fu_604_p2(0) = '1') else 
        tmp_s_fu_628_p4;
    select_ln388_fu_449_p3 <= 
        ap_const_lv10_200 when (and_ln786_fu_295_p2(0) = '1') else 
        tmp_fu_431_p4;
    select_ln65_fu_237_p1 <= data_V_data_1_V_dout;
    select_ln65_fu_237_p2 <= data_V_data_0_V_dout;
    select_ln65_fu_237_p3 <= 
        select_ln65_fu_237_p1 when (icmp_ln1496_fu_231_p2(0) = '1') else 
        select_ln65_fu_237_p2;
        sext_ln241_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(invert_table2_q0),26));

        sext_ln703_1_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_V_fu_251_p3),17));

    sext_ln703_2_fu_319_p0 <= data_V_data_1_V_dout;
        sext_ln703_2_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_2_fu_319_p0),17));

    sext_ln703_3_fu_375_p0 <= data_V_data_2_V_dout;
        sext_ln703_3_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_3_fu_375_p0),17));

    sext_ln703_fu_259_p0 <= data_V_data_0_V_dout;
        sext_ln703_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_fu_259_p0),17));

    sub_ln1193_1_fu_323_p2 <= std_logic_vector(signed(sext_ln703_2_fu_319_p1) - signed(sext_ln703_1_fu_263_p1));
    sub_ln1193_2_fu_379_p2 <= std_logic_vector(signed(sext_ln703_3_fu_375_p1) - signed(sext_ln703_1_fu_263_p1));
    sub_ln1193_fu_267_p2 <= std_logic_vector(signed(sext_ln703_fu_259_p1) - signed(sext_ln703_1_fu_263_p1));
    tmp_10_fu_337_p3 <= sub_ln1193_1_fu_323_p2(15 downto 15);
    tmp_11_fu_385_p3 <= sub_ln1193_2_fu_379_p2(16 downto 16);
    tmp_12_fu_393_p3 <= sub_ln1193_2_fu_379_p2(15 downto 15);
    tmp_5_fu_273_p3 <= sub_ln1193_fu_267_p2(16 downto 16);
    tmp_6_fu_470_p4 <= sub_ln1193_1_fu_323_p2(15 downto 6);
    tmp_7_fu_281_p3 <= sub_ln1193_fu_267_p2(15 downto 15);
    tmp_8_fu_504_p4 <= sub_ln1193_2_fu_379_p2(15 downto 6);
    tmp_9_fu_329_p3 <= sub_ln1193_1_fu_323_p2(16 downto 16);
    tmp_fu_431_p4 <= sub_ln1193_fu_267_p2(15 downto 6);
    tmp_s_fu_628_p4 <= p_Val2_9_fu_584_p2(17 downto 8);
    underflow_fu_604_p2 <= (xor_ln786_3_fu_598_p2 and p_Result_s_fu_576_p3);
    x_max_V_fu_251_p1 <= data_V_data_2_V_dout;
    x_max_V_fu_251_p3 <= 
        x_max_V_fu_251_p1 when (icmp_ln1496_1_fu_245_p2(0) = '1') else 
        select_ln65_fu_237_p3;
    xor_ln340_1_fu_363_p2 <= (tmp_9_fu_329_p3 xor ap_const_lv1_1);
    xor_ln340_2_fu_419_p2 <= (tmp_11_fu_385_p3 xor ap_const_lv1_1);
    xor_ln340_3_fu_301_p2 <= (tmp_7_fu_281_p3 xor tmp_5_fu_273_p3);
    xor_ln340_4_fu_357_p2 <= (tmp_9_fu_329_p3 xor tmp_10_fu_337_p3);
    xor_ln340_5_fu_413_p2 <= (tmp_12_fu_393_p3 xor tmp_11_fu_385_p3);
    xor_ln340_6_fu_610_p2 <= (p_Result_s_fu_576_p3 xor p_Result_7_fu_590_p3);
    xor_ln340_7_fu_616_p2 <= (p_Result_s_fu_576_p3 xor ap_const_lv1_1);
    xor_ln340_fu_307_p2 <= (tmp_5_fu_273_p3 xor ap_const_lv1_1);
    xor_ln786_1_fu_345_p2 <= (tmp_10_fu_337_p3 xor ap_const_lv1_1);
    xor_ln786_2_fu_401_p2 <= (tmp_12_fu_393_p3 xor ap_const_lv1_1);
    xor_ln786_3_fu_598_p2 <= (p_Result_7_fu_590_p3 xor ap_const_lv1_1);
    xor_ln786_fu_289_p2 <= (tmp_7_fu_281_p3 xor ap_const_lv1_1);
    y_V_1_fu_496_p3 <= 
        select_ln340_2_fu_480_p3 when (or_ln340_1_fu_369_p2(0) = '1') else 
        select_ln388_1_fu_488_p3;
    y_V_2_fu_530_p3 <= 
        select_ln340_4_fu_514_p3 when (or_ln340_2_fu_425_p2(0) = '1') else 
        select_ln388_2_fu_522_p3;
    y_V_3_fu_654_p3 <= 
        select_ln340_6_fu_638_p3 when (or_ln340_3_fu_622_p2(0) = '1') else 
        select_ln388_3_fu_646_p3;
    y_V_fu_457_p3 <= 
        select_ln340_fu_441_p3 when (or_ln340_fu_313_p2(0) = '1') else 
        select_ln388_fu_449_p3;
    zext_ln1118_1_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_1_V_reg_710),26));
    zext_ln1118_2_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_2_V_reg_721),26));
    zext_ln1118_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_0_V_reg_699),26));
    zext_ln225_1_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_1_reg_689),64));
    zext_ln225_2_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_2_reg_694),64));
    zext_ln225_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_fu_457_p3),64));
    zext_ln235_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_3_fu_654_p3),64));
    zext_ln36_1_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_1_V_reg_710),18));
    zext_ln36_2_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_0_V_reg_699),18));
    zext_ln36_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q0),18));
end behav;
