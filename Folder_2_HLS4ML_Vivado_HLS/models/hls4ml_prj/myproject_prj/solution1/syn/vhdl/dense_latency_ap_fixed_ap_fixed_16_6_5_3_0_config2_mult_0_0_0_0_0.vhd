-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_latency_ap_fixed_ap_fixed_16_6_5_3_0_config2_mult_0_0_0_0_0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_5_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_6_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_7_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_8_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of dense_latency_ap_fixed_ap_fixed_16_6_5_3_0_config2_mult_0_0_0_0_0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv26_3FFF8C4 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111100011000100";
    constant ap_const_lv26_3FFFAE4 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111101011100100";
    constant ap_const_lv26_618 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011000011000";
    constant ap_const_lv26_5D0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010111010000";
    constant ap_const_lv26_6AE : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011010101110";
    constant ap_const_lv26_3FFFBDF : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111101111011111";
    constant ap_const_lv26_3FFFA5F : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111101001011111";
    constant ap_const_lv26_3FFFA99 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111101010011001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv16_FFFC : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_47 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000111";
    constant ap_const_lv16_FC9C : STD_LOGIC_VECTOR (15 downto 0) := "1111110010011100";
    constant ap_const_lv16_FFF9 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_185_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_195 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_175_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_reg_345 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_s_reg_350 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_79_reg_355 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_2_V_fu_227_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_2_V_reg_360 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_3_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_5_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_6_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_7_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_8_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_106_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_106_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1116_75_cast_fu_199_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1116_76_cast_fu_205_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1116_79_cast_fu_215_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1116_80_cast_fu_233_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_107_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_107_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1116_78_cast_fu_210_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1116_81_cast_fu_238_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_106_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_107_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln703_84_fu_221_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1116_81_cast_fu_238_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1118_fu_243_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1118_fu_243_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln1118_s_fu_255_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1118_s_fu_255_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1118_fu_263_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal shl_ln_fu_247_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln1118_fu_267_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln708_84_fu_273_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_fu_283_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_82_fu_298_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_81_fu_294_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_86_fu_310_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_80_fu_289_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_1_V_fu_304_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_3_V_fu_316_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                acc_2_V_reg_360 <= acc_2_V_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ap_port_reg_data_3_V_read <= data_3_V_read;
                ap_port_reg_data_5_V_read <= data_5_V_read;
                ap_port_reg_data_6_V_read <= data_6_V_read;
                ap_port_reg_data_7_V_read <= data_7_V_read;
                ap_port_reg_data_8_V_read <= data_8_V_read;
                trunc_ln708_s_reg_350 <= grp_fu_107_p2(25 downto 10);
                trunc_ln_reg_345 <= grp_fu_106_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then
                reg_195 <= grp_fu_107_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln708_79_reg_355 <= grp_fu_106_p2(25 downto 10);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    acc_1_V_fu_304_p2 <= std_logic_vector(unsigned(add_ln703_82_fu_298_p2) + unsigned(add_ln703_81_fu_294_p2));
    acc_2_V_fu_227_p2 <= std_logic_vector(unsigned(add_ln703_84_fu_221_p2) + unsigned(reg_195));
    acc_3_V_fu_316_p2 <= std_logic_vector(unsigned(add_ln703_86_fu_310_p2) + unsigned(reg_195));
    add_ln1118_fu_267_p2 <= std_logic_vector(signed(sext_ln1118_fu_263_p1) + signed(shl_ln_fu_247_p3));
    add_ln703_80_fu_289_p2 <= std_logic_vector(unsigned(add_ln703_fu_283_p2) + unsigned(trunc_ln_reg_345));
    add_ln703_81_fu_294_p2 <= std_logic_vector(unsigned(trunc_ln708_s_reg_350) + unsigned(trunc_ln708_79_reg_355));
    add_ln703_82_fu_298_p2 <= std_logic_vector(signed(ap_const_lv16_FC9C) + signed(grp_fu_175_p4));
    add_ln703_84_fu_221_p2 <= std_logic_vector(signed(ap_const_lv16_FFFC) + signed(grp_fu_175_p4));
    add_ln703_86_fu_310_p2 <= std_logic_vector(signed(ap_const_lv16_FFF9) + signed(grp_fu_185_p4));
    add_ln703_fu_283_p2 <= std_logic_vector(unsigned(ap_const_lv16_47) + unsigned(trunc_ln708_84_fu_273_p4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= add_ln703_80_fu_289_p2;
    ap_return_1 <= acc_1_V_fu_304_p2;
    ap_return_2 <= acc_2_V_reg_360;
    ap_return_3 <= acc_3_V_fu_316_p2;

    grp_fu_106_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_106_p0 <= ap_const_lv26_5D0(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_106_p0 <= ap_const_lv26_618(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_106_p0 <= ap_const_lv26_3FFFAE4(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_106_p0 <= ap_const_lv26_3FFF8C4(13 - 1 downto 0);
        else 
            grp_fu_106_p0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_106_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, sext_ln1116_75_cast_fu_199_p1, sext_ln1116_76_cast_fu_205_p1, sext_ln1116_79_cast_fu_215_p1, sext_ln1116_80_cast_fu_233_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_106_p1 <= sext_ln1116_80_cast_fu_233_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_106_p1 <= sext_ln1116_79_cast_fu_215_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_106_p1 <= sext_ln1116_76_cast_fu_205_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_106_p1 <= sext_ln1116_75_cast_fu_199_p1(16 - 1 downto 0);
        else 
            grp_fu_106_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_106_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_106_p0) * signed(grp_fu_106_p1))), 26));

    grp_fu_107_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_107_p0 <= ap_const_lv26_3FFFA99(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_107_p0 <= ap_const_lv26_3FFFA5F(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_107_p0 <= ap_const_lv26_3FFFBDF(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_107_p0 <= ap_const_lv26_6AE(13 - 1 downto 0);
        else 
            grp_fu_107_p0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_107_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, sext_ln1116_75_cast_fu_199_p1, sext_ln1116_79_cast_fu_215_p1, sext_ln1116_78_cast_fu_210_p1, sext_ln1116_81_cast_fu_238_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_107_p1 <= sext_ln1116_81_cast_fu_238_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_107_p1 <= sext_ln1116_79_cast_fu_215_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_107_p1 <= sext_ln1116_78_cast_fu_210_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_107_p1 <= sext_ln1116_75_cast_fu_199_p1(16 - 1 downto 0);
        else 
            grp_fu_107_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_107_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_107_p0) * signed(grp_fu_107_p1))), 26));
    grp_fu_175_p4 <= grp_fu_106_p2(25 downto 10);
    grp_fu_185_p4 <= grp_fu_107_p2(25 downto 10);
        sext_ln1116_75_cast_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_2_V_read),26));

        sext_ln1116_76_cast_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_port_reg_data_3_V_read),26));

        sext_ln1116_78_cast_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_port_reg_data_5_V_read),26));

        sext_ln1116_79_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_port_reg_data_6_V_read),26));

        sext_ln1116_80_cast_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_port_reg_data_7_V_read),26));

    sext_ln1116_81_cast_fu_238_p0 <= ap_port_reg_data_8_V_read;
        sext_ln1116_81_cast_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1116_81_cast_fu_238_p0),26));

        sext_ln1118_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_s_fu_255_p3),26));

    shl_ln1118_s_fu_255_p1 <= ap_port_reg_data_8_V_read;
    shl_ln1118_s_fu_255_p3 <= (shl_ln1118_s_fu_255_p1 & ap_const_lv4_0);
    shl_ln_fu_247_p3 <= (trunc_ln1118_fu_243_p1 & ap_const_lv11_0);
    trunc_ln1118_fu_243_p0 <= ap_port_reg_data_8_V_read;
    trunc_ln1118_fu_243_p1 <= trunc_ln1118_fu_243_p0(15 - 1 downto 0);
    trunc_ln708_84_fu_273_p4 <= add_ln1118_fu_267_p2(25 downto 10);
end behav;
