-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC );
end;


architecture behav of pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv10_2A4 : STD_LOGIC_VECTOR (9 downto 0) := "1010100100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal pX_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sX_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_2_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_20 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_21 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_22 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_23 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_36 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_37 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_38 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_39 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_52 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_53 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_54 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_55 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_10 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_11 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_24 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_25 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_26 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_27 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_40 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_41 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_42 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_43 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_56 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_57 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_58 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_59 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_12 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_13 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_14 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_15 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_28 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_29 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_30 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_31 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_44 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_45 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_46 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_47 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_60 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_61 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_62 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2_63 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal line_buffer_Array_V_2_0_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_2_1_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_1_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_1_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_2_2_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_2_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_2_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_2_0_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_1_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_2_1_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_1_1_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_1_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_2_2_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_2_1_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_2_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_2_0_2_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_2_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_2_1_2_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_1_2_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_1_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_2_2_2_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_2_2_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_2_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_2_0_3_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_3_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_2_1_3_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_1_3_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_1_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_2_2_3_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_2_3_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_2_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln241_reg_3394 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_data_1_V_blk_n : STD_LOGIC;
    signal data_V_data_2_V_blk_n : STD_LOGIC;
    signal data_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal and_ln191_4_reg_3403 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_364 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln241_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal io_acc_block_signal_op56 : STD_LOGIC;
    signal io_acc_block_signal_op369 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln241_fu_392_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal and_ln191_4_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_reg_3407 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln216_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln222_fu_530_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_reg_pp0_iter0_storemerge_i_i_reg_375 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln225_fu_462_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln227_fu_480_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln220_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_sY_1_load : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_0_V_fu_1678_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_data_1_V_fu_2235_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_fu_2792_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_fu_3349_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln191_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_4_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_5_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_6_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_3_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln227_fu_474_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln222_fu_524_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1496_fu_1160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_24_fu_1178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_1170_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_33_fu_1192_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_25_fu_1200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_32_fu_1184_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_fu_1166_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_34_fu_1206_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln_fu_1222_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_26_fu_1260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_27_fu_1282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_36_fu_1274_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_38_fu_1296_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_28_fu_1304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_48_fu_1288_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_35_fu_1266_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_39_fu_1310_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln65_1_fu_1322_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln_fu_1222_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_1_fu_1322_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_29_fu_1360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln65_8_fu_1214_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_40_fu_1366_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln65_9_fu_1374_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_30_fu_1416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_31_fu_1438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_42_fu_1430_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_44_fu_1452_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_32_fu_1460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_43_fu_1444_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_41_fu_1422_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_45_fu_1466_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_33_fu_1512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_34_fu_1534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_47_fu_1526_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_49_fu_1548_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_35_fu_1556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_52_fu_1540_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_46_fu_1518_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_50_fu_1562_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln65_fu_1570_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_3_fu_1474_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_4_fu_1574_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_36_fu_1612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_51_fu_1618_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_2_fu_1378_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_5_fu_1626_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_37_fu_1664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_0_V_fu_1678_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_1_fu_1717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_38_fu_1735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_53_fu_1727_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_55_fu_1749_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_39_fu_1757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_54_fu_1741_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_10_fu_1723_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_56_fu_1763_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln65_6_fu_1779_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_40_fu_1817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_41_fu_1839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_58_fu_1831_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_60_fu_1853_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_42_fu_1861_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_70_fu_1845_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_57_fu_1823_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_61_fu_1867_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln65_7_fu_1879_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_6_fu_1779_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_7_fu_1879_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_43_fu_1917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln65_11_fu_1771_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_62_fu_1923_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln65_12_fu_1931_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_44_fu_1973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_45_fu_1995_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_64_fu_1987_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_66_fu_2009_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_46_fu_2017_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_65_fu_2001_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_63_fu_1979_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_67_fu_2023_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_47_fu_2069_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_48_fu_2091_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_69_fu_2083_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_71_fu_2105_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_49_fu_2113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_80_fu_2097_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_68_fu_2075_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_72_fu_2119_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln65_1_fu_2127_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_9_fu_2031_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_s_fu_2131_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_50_fu_2169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_73_fu_2175_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_8_fu_1935_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_10_fu_2183_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_51_fu_2221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_1_V_fu_2235_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_2_fu_2274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_52_fu_2292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_74_fu_2284_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_76_fu_2306_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_53_fu_2314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_75_fu_2298_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_13_fu_2280_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_77_fu_2320_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln65_11_fu_2336_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_54_fu_2374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_55_fu_2396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_79_fu_2388_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_81_fu_2410_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_56_fu_2418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_101_fu_2402_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_78_fu_2380_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_82_fu_2424_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln65_12_fu_2436_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_11_fu_2336_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_12_fu_2436_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_57_fu_2474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln65_14_fu_2328_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_83_fu_2480_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln65_15_fu_2488_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_58_fu_2530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_59_fu_2552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_85_fu_2544_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_87_fu_2566_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_60_fu_2574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_86_fu_2558_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_84_fu_2536_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_88_fu_2580_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_61_fu_2626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_62_fu_2648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_90_fu_2640_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_92_fu_2662_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_63_fu_2670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_112_fu_2654_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_89_fu_2632_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_93_fu_2676_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln65_2_fu_2684_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_14_fu_2588_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_15_fu_2688_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_64_fu_2726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_94_fu_2732_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_13_fu_2492_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_16_fu_2740_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_65_fu_2778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_2_V_fu_2792_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_66_fu_2831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_67_fu_2849_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_95_fu_2841_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_97_fu_2863_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_68_fu_2871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_96_fu_2855_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_16_fu_2837_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_98_fu_2877_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln65_17_fu_2893_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_69_fu_2931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_70_fu_2953_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_100_fu_2945_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_102_fu_2967_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_71_fu_2975_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_117_fu_2959_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_99_fu_2937_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_103_fu_2981_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln65_18_fu_2993_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_17_fu_2893_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_18_fu_2993_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_72_fu_3031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln65_17_fu_2885_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_104_fu_3037_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln65_18_fu_3045_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_73_fu_3087_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_74_fu_3109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_106_fu_3101_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_108_fu_3123_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_75_fu_3131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_107_fu_3115_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_105_fu_3093_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln65_109_fu_3137_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1496_76_fu_3183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_77_fu_3205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_111_fu_3197_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_113_fu_3219_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_78_fu_3227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_118_fu_3211_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_110_fu_3189_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln65_114_fu_3233_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln65_3_fu_3241_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_20_fu_3145_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_21_fu_3245_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_79_fu_3283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_115_fu_3289_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln65_19_fu_3049_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln65_22_fu_3297_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_80_fu_3335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_3_V_fu_3349_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_290 : BOOLEAN;
    signal ap_condition_316 : BOOLEAN;
    signal ap_condition_276 : BOOLEAN;
    signal ap_condition_309 : BOOLEAN;
    signal ap_condition_322 : BOOLEAN;

    component myproject_mux_164_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    line_buffer_Array_V_2_0_0_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_0_0_ce0,
        we0 => line_buffer_Array_V_2_0_0_we0,
        d0 => data_V_data_0_V_dout,
        q0 => line_buffer_Array_V_2_0_0_q0);

    line_buffer_Array_V_2_1_0_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_1_0_ce0,
        we0 => line_buffer_Array_V_2_1_0_we0,
        d0 => line_buffer_Array_V_2_0_0_q0,
        q0 => line_buffer_Array_V_2_1_0_q0);

    line_buffer_Array_V_2_2_0_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_2_0_ce0,
        we0 => line_buffer_Array_V_2_2_0_we0,
        d0 => line_buffer_Array_V_2_1_0_q0,
        q0 => line_buffer_Array_V_2_2_0_q0);

    line_buffer_Array_V_2_0_1_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_0_1_ce0,
        we0 => line_buffer_Array_V_2_0_1_we0,
        d0 => data_V_data_1_V_dout,
        q0 => line_buffer_Array_V_2_0_1_q0);

    line_buffer_Array_V_2_1_1_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_1_1_ce0,
        we0 => line_buffer_Array_V_2_1_1_we0,
        d0 => line_buffer_Array_V_2_0_1_q0,
        q0 => line_buffer_Array_V_2_1_1_q0);

    line_buffer_Array_V_2_2_1_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_2_1_ce0,
        we0 => line_buffer_Array_V_2_2_1_we0,
        d0 => line_buffer_Array_V_2_1_1_q0,
        q0 => line_buffer_Array_V_2_2_1_q0);

    line_buffer_Array_V_2_0_2_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_0_2_ce0,
        we0 => line_buffer_Array_V_2_0_2_we0,
        d0 => data_V_data_2_V_dout,
        q0 => line_buffer_Array_V_2_0_2_q0);

    line_buffer_Array_V_2_1_2_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_1_2_ce0,
        we0 => line_buffer_Array_V_2_1_2_we0,
        d0 => line_buffer_Array_V_2_0_2_q0,
        q0 => line_buffer_Array_V_2_1_2_q0);

    line_buffer_Array_V_2_2_2_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_2_2_ce0,
        we0 => line_buffer_Array_V_2_2_2_we0,
        d0 => line_buffer_Array_V_2_1_2_q0,
        q0 => line_buffer_Array_V_2_2_2_q0);

    line_buffer_Array_V_2_0_3_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_0_3_ce0,
        we0 => line_buffer_Array_V_2_0_3_we0,
        d0 => data_V_data_3_V_dout,
        q0 => line_buffer_Array_V_2_0_3_q0);

    line_buffer_Array_V_2_1_3_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_1_3_ce0,
        we0 => line_buffer_Array_V_2_1_3_we0,
        d0 => line_buffer_Array_V_2_0_3_q0,
        q0 => line_buffer_Array_V_2_1_3_q0);

    line_buffer_Array_V_2_2_3_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe
    generic map (
        DataWidth => 16,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_19,
        ce0 => line_buffer_Array_V_2_2_3_ce0,
        we0 => line_buffer_Array_V_2_2_3_we0,
        d0 => line_buffer_Array_V_2_1_3_q0,
        q0 => line_buffer_Array_V_2_2_3_q0);

    myproject_mux_164_16_1_1_U37 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_2_4,
        din1 => kernel_data_V_2_8,
        din2 => kernel_data_V_2_12,
        din3 => line_buffer_Array_V_2_2_0_q0,
        din4 => line_buffer_Array_V_2_2_0_q0,
        din5 => line_buffer_Array_V_2_2_0_q0,
        din6 => line_buffer_Array_V_2_2_0_q0,
        din7 => line_buffer_Array_V_2_2_0_q0,
        din8 => line_buffer_Array_V_2_2_0_q0,
        din9 => line_buffer_Array_V_2_2_0_q0,
        din10 => line_buffer_Array_V_2_2_0_q0,
        din11 => line_buffer_Array_V_2_2_0_q0,
        din12 => line_buffer_Array_V_2_2_0_q0,
        din13 => line_buffer_Array_V_2_2_0_q0,
        din14 => line_buffer_Array_V_2_2_0_q0,
        din15 => line_buffer_Array_V_2_2_0_q0,
        din16 => phi_ln_fu_1222_p17,
        dout => phi_ln_fu_1222_p18);

    myproject_mux_164_16_1_1_U38 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => line_buffer_Array_V_2_1_0_q0,
        din1 => line_buffer_Array_V_2_1_0_q0,
        din2 => line_buffer_Array_V_2_1_0_q0,
        din3 => line_buffer_Array_V_2_1_0_q0,
        din4 => kernel_data_V_2_20,
        din5 => kernel_data_V_2_24,
        din6 => kernel_data_V_2_28,
        din7 => line_buffer_Array_V_2_1_0_q0,
        din8 => line_buffer_Array_V_2_1_0_q0,
        din9 => line_buffer_Array_V_2_1_0_q0,
        din10 => line_buffer_Array_V_2_1_0_q0,
        din11 => line_buffer_Array_V_2_1_0_q0,
        din12 => line_buffer_Array_V_2_1_0_q0,
        din13 => line_buffer_Array_V_2_1_0_q0,
        din14 => line_buffer_Array_V_2_1_0_q0,
        din15 => line_buffer_Array_V_2_1_0_q0,
        din16 => phi_ln65_1_fu_1322_p17,
        dout => phi_ln65_1_fu_1322_p18);

    myproject_mux_164_16_1_1_U39 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_2_4,
        din1 => kernel_data_V_2_8,
        din2 => kernel_data_V_2_12,
        din3 => line_buffer_Array_V_2_2_0_q0,
        din4 => kernel_data_V_2_20,
        din5 => kernel_data_V_2_24,
        din6 => kernel_data_V_2_28,
        din7 => line_buffer_Array_V_2_1_0_q0,
        din8 => line_buffer_Array_V_2_1_0_q0,
        din9 => line_buffer_Array_V_2_1_0_q0,
        din10 => line_buffer_Array_V_2_1_0_q0,
        din11 => line_buffer_Array_V_2_1_0_q0,
        din12 => line_buffer_Array_V_2_1_0_q0,
        din13 => line_buffer_Array_V_2_1_0_q0,
        din14 => line_buffer_Array_V_2_1_0_q0,
        din15 => line_buffer_Array_V_2_1_0_q0,
        din16 => zext_ln65_9_fu_1374_p1,
        dout => phi_ln65_2_fu_1378_p18);

    myproject_mux_164_16_1_1_U40 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => line_buffer_Array_V_2_0_0_q0,
        din1 => line_buffer_Array_V_2_0_0_q0,
        din2 => line_buffer_Array_V_2_0_0_q0,
        din3 => line_buffer_Array_V_2_0_0_q0,
        din4 => line_buffer_Array_V_2_0_0_q0,
        din5 => line_buffer_Array_V_2_0_0_q0,
        din6 => line_buffer_Array_V_2_0_0_q0,
        din7 => line_buffer_Array_V_2_0_0_q0,
        din8 => kernel_data_V_2_36,
        din9 => kernel_data_V_2_40,
        din10 => kernel_data_V_2_44,
        din11 => line_buffer_Array_V_2_0_0_q0,
        din12 => line_buffer_Array_V_2_0_0_q0,
        din13 => line_buffer_Array_V_2_0_0_q0,
        din14 => line_buffer_Array_V_2_0_0_q0,
        din15 => line_buffer_Array_V_2_0_0_q0,
        din16 => select_ln65_45_fu_1466_p3,
        dout => phi_ln65_3_fu_1474_p18);

    myproject_mux_164_16_1_1_U41 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => data_V_data_0_V_dout,
        din1 => data_V_data_0_V_dout,
        din2 => data_V_data_0_V_dout,
        din3 => data_V_data_0_V_dout,
        din4 => data_V_data_0_V_dout,
        din5 => data_V_data_0_V_dout,
        din6 => data_V_data_0_V_dout,
        din7 => data_V_data_0_V_dout,
        din8 => data_V_data_0_V_dout,
        din9 => data_V_data_0_V_dout,
        din10 => data_V_data_0_V_dout,
        din11 => data_V_data_0_V_dout,
        din12 => kernel_data_V_2_52,
        din13 => kernel_data_V_2_56,
        din14 => kernel_data_V_2_60,
        din15 => data_V_data_0_V_dout,
        din16 => sext_ln65_fu_1570_p1,
        dout => phi_ln65_4_fu_1574_p18);

    myproject_mux_164_16_1_1_U42 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => data_V_data_0_V_dout,
        din1 => data_V_data_0_V_dout,
        din2 => data_V_data_0_V_dout,
        din3 => data_V_data_0_V_dout,
        din4 => data_V_data_0_V_dout,
        din5 => data_V_data_0_V_dout,
        din6 => data_V_data_0_V_dout,
        din7 => data_V_data_0_V_dout,
        din8 => kernel_data_V_2_36,
        din9 => kernel_data_V_2_40,
        din10 => kernel_data_V_2_44,
        din11 => line_buffer_Array_V_2_0_0_q0,
        din12 => kernel_data_V_2_52,
        din13 => kernel_data_V_2_56,
        din14 => kernel_data_V_2_60,
        din15 => data_V_data_0_V_dout,
        din16 => select_ln65_51_fu_1618_p3,
        dout => phi_ln65_5_fu_1626_p18);

    myproject_mux_164_16_1_1_U43 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_2_4,
        din1 => kernel_data_V_2_8,
        din2 => kernel_data_V_2_12,
        din3 => line_buffer_Array_V_2_2_0_q0,
        din4 => kernel_data_V_2_20,
        din5 => kernel_data_V_2_24,
        din6 => kernel_data_V_2_28,
        din7 => line_buffer_Array_V_2_1_0_q0,
        din8 => kernel_data_V_2_36,
        din9 => kernel_data_V_2_40,
        din10 => kernel_data_V_2_44,
        din11 => line_buffer_Array_V_2_0_0_q0,
        din12 => kernel_data_V_2_52,
        din13 => kernel_data_V_2_56,
        din14 => kernel_data_V_2_60,
        din15 => data_V_data_0_V_dout,
        din16 => tmp_data_0_V_fu_1678_p17,
        dout => tmp_data_0_V_fu_1678_p18);

    myproject_mux_164_16_1_1_U44 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_2_5,
        din1 => kernel_data_V_2_9,
        din2 => kernel_data_V_2_13,
        din3 => line_buffer_Array_V_2_2_1_q0,
        din4 => line_buffer_Array_V_2_2_1_q0,
        din5 => line_buffer_Array_V_2_2_1_q0,
        din6 => line_buffer_Array_V_2_2_1_q0,
        din7 => line_buffer_Array_V_2_2_1_q0,
        din8 => line_buffer_Array_V_2_2_1_q0,
        din9 => line_buffer_Array_V_2_2_1_q0,
        din10 => line_buffer_Array_V_2_2_1_q0,
        din11 => line_buffer_Array_V_2_2_1_q0,
        din12 => line_buffer_Array_V_2_2_1_q0,
        din13 => line_buffer_Array_V_2_2_1_q0,
        din14 => line_buffer_Array_V_2_2_1_q0,
        din15 => line_buffer_Array_V_2_2_1_q0,
        din16 => phi_ln65_6_fu_1779_p17,
        dout => phi_ln65_6_fu_1779_p18);

    myproject_mux_164_16_1_1_U45 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => line_buffer_Array_V_2_1_1_q0,
        din1 => line_buffer_Array_V_2_1_1_q0,
        din2 => line_buffer_Array_V_2_1_1_q0,
        din3 => line_buffer_Array_V_2_1_1_q0,
        din4 => kernel_data_V_2_21,
        din5 => kernel_data_V_2_25,
        din6 => kernel_data_V_2_29,
        din7 => line_buffer_Array_V_2_1_1_q0,
        din8 => line_buffer_Array_V_2_1_1_q0,
        din9 => line_buffer_Array_V_2_1_1_q0,
        din10 => line_buffer_Array_V_2_1_1_q0,
        din11 => line_buffer_Array_V_2_1_1_q0,
        din12 => line_buffer_Array_V_2_1_1_q0,
        din13 => line_buffer_Array_V_2_1_1_q0,
        din14 => line_buffer_Array_V_2_1_1_q0,
        din15 => line_buffer_Array_V_2_1_1_q0,
        din16 => phi_ln65_7_fu_1879_p17,
        dout => phi_ln65_7_fu_1879_p18);

    myproject_mux_164_16_1_1_U46 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_2_5,
        din1 => kernel_data_V_2_9,
        din2 => kernel_data_V_2_13,
        din3 => line_buffer_Array_V_2_2_1_q0,
        din4 => kernel_data_V_2_21,
        din5 => kernel_data_V_2_25,
        din6 => kernel_data_V_2_29,
        din7 => line_buffer_Array_V_2_1_1_q0,
        din8 => line_buffer_Array_V_2_1_1_q0,
        din9 => line_buffer_Array_V_2_1_1_q0,
        din10 => line_buffer_Array_V_2_1_1_q0,
        din11 => line_buffer_Array_V_2_1_1_q0,
        din12 => line_buffer_Array_V_2_1_1_q0,
        din13 => line_buffer_Array_V_2_1_1_q0,
        din14 => line_buffer_Array_V_2_1_1_q0,
        din15 => line_buffer_Array_V_2_1_1_q0,
        din16 => zext_ln65_12_fu_1931_p1,
        dout => phi_ln65_8_fu_1935_p18);

    myproject_mux_164_16_1_1_U47 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => line_buffer_Array_V_2_0_1_q0,
        din1 => line_buffer_Array_V_2_0_1_q0,
        din2 => line_buffer_Array_V_2_0_1_q0,
        din3 => line_buffer_Array_V_2_0_1_q0,
        din4 => line_buffer_Array_V_2_0_1_q0,
        din5 => line_buffer_Array_V_2_0_1_q0,
        din6 => line_buffer_Array_V_2_0_1_q0,
        din7 => line_buffer_Array_V_2_0_1_q0,
        din8 => kernel_data_V_2_37,
        din9 => kernel_data_V_2_41,
        din10 => kernel_data_V_2_45,
        din11 => line_buffer_Array_V_2_0_1_q0,
        din12 => line_buffer_Array_V_2_0_1_q0,
        din13 => line_buffer_Array_V_2_0_1_q0,
        din14 => line_buffer_Array_V_2_0_1_q0,
        din15 => line_buffer_Array_V_2_0_1_q0,
        din16 => select_ln65_67_fu_2023_p3,
        dout => phi_ln65_9_fu_2031_p18);

    myproject_mux_164_16_1_1_U48 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => data_V_data_1_V_dout,
        din1 => data_V_data_1_V_dout,
        din2 => data_V_data_1_V_dout,
        din3 => data_V_data_1_V_dout,
        din4 => data_V_data_1_V_dout,
        din5 => data_V_data_1_V_dout,
        din6 => data_V_data_1_V_dout,
        din7 => data_V_data_1_V_dout,
        din8 => data_V_data_1_V_dout,
        din9 => data_V_data_1_V_dout,
        din10 => data_V_data_1_V_dout,
        din11 => data_V_data_1_V_dout,
        din12 => kernel_data_V_2_53,
        din13 => kernel_data_V_2_57,
        din14 => kernel_data_V_2_61,
        din15 => data_V_data_1_V_dout,
        din16 => sext_ln65_1_fu_2127_p1,
        dout => phi_ln65_s_fu_2131_p18);

    myproject_mux_164_16_1_1_U49 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => data_V_data_1_V_dout,
        din1 => data_V_data_1_V_dout,
        din2 => data_V_data_1_V_dout,
        din3 => data_V_data_1_V_dout,
        din4 => data_V_data_1_V_dout,
        din5 => data_V_data_1_V_dout,
        din6 => data_V_data_1_V_dout,
        din7 => data_V_data_1_V_dout,
        din8 => kernel_data_V_2_37,
        din9 => kernel_data_V_2_41,
        din10 => kernel_data_V_2_45,
        din11 => line_buffer_Array_V_2_0_1_q0,
        din12 => kernel_data_V_2_53,
        din13 => kernel_data_V_2_57,
        din14 => kernel_data_V_2_61,
        din15 => data_V_data_1_V_dout,
        din16 => select_ln65_73_fu_2175_p3,
        dout => phi_ln65_10_fu_2183_p18);

    myproject_mux_164_16_1_1_U50 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_2_5,
        din1 => kernel_data_V_2_9,
        din2 => kernel_data_V_2_13,
        din3 => line_buffer_Array_V_2_2_1_q0,
        din4 => kernel_data_V_2_21,
        din5 => kernel_data_V_2_25,
        din6 => kernel_data_V_2_29,
        din7 => line_buffer_Array_V_2_1_1_q0,
        din8 => kernel_data_V_2_37,
        din9 => kernel_data_V_2_41,
        din10 => kernel_data_V_2_45,
        din11 => line_buffer_Array_V_2_0_1_q0,
        din12 => kernel_data_V_2_53,
        din13 => kernel_data_V_2_57,
        din14 => kernel_data_V_2_61,
        din15 => data_V_data_1_V_dout,
        din16 => tmp_data_1_V_fu_2235_p17,
        dout => tmp_data_1_V_fu_2235_p18);

    myproject_mux_164_16_1_1_U51 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_2_6,
        din1 => kernel_data_V_2_10,
        din2 => kernel_data_V_2_14,
        din3 => line_buffer_Array_V_2_2_2_q0,
        din4 => line_buffer_Array_V_2_2_2_q0,
        din5 => line_buffer_Array_V_2_2_2_q0,
        din6 => line_buffer_Array_V_2_2_2_q0,
        din7 => line_buffer_Array_V_2_2_2_q0,
        din8 => line_buffer_Array_V_2_2_2_q0,
        din9 => line_buffer_Array_V_2_2_2_q0,
        din10 => line_buffer_Array_V_2_2_2_q0,
        din11 => line_buffer_Array_V_2_2_2_q0,
        din12 => line_buffer_Array_V_2_2_2_q0,
        din13 => line_buffer_Array_V_2_2_2_q0,
        din14 => line_buffer_Array_V_2_2_2_q0,
        din15 => line_buffer_Array_V_2_2_2_q0,
        din16 => phi_ln65_11_fu_2336_p17,
        dout => phi_ln65_11_fu_2336_p18);

    myproject_mux_164_16_1_1_U52 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => line_buffer_Array_V_2_1_2_q0,
        din1 => line_buffer_Array_V_2_1_2_q0,
        din2 => line_buffer_Array_V_2_1_2_q0,
        din3 => line_buffer_Array_V_2_1_2_q0,
        din4 => kernel_data_V_2_22,
        din5 => kernel_data_V_2_26,
        din6 => kernel_data_V_2_30,
        din7 => line_buffer_Array_V_2_1_2_q0,
        din8 => line_buffer_Array_V_2_1_2_q0,
        din9 => line_buffer_Array_V_2_1_2_q0,
        din10 => line_buffer_Array_V_2_1_2_q0,
        din11 => line_buffer_Array_V_2_1_2_q0,
        din12 => line_buffer_Array_V_2_1_2_q0,
        din13 => line_buffer_Array_V_2_1_2_q0,
        din14 => line_buffer_Array_V_2_1_2_q0,
        din15 => line_buffer_Array_V_2_1_2_q0,
        din16 => phi_ln65_12_fu_2436_p17,
        dout => phi_ln65_12_fu_2436_p18);

    myproject_mux_164_16_1_1_U53 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_2_6,
        din1 => kernel_data_V_2_10,
        din2 => kernel_data_V_2_14,
        din3 => line_buffer_Array_V_2_2_2_q0,
        din4 => kernel_data_V_2_22,
        din5 => kernel_data_V_2_26,
        din6 => kernel_data_V_2_30,
        din7 => line_buffer_Array_V_2_1_2_q0,
        din8 => line_buffer_Array_V_2_1_2_q0,
        din9 => line_buffer_Array_V_2_1_2_q0,
        din10 => line_buffer_Array_V_2_1_2_q0,
        din11 => line_buffer_Array_V_2_1_2_q0,
        din12 => line_buffer_Array_V_2_1_2_q0,
        din13 => line_buffer_Array_V_2_1_2_q0,
        din14 => line_buffer_Array_V_2_1_2_q0,
        din15 => line_buffer_Array_V_2_1_2_q0,
        din16 => zext_ln65_15_fu_2488_p1,
        dout => phi_ln65_13_fu_2492_p18);

    myproject_mux_164_16_1_1_U54 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => line_buffer_Array_V_2_0_2_q0,
        din1 => line_buffer_Array_V_2_0_2_q0,
        din2 => line_buffer_Array_V_2_0_2_q0,
        din3 => line_buffer_Array_V_2_0_2_q0,
        din4 => line_buffer_Array_V_2_0_2_q0,
        din5 => line_buffer_Array_V_2_0_2_q0,
        din6 => line_buffer_Array_V_2_0_2_q0,
        din7 => line_buffer_Array_V_2_0_2_q0,
        din8 => kernel_data_V_2_38,
        din9 => kernel_data_V_2_42,
        din10 => kernel_data_V_2_46,
        din11 => line_buffer_Array_V_2_0_2_q0,
        din12 => line_buffer_Array_V_2_0_2_q0,
        din13 => line_buffer_Array_V_2_0_2_q0,
        din14 => line_buffer_Array_V_2_0_2_q0,
        din15 => line_buffer_Array_V_2_0_2_q0,
        din16 => select_ln65_88_fu_2580_p3,
        dout => phi_ln65_14_fu_2588_p18);

    myproject_mux_164_16_1_1_U55 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => data_V_data_2_V_dout,
        din1 => data_V_data_2_V_dout,
        din2 => data_V_data_2_V_dout,
        din3 => data_V_data_2_V_dout,
        din4 => data_V_data_2_V_dout,
        din5 => data_V_data_2_V_dout,
        din6 => data_V_data_2_V_dout,
        din7 => data_V_data_2_V_dout,
        din8 => data_V_data_2_V_dout,
        din9 => data_V_data_2_V_dout,
        din10 => data_V_data_2_V_dout,
        din11 => data_V_data_2_V_dout,
        din12 => kernel_data_V_2_54,
        din13 => kernel_data_V_2_58,
        din14 => kernel_data_V_2_62,
        din15 => data_V_data_2_V_dout,
        din16 => sext_ln65_2_fu_2684_p1,
        dout => phi_ln65_15_fu_2688_p18);

    myproject_mux_164_16_1_1_U56 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => data_V_data_2_V_dout,
        din1 => data_V_data_2_V_dout,
        din2 => data_V_data_2_V_dout,
        din3 => data_V_data_2_V_dout,
        din4 => data_V_data_2_V_dout,
        din5 => data_V_data_2_V_dout,
        din6 => data_V_data_2_V_dout,
        din7 => data_V_data_2_V_dout,
        din8 => kernel_data_V_2_38,
        din9 => kernel_data_V_2_42,
        din10 => kernel_data_V_2_46,
        din11 => line_buffer_Array_V_2_0_2_q0,
        din12 => kernel_data_V_2_54,
        din13 => kernel_data_V_2_58,
        din14 => kernel_data_V_2_62,
        din15 => data_V_data_2_V_dout,
        din16 => select_ln65_94_fu_2732_p3,
        dout => phi_ln65_16_fu_2740_p18);

    myproject_mux_164_16_1_1_U57 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_2_6,
        din1 => kernel_data_V_2_10,
        din2 => kernel_data_V_2_14,
        din3 => line_buffer_Array_V_2_2_2_q0,
        din4 => kernel_data_V_2_22,
        din5 => kernel_data_V_2_26,
        din6 => kernel_data_V_2_30,
        din7 => line_buffer_Array_V_2_1_2_q0,
        din8 => kernel_data_V_2_38,
        din9 => kernel_data_V_2_42,
        din10 => kernel_data_V_2_46,
        din11 => line_buffer_Array_V_2_0_2_q0,
        din12 => kernel_data_V_2_54,
        din13 => kernel_data_V_2_58,
        din14 => kernel_data_V_2_62,
        din15 => data_V_data_2_V_dout,
        din16 => tmp_data_2_V_fu_2792_p17,
        dout => tmp_data_2_V_fu_2792_p18);

    myproject_mux_164_16_1_1_U58 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_2_7,
        din1 => kernel_data_V_2_11,
        din2 => kernel_data_V_2_15,
        din3 => line_buffer_Array_V_2_2_3_q0,
        din4 => line_buffer_Array_V_2_2_3_q0,
        din5 => line_buffer_Array_V_2_2_3_q0,
        din6 => line_buffer_Array_V_2_2_3_q0,
        din7 => line_buffer_Array_V_2_2_3_q0,
        din8 => line_buffer_Array_V_2_2_3_q0,
        din9 => line_buffer_Array_V_2_2_3_q0,
        din10 => line_buffer_Array_V_2_2_3_q0,
        din11 => line_buffer_Array_V_2_2_3_q0,
        din12 => line_buffer_Array_V_2_2_3_q0,
        din13 => line_buffer_Array_V_2_2_3_q0,
        din14 => line_buffer_Array_V_2_2_3_q0,
        din15 => line_buffer_Array_V_2_2_3_q0,
        din16 => phi_ln65_17_fu_2893_p17,
        dout => phi_ln65_17_fu_2893_p18);

    myproject_mux_164_16_1_1_U59 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => line_buffer_Array_V_2_1_3_q0,
        din1 => line_buffer_Array_V_2_1_3_q0,
        din2 => line_buffer_Array_V_2_1_3_q0,
        din3 => line_buffer_Array_V_2_1_3_q0,
        din4 => kernel_data_V_2_23,
        din5 => kernel_data_V_2_27,
        din6 => kernel_data_V_2_31,
        din7 => line_buffer_Array_V_2_1_3_q0,
        din8 => line_buffer_Array_V_2_1_3_q0,
        din9 => line_buffer_Array_V_2_1_3_q0,
        din10 => line_buffer_Array_V_2_1_3_q0,
        din11 => line_buffer_Array_V_2_1_3_q0,
        din12 => line_buffer_Array_V_2_1_3_q0,
        din13 => line_buffer_Array_V_2_1_3_q0,
        din14 => line_buffer_Array_V_2_1_3_q0,
        din15 => line_buffer_Array_V_2_1_3_q0,
        din16 => phi_ln65_18_fu_2993_p17,
        dout => phi_ln65_18_fu_2993_p18);

    myproject_mux_164_16_1_1_U60 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_2_7,
        din1 => kernel_data_V_2_11,
        din2 => kernel_data_V_2_15,
        din3 => line_buffer_Array_V_2_2_3_q0,
        din4 => kernel_data_V_2_23,
        din5 => kernel_data_V_2_27,
        din6 => kernel_data_V_2_31,
        din7 => line_buffer_Array_V_2_1_3_q0,
        din8 => line_buffer_Array_V_2_1_3_q0,
        din9 => line_buffer_Array_V_2_1_3_q0,
        din10 => line_buffer_Array_V_2_1_3_q0,
        din11 => line_buffer_Array_V_2_1_3_q0,
        din12 => line_buffer_Array_V_2_1_3_q0,
        din13 => line_buffer_Array_V_2_1_3_q0,
        din14 => line_buffer_Array_V_2_1_3_q0,
        din15 => line_buffer_Array_V_2_1_3_q0,
        din16 => zext_ln65_18_fu_3045_p1,
        dout => phi_ln65_19_fu_3049_p18);

    myproject_mux_164_16_1_1_U61 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => line_buffer_Array_V_2_0_3_q0,
        din1 => line_buffer_Array_V_2_0_3_q0,
        din2 => line_buffer_Array_V_2_0_3_q0,
        din3 => line_buffer_Array_V_2_0_3_q0,
        din4 => line_buffer_Array_V_2_0_3_q0,
        din5 => line_buffer_Array_V_2_0_3_q0,
        din6 => line_buffer_Array_V_2_0_3_q0,
        din7 => line_buffer_Array_V_2_0_3_q0,
        din8 => kernel_data_V_2_39,
        din9 => kernel_data_V_2_43,
        din10 => kernel_data_V_2_47,
        din11 => line_buffer_Array_V_2_0_3_q0,
        din12 => line_buffer_Array_V_2_0_3_q0,
        din13 => line_buffer_Array_V_2_0_3_q0,
        din14 => line_buffer_Array_V_2_0_3_q0,
        din15 => line_buffer_Array_V_2_0_3_q0,
        din16 => select_ln65_109_fu_3137_p3,
        dout => phi_ln65_20_fu_3145_p18);

    myproject_mux_164_16_1_1_U62 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => data_V_data_3_V_dout,
        din1 => data_V_data_3_V_dout,
        din2 => data_V_data_3_V_dout,
        din3 => data_V_data_3_V_dout,
        din4 => data_V_data_3_V_dout,
        din5 => data_V_data_3_V_dout,
        din6 => data_V_data_3_V_dout,
        din7 => data_V_data_3_V_dout,
        din8 => data_V_data_3_V_dout,
        din9 => data_V_data_3_V_dout,
        din10 => data_V_data_3_V_dout,
        din11 => data_V_data_3_V_dout,
        din12 => kernel_data_V_2_55,
        din13 => kernel_data_V_2_59,
        din14 => kernel_data_V_2_63,
        din15 => data_V_data_3_V_dout,
        din16 => sext_ln65_3_fu_3241_p1,
        dout => phi_ln65_21_fu_3245_p18);

    myproject_mux_164_16_1_1_U63 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => data_V_data_3_V_dout,
        din1 => data_V_data_3_V_dout,
        din2 => data_V_data_3_V_dout,
        din3 => data_V_data_3_V_dout,
        din4 => data_V_data_3_V_dout,
        din5 => data_V_data_3_V_dout,
        din6 => data_V_data_3_V_dout,
        din7 => data_V_data_3_V_dout,
        din8 => kernel_data_V_2_39,
        din9 => kernel_data_V_2_43,
        din10 => kernel_data_V_2_47,
        din11 => line_buffer_Array_V_2_0_3_q0,
        din12 => kernel_data_V_2_55,
        din13 => kernel_data_V_2_59,
        din14 => kernel_data_V_2_63,
        din15 => data_V_data_3_V_dout,
        din16 => select_ln65_115_fu_3289_p3,
        dout => phi_ln65_22_fu_3297_p18);

    myproject_mux_164_16_1_1_U64 : component myproject_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_2_7,
        din1 => kernel_data_V_2_11,
        din2 => kernel_data_V_2_15,
        din3 => line_buffer_Array_V_2_2_3_q0,
        din4 => kernel_data_V_2_23,
        din5 => kernel_data_V_2_27,
        din6 => kernel_data_V_2_31,
        din7 => line_buffer_Array_V_2_1_3_q0,
        din8 => kernel_data_V_2_39,
        din9 => kernel_data_V_2_43,
        din10 => kernel_data_V_2_47,
        din11 => line_buffer_Array_V_2_0_3_q0,
        din12 => kernel_data_V_2_55,
        din13 => kernel_data_V_2_59,
        din14 => kernel_data_V_2_63,
        din15 => data_V_data_3_V_dout,
        din16 => tmp_data_3_V_fu_3349_p17,
        dout => tmp_data_3_V_fu_3349_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_276)) then
                if ((ap_const_boolean_1 = ap_condition_316)) then 
                    ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_290)) then 
                    ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375 <= select_ln222_fu_530_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_375;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_fu_386_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_364 <= add_ln241_fu_392_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_364 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    pX_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_309)) then
                if ((icmp_ln212_fu_456_p2 = ap_const_lv1_1)) then 
                    pX_1 <= ap_const_lv32_0;
                elsif ((icmp_ln212_fu_456_p2 = ap_const_lv1_0)) then 
                    pX_1 <= add_ln225_fu_462_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_322)) then
                if ((icmp_ln216_fu_506_p2 = ap_const_lv1_1)) then 
                    pY_1 <= ap_const_lv32_0;
                elsif ((icmp_ln216_fu_506_p2 = ap_const_lv1_0)) then 
                    pY_1 <= add_ln220_fu_512_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_309)) then
                if ((icmp_ln212_fu_456_p2 = ap_const_lv1_1)) then 
                    sX_1 <= ap_const_lv32_0;
                elsif ((icmp_ln212_fu_456_p2 = ap_const_lv1_0)) then 
                    sX_1 <= select_ln227_fu_480_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_fu_386_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln191_4_reg_3403 <= and_ln191_4_fu_450_p2;
                icmp_ln212_reg_3407 <= icmp_ln212_fu_456_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln241_reg_3394 <= icmp_ln241_fu_386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                kernel_data_V_2_10 <= kernel_data_V_2_14;
                kernel_data_V_2_11 <= kernel_data_V_2_15;
                kernel_data_V_2_12 <= line_buffer_Array_V_2_2_0_q0;
                kernel_data_V_2_13 <= line_buffer_Array_V_2_2_1_q0;
                kernel_data_V_2_14 <= line_buffer_Array_V_2_2_2_q0;
                kernel_data_V_2_15 <= line_buffer_Array_V_2_2_3_q0;
                kernel_data_V_2_20 <= kernel_data_V_2_24;
                kernel_data_V_2_21 <= kernel_data_V_2_25;
                kernel_data_V_2_22 <= kernel_data_V_2_26;
                kernel_data_V_2_23 <= kernel_data_V_2_27;
                kernel_data_V_2_24 <= kernel_data_V_2_28;
                kernel_data_V_2_25 <= kernel_data_V_2_29;
                kernel_data_V_2_26 <= kernel_data_V_2_30;
                kernel_data_V_2_27 <= kernel_data_V_2_31;
                kernel_data_V_2_28 <= line_buffer_Array_V_2_1_0_q0;
                kernel_data_V_2_29 <= line_buffer_Array_V_2_1_1_q0;
                kernel_data_V_2_30 <= line_buffer_Array_V_2_1_2_q0;
                kernel_data_V_2_31 <= line_buffer_Array_V_2_1_3_q0;
                kernel_data_V_2_36 <= kernel_data_V_2_40;
                kernel_data_V_2_37 <= kernel_data_V_2_41;
                kernel_data_V_2_38 <= kernel_data_V_2_42;
                kernel_data_V_2_39 <= kernel_data_V_2_43;
                kernel_data_V_2_4 <= kernel_data_V_2_8;
                kernel_data_V_2_40 <= kernel_data_V_2_44;
                kernel_data_V_2_41 <= kernel_data_V_2_45;
                kernel_data_V_2_42 <= kernel_data_V_2_46;
                kernel_data_V_2_43 <= kernel_data_V_2_47;
                kernel_data_V_2_44 <= line_buffer_Array_V_2_0_0_q0;
                kernel_data_V_2_45 <= line_buffer_Array_V_2_0_1_q0;
                kernel_data_V_2_46 <= line_buffer_Array_V_2_0_2_q0;
                kernel_data_V_2_47 <= line_buffer_Array_V_2_0_3_q0;
                kernel_data_V_2_5 <= kernel_data_V_2_9;
                kernel_data_V_2_52 <= kernel_data_V_2_56;
                kernel_data_V_2_53 <= kernel_data_V_2_57;
                kernel_data_V_2_54 <= kernel_data_V_2_58;
                kernel_data_V_2_55 <= kernel_data_V_2_59;
                kernel_data_V_2_56 <= kernel_data_V_2_60;
                kernel_data_V_2_57 <= kernel_data_V_2_61;
                kernel_data_V_2_58 <= kernel_data_V_2_62;
                kernel_data_V_2_59 <= kernel_data_V_2_63;
                kernel_data_V_2_6 <= kernel_data_V_2_10;
                kernel_data_V_2_60 <= data_V_data_0_V_dout;
                kernel_data_V_2_61 <= data_V_data_1_V_dout;
                kernel_data_V_2_62 <= data_V_data_2_V_dout;
                kernel_data_V_2_63 <= data_V_data_3_V_dout;
                kernel_data_V_2_7 <= kernel_data_V_2_11;
                kernel_data_V_2_8 <= kernel_data_V_2_12;
                kernel_data_V_2_9 <= kernel_data_V_2_13;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_reg_3407 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sY_1 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln241_fu_386_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln241_fu_386_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln241_fu_386_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln220_fu_512_p2 <= std_logic_vector(unsigned(pY_1) + unsigned(ap_const_lv32_1));
    add_ln222_fu_524_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_sY_1_load) + unsigned(ap_const_lv32_1));
    add_ln225_fu_462_p2 <= std_logic_vector(unsigned(pX_1) + unsigned(ap_const_lv32_1));
    add_ln227_fu_474_p2 <= std_logic_vector(unsigned(sX_1) + unsigned(ap_const_lv32_1));
    add_ln241_fu_392_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_364) + unsigned(ap_const_lv10_1));
    and_ln191_3_fu_444_p2 <= (icmp_ln191_6_fu_432_p2 and icmp_ln191_5_fu_422_p2);
    and_ln191_4_fu_450_p2 <= (and_ln191_fu_438_p2 and and_ln191_3_fu_444_p2);
    and_ln191_fu_438_p2 <= (icmp_ln191_fu_402_p2 and icmp_ln191_4_fu_412_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, and_ln191_4_reg_3403, io_acc_block_signal_op56, io_acc_block_signal_op369)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((io_acc_block_signal_op369 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_4_reg_3403)) or ((io_acc_block_signal_op56 = ap_const_logic_0) and (icmp_ln241_reg_3394 = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, and_ln191_4_reg_3403, io_acc_block_signal_op56, io_acc_block_signal_op369)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((io_acc_block_signal_op369 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_4_reg_3403)) or ((io_acc_block_signal_op56 = ap_const_logic_0) and (icmp_ln241_reg_3394 = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, and_ln191_4_reg_3403, io_acc_block_signal_op56, io_acc_block_signal_op369)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((io_acc_block_signal_op369 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_4_reg_3403)) or ((io_acc_block_signal_op56 = ap_const_logic_0) and (icmp_ln241_reg_3394 = ap_const_lv1_0))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(icmp_ln241_reg_3394, and_ln191_4_reg_3403, io_acc_block_signal_op56, io_acc_block_signal_op369)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((io_acc_block_signal_op369 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_4_reg_3403)) or ((io_acc_block_signal_op56 = ap_const_logic_0) and (icmp_ln241_reg_3394 = ap_const_lv1_0)));
    end process;


    ap_condition_276_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
                ap_condition_276 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_290_assign_proc : process(icmp_ln241_fu_386_p2, icmp_ln212_fu_456_p2, icmp_ln216_fu_506_p2)
    begin
                ap_condition_290 <= ((icmp_ln212_fu_456_p2 = ap_const_lv1_1) and (icmp_ln216_fu_506_p2 = ap_const_lv1_0) and (icmp_ln241_fu_386_p2 = ap_const_lv1_0));
    end process;


    ap_condition_309_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln241_fu_386_p2, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
                ap_condition_309 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_fu_386_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_316_assign_proc : process(icmp_ln241_fu_386_p2, icmp_ln212_fu_456_p2, icmp_ln216_fu_506_p2)
    begin
                ap_condition_316 <= ((icmp_ln216_fu_506_p2 = ap_const_lv1_1) and (icmp_ln212_fu_456_p2 = ap_const_lv1_1) and (icmp_ln241_fu_386_p2 = ap_const_lv1_0));
    end process;


    ap_condition_322_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln241_fu_386_p2, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, icmp_ln212_fu_456_p2)
    begin
                ap_condition_322 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_456_p2 = ap_const_lv1_1) and (icmp_ln241_fu_386_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln241_fu_386_p2)
    begin
        if ((icmp_ln241_fu_386_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge_i_i_reg_375 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    ap_sig_allocacmp_sY_1_load_assign_proc : process(sY_1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln212_reg_3407, ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375)
    begin
        if (((icmp_ln212_reg_3407 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_sY_1_load <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375;
        else 
            ap_sig_allocacmp_sY_1_load <= sY_1;
        end if; 
    end process;


    data_V_data_0_V_blk_n_assign_proc : process(data_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_3394)
    begin
        if (((icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(data_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_3394)
    begin
        if (((icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(data_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_3394)
    begin
        if (((icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(data_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_3394)
    begin
        if (((icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1496_1_fu_1717_p2 <= "1" when (signed(kernel_data_V_2_5) < signed(kernel_data_V_2_9)) else "0";
    icmp_ln1496_24_fu_1178_p2 <= "1" when (signed(kernel_data_V_2_12) < signed(line_buffer_Array_V_2_2_0_q0)) else "0";
    icmp_ln1496_25_fu_1200_p2 <= "1" when (signed(select_ln65_fu_1170_p3) < signed(select_ln65_33_fu_1192_p3)) else "0";
    icmp_ln1496_26_fu_1260_p2 <= "1" when (signed(kernel_data_V_2_20) < signed(kernel_data_V_2_24)) else "0";
    icmp_ln1496_27_fu_1282_p2 <= "1" when (signed(kernel_data_V_2_28) < signed(line_buffer_Array_V_2_1_0_q0)) else "0";
    icmp_ln1496_28_fu_1304_p2 <= "1" when (signed(select_ln65_36_fu_1274_p3) < signed(select_ln65_38_fu_1296_p3)) else "0";
    icmp_ln1496_29_fu_1360_p2 <= "1" when (signed(phi_ln_fu_1222_p18) < signed(phi_ln65_1_fu_1322_p18)) else "0";
    icmp_ln1496_2_fu_2274_p2 <= "1" when (signed(kernel_data_V_2_6) < signed(kernel_data_V_2_10)) else "0";
    icmp_ln1496_30_fu_1416_p2 <= "1" when (signed(kernel_data_V_2_36) < signed(kernel_data_V_2_40)) else "0";
    icmp_ln1496_31_fu_1438_p2 <= "1" when (signed(kernel_data_V_2_44) < signed(line_buffer_Array_V_2_0_0_q0)) else "0";
    icmp_ln1496_32_fu_1460_p2 <= "1" when (signed(select_ln65_42_fu_1430_p3) < signed(select_ln65_44_fu_1452_p3)) else "0";
    icmp_ln1496_33_fu_1512_p2 <= "1" when (signed(kernel_data_V_2_52) < signed(kernel_data_V_2_56)) else "0";
    icmp_ln1496_34_fu_1534_p2 <= "1" when (signed(kernel_data_V_2_60) < signed(data_V_data_0_V_dout)) else "0";
    icmp_ln1496_35_fu_1556_p2 <= "1" when (signed(select_ln65_47_fu_1526_p3) < signed(select_ln65_49_fu_1548_p3)) else "0";
    icmp_ln1496_36_fu_1612_p2 <= "1" when (signed(phi_ln65_3_fu_1474_p18) < signed(phi_ln65_4_fu_1574_p18)) else "0";
    icmp_ln1496_37_fu_1664_p2 <= "1" when (signed(phi_ln65_2_fu_1378_p18) < signed(phi_ln65_5_fu_1626_p18)) else "0";
    icmp_ln1496_38_fu_1735_p2 <= "1" when (signed(kernel_data_V_2_13) < signed(line_buffer_Array_V_2_2_1_q0)) else "0";
    icmp_ln1496_39_fu_1757_p2 <= "1" when (signed(select_ln65_53_fu_1727_p3) < signed(select_ln65_55_fu_1749_p3)) else "0";
    icmp_ln1496_40_fu_1817_p2 <= "1" when (signed(kernel_data_V_2_21) < signed(kernel_data_V_2_25)) else "0";
    icmp_ln1496_41_fu_1839_p2 <= "1" when (signed(kernel_data_V_2_29) < signed(line_buffer_Array_V_2_1_1_q0)) else "0";
    icmp_ln1496_42_fu_1861_p2 <= "1" when (signed(select_ln65_58_fu_1831_p3) < signed(select_ln65_60_fu_1853_p3)) else "0";
    icmp_ln1496_43_fu_1917_p2 <= "1" when (signed(phi_ln65_6_fu_1779_p18) < signed(phi_ln65_7_fu_1879_p18)) else "0";
    icmp_ln1496_44_fu_1973_p2 <= "1" when (signed(kernel_data_V_2_37) < signed(kernel_data_V_2_41)) else "0";
    icmp_ln1496_45_fu_1995_p2 <= "1" when (signed(kernel_data_V_2_45) < signed(line_buffer_Array_V_2_0_1_q0)) else "0";
    icmp_ln1496_46_fu_2017_p2 <= "1" when (signed(select_ln65_64_fu_1987_p3) < signed(select_ln65_66_fu_2009_p3)) else "0";
    icmp_ln1496_47_fu_2069_p2 <= "1" when (signed(kernel_data_V_2_53) < signed(kernel_data_V_2_57)) else "0";
    icmp_ln1496_48_fu_2091_p2 <= "1" when (signed(kernel_data_V_2_61) < signed(data_V_data_1_V_dout)) else "0";
    icmp_ln1496_49_fu_2113_p2 <= "1" when (signed(select_ln65_69_fu_2083_p3) < signed(select_ln65_71_fu_2105_p3)) else "0";
    icmp_ln1496_50_fu_2169_p2 <= "1" when (signed(phi_ln65_9_fu_2031_p18) < signed(phi_ln65_s_fu_2131_p18)) else "0";
    icmp_ln1496_51_fu_2221_p2 <= "1" when (signed(phi_ln65_8_fu_1935_p18) < signed(phi_ln65_10_fu_2183_p18)) else "0";
    icmp_ln1496_52_fu_2292_p2 <= "1" when (signed(kernel_data_V_2_14) < signed(line_buffer_Array_V_2_2_2_q0)) else "0";
    icmp_ln1496_53_fu_2314_p2 <= "1" when (signed(select_ln65_74_fu_2284_p3) < signed(select_ln65_76_fu_2306_p3)) else "0";
    icmp_ln1496_54_fu_2374_p2 <= "1" when (signed(kernel_data_V_2_22) < signed(kernel_data_V_2_26)) else "0";
    icmp_ln1496_55_fu_2396_p2 <= "1" when (signed(kernel_data_V_2_30) < signed(line_buffer_Array_V_2_1_2_q0)) else "0";
    icmp_ln1496_56_fu_2418_p2 <= "1" when (signed(select_ln65_79_fu_2388_p3) < signed(select_ln65_81_fu_2410_p3)) else "0";
    icmp_ln1496_57_fu_2474_p2 <= "1" when (signed(phi_ln65_11_fu_2336_p18) < signed(phi_ln65_12_fu_2436_p18)) else "0";
    icmp_ln1496_58_fu_2530_p2 <= "1" when (signed(kernel_data_V_2_38) < signed(kernel_data_V_2_42)) else "0";
    icmp_ln1496_59_fu_2552_p2 <= "1" when (signed(kernel_data_V_2_46) < signed(line_buffer_Array_V_2_0_2_q0)) else "0";
    icmp_ln1496_60_fu_2574_p2 <= "1" when (signed(select_ln65_85_fu_2544_p3) < signed(select_ln65_87_fu_2566_p3)) else "0";
    icmp_ln1496_61_fu_2626_p2 <= "1" when (signed(kernel_data_V_2_54) < signed(kernel_data_V_2_58)) else "0";
    icmp_ln1496_62_fu_2648_p2 <= "1" when (signed(kernel_data_V_2_62) < signed(data_V_data_2_V_dout)) else "0";
    icmp_ln1496_63_fu_2670_p2 <= "1" when (signed(select_ln65_90_fu_2640_p3) < signed(select_ln65_92_fu_2662_p3)) else "0";
    icmp_ln1496_64_fu_2726_p2 <= "1" when (signed(phi_ln65_14_fu_2588_p18) < signed(phi_ln65_15_fu_2688_p18)) else "0";
    icmp_ln1496_65_fu_2778_p2 <= "1" when (signed(phi_ln65_13_fu_2492_p18) < signed(phi_ln65_16_fu_2740_p18)) else "0";
    icmp_ln1496_66_fu_2831_p2 <= "1" when (signed(kernel_data_V_2_7) < signed(kernel_data_V_2_11)) else "0";
    icmp_ln1496_67_fu_2849_p2 <= "1" when (signed(kernel_data_V_2_15) < signed(line_buffer_Array_V_2_2_3_q0)) else "0";
    icmp_ln1496_68_fu_2871_p2 <= "1" when (signed(select_ln65_95_fu_2841_p3) < signed(select_ln65_97_fu_2863_p3)) else "0";
    icmp_ln1496_69_fu_2931_p2 <= "1" when (signed(kernel_data_V_2_23) < signed(kernel_data_V_2_27)) else "0";
    icmp_ln1496_70_fu_2953_p2 <= "1" when (signed(kernel_data_V_2_31) < signed(line_buffer_Array_V_2_1_3_q0)) else "0";
    icmp_ln1496_71_fu_2975_p2 <= "1" when (signed(select_ln65_100_fu_2945_p3) < signed(select_ln65_102_fu_2967_p3)) else "0";
    icmp_ln1496_72_fu_3031_p2 <= "1" when (signed(phi_ln65_17_fu_2893_p18) < signed(phi_ln65_18_fu_2993_p18)) else "0";
    icmp_ln1496_73_fu_3087_p2 <= "1" when (signed(kernel_data_V_2_39) < signed(kernel_data_V_2_43)) else "0";
    icmp_ln1496_74_fu_3109_p2 <= "1" when (signed(kernel_data_V_2_47) < signed(line_buffer_Array_V_2_0_3_q0)) else "0";
    icmp_ln1496_75_fu_3131_p2 <= "1" when (signed(select_ln65_106_fu_3101_p3) < signed(select_ln65_108_fu_3123_p3)) else "0";
    icmp_ln1496_76_fu_3183_p2 <= "1" when (signed(kernel_data_V_2_55) < signed(kernel_data_V_2_59)) else "0";
    icmp_ln1496_77_fu_3205_p2 <= "1" when (signed(kernel_data_V_2_63) < signed(data_V_data_3_V_dout)) else "0";
    icmp_ln1496_78_fu_3227_p2 <= "1" when (signed(select_ln65_111_fu_3197_p3) < signed(select_ln65_113_fu_3219_p3)) else "0";
    icmp_ln1496_79_fu_3283_p2 <= "1" when (signed(phi_ln65_20_fu_3145_p18) < signed(phi_ln65_21_fu_3245_p18)) else "0";
    icmp_ln1496_80_fu_3335_p2 <= "1" when (signed(phi_ln65_19_fu_3049_p18) < signed(phi_ln65_22_fu_3297_p18)) else "0";
    icmp_ln1496_fu_1160_p2 <= "1" when (signed(kernel_data_V_2_4) < signed(kernel_data_V_2_8)) else "0";
    icmp_ln191_4_fu_412_p2 <= "1" when (ap_sig_allocacmp_sY_1_load = ap_const_lv32_3) else "0";
    icmp_ln191_5_fu_422_p2 <= "1" when (signed(pY_1) > signed(ap_const_lv32_2)) else "0";
    icmp_ln191_6_fu_432_p2 <= "1" when (signed(pX_1) > signed(ap_const_lv32_2)) else "0";
    icmp_ln191_fu_402_p2 <= "1" when (sX_1 = ap_const_lv32_3) else "0";
    icmp_ln212_fu_456_p2 <= "1" when (pX_1 = ap_const_lv32_19) else "0";
    icmp_ln216_fu_506_p2 <= "1" when (pY_1 = ap_const_lv32_19) else "0";
    icmp_ln241_fu_386_p2 <= "1" when (indvar_flatten_reg_364 = ap_const_lv10_2A4) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op369 <= (res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    io_acc_block_signal_op56 <= (data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);

    line_buffer_Array_V_2_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_0_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_0_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_0_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_0_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_0_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_0_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_0_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_0_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_0_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_0_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_0_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_0_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_0_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_0_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_0_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_1_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_1_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_1_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_1_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_1_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_1_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_1_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_1_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_1_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_1_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_1_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_1_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_1_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_1_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_1_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_1_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_1_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_2_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_2_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_2_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_2_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_2_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_2_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_2_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_2_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_2_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_2_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_2_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_2_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_2_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_2_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_2_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_2_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_3394, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_3394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_2_2_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_2_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    phi_ln65_11_fu_2336_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_77_fu_2320_p3),4));
    phi_ln65_12_fu_2436_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_82_fu_2424_p3),4));
    phi_ln65_17_fu_2893_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_98_fu_2877_p3),4));
    phi_ln65_18_fu_2993_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_103_fu_2981_p3),4));
    phi_ln65_1_fu_1322_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_39_fu_1310_p3),4));
    phi_ln65_6_fu_1779_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_56_fu_1763_p3),4));
    phi_ln65_7_fu_1879_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_61_fu_1867_p3),4));
    phi_ln_fu_1222_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_34_fu_1206_p3),4));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, and_ln191_4_reg_3403)
    begin
        if (((ap_const_lv1_1 = and_ln191_4_reg_3403) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= tmp_data_0_V_fu_1678_p18;

    res_V_data_0_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln191_4_reg_3403, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_4_reg_3403) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, and_ln191_4_reg_3403)
    begin
        if (((ap_const_lv1_1 = and_ln191_4_reg_3403) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= tmp_data_1_V_fu_2235_p18;

    res_V_data_1_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln191_4_reg_3403, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_4_reg_3403) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, and_ln191_4_reg_3403)
    begin
        if (((ap_const_lv1_1 = and_ln191_4_reg_3403) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= tmp_data_2_V_fu_2792_p18;

    res_V_data_2_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln191_4_reg_3403, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_4_reg_3403) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, and_ln191_4_reg_3403)
    begin
        if (((ap_const_lv1_1 = and_ln191_4_reg_3403) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= tmp_data_3_V_fu_3349_p18;

    res_V_data_3_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln191_4_reg_3403, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_4_reg_3403) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln222_fu_530_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_4_fu_412_p2(0) = '1') else 
        add_ln222_fu_524_p2;
    select_ln227_fu_480_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_fu_402_p2(0) = '1') else 
        add_ln227_fu_474_p2;
    select_ln65_100_fu_2945_p3 <= 
        kernel_data_V_2_27 when (icmp_ln1496_69_fu_2931_p2(0) = '1') else 
        kernel_data_V_2_23;
    select_ln65_101_fu_2402_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_55_fu_2396_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_102_fu_2967_p3 <= 
        line_buffer_Array_V_2_1_3_q0 when (icmp_ln1496_70_fu_2953_p2(0) = '1') else 
        kernel_data_V_2_31;
    select_ln65_103_fu_2981_p3 <= 
        select_ln65_117_fu_2959_p3 when (icmp_ln1496_71_fu_2975_p2(0) = '1') else 
        select_ln65_99_fu_2937_p3;
    select_ln65_104_fu_3037_p3 <= 
        select_ln65_103_fu_2981_p3 when (icmp_ln1496_72_fu_3031_p2(0) = '1') else 
        zext_ln65_17_fu_2885_p1;
    select_ln65_105_fu_3093_p3 <= 
        ap_const_lv4_9 when (icmp_ln1496_73_fu_3087_p2(0) = '1') else 
        ap_const_lv4_8;
    select_ln65_106_fu_3101_p3 <= 
        kernel_data_V_2_43 when (icmp_ln1496_73_fu_3087_p2(0) = '1') else 
        kernel_data_V_2_39;
    select_ln65_107_fu_3115_p3 <= 
        ap_const_lv4_B when (icmp_ln1496_74_fu_3109_p2(0) = '1') else 
        ap_const_lv4_A;
    select_ln65_108_fu_3123_p3 <= 
        line_buffer_Array_V_2_0_3_q0 when (icmp_ln1496_74_fu_3109_p2(0) = '1') else 
        kernel_data_V_2_47;
    select_ln65_109_fu_3137_p3 <= 
        select_ln65_107_fu_3115_p3 when (icmp_ln1496_75_fu_3131_p2(0) = '1') else 
        select_ln65_105_fu_3093_p3;
    select_ln65_110_fu_3189_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_76_fu_3183_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_111_fu_3197_p3 <= 
        kernel_data_V_2_59 when (icmp_ln1496_76_fu_3183_p2(0) = '1') else 
        kernel_data_V_2_55;
    select_ln65_112_fu_2654_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_62_fu_2648_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_113_fu_3219_p3 <= 
        data_V_data_3_V_dout when (icmp_ln1496_77_fu_3205_p2(0) = '1') else 
        kernel_data_V_2_63;
    select_ln65_114_fu_3233_p3 <= 
        select_ln65_118_fu_3211_p3 when (icmp_ln1496_78_fu_3227_p2(0) = '1') else 
        select_ln65_110_fu_3189_p3;
    select_ln65_115_fu_3289_p3 <= 
        sext_ln65_3_fu_3241_p1 when (icmp_ln1496_79_fu_3283_p2(0) = '1') else 
        select_ln65_109_fu_3137_p3;
    select_ln65_117_fu_2959_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_70_fu_2953_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_118_fu_3211_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_77_fu_3205_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_32_fu_1184_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_24_fu_1178_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_33_fu_1192_p3 <= 
        line_buffer_Array_V_2_2_0_q0 when (icmp_ln1496_24_fu_1178_p2(0) = '1') else 
        kernel_data_V_2_12;
    select_ln65_34_fu_1206_p3 <= 
        select_ln65_32_fu_1184_p3 when (icmp_ln1496_25_fu_1200_p2(0) = '1') else 
        zext_ln65_fu_1166_p1;
    select_ln65_35_fu_1266_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_26_fu_1260_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_36_fu_1274_p3 <= 
        kernel_data_V_2_24 when (icmp_ln1496_26_fu_1260_p2(0) = '1') else 
        kernel_data_V_2_20;
    select_ln65_38_fu_1296_p3 <= 
        line_buffer_Array_V_2_1_0_q0 when (icmp_ln1496_27_fu_1282_p2(0) = '1') else 
        kernel_data_V_2_28;
    select_ln65_39_fu_1310_p3 <= 
        select_ln65_48_fu_1288_p3 when (icmp_ln1496_28_fu_1304_p2(0) = '1') else 
        select_ln65_35_fu_1266_p3;
    select_ln65_40_fu_1366_p3 <= 
        select_ln65_39_fu_1310_p3 when (icmp_ln1496_29_fu_1360_p2(0) = '1') else 
        zext_ln65_8_fu_1214_p1;
    select_ln65_41_fu_1422_p3 <= 
        ap_const_lv4_9 when (icmp_ln1496_30_fu_1416_p2(0) = '1') else 
        ap_const_lv4_8;
    select_ln65_42_fu_1430_p3 <= 
        kernel_data_V_2_40 when (icmp_ln1496_30_fu_1416_p2(0) = '1') else 
        kernel_data_V_2_36;
    select_ln65_43_fu_1444_p3 <= 
        ap_const_lv4_B when (icmp_ln1496_31_fu_1438_p2(0) = '1') else 
        ap_const_lv4_A;
    select_ln65_44_fu_1452_p3 <= 
        line_buffer_Array_V_2_0_0_q0 when (icmp_ln1496_31_fu_1438_p2(0) = '1') else 
        kernel_data_V_2_44;
    select_ln65_45_fu_1466_p3 <= 
        select_ln65_43_fu_1444_p3 when (icmp_ln1496_32_fu_1460_p2(0) = '1') else 
        select_ln65_41_fu_1422_p3;
    select_ln65_46_fu_1518_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_33_fu_1512_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_47_fu_1526_p3 <= 
        kernel_data_V_2_56 when (icmp_ln1496_33_fu_1512_p2(0) = '1') else 
        kernel_data_V_2_52;
    select_ln65_48_fu_1288_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_27_fu_1282_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_49_fu_1548_p3 <= 
        data_V_data_0_V_dout when (icmp_ln1496_34_fu_1534_p2(0) = '1') else 
        kernel_data_V_2_60;
    select_ln65_50_fu_1562_p3 <= 
        select_ln65_52_fu_1540_p3 when (icmp_ln1496_35_fu_1556_p2(0) = '1') else 
        select_ln65_46_fu_1518_p3;
    select_ln65_51_fu_1618_p3 <= 
        sext_ln65_fu_1570_p1 when (icmp_ln1496_36_fu_1612_p2(0) = '1') else 
        select_ln65_45_fu_1466_p3;
    select_ln65_52_fu_1540_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_34_fu_1534_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_53_fu_1727_p3 <= 
        kernel_data_V_2_9 when (icmp_ln1496_1_fu_1717_p2(0) = '1') else 
        kernel_data_V_2_5;
    select_ln65_54_fu_1741_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_38_fu_1735_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_55_fu_1749_p3 <= 
        line_buffer_Array_V_2_2_1_q0 when (icmp_ln1496_38_fu_1735_p2(0) = '1') else 
        kernel_data_V_2_13;
    select_ln65_56_fu_1763_p3 <= 
        select_ln65_54_fu_1741_p3 when (icmp_ln1496_39_fu_1757_p2(0) = '1') else 
        zext_ln65_10_fu_1723_p1;
    select_ln65_57_fu_1823_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_40_fu_1817_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_58_fu_1831_p3 <= 
        kernel_data_V_2_25 when (icmp_ln1496_40_fu_1817_p2(0) = '1') else 
        kernel_data_V_2_21;
    select_ln65_60_fu_1853_p3 <= 
        line_buffer_Array_V_2_1_1_q0 when (icmp_ln1496_41_fu_1839_p2(0) = '1') else 
        kernel_data_V_2_29;
    select_ln65_61_fu_1867_p3 <= 
        select_ln65_70_fu_1845_p3 when (icmp_ln1496_42_fu_1861_p2(0) = '1') else 
        select_ln65_57_fu_1823_p3;
    select_ln65_62_fu_1923_p3 <= 
        select_ln65_61_fu_1867_p3 when (icmp_ln1496_43_fu_1917_p2(0) = '1') else 
        zext_ln65_11_fu_1771_p1;
    select_ln65_63_fu_1979_p3 <= 
        ap_const_lv4_9 when (icmp_ln1496_44_fu_1973_p2(0) = '1') else 
        ap_const_lv4_8;
    select_ln65_64_fu_1987_p3 <= 
        kernel_data_V_2_41 when (icmp_ln1496_44_fu_1973_p2(0) = '1') else 
        kernel_data_V_2_37;
    select_ln65_65_fu_2001_p3 <= 
        ap_const_lv4_B when (icmp_ln1496_45_fu_1995_p2(0) = '1') else 
        ap_const_lv4_A;
    select_ln65_66_fu_2009_p3 <= 
        line_buffer_Array_V_2_0_1_q0 when (icmp_ln1496_45_fu_1995_p2(0) = '1') else 
        kernel_data_V_2_45;
    select_ln65_67_fu_2023_p3 <= 
        select_ln65_65_fu_2001_p3 when (icmp_ln1496_46_fu_2017_p2(0) = '1') else 
        select_ln65_63_fu_1979_p3;
    select_ln65_68_fu_2075_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_47_fu_2069_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_69_fu_2083_p3 <= 
        kernel_data_V_2_57 when (icmp_ln1496_47_fu_2069_p2(0) = '1') else 
        kernel_data_V_2_53;
    select_ln65_70_fu_1845_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_41_fu_1839_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_71_fu_2105_p3 <= 
        data_V_data_1_V_dout when (icmp_ln1496_48_fu_2091_p2(0) = '1') else 
        kernel_data_V_2_61;
    select_ln65_72_fu_2119_p3 <= 
        select_ln65_80_fu_2097_p3 when (icmp_ln1496_49_fu_2113_p2(0) = '1') else 
        select_ln65_68_fu_2075_p3;
    select_ln65_73_fu_2175_p3 <= 
        sext_ln65_1_fu_2127_p1 when (icmp_ln1496_50_fu_2169_p2(0) = '1') else 
        select_ln65_67_fu_2023_p3;
    select_ln65_74_fu_2284_p3 <= 
        kernel_data_V_2_10 when (icmp_ln1496_2_fu_2274_p2(0) = '1') else 
        kernel_data_V_2_6;
    select_ln65_75_fu_2298_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_52_fu_2292_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_76_fu_2306_p3 <= 
        line_buffer_Array_V_2_2_2_q0 when (icmp_ln1496_52_fu_2292_p2(0) = '1') else 
        kernel_data_V_2_14;
    select_ln65_77_fu_2320_p3 <= 
        select_ln65_75_fu_2298_p3 when (icmp_ln1496_53_fu_2314_p2(0) = '1') else 
        zext_ln65_13_fu_2280_p1;
    select_ln65_78_fu_2380_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_54_fu_2374_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_79_fu_2388_p3 <= 
        kernel_data_V_2_26 when (icmp_ln1496_54_fu_2374_p2(0) = '1') else 
        kernel_data_V_2_22;
    select_ln65_80_fu_2097_p3 <= 
        ap_const_lv3_7 when (icmp_ln1496_48_fu_2091_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln65_81_fu_2410_p3 <= 
        line_buffer_Array_V_2_1_2_q0 when (icmp_ln1496_55_fu_2396_p2(0) = '1') else 
        kernel_data_V_2_30;
    select_ln65_82_fu_2424_p3 <= 
        select_ln65_101_fu_2402_p3 when (icmp_ln1496_56_fu_2418_p2(0) = '1') else 
        select_ln65_78_fu_2380_p3;
    select_ln65_83_fu_2480_p3 <= 
        select_ln65_82_fu_2424_p3 when (icmp_ln1496_57_fu_2474_p2(0) = '1') else 
        zext_ln65_14_fu_2328_p1;
    select_ln65_84_fu_2536_p3 <= 
        ap_const_lv4_9 when (icmp_ln1496_58_fu_2530_p2(0) = '1') else 
        ap_const_lv4_8;
    select_ln65_85_fu_2544_p3 <= 
        kernel_data_V_2_42 when (icmp_ln1496_58_fu_2530_p2(0) = '1') else 
        kernel_data_V_2_38;
    select_ln65_86_fu_2558_p3 <= 
        ap_const_lv4_B when (icmp_ln1496_59_fu_2552_p2(0) = '1') else 
        ap_const_lv4_A;
    select_ln65_87_fu_2566_p3 <= 
        line_buffer_Array_V_2_0_2_q0 when (icmp_ln1496_59_fu_2552_p2(0) = '1') else 
        kernel_data_V_2_46;
    select_ln65_88_fu_2580_p3 <= 
        select_ln65_86_fu_2558_p3 when (icmp_ln1496_60_fu_2574_p2(0) = '1') else 
        select_ln65_84_fu_2536_p3;
    select_ln65_89_fu_2632_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_61_fu_2626_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_90_fu_2640_p3 <= 
        kernel_data_V_2_58 when (icmp_ln1496_61_fu_2626_p2(0) = '1') else 
        kernel_data_V_2_54;
    select_ln65_92_fu_2662_p3 <= 
        data_V_data_2_V_dout when (icmp_ln1496_62_fu_2648_p2(0) = '1') else 
        kernel_data_V_2_62;
    select_ln65_93_fu_2676_p3 <= 
        select_ln65_112_fu_2654_p3 when (icmp_ln1496_63_fu_2670_p2(0) = '1') else 
        select_ln65_89_fu_2632_p3;
    select_ln65_94_fu_2732_p3 <= 
        sext_ln65_2_fu_2684_p1 when (icmp_ln1496_64_fu_2726_p2(0) = '1') else 
        select_ln65_88_fu_2580_p3;
    select_ln65_95_fu_2841_p3 <= 
        kernel_data_V_2_11 when (icmp_ln1496_66_fu_2831_p2(0) = '1') else 
        kernel_data_V_2_7;
    select_ln65_96_fu_2855_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_67_fu_2849_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_97_fu_2863_p3 <= 
        line_buffer_Array_V_2_2_3_q0 when (icmp_ln1496_67_fu_2849_p2(0) = '1') else 
        kernel_data_V_2_15;
    select_ln65_98_fu_2877_p3 <= 
        select_ln65_96_fu_2855_p3 when (icmp_ln1496_68_fu_2871_p2(0) = '1') else 
        zext_ln65_16_fu_2837_p1;
    select_ln65_99_fu_2937_p3 <= 
        ap_const_lv3_5 when (icmp_ln1496_69_fu_2931_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln65_fu_1170_p3 <= 
        kernel_data_V_2_8 when (icmp_ln1496_fu_1160_p2(0) = '1') else 
        kernel_data_V_2_4;
        sext_ln65_1_fu_2127_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln65_72_fu_2119_p3),4));

        sext_ln65_2_fu_2684_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln65_93_fu_2676_p3),4));

        sext_ln65_3_fu_3241_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln65_114_fu_3233_p3),4));

        sext_ln65_fu_1570_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln65_50_fu_1562_p3),4));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_data_0_V_fu_1678_p17 <= 
        select_ln65_51_fu_1618_p3 when (icmp_ln1496_37_fu_1664_p2(0) = '1') else 
        zext_ln65_9_fu_1374_p1;
    tmp_data_1_V_fu_2235_p17 <= 
        select_ln65_73_fu_2175_p3 when (icmp_ln1496_51_fu_2221_p2(0) = '1') else 
        zext_ln65_12_fu_1931_p1;
    tmp_data_2_V_fu_2792_p17 <= 
        select_ln65_94_fu_2732_p3 when (icmp_ln1496_65_fu_2778_p2(0) = '1') else 
        zext_ln65_15_fu_2488_p1;
    tmp_data_3_V_fu_3349_p17 <= 
        select_ln65_115_fu_3289_p3 when (icmp_ln1496_80_fu_3335_p2(0) = '1') else 
        zext_ln65_18_fu_3045_p1;
    zext_ln65_10_fu_1723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_1_fu_1717_p2),2));
    zext_ln65_11_fu_1771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_56_fu_1763_p3),3));
    zext_ln65_12_fu_1931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_62_fu_1923_p3),4));
    zext_ln65_13_fu_2280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_2_fu_2274_p2),2));
    zext_ln65_14_fu_2328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_77_fu_2320_p3),3));
    zext_ln65_15_fu_2488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_83_fu_2480_p3),4));
    zext_ln65_16_fu_2837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_66_fu_2831_p2),2));
    zext_ln65_17_fu_2885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_98_fu_2877_p3),3));
    zext_ln65_18_fu_3045_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_104_fu_3037_p3),4));
    zext_ln65_8_fu_1214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_34_fu_1206_p3),3));
    zext_ln65_9_fu_1374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_40_fu_1366_p3),4));
    zext_ln65_fu_1166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_fu_1160_p2),2));
end behav;
