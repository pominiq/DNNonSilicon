-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_0_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_1_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_2_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_3_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_4_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_5_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_6_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_7_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_V_offset : IN STD_LOGIC_VECTOR (4 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (17 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv18_1FFFF : STD_LOGIC_VECTOR (17 downto 0) := "011111111111111111";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_Val2_20_fu_266_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_20_reg_506 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_21_fu_412_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_21_reg_512 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln43_fu_102_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln43_1_fu_106_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln43_2_fu_110_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln43_3_fu_114_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln43_4_fu_118_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln43_5_fu_122_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln43_6_fu_126_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln43_7_fu_130_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_fu_98_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_14_fu_162_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_s_fu_134_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_14_fu_162_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_1_fu_188_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lhs_V_1_fu_184_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_fu_192_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_16_fu_206_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_13_fu_212_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_198_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_9_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_19_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_18_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_9_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_18_fu_250_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln388_9_fu_258_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_17_fu_280_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_1_fu_308_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_17_fu_280_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_1_fu_308_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_2_fu_334_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lhs_V_2_fu_330_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_1_fu_338_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_19_fu_352_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_15_fu_358_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_fu_344_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_10_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_21_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_20_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_10_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_20_fu_396_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln388_10_fu_404_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal lhs_V_fu_420_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_fu_423_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_2_fu_426_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_23_fu_440_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_17_fu_444_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_fu_432_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_22_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_482_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln388_fu_490_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component myproject_mux_83_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        din3 : IN STD_LOGIC_VECTOR (17 downto 0);
        din4 : IN STD_LOGIC_VECTOR (17 downto 0);
        din5 : IN STD_LOGIC_VECTOR (17 downto 0);
        din6 : IN STD_LOGIC_VECTOR (17 downto 0);
        din7 : IN STD_LOGIC_VECTOR (17 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    myproject_mux_83_18_1_1_U165 : component myproject_mux_83_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 18,
        din4_WIDTH => 18,
        din5_WIDTH => 18,
        din6_WIDTH => 18,
        din7_WIDTH => 18,
        din8_WIDTH => 3,
        dout_WIDTH => 18)
    port map (
        din0 => zext_ln43_fu_102_p1,
        din1 => zext_ln43_1_fu_106_p1,
        din2 => zext_ln43_2_fu_110_p1,
        din3 => zext_ln43_3_fu_114_p1,
        din4 => zext_ln43_4_fu_118_p1,
        din5 => zext_ln43_5_fu_122_p1,
        din6 => zext_ln43_6_fu_126_p1,
        din7 => zext_ln43_7_fu_130_p1,
        din8 => empty_fu_98_p1,
        dout => p_Val2_s_fu_134_p10);

    myproject_mux_83_18_1_1_U166 : component myproject_mux_83_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 18,
        din4_WIDTH => 18,
        din5_WIDTH => 18,
        din6_WIDTH => 18,
        din7_WIDTH => 18,
        din8_WIDTH => 3,
        dout_WIDTH => 18)
    port map (
        din0 => zext_ln43_fu_102_p1,
        din1 => zext_ln43_1_fu_106_p1,
        din2 => zext_ln43_2_fu_110_p1,
        din3 => zext_ln43_3_fu_114_p1,
        din4 => zext_ln43_4_fu_118_p1,
        din5 => zext_ln43_5_fu_122_p1,
        din6 => zext_ln43_6_fu_126_p1,
        din7 => zext_ln43_7_fu_130_p1,
        din8 => p_Val2_14_fu_162_p9,
        dout => p_Val2_14_fu_162_p10);

    myproject_mux_83_18_1_1_U167 : component myproject_mux_83_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 18,
        din4_WIDTH => 18,
        din5_WIDTH => 18,
        din6_WIDTH => 18,
        din7_WIDTH => 18,
        din8_WIDTH => 3,
        dout_WIDTH => 18)
    port map (
        din0 => zext_ln43_fu_102_p1,
        din1 => zext_ln43_1_fu_106_p1,
        din2 => zext_ln43_2_fu_110_p1,
        din3 => zext_ln43_3_fu_114_p1,
        din4 => zext_ln43_4_fu_118_p1,
        din5 => zext_ln43_5_fu_122_p1,
        din6 => zext_ln43_6_fu_126_p1,
        din7 => zext_ln43_7_fu_130_p1,
        din8 => p_Val2_17_fu_280_p9,
        dout => p_Val2_17_fu_280_p10);

    myproject_mux_83_18_1_1_U168 : component myproject_mux_83_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 18,
        din4_WIDTH => 18,
        din5_WIDTH => 18,
        din6_WIDTH => 18,
        din7_WIDTH => 18,
        din8_WIDTH => 3,
        dout_WIDTH => 18)
    port map (
        din0 => zext_ln43_fu_102_p1,
        din1 => zext_ln43_1_fu_106_p1,
        din2 => zext_ln43_2_fu_110_p1,
        din3 => zext_ln43_3_fu_114_p1,
        din4 => zext_ln43_4_fu_118_p1,
        din5 => zext_ln43_5_fu_122_p1,
        din6 => zext_ln43_6_fu_126_p1,
        din7 => zext_ln43_7_fu_130_p1,
        din8 => p_Val2_1_fu_308_p9,
        dout => p_Val2_1_fu_308_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_Val2_20_reg_506 <= p_Val2_20_fu_266_p3;
                p_Val2_21_reg_512 <= p_Val2_21_fu_412_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        select_ln340_fu_482_p3 when (or_ln340_fu_476_p2(0) = '1') else 
        select_ln388_fu_490_p3;
    empty_fu_98_p1 <= x_V_offset(3 - 1 downto 0);
        lhs_V_1_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_fu_134_p10),19));

        lhs_V_2_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_17_fu_280_p10),19));

        lhs_V_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_20_reg_506),19));

    or_ln340_10_fu_390_p2 <= (xor_ln340_21_fu_384_p2 or p_Result_15_fu_358_p3);
    or_ln340_9_fu_244_p2 <= (xor_ln340_19_fu_238_p2 or p_Result_13_fu_212_p3);
    or_ln340_fu_476_p2 <= (xor_ln340_fu_470_p2 or p_Result_17_fu_444_p3);
    p_Result_13_fu_212_p3 <= p_Val2_16_fu_206_p2(17 downto 17);
    p_Result_14_fu_344_p3 <= ret_V_1_fu_338_p2(18 downto 18);
    p_Result_15_fu_358_p3 <= p_Val2_19_fu_352_p2(17 downto 17);
    p_Result_16_fu_432_p3 <= ret_V_2_fu_426_p2(18 downto 18);
    p_Result_17_fu_444_p3 <= p_Val2_23_fu_440_p2(17 downto 17);
    p_Result_s_fu_198_p3 <= ret_V_fu_192_p2(18 downto 18);
    p_Val2_14_fu_162_p9 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(empty_fu_98_p1));
    p_Val2_16_fu_206_p2 <= std_logic_vector(signed(p_Val2_s_fu_134_p10) + signed(p_Val2_14_fu_162_p10));
    p_Val2_17_fu_280_p9 <= std_logic_vector(unsigned(ap_const_lv3_2) + unsigned(empty_fu_98_p1));
    p_Val2_19_fu_352_p2 <= std_logic_vector(signed(p_Val2_17_fu_280_p10) + signed(p_Val2_1_fu_308_p10));
    p_Val2_1_fu_308_p9 <= std_logic_vector(unsigned(ap_const_lv3_3) + unsigned(empty_fu_98_p1));
    p_Val2_20_fu_266_p3 <= 
        select_ln340_18_fu_250_p3 when (or_ln340_9_fu_244_p2(0) = '1') else 
        select_ln388_9_fu_258_p3;
    p_Val2_21_fu_412_p3 <= 
        select_ln340_20_fu_396_p3 when (or_ln340_10_fu_390_p2(0) = '1') else 
        select_ln388_10_fu_404_p3;
    p_Val2_23_fu_440_p2 <= std_logic_vector(signed(p_Val2_21_reg_512) + signed(p_Val2_20_reg_506));
    ret_V_1_fu_338_p2 <= std_logic_vector(signed(rhs_V_2_fu_334_p1) + signed(lhs_V_2_fu_330_p1));
    ret_V_2_fu_426_p2 <= std_logic_vector(signed(lhs_V_fu_420_p1) + signed(rhs_V_fu_423_p1));
    ret_V_fu_192_p2 <= std_logic_vector(signed(rhs_V_1_fu_188_p1) + signed(lhs_V_1_fu_184_p1));
        rhs_V_1_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_14_fu_162_p10),19));

        rhs_V_2_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_fu_308_p10),19));

        rhs_V_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_21_reg_512),19));

    select_ln340_18_fu_250_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln340_18_fu_232_p2(0) = '1') else 
        p_Val2_16_fu_206_p2;
    select_ln340_20_fu_396_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln340_20_fu_378_p2(0) = '1') else 
        p_Val2_19_fu_352_p2;
    select_ln340_fu_482_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln340_22_fu_464_p2(0) = '1') else 
        p_Val2_23_fu_440_p2;
    select_ln388_10_fu_404_p3 <= 
        ap_const_lv18_20000 when (underflow_1_fu_372_p2(0) = '1') else 
        p_Val2_19_fu_352_p2;
    select_ln388_9_fu_258_p3 <= 
        ap_const_lv18_20000 when (underflow_fu_226_p2(0) = '1') else 
        p_Val2_16_fu_206_p2;
    select_ln388_fu_490_p3 <= 
        ap_const_lv18_20000 when (underflow_2_fu_458_p2(0) = '1') else 
        p_Val2_23_fu_440_p2;
    underflow_1_fu_372_p2 <= (xor_ln786_10_fu_366_p2 and p_Result_14_fu_344_p3);
    underflow_2_fu_458_p2 <= (xor_ln786_fu_452_p2 and p_Result_16_fu_432_p3);
    underflow_fu_226_p2 <= (xor_ln786_9_fu_220_p2 and p_Result_s_fu_198_p3);
    xor_ln340_18_fu_232_p2 <= (p_Result_s_fu_198_p3 xor p_Result_13_fu_212_p3);
    xor_ln340_19_fu_238_p2 <= (p_Result_s_fu_198_p3 xor ap_const_lv1_1);
    xor_ln340_20_fu_378_p2 <= (p_Result_15_fu_358_p3 xor p_Result_14_fu_344_p3);
    xor_ln340_21_fu_384_p2 <= (p_Result_14_fu_344_p3 xor ap_const_lv1_1);
    xor_ln340_22_fu_464_p2 <= (p_Result_17_fu_444_p3 xor p_Result_16_fu_432_p3);
    xor_ln340_fu_470_p2 <= (p_Result_16_fu_432_p3 xor ap_const_lv1_1);
    xor_ln786_10_fu_366_p2 <= (p_Result_15_fu_358_p3 xor ap_const_lv1_1);
    xor_ln786_9_fu_220_p2 <= (p_Result_13_fu_212_p3 xor ap_const_lv1_1);
    xor_ln786_fu_452_p2 <= (p_Result_17_fu_444_p3 xor ap_const_lv1_1);
    zext_ln43_1_fu_106_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_1_V),18));
    zext_ln43_2_fu_110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_2_V),18));
    zext_ln43_3_fu_114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_3_V),18));
    zext_ln43_4_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_4_V),18));
    zext_ln43_5_fu_122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_5_V),18));
    zext_ln43_6_fu_126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_6_V),18));
    zext_ln43_7_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_7_V),18));
    zext_ln43_fu_102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_V),18));
end behav;
