// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config10_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        res_V_data_0_V_TDATA,
        res_V_data_0_V_TVALID,
        res_V_data_0_V_TREADY,
        res_V_data_1_V_TDATA,
        res_V_data_1_V_TVALID,
        res_V_data_1_V_TREADY,
        res_V_data_2_V_TDATA,
        res_V_data_2_V_TVALID,
        res_V_data_2_V_TREADY,
        res_V_data_3_V_TDATA,
        res_V_data_3_V_TVALID,
        res_V_data_3_V_TREADY,
        res_V_data_4_V_TDATA,
        res_V_data_4_V_TVALID,
        res_V_data_4_V_TREADY,
        res_V_data_5_V_TDATA,
        res_V_data_5_V_TVALID,
        res_V_data_5_V_TREADY,
        res_V_data_6_V_TDATA,
        res_V_data_6_V_TVALID,
        res_V_data_6_V_TREADY,
        res_V_data_7_V_TDATA,
        res_V_data_7_V_TVALID,
        res_V_data_7_V_TREADY,
        res_V_data_8_V_TDATA,
        res_V_data_8_V_TVALID,
        res_V_data_8_V_TREADY,
        res_V_data_9_V_TDATA,
        res_V_data_9_V_TVALID,
        res_V_data_9_V_TREADY,
        data_V_data_0_V_blk_n,
        data_V_data_1_V_blk_n,
        data_V_data_2_V_blk_n,
        data_V_data_3_V_blk_n,
        data_V_data_4_V_blk_n,
        data_V_data_5_V_blk_n,
        data_V_data_6_V_blk_n,
        data_V_data_7_V_blk_n,
        data_V_data_8_V_blk_n,
        data_V_data_9_V_blk_n,
        res_V_data_0_V_TDATA_blk_n,
        res_V_data_1_V_TDATA_blk_n,
        res_V_data_2_V_TDATA_blk_n,
        res_V_data_3_V_TDATA_blk_n,
        res_V_data_4_V_TDATA_blk_n,
        res_V_data_5_V_TDATA_blk_n,
        res_V_data_6_V_TDATA_blk_n,
        res_V_data_7_V_TDATA_blk_n,
        res_V_data_8_V_TDATA_blk_n,
        res_V_data_9_V_TDATA_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [15:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [15:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
output  [15:0] res_V_data_0_V_TDATA;
output   res_V_data_0_V_TVALID;
input   res_V_data_0_V_TREADY;
output  [15:0] res_V_data_1_V_TDATA;
output   res_V_data_1_V_TVALID;
input   res_V_data_1_V_TREADY;
output  [15:0] res_V_data_2_V_TDATA;
output   res_V_data_2_V_TVALID;
input   res_V_data_2_V_TREADY;
output  [15:0] res_V_data_3_V_TDATA;
output   res_V_data_3_V_TVALID;
input   res_V_data_3_V_TREADY;
output  [15:0] res_V_data_4_V_TDATA;
output   res_V_data_4_V_TVALID;
input   res_V_data_4_V_TREADY;
output  [15:0] res_V_data_5_V_TDATA;
output   res_V_data_5_V_TVALID;
input   res_V_data_5_V_TREADY;
output  [15:0] res_V_data_6_V_TDATA;
output   res_V_data_6_V_TVALID;
input   res_V_data_6_V_TREADY;
output  [15:0] res_V_data_7_V_TDATA;
output   res_V_data_7_V_TVALID;
input   res_V_data_7_V_TREADY;
output  [15:0] res_V_data_8_V_TDATA;
output   res_V_data_8_V_TVALID;
input   res_V_data_8_V_TREADY;
output  [15:0] res_V_data_9_V_TDATA;
output   res_V_data_9_V_TVALID;
input   res_V_data_9_V_TREADY;
output   data_V_data_0_V_blk_n;
output   data_V_data_1_V_blk_n;
output   data_V_data_2_V_blk_n;
output   data_V_data_3_V_blk_n;
output   data_V_data_4_V_blk_n;
output   data_V_data_5_V_blk_n;
output   data_V_data_6_V_blk_n;
output   data_V_data_7_V_blk_n;
output   data_V_data_8_V_blk_n;
output   data_V_data_9_V_blk_n;
output   res_V_data_0_V_TDATA_blk_n;
output   res_V_data_1_V_TDATA_blk_n;
output   res_V_data_2_V_TDATA_blk_n;
output   res_V_data_3_V_TDATA_blk_n;
output   res_V_data_4_V_TDATA_blk_n;
output   res_V_data_5_V_TDATA_blk_n;
output   res_V_data_6_V_TDATA_blk_n;
output   res_V_data_7_V_TDATA_blk_n;
output   res_V_data_8_V_TDATA_blk_n;
output   res_V_data_9_V_TDATA_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg res_V_data_0_V_TVALID;
reg res_V_data_1_V_TVALID;
reg res_V_data_2_V_TVALID;
reg res_V_data_3_V_TVALID;
reg res_V_data_4_V_TVALID;
reg res_V_data_5_V_TVALID;
reg res_V_data_6_V_TVALID;
reg res_V_data_7_V_TVALID;
reg res_V_data_8_V_TVALID;
reg res_V_data_9_V_TVALID;
reg data_V_data_0_V_blk_n;
reg data_V_data_1_V_blk_n;
reg data_V_data_2_V_blk_n;
reg data_V_data_3_V_blk_n;
reg data_V_data_4_V_blk_n;
reg data_V_data_5_V_blk_n;
reg data_V_data_6_V_blk_n;
reg data_V_data_7_V_blk_n;
reg data_V_data_8_V_blk_n;
reg data_V_data_9_V_blk_n;
reg res_V_data_0_V_TDATA_blk_n;
reg res_V_data_1_V_TDATA_blk_n;
reg res_V_data_2_V_TDATA_blk_n;
reg res_V_data_3_V_TDATA_blk_n;
reg res_V_data_4_V_TDATA_blk_n;
reg res_V_data_5_V_TDATA_blk_n;
reg res_V_data_6_V_TDATA_blk_n;
reg res_V_data_7_V_TDATA_blk_n;
reg res_V_data_8_V_TDATA_blk_n;
reg res_V_data_9_V_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [9:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [16:0] exp_table1_q0;
reg   [9:0] exp_table1_address1;
reg    exp_table1_ce1;
wire   [16:0] exp_table1_q1;
reg   [9:0] exp_table1_address2;
reg    exp_table1_ce2;
wire   [16:0] exp_table1_q2;
reg   [9:0] exp_table1_address3;
reg    exp_table1_ce3;
wire   [16:0] exp_table1_q3;
reg   [9:0] exp_table1_address4;
reg    exp_table1_ce4;
wire   [16:0] exp_table1_q4;
wire   [9:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [17:0] invert_table2_q0;
wire    io_acc_block_signal_op16;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] y_V_5_fu_1816_p3;
reg   [9:0] y_V_5_reg_2515;
wire   [9:0] y_V_6_fu_1850_p3;
reg   [9:0] y_V_6_reg_2520;
wire   [9:0] y_V_7_fu_1884_p3;
reg   [9:0] y_V_7_reg_2525;
wire   [9:0] y_V_8_fu_1918_p3;
reg   [9:0] y_V_8_reg_2530;
wire   [9:0] y_V_9_fu_1952_p3;
reg   [9:0] y_V_9_reg_2535;
reg   [16:0] exp_res_0_V_1_reg_2540;
reg   [16:0] exp_res_0_V_1_reg_2540_pp0_iter1_reg;
reg   [16:0] exp_res_1_V_1_reg_2546;
reg   [16:0] exp_res_1_V_1_reg_2546_pp0_iter1_reg;
reg   [16:0] exp_res_2_V_1_reg_2552;
reg   [16:0] exp_res_2_V_1_reg_2552_pp0_iter1_reg;
reg   [16:0] exp_res_3_V_1_reg_2558;
reg   [16:0] exp_res_3_V_1_reg_2558_pp0_iter1_reg;
reg   [16:0] exp_res_4_V_1_reg_2564;
reg   [16:0] exp_res_4_V_1_reg_2564_pp0_iter1_reg;
reg   [16:0] exp_res_5_V_1_reg_2595;
reg   [16:0] exp_res_6_V_1_reg_2600;
reg   [16:0] exp_res_7_V_1_reg_2605;
reg   [16:0] exp_res_8_V_1_reg_2610;
reg   [16:0] exp_res_9_V_1_reg_2617;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage0_subdone;
wire    p_Val2_19_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_833_ap_ready;
wire   [17:0] p_Val2_19_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_833_ap_return;
wire    p_Val2_1_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_849_ap_ready;
wire   [17:0] p_Val2_1_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_849_ap_return;
reg   [16:0] exp_res_0_V_fu_250;
wire    ap_block_pp0_stage1;
reg   [16:0] exp_res_1_V_fu_254;
reg   [16:0] exp_res_2_V_fu_258;
reg   [16:0] exp_res_3_V_fu_262;
reg   [16:0] exp_res_4_V_fu_266;
reg   [16:0] exp_res_5_V_fu_270;
reg   [16:0] exp_res_6_V_fu_274;
reg   [16:0] exp_res_7_V_fu_278;
reg   [16:0] exp_res_8_V_fu_282;
reg   [16:0] exp_res_9_V_fu_286;
wire   [63:0] zext_ln225_fu_1629_p1;
wire   [63:0] zext_ln225_1_fu_1668_p1;
wire   [63:0] zext_ln225_2_fu_1707_p1;
wire   [63:0] zext_ln225_3_fu_1746_p1;
wire   [63:0] zext_ln225_4_fu_1785_p1;
wire   [63:0] zext_ln225_5_fu_1960_p1;
wire   [63:0] zext_ln225_6_fu_1964_p1;
wire   [63:0] zext_ln225_7_fu_1968_p1;
wire   [63:0] zext_ln225_8_fu_1972_p1;
wire   [63:0] zext_ln225_9_fu_1976_p1;
wire   [63:0] zext_ln235_fu_2251_p1;
reg    ap_block_pp0_stage0_01001;
wire   [16:0] mul_ln1118_fu_462_p0;
wire  signed [17:0] mul_ln1118_fu_462_p1;
wire  signed [25:0] sext_ln241_fu_2256_p1;
wire   [16:0] mul_ln1118_2_fu_463_p0;
wire  signed [17:0] mul_ln1118_2_fu_463_p1;
wire   [16:0] mul_ln1118_4_fu_464_p0;
wire  signed [17:0] mul_ln1118_4_fu_464_p1;
wire   [16:0] mul_ln1118_6_fu_465_p0;
wire  signed [17:0] mul_ln1118_6_fu_465_p1;
wire   [16:0] mul_ln1118_3_fu_466_p0;
wire  signed [17:0] mul_ln1118_3_fu_466_p1;
wire   [16:0] mul_ln1118_7_fu_467_p0;
wire  signed [17:0] mul_ln1118_7_fu_467_p1;
wire   [16:0] mul_ln1118_5_fu_468_p0;
wire  signed [17:0] mul_ln1118_5_fu_468_p1;
wire   [16:0] mul_ln1118_1_fu_469_p0;
wire  signed [17:0] mul_ln1118_1_fu_469_p1;
wire   [16:0] mul_ln1118_8_fu_470_p0;
wire  signed [17:0] mul_ln1118_8_fu_470_p1;
wire   [16:0] mul_ln1118_9_fu_471_p0;
wire  signed [17:0] mul_ln1118_9_fu_471_p1;
wire  signed [15:0] icmp_ln1496_fu_905_p0;
wire  signed [15:0] icmp_ln1496_fu_905_p1;
wire   [0:0] icmp_ln1496_fu_905_p2;
wire  signed [15:0] select_ln65_fu_911_p1;
wire  signed [15:0] select_ln65_fu_911_p2;
wire  signed [15:0] icmp_ln1496_1_fu_919_p0;
wire  signed [15:0] icmp_ln1496_1_fu_919_p1;
wire   [0:0] icmp_ln1496_1_fu_919_p2;
wire  signed [15:0] select_ln65_1_fu_925_p1;
wire  signed [15:0] select_ln65_1_fu_925_p2;
wire   [15:0] select_ln65_fu_911_p3;
wire   [15:0] select_ln65_1_fu_925_p3;
wire   [0:0] icmp_ln1496_2_fu_933_p2;
wire  signed [15:0] icmp_ln1496_3_fu_947_p0;
wire  signed [15:0] icmp_ln1496_3_fu_947_p1;
wire   [0:0] icmp_ln1496_3_fu_947_p2;
wire  signed [15:0] select_ln65_3_fu_953_p1;
wire  signed [15:0] select_ln65_3_fu_953_p2;
wire  signed [15:0] icmp_ln1496_4_fu_961_p0;
wire  signed [15:0] icmp_ln1496_4_fu_961_p1;
wire   [0:0] icmp_ln1496_4_fu_961_p2;
wire  signed [15:0] select_ln65_4_fu_967_p1;
wire  signed [15:0] select_ln65_4_fu_967_p2;
wire   [15:0] select_ln65_3_fu_953_p3;
wire   [15:0] select_ln65_4_fu_967_p3;
wire   [0:0] icmp_ln1496_5_fu_975_p2;
wire   [15:0] select_ln65_2_fu_939_p3;
wire   [15:0] select_ln65_5_fu_981_p3;
wire   [0:0] icmp_ln1496_6_fu_989_p2;
wire  signed [15:0] icmp_ln1496_7_fu_1003_p0;
wire  signed [15:0] icmp_ln1496_7_fu_1003_p1;
wire   [0:0] icmp_ln1496_7_fu_1003_p2;
wire  signed [15:0] select_ln65_7_fu_1009_p1;
wire  signed [15:0] select_ln65_7_fu_1009_p2;
wire   [15:0] select_ln65_6_fu_995_p3;
wire   [15:0] select_ln65_7_fu_1009_p3;
wire   [0:0] icmp_ln1496_8_fu_1017_p2;
wire  signed [15:0] sext_ln703_fu_1031_p0;
wire   [15:0] x_max_V_fu_1023_p3;
wire  signed [16:0] sext_ln703_fu_1031_p1;
wire  signed [16:0] sext_ln703_1_fu_1035_p1;
wire   [16:0] sub_ln1193_fu_1039_p2;
wire   [0:0] tmp_22_fu_1053_p3;
wire   [0:0] tmp_21_fu_1045_p3;
wire   [0:0] xor_ln786_fu_1061_p2;
wire   [0:0] xor_ln340_fu_1079_p2;
wire  signed [15:0] sext_ln703_2_fu_1091_p0;
wire  signed [16:0] sext_ln703_2_fu_1091_p1;
wire   [16:0] sub_ln1193_1_fu_1095_p2;
wire   [0:0] tmp_24_fu_1109_p3;
wire   [0:0] tmp_23_fu_1101_p3;
wire   [0:0] xor_ln786_1_fu_1117_p2;
wire   [0:0] xor_ln340_1_fu_1135_p2;
wire  signed [15:0] sext_ln703_3_fu_1147_p0;
wire  signed [16:0] sext_ln703_3_fu_1147_p1;
wire   [16:0] sub_ln1193_2_fu_1151_p2;
wire   [0:0] tmp_26_fu_1165_p3;
wire   [0:0] tmp_25_fu_1157_p3;
wire   [0:0] xor_ln786_2_fu_1173_p2;
wire   [0:0] xor_ln340_2_fu_1191_p2;
wire  signed [15:0] sext_ln703_4_fu_1203_p0;
wire  signed [16:0] sext_ln703_4_fu_1203_p1;
wire   [16:0] sub_ln1193_3_fu_1207_p2;
wire   [0:0] tmp_28_fu_1221_p3;
wire   [0:0] tmp_27_fu_1213_p3;
wire   [0:0] xor_ln786_3_fu_1229_p2;
wire   [0:0] xor_ln340_3_fu_1247_p2;
wire  signed [15:0] sext_ln703_5_fu_1259_p0;
wire  signed [16:0] sext_ln703_5_fu_1259_p1;
wire   [16:0] sub_ln1193_4_fu_1263_p2;
wire   [0:0] tmp_30_fu_1277_p3;
wire   [0:0] tmp_29_fu_1269_p3;
wire   [0:0] xor_ln786_4_fu_1285_p2;
wire   [0:0] xor_ln340_4_fu_1303_p2;
wire  signed [15:0] sext_ln703_6_fu_1315_p0;
wire  signed [16:0] sext_ln703_6_fu_1315_p1;
wire   [16:0] sub_ln1193_5_fu_1319_p2;
wire   [0:0] tmp_32_fu_1333_p3;
wire   [0:0] tmp_31_fu_1325_p3;
wire   [0:0] xor_ln786_5_fu_1341_p2;
wire   [0:0] xor_ln340_5_fu_1359_p2;
wire  signed [15:0] sext_ln703_7_fu_1371_p0;
wire  signed [16:0] sext_ln703_7_fu_1371_p1;
wire   [16:0] sub_ln1193_6_fu_1375_p2;
wire   [0:0] tmp_34_fu_1389_p3;
wire   [0:0] tmp_33_fu_1381_p3;
wire   [0:0] xor_ln786_6_fu_1397_p2;
wire   [0:0] xor_ln340_6_fu_1415_p2;
wire  signed [15:0] sext_ln703_8_fu_1427_p0;
wire  signed [16:0] sext_ln703_8_fu_1427_p1;
wire   [16:0] sub_ln1193_7_fu_1431_p2;
wire   [0:0] tmp_36_fu_1445_p3;
wire   [0:0] tmp_35_fu_1437_p3;
wire   [0:0] xor_ln786_7_fu_1453_p2;
wire   [0:0] xor_ln340_7_fu_1471_p2;
wire  signed [15:0] sext_ln703_9_fu_1483_p0;
wire  signed [16:0] sext_ln703_9_fu_1483_p1;
wire   [16:0] sub_ln1193_8_fu_1487_p2;
wire   [0:0] tmp_38_fu_1501_p3;
wire   [0:0] tmp_37_fu_1493_p3;
wire   [0:0] xor_ln786_8_fu_1509_p2;
wire   [0:0] xor_ln340_8_fu_1527_p2;
wire  signed [15:0] sext_ln703_10_fu_1539_p0;
wire  signed [16:0] sext_ln703_10_fu_1539_p1;
wire   [16:0] sub_ln1193_9_fu_1543_p2;
wire   [0:0] tmp_40_fu_1557_p3;
wire   [0:0] tmp_39_fu_1549_p3;
wire   [0:0] xor_ln786_9_fu_1565_p2;
wire   [0:0] xor_ln340_9_fu_1583_p2;
wire   [0:0] xor_ln340_10_fu_1073_p2;
wire   [9:0] tmp_fu_1595_p4;
wire   [0:0] and_ln786_fu_1067_p2;
wire   [0:0] or_ln340_fu_1085_p2;
wire   [9:0] select_ln340_fu_1605_p3;
wire   [9:0] select_ln388_fu_1613_p3;
wire   [9:0] y_V_fu_1621_p3;
wire   [0:0] xor_ln340_11_fu_1129_p2;
wire   [9:0] tmp_11_fu_1634_p4;
wire   [0:0] and_ln786_1_fu_1123_p2;
wire   [0:0] or_ln340_1_fu_1141_p2;
wire   [9:0] select_ln340_2_fu_1644_p3;
wire   [9:0] select_ln388_1_fu_1652_p3;
wire   [9:0] y_V_1_fu_1660_p3;
wire   [0:0] xor_ln340_12_fu_1185_p2;
wire   [9:0] tmp_12_fu_1673_p4;
wire   [0:0] and_ln786_2_fu_1179_p2;
wire   [0:0] or_ln340_2_fu_1197_p2;
wire   [9:0] select_ln340_4_fu_1683_p3;
wire   [9:0] select_ln388_2_fu_1691_p3;
wire   [9:0] y_V_2_fu_1699_p3;
wire   [0:0] xor_ln340_13_fu_1241_p2;
wire   [9:0] tmp_13_fu_1712_p4;
wire   [0:0] and_ln786_3_fu_1235_p2;
wire   [0:0] or_ln340_3_fu_1253_p2;
wire   [9:0] select_ln340_6_fu_1722_p3;
wire   [9:0] select_ln388_3_fu_1730_p3;
wire   [9:0] y_V_3_fu_1738_p3;
wire   [0:0] xor_ln340_14_fu_1297_p2;
wire   [9:0] tmp_14_fu_1751_p4;
wire   [0:0] and_ln786_4_fu_1291_p2;
wire   [0:0] or_ln340_4_fu_1309_p2;
wire   [9:0] select_ln340_8_fu_1761_p3;
wire   [9:0] select_ln388_4_fu_1769_p3;
wire   [9:0] y_V_4_fu_1777_p3;
wire   [0:0] xor_ln340_15_fu_1353_p2;
wire   [9:0] tmp_15_fu_1790_p4;
wire   [0:0] and_ln786_5_fu_1347_p2;
wire   [0:0] or_ln340_5_fu_1365_p2;
wire   [9:0] select_ln340_10_fu_1800_p3;
wire   [9:0] select_ln388_5_fu_1808_p3;
wire   [0:0] xor_ln340_16_fu_1409_p2;
wire   [9:0] tmp_16_fu_1824_p4;
wire   [0:0] and_ln786_6_fu_1403_p2;
wire   [0:0] or_ln340_6_fu_1421_p2;
wire   [9:0] select_ln340_12_fu_1834_p3;
wire   [9:0] select_ln388_6_fu_1842_p3;
wire   [0:0] xor_ln340_17_fu_1465_p2;
wire   [9:0] tmp_17_fu_1858_p4;
wire   [0:0] and_ln786_7_fu_1459_p2;
wire   [0:0] or_ln340_7_fu_1477_p2;
wire   [9:0] select_ln340_14_fu_1868_p3;
wire   [9:0] select_ln388_7_fu_1876_p3;
wire   [0:0] xor_ln340_18_fu_1521_p2;
wire   [9:0] tmp_18_fu_1892_p4;
wire   [0:0] and_ln786_8_fu_1515_p2;
wire   [0:0] or_ln340_8_fu_1533_p2;
wire   [9:0] select_ln340_16_fu_1902_p3;
wire   [9:0] select_ln388_8_fu_1910_p3;
wire   [0:0] xor_ln340_19_fu_1577_p2;
wire   [9:0] tmp_19_fu_1926_p4;
wire   [0:0] and_ln786_9_fu_1571_p2;
wire   [0:0] or_ln340_9_fu_1589_p2;
wire   [9:0] select_ln340_18_fu_1936_p3;
wire   [9:0] select_ln388_9_fu_1944_p3;
wire  signed [17:0] lhs_V_fu_2025_p0;
wire  signed [17:0] rhs_V_fu_2029_p0;
wire  signed [18:0] lhs_V_fu_2025_p1;
wire  signed [18:0] rhs_V_fu_2029_p1;
wire   [18:0] ret_V_fu_2033_p2;
wire  signed [17:0] p_Val2_22_fu_2047_p0;
wire  signed [17:0] p_Val2_22_fu_2047_p1;
wire   [17:0] p_Val2_22_fu_2047_p2;
wire   [0:0] p_Result_18_fu_2053_p3;
wire   [0:0] p_Result_s_fu_2039_p3;
wire   [0:0] xor_ln786_10_fu_2061_p2;
wire   [0:0] xor_ln340_21_fu_2079_p2;
wire   [0:0] xor_ln340_20_fu_2073_p2;
wire   [0:0] underflow_fu_2067_p2;
wire   [0:0] or_ln340_10_fu_2085_p2;
wire   [17:0] select_ln340_20_fu_2091_p3;
wire   [17:0] select_ln388_10_fu_2099_p3;
wire   [17:0] p_Val2_24_fu_2118_p1;
wire   [17:0] p_Val2_23_fu_2115_p1;
wire   [17:0] p_Val2_25_fu_2121_p2;
wire   [0:0] p_Result_19_fu_2131_p3;
wire   [16:0] add_ln746_fu_2127_p2;
wire   [16:0] p_Val2_27_fu_2139_p3;
wire  signed [17:0] p_Val2_26_fu_2107_p3;
wire  signed [18:0] lhs_V_1_fu_2151_p1;
wire   [18:0] rhs_V_1_fu_2155_p1;
wire   [18:0] ret_V_1_fu_2159_p2;
wire   [17:0] zext_ln746_fu_2147_p1;
wire   [17:0] p_Val2_29_fu_2173_p2;
wire   [0:0] p_Result_21_fu_2179_p3;
wire   [0:0] p_Result_20_fu_2165_p3;
wire   [0:0] xor_ln786_11_fu_2187_p2;
wire   [0:0] xor_ln340_23_fu_2205_p2;
wire   [0:0] xor_ln340_22_fu_2199_p2;
wire   [9:0] tmp_20_fu_2217_p4;
wire   [0:0] underflow_1_fu_2193_p2;
wire   [0:0] or_ln340_11_fu_2211_p2;
wire   [9:0] select_ln340_22_fu_2227_p3;
wire   [9:0] select_ln388_11_fu_2235_p3;
wire   [9:0] y_V_10_fu_2243_p3;
wire   [25:0] mul_ln1118_fu_462_p2;
wire   [25:0] mul_ln1118_1_fu_469_p2;
wire   [25:0] mul_ln1118_2_fu_463_p2;
wire   [25:0] mul_ln1118_3_fu_466_p2;
wire   [25:0] mul_ln1118_4_fu_464_p2;
wire   [25:0] mul_ln1118_5_fu_468_p2;
wire   [25:0] mul_ln1118_6_fu_465_p2;
wire   [25:0] mul_ln1118_7_fu_467_p2;
wire   [25:0] mul_ln1118_8_fu_470_p2;
wire   [25:0] mul_ln1118_9_fu_471_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to2;
wire    ap_enable_pp0;
wire   [25:0] mul_ln1118_1_fu_469_p00;
wire   [25:0] mul_ln1118_2_fu_463_p00;
wire   [25:0] mul_ln1118_3_fu_466_p00;
wire   [25:0] mul_ln1118_4_fu_464_p00;
wire   [25:0] mul_ln1118_5_fu_468_p00;
wire   [25:0] mul_ln1118_6_fu_465_p00;
wire   [25:0] mul_ln1118_7_fu_467_p00;
wire   [25:0] mul_ln1118_8_fu_470_p00;
wire   [25:0] mul_ln1118_9_fu_471_p00;
wire   [25:0] mul_ln1118_fu_462_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config10_s_exp_tabFfa #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0),
    .address1(exp_table1_address1),
    .ce1(exp_table1_ce1),
    .q1(exp_table1_q1),
    .address2(exp_table1_address2),
    .ce2(exp_table1_ce2),
    .q2(exp_table1_q2),
    .address3(exp_table1_address3),
    .ce3(exp_table1_ce3),
    .q3(exp_table1_q3),
    .address4(exp_table1_address4),
    .ce4(exp_table1_ce4),
    .q4(exp_table1_q4)
);

softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config10_s_invert_Gfk #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s p_Val2_19_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_833(
    .ap_ready(p_Val2_19_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_833_ap_ready),
    .x_0_V(exp_res_0_V_fu_250),
    .x_1_V(exp_res_1_V_fu_254),
    .x_2_V(exp_res_2_V_fu_258),
    .x_3_V(exp_res_3_V_fu_262),
    .x_4_V(exp_res_4_V_fu_266),
    .x_5_V(exp_res_5_V_fu_270),
    .x_6_V(exp_res_6_V_fu_274),
    .x_7_V(exp_res_7_V_fu_278),
    .x_8_V(exp_res_8_V_fu_282),
    .x_9_V(exp_res_9_V_fu_286),
    .x_V_offset(5'd0),
    .ap_return(p_Val2_19_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_833_ap_return)
);

reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s p_Val2_1_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_849(
    .ap_ready(p_Val2_1_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_849_ap_ready),
    .x_0_V(exp_res_0_V_fu_250),
    .x_1_V(exp_res_1_V_fu_254),
    .x_2_V(exp_res_2_V_fu_258),
    .x_3_V(exp_res_3_V_fu_262),
    .x_4_V(exp_res_4_V_fu_266),
    .x_5_V(exp_res_5_V_fu_270),
    .x_6_V(exp_res_6_V_fu_274),
    .x_7_V(exp_res_7_V_fu_278),
    .x_8_V(exp_res_8_V_fu_282),
    .x_9_V(exp_res_9_V_fu_286),
    .x_V_offset(5'd4),
    .ap_return(p_Val2_1_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_849_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_0_V_1_reg_2540 <= exp_table1_q0;
        exp_res_1_V_1_reg_2546 <= exp_table1_q1;
        exp_res_2_V_1_reg_2552 <= exp_table1_q2;
        exp_res_3_V_1_reg_2558 <= exp_table1_q3;
        exp_res_4_V_1_reg_2564 <= exp_table1_q4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_res_0_V_1_reg_2540_pp0_iter1_reg <= exp_res_0_V_1_reg_2540;
        exp_res_1_V_1_reg_2546_pp0_iter1_reg <= exp_res_1_V_1_reg_2546;
        exp_res_2_V_1_reg_2552_pp0_iter1_reg <= exp_res_2_V_1_reg_2552;
        exp_res_3_V_1_reg_2558_pp0_iter1_reg <= exp_res_3_V_1_reg_2558;
        exp_res_4_V_1_reg_2564_pp0_iter1_reg <= exp_res_4_V_1_reg_2564;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_res_0_V_fu_250 <= exp_res_0_V_1_reg_2540;
        exp_res_1_V_fu_254 <= exp_res_1_V_1_reg_2546;
        exp_res_2_V_fu_258 <= exp_res_2_V_1_reg_2552;
        exp_res_3_V_fu_262 <= exp_res_3_V_1_reg_2558;
        exp_res_4_V_fu_266 <= exp_res_4_V_1_reg_2564;
        exp_res_5_V_1_reg_2595 <= exp_table1_q0;
        exp_res_5_V_fu_270 <= exp_table1_q0;
        exp_res_6_V_1_reg_2600 <= exp_table1_q1;
        exp_res_6_V_fu_274 <= exp_table1_q1;
        exp_res_7_V_1_reg_2605 <= exp_table1_q2;
        exp_res_7_V_fu_278 <= exp_table1_q2;
        exp_res_8_V_1_reg_2610 <= exp_table1_q3;
        exp_res_8_V_fu_282 <= exp_table1_q3;
        exp_res_9_V_1_reg_2617 <= exp_table1_q4;
        exp_res_9_V_fu_286 <= exp_table1_q4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        y_V_5_reg_2515 <= y_V_5_fu_1816_p3;
        y_V_6_reg_2520 <= y_V_6_fu_1850_p3;
        y_V_7_reg_2525 <= y_V_7_fu_1884_p3;
        y_V_8_reg_2530 <= y_V_8_fu_1918_p3;
        y_V_9_reg_2535 <= y_V_9_fu_1952_p3;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            exp_table1_address0 = zext_ln225_5_fu_1960_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            exp_table1_address0 = zext_ln225_fu_1629_p1;
        end else begin
            exp_table1_address0 = 'bx;
        end
    end else begin
        exp_table1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            exp_table1_address1 = zext_ln225_6_fu_1964_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            exp_table1_address1 = zext_ln225_1_fu_1668_p1;
        end else begin
            exp_table1_address1 = 'bx;
        end
    end else begin
        exp_table1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            exp_table1_address2 = zext_ln225_7_fu_1968_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            exp_table1_address2 = zext_ln225_2_fu_1707_p1;
        end else begin
            exp_table1_address2 = 'bx;
        end
    end else begin
        exp_table1_address2 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            exp_table1_address3 = zext_ln225_8_fu_1972_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            exp_table1_address3 = zext_ln225_3_fu_1746_p1;
        end else begin
            exp_table1_address3 = 'bx;
        end
    end else begin
        exp_table1_address3 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            exp_table1_address4 = zext_ln225_9_fu_1976_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            exp_table1_address4 = zext_ln225_4_fu_1785_p1;
        end else begin
            exp_table1_address4 = 'bx;
        end
    end else begin
        exp_table1_address4 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        exp_table1_ce1 = 1'b1;
    end else begin
        exp_table1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        exp_table1_ce2 = 1'b1;
    end else begin
        exp_table1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        exp_table1_ce3 = 1'b1;
    end else begin
        exp_table1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        exp_table1_ce4 = 1'b1;
    end else begin
        exp_table1_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_0_V_TDATA_blk_n = res_V_data_0_V_TREADY;
    end else begin
        res_V_data_0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_0_V_TVALID = 1'b1;
    end else begin
        res_V_data_0_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_1_V_TDATA_blk_n = res_V_data_1_V_TREADY;
    end else begin
        res_V_data_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_1_V_TVALID = 1'b1;
    end else begin
        res_V_data_1_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_2_V_TDATA_blk_n = res_V_data_2_V_TREADY;
    end else begin
        res_V_data_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_2_V_TVALID = 1'b1;
    end else begin
        res_V_data_2_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_3_V_TDATA_blk_n = res_V_data_3_V_TREADY;
    end else begin
        res_V_data_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_3_V_TVALID = 1'b1;
    end else begin
        res_V_data_3_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_4_V_TDATA_blk_n = res_V_data_4_V_TREADY;
    end else begin
        res_V_data_4_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_4_V_TVALID = 1'b1;
    end else begin
        res_V_data_4_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_5_V_TDATA_blk_n = res_V_data_5_V_TREADY;
    end else begin
        res_V_data_5_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_5_V_TVALID = 1'b1;
    end else begin
        res_V_data_5_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_6_V_TDATA_blk_n = res_V_data_6_V_TREADY;
    end else begin
        res_V_data_6_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_6_V_TVALID = 1'b1;
    end else begin
        res_V_data_6_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_7_V_TDATA_blk_n = res_V_data_7_V_TREADY;
    end else begin
        res_V_data_7_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_7_V_TVALID = 1'b1;
    end else begin
        res_V_data_7_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_8_V_TDATA_blk_n = res_V_data_8_V_TREADY;
    end else begin
        res_V_data_8_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_8_V_TVALID = 1'b1;
    end else begin
        res_V_data_8_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_9_V_TDATA_blk_n = res_V_data_9_V_TREADY;
    end else begin
        res_V_data_9_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_9_V_TVALID = 1'b1;
    end else begin
        res_V_data_9_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln746_fu_2127_p2 = (exp_res_8_V_1_reg_2610 + exp_res_9_V_1_reg_2617);

assign and_ln786_1_fu_1123_p2 = (xor_ln786_1_fu_1117_p2 & tmp_23_fu_1101_p3);

assign and_ln786_2_fu_1179_p2 = (xor_ln786_2_fu_1173_p2 & tmp_25_fu_1157_p3);

assign and_ln786_3_fu_1235_p2 = (xor_ln786_3_fu_1229_p2 & tmp_27_fu_1213_p3);

assign and_ln786_4_fu_1291_p2 = (xor_ln786_4_fu_1285_p2 & tmp_29_fu_1269_p3);

assign and_ln786_5_fu_1347_p2 = (xor_ln786_5_fu_1341_p2 & tmp_31_fu_1325_p3);

assign and_ln786_6_fu_1403_p2 = (xor_ln786_6_fu_1397_p2 & tmp_33_fu_1381_p3);

assign and_ln786_7_fu_1459_p2 = (xor_ln786_7_fu_1453_p2 & tmp_35_fu_1437_p3);

assign and_ln786_8_fu_1515_p2 = (xor_ln786_8_fu_1509_p2 & tmp_37_fu_1493_p3);

assign and_ln786_9_fu_1571_p2 = (xor_ln786_9_fu_1565_p2 & tmp_39_fu_1549_p3);

assign and_ln786_fu_1067_p2 = (xor_ln786_fu_1061_p2 & tmp_21_fu_1045_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_start == 1'b0) | (io_acc_block_signal_op16 == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_start == 1'b0) | (io_acc_block_signal_op16 == 1'b0))) | ((res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_start == 1'b0) | (io_acc_block_signal_op16 == 1'b0))) | ((res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (io_acc_block_signal_op16 == 1'b0));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign icmp_ln1496_1_fu_919_p0 = data_V_data_2_V_dout;

assign icmp_ln1496_1_fu_919_p1 = data_V_data_3_V_dout;

assign icmp_ln1496_1_fu_919_p2 = (($signed(icmp_ln1496_1_fu_919_p0) < $signed(icmp_ln1496_1_fu_919_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_933_p2 = (($signed(select_ln65_fu_911_p3) < $signed(select_ln65_1_fu_925_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_947_p0 = data_V_data_4_V_dout;

assign icmp_ln1496_3_fu_947_p1 = data_V_data_5_V_dout;

assign icmp_ln1496_3_fu_947_p2 = (($signed(icmp_ln1496_3_fu_947_p0) < $signed(icmp_ln1496_3_fu_947_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_961_p0 = data_V_data_6_V_dout;

assign icmp_ln1496_4_fu_961_p1 = data_V_data_7_V_dout;

assign icmp_ln1496_4_fu_961_p2 = (($signed(icmp_ln1496_4_fu_961_p0) < $signed(icmp_ln1496_4_fu_961_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_975_p2 = (($signed(select_ln65_3_fu_953_p3) < $signed(select_ln65_4_fu_967_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_989_p2 = (($signed(select_ln65_2_fu_939_p3) < $signed(select_ln65_5_fu_981_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_1003_p0 = data_V_data_8_V_dout;

assign icmp_ln1496_7_fu_1003_p1 = data_V_data_9_V_dout;

assign icmp_ln1496_7_fu_1003_p2 = (($signed(icmp_ln1496_7_fu_1003_p0) < $signed(icmp_ln1496_7_fu_1003_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_1017_p2 = (($signed(select_ln65_6_fu_995_p3) < $signed(select_ln65_7_fu_1009_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_905_p0 = data_V_data_0_V_dout;

assign icmp_ln1496_fu_905_p1 = data_V_data_1_V_dout;

assign icmp_ln1496_fu_905_p2 = (($signed(icmp_ln1496_fu_905_p0) < $signed(icmp_ln1496_fu_905_p1)) ? 1'b1 : 1'b0);

assign invert_table2_address0 = zext_ln235_fu_2251_p1;

assign io_acc_block_signal_op16 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign lhs_V_1_fu_2151_p1 = p_Val2_26_fu_2107_p3;

assign lhs_V_fu_2025_p0 = p_Val2_19_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_833_ap_return;

assign lhs_V_fu_2025_p1 = lhs_V_fu_2025_p0;

assign mul_ln1118_1_fu_469_p0 = mul_ln1118_1_fu_469_p00;

assign mul_ln1118_1_fu_469_p00 = exp_res_1_V_1_reg_2546_pp0_iter1_reg;

assign mul_ln1118_1_fu_469_p1 = sext_ln241_fu_2256_p1;

assign mul_ln1118_1_fu_469_p2 = ($signed({{1'b0}, {mul_ln1118_1_fu_469_p0}}) * $signed(mul_ln1118_1_fu_469_p1));

assign mul_ln1118_2_fu_463_p0 = mul_ln1118_2_fu_463_p00;

assign mul_ln1118_2_fu_463_p00 = exp_res_2_V_1_reg_2552_pp0_iter1_reg;

assign mul_ln1118_2_fu_463_p1 = sext_ln241_fu_2256_p1;

assign mul_ln1118_2_fu_463_p2 = ($signed({{1'b0}, {mul_ln1118_2_fu_463_p0}}) * $signed(mul_ln1118_2_fu_463_p1));

assign mul_ln1118_3_fu_466_p0 = mul_ln1118_3_fu_466_p00;

assign mul_ln1118_3_fu_466_p00 = exp_res_3_V_1_reg_2558_pp0_iter1_reg;

assign mul_ln1118_3_fu_466_p1 = sext_ln241_fu_2256_p1;

assign mul_ln1118_3_fu_466_p2 = ($signed({{1'b0}, {mul_ln1118_3_fu_466_p0}}) * $signed(mul_ln1118_3_fu_466_p1));

assign mul_ln1118_4_fu_464_p0 = mul_ln1118_4_fu_464_p00;

assign mul_ln1118_4_fu_464_p00 = exp_res_4_V_1_reg_2564_pp0_iter1_reg;

assign mul_ln1118_4_fu_464_p1 = sext_ln241_fu_2256_p1;

assign mul_ln1118_4_fu_464_p2 = ($signed({{1'b0}, {mul_ln1118_4_fu_464_p0}}) * $signed(mul_ln1118_4_fu_464_p1));

assign mul_ln1118_5_fu_468_p0 = mul_ln1118_5_fu_468_p00;

assign mul_ln1118_5_fu_468_p00 = exp_res_5_V_1_reg_2595;

assign mul_ln1118_5_fu_468_p1 = sext_ln241_fu_2256_p1;

assign mul_ln1118_5_fu_468_p2 = ($signed({{1'b0}, {mul_ln1118_5_fu_468_p0}}) * $signed(mul_ln1118_5_fu_468_p1));

assign mul_ln1118_6_fu_465_p0 = mul_ln1118_6_fu_465_p00;

assign mul_ln1118_6_fu_465_p00 = exp_res_6_V_1_reg_2600;

assign mul_ln1118_6_fu_465_p1 = sext_ln241_fu_2256_p1;

assign mul_ln1118_6_fu_465_p2 = ($signed({{1'b0}, {mul_ln1118_6_fu_465_p0}}) * $signed(mul_ln1118_6_fu_465_p1));

assign mul_ln1118_7_fu_467_p0 = mul_ln1118_7_fu_467_p00;

assign mul_ln1118_7_fu_467_p00 = exp_res_7_V_1_reg_2605;

assign mul_ln1118_7_fu_467_p1 = sext_ln241_fu_2256_p1;

assign mul_ln1118_7_fu_467_p2 = ($signed({{1'b0}, {mul_ln1118_7_fu_467_p0}}) * $signed(mul_ln1118_7_fu_467_p1));

assign mul_ln1118_8_fu_470_p0 = mul_ln1118_8_fu_470_p00;

assign mul_ln1118_8_fu_470_p00 = exp_res_8_V_1_reg_2610;

assign mul_ln1118_8_fu_470_p1 = sext_ln241_fu_2256_p1;

assign mul_ln1118_8_fu_470_p2 = ($signed({{1'b0}, {mul_ln1118_8_fu_470_p0}}) * $signed(mul_ln1118_8_fu_470_p1));

assign mul_ln1118_9_fu_471_p0 = mul_ln1118_9_fu_471_p00;

assign mul_ln1118_9_fu_471_p00 = exp_res_9_V_1_reg_2617;

assign mul_ln1118_9_fu_471_p1 = sext_ln241_fu_2256_p1;

assign mul_ln1118_9_fu_471_p2 = ($signed({{1'b0}, {mul_ln1118_9_fu_471_p0}}) * $signed(mul_ln1118_9_fu_471_p1));

assign mul_ln1118_fu_462_p0 = mul_ln1118_fu_462_p00;

assign mul_ln1118_fu_462_p00 = exp_res_0_V_1_reg_2540_pp0_iter1_reg;

assign mul_ln1118_fu_462_p1 = sext_ln241_fu_2256_p1;

assign mul_ln1118_fu_462_p2 = ($signed({{1'b0}, {mul_ln1118_fu_462_p0}}) * $signed(mul_ln1118_fu_462_p1));

assign or_ln340_10_fu_2085_p2 = (xor_ln340_21_fu_2079_p2 | p_Result_18_fu_2053_p3);

assign or_ln340_11_fu_2211_p2 = (xor_ln340_23_fu_2205_p2 | p_Result_21_fu_2179_p3);

assign or_ln340_1_fu_1141_p2 = (xor_ln340_1_fu_1135_p2 | tmp_24_fu_1109_p3);

assign or_ln340_2_fu_1197_p2 = (xor_ln340_2_fu_1191_p2 | tmp_26_fu_1165_p3);

assign or_ln340_3_fu_1253_p2 = (xor_ln340_3_fu_1247_p2 | tmp_28_fu_1221_p3);

assign or_ln340_4_fu_1309_p2 = (xor_ln340_4_fu_1303_p2 | tmp_30_fu_1277_p3);

assign or_ln340_5_fu_1365_p2 = (xor_ln340_5_fu_1359_p2 | tmp_32_fu_1333_p3);

assign or_ln340_6_fu_1421_p2 = (xor_ln340_6_fu_1415_p2 | tmp_34_fu_1389_p3);

assign or_ln340_7_fu_1477_p2 = (xor_ln340_7_fu_1471_p2 | tmp_36_fu_1445_p3);

assign or_ln340_8_fu_1533_p2 = (xor_ln340_8_fu_1527_p2 | tmp_38_fu_1501_p3);

assign or_ln340_9_fu_1589_p2 = (xor_ln340_9_fu_1583_p2 | tmp_40_fu_1557_p3);

assign or_ln340_fu_1085_p2 = (xor_ln340_fu_1079_p2 | tmp_22_fu_1053_p3);

assign p_Result_18_fu_2053_p3 = p_Val2_22_fu_2047_p2[32'd17];

assign p_Result_19_fu_2131_p3 = p_Val2_25_fu_2121_p2[32'd17];

assign p_Result_20_fu_2165_p3 = ret_V_1_fu_2159_p2[32'd18];

assign p_Result_21_fu_2179_p3 = p_Val2_29_fu_2173_p2[32'd17];

assign p_Result_s_fu_2039_p3 = ret_V_fu_2033_p2[32'd18];

assign p_Val2_22_fu_2047_p0 = p_Val2_1_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_849_ap_return;

assign p_Val2_22_fu_2047_p1 = p_Val2_19_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_833_ap_return;

assign p_Val2_22_fu_2047_p2 = ($signed(p_Val2_22_fu_2047_p0) + $signed(p_Val2_22_fu_2047_p1));

assign p_Val2_23_fu_2115_p1 = exp_res_8_V_1_reg_2610;

assign p_Val2_24_fu_2118_p1 = exp_res_9_V_1_reg_2617;

assign p_Val2_25_fu_2121_p2 = (p_Val2_24_fu_2118_p1 + p_Val2_23_fu_2115_p1);

assign p_Val2_26_fu_2107_p3 = ((or_ln340_10_fu_2085_p2[0:0] === 1'b1) ? select_ln340_20_fu_2091_p3 : select_ln388_10_fu_2099_p3);

assign p_Val2_27_fu_2139_p3 = ((p_Result_19_fu_2131_p3[0:0] === 1'b1) ? 17'd131071 : add_ln746_fu_2127_p2);

assign p_Val2_29_fu_2173_p2 = ($signed(zext_ln746_fu_2147_p1) + $signed(p_Val2_26_fu_2107_p3));

assign res_V_data_0_V_TDATA = {{mul_ln1118_fu_462_p2[25:10]}};

assign res_V_data_1_V_TDATA = {{mul_ln1118_1_fu_469_p2[25:10]}};

assign res_V_data_2_V_TDATA = {{mul_ln1118_2_fu_463_p2[25:10]}};

assign res_V_data_3_V_TDATA = {{mul_ln1118_3_fu_466_p2[25:10]}};

assign res_V_data_4_V_TDATA = {{mul_ln1118_4_fu_464_p2[25:10]}};

assign res_V_data_5_V_TDATA = {{mul_ln1118_5_fu_468_p2[25:10]}};

assign res_V_data_6_V_TDATA = {{mul_ln1118_6_fu_465_p2[25:10]}};

assign res_V_data_7_V_TDATA = {{mul_ln1118_7_fu_467_p2[25:10]}};

assign res_V_data_8_V_TDATA = {{mul_ln1118_8_fu_470_p2[25:10]}};

assign res_V_data_9_V_TDATA = {{mul_ln1118_9_fu_471_p2[25:10]}};

assign ret_V_1_fu_2159_p2 = ($signed(lhs_V_1_fu_2151_p1) + $signed(rhs_V_1_fu_2155_p1));

assign ret_V_fu_2033_p2 = ($signed(lhs_V_fu_2025_p1) + $signed(rhs_V_fu_2029_p1));

assign rhs_V_1_fu_2155_p1 = p_Val2_27_fu_2139_p3;

assign rhs_V_fu_2029_p0 = p_Val2_1_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_849_ap_return;

assign rhs_V_fu_2029_p1 = rhs_V_fu_2029_p0;

assign select_ln340_10_fu_1800_p3 = ((xor_ln340_15_fu_1353_p2[0:0] === 1'b1) ? 10'd511 : tmp_15_fu_1790_p4);

assign select_ln340_12_fu_1834_p3 = ((xor_ln340_16_fu_1409_p2[0:0] === 1'b1) ? 10'd511 : tmp_16_fu_1824_p4);

assign select_ln340_14_fu_1868_p3 = ((xor_ln340_17_fu_1465_p2[0:0] === 1'b1) ? 10'd511 : tmp_17_fu_1858_p4);

assign select_ln340_16_fu_1902_p3 = ((xor_ln340_18_fu_1521_p2[0:0] === 1'b1) ? 10'd511 : tmp_18_fu_1892_p4);

assign select_ln340_18_fu_1936_p3 = ((xor_ln340_19_fu_1577_p2[0:0] === 1'b1) ? 10'd511 : tmp_19_fu_1926_p4);

assign select_ln340_20_fu_2091_p3 = ((xor_ln340_20_fu_2073_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_22_fu_2047_p2);

assign select_ln340_22_fu_2227_p3 = ((xor_ln340_22_fu_2199_p2[0:0] === 1'b1) ? 10'd511 : tmp_20_fu_2217_p4);

assign select_ln340_2_fu_1644_p3 = ((xor_ln340_11_fu_1129_p2[0:0] === 1'b1) ? 10'd511 : tmp_11_fu_1634_p4);

assign select_ln340_4_fu_1683_p3 = ((xor_ln340_12_fu_1185_p2[0:0] === 1'b1) ? 10'd511 : tmp_12_fu_1673_p4);

assign select_ln340_6_fu_1722_p3 = ((xor_ln340_13_fu_1241_p2[0:0] === 1'b1) ? 10'd511 : tmp_13_fu_1712_p4);

assign select_ln340_8_fu_1761_p3 = ((xor_ln340_14_fu_1297_p2[0:0] === 1'b1) ? 10'd511 : tmp_14_fu_1751_p4);

assign select_ln340_fu_1605_p3 = ((xor_ln340_10_fu_1073_p2[0:0] === 1'b1) ? 10'd511 : tmp_fu_1595_p4);

assign select_ln388_10_fu_2099_p3 = ((underflow_fu_2067_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_22_fu_2047_p2);

assign select_ln388_11_fu_2235_p3 = ((underflow_1_fu_2193_p2[0:0] === 1'b1) ? 10'd512 : tmp_20_fu_2217_p4);

assign select_ln388_1_fu_1652_p3 = ((and_ln786_1_fu_1123_p2[0:0] === 1'b1) ? 10'd512 : tmp_11_fu_1634_p4);

assign select_ln388_2_fu_1691_p3 = ((and_ln786_2_fu_1179_p2[0:0] === 1'b1) ? 10'd512 : tmp_12_fu_1673_p4);

assign select_ln388_3_fu_1730_p3 = ((and_ln786_3_fu_1235_p2[0:0] === 1'b1) ? 10'd512 : tmp_13_fu_1712_p4);

assign select_ln388_4_fu_1769_p3 = ((and_ln786_4_fu_1291_p2[0:0] === 1'b1) ? 10'd512 : tmp_14_fu_1751_p4);

assign select_ln388_5_fu_1808_p3 = ((and_ln786_5_fu_1347_p2[0:0] === 1'b1) ? 10'd512 : tmp_15_fu_1790_p4);

assign select_ln388_6_fu_1842_p3 = ((and_ln786_6_fu_1403_p2[0:0] === 1'b1) ? 10'd512 : tmp_16_fu_1824_p4);

assign select_ln388_7_fu_1876_p3 = ((and_ln786_7_fu_1459_p2[0:0] === 1'b1) ? 10'd512 : tmp_17_fu_1858_p4);

assign select_ln388_8_fu_1910_p3 = ((and_ln786_8_fu_1515_p2[0:0] === 1'b1) ? 10'd512 : tmp_18_fu_1892_p4);

assign select_ln388_9_fu_1944_p3 = ((and_ln786_9_fu_1571_p2[0:0] === 1'b1) ? 10'd512 : tmp_19_fu_1926_p4);

assign select_ln388_fu_1613_p3 = ((and_ln786_fu_1067_p2[0:0] === 1'b1) ? 10'd512 : tmp_fu_1595_p4);

assign select_ln65_1_fu_925_p1 = data_V_data_3_V_dout;

assign select_ln65_1_fu_925_p2 = data_V_data_2_V_dout;

assign select_ln65_1_fu_925_p3 = ((icmp_ln1496_1_fu_919_p2[0:0] === 1'b1) ? select_ln65_1_fu_925_p1 : select_ln65_1_fu_925_p2);

assign select_ln65_2_fu_939_p3 = ((icmp_ln1496_2_fu_933_p2[0:0] === 1'b1) ? select_ln65_1_fu_925_p3 : select_ln65_fu_911_p3);

assign select_ln65_3_fu_953_p1 = data_V_data_5_V_dout;

assign select_ln65_3_fu_953_p2 = data_V_data_4_V_dout;

assign select_ln65_3_fu_953_p3 = ((icmp_ln1496_3_fu_947_p2[0:0] === 1'b1) ? select_ln65_3_fu_953_p1 : select_ln65_3_fu_953_p2);

assign select_ln65_4_fu_967_p1 = data_V_data_7_V_dout;

assign select_ln65_4_fu_967_p2 = data_V_data_6_V_dout;

assign select_ln65_4_fu_967_p3 = ((icmp_ln1496_4_fu_961_p2[0:0] === 1'b1) ? select_ln65_4_fu_967_p1 : select_ln65_4_fu_967_p2);

assign select_ln65_5_fu_981_p3 = ((icmp_ln1496_5_fu_975_p2[0:0] === 1'b1) ? select_ln65_4_fu_967_p3 : select_ln65_3_fu_953_p3);

assign select_ln65_6_fu_995_p3 = ((icmp_ln1496_6_fu_989_p2[0:0] === 1'b1) ? select_ln65_5_fu_981_p3 : select_ln65_2_fu_939_p3);

assign select_ln65_7_fu_1009_p1 = data_V_data_9_V_dout;

assign select_ln65_7_fu_1009_p2 = data_V_data_8_V_dout;

assign select_ln65_7_fu_1009_p3 = ((icmp_ln1496_7_fu_1003_p2[0:0] === 1'b1) ? select_ln65_7_fu_1009_p1 : select_ln65_7_fu_1009_p2);

assign select_ln65_fu_911_p1 = data_V_data_1_V_dout;

assign select_ln65_fu_911_p2 = data_V_data_0_V_dout;

assign select_ln65_fu_911_p3 = ((icmp_ln1496_fu_905_p2[0:0] === 1'b1) ? select_ln65_fu_911_p1 : select_ln65_fu_911_p2);

assign sext_ln241_fu_2256_p1 = $signed(invert_table2_q0);

assign sext_ln703_10_fu_1539_p0 = data_V_data_9_V_dout;

assign sext_ln703_10_fu_1539_p1 = sext_ln703_10_fu_1539_p0;

assign sext_ln703_1_fu_1035_p1 = $signed(x_max_V_fu_1023_p3);

assign sext_ln703_2_fu_1091_p0 = data_V_data_1_V_dout;

assign sext_ln703_2_fu_1091_p1 = sext_ln703_2_fu_1091_p0;

assign sext_ln703_3_fu_1147_p0 = data_V_data_2_V_dout;

assign sext_ln703_3_fu_1147_p1 = sext_ln703_3_fu_1147_p0;

assign sext_ln703_4_fu_1203_p0 = data_V_data_3_V_dout;

assign sext_ln703_4_fu_1203_p1 = sext_ln703_4_fu_1203_p0;

assign sext_ln703_5_fu_1259_p0 = data_V_data_4_V_dout;

assign sext_ln703_5_fu_1259_p1 = sext_ln703_5_fu_1259_p0;

assign sext_ln703_6_fu_1315_p0 = data_V_data_5_V_dout;

assign sext_ln703_6_fu_1315_p1 = sext_ln703_6_fu_1315_p0;

assign sext_ln703_7_fu_1371_p0 = data_V_data_6_V_dout;

assign sext_ln703_7_fu_1371_p1 = sext_ln703_7_fu_1371_p0;

assign sext_ln703_8_fu_1427_p0 = data_V_data_7_V_dout;

assign sext_ln703_8_fu_1427_p1 = sext_ln703_8_fu_1427_p0;

assign sext_ln703_9_fu_1483_p0 = data_V_data_8_V_dout;

assign sext_ln703_9_fu_1483_p1 = sext_ln703_9_fu_1483_p0;

assign sext_ln703_fu_1031_p0 = data_V_data_0_V_dout;

assign sext_ln703_fu_1031_p1 = sext_ln703_fu_1031_p0;

assign sub_ln1193_1_fu_1095_p2 = ($signed(sext_ln703_2_fu_1091_p1) - $signed(sext_ln703_1_fu_1035_p1));

assign sub_ln1193_2_fu_1151_p2 = ($signed(sext_ln703_3_fu_1147_p1) - $signed(sext_ln703_1_fu_1035_p1));

assign sub_ln1193_3_fu_1207_p2 = ($signed(sext_ln703_4_fu_1203_p1) - $signed(sext_ln703_1_fu_1035_p1));

assign sub_ln1193_4_fu_1263_p2 = ($signed(sext_ln703_5_fu_1259_p1) - $signed(sext_ln703_1_fu_1035_p1));

assign sub_ln1193_5_fu_1319_p2 = ($signed(sext_ln703_6_fu_1315_p1) - $signed(sext_ln703_1_fu_1035_p1));

assign sub_ln1193_6_fu_1375_p2 = ($signed(sext_ln703_7_fu_1371_p1) - $signed(sext_ln703_1_fu_1035_p1));

assign sub_ln1193_7_fu_1431_p2 = ($signed(sext_ln703_8_fu_1427_p1) - $signed(sext_ln703_1_fu_1035_p1));

assign sub_ln1193_8_fu_1487_p2 = ($signed(sext_ln703_9_fu_1483_p1) - $signed(sext_ln703_1_fu_1035_p1));

assign sub_ln1193_9_fu_1543_p2 = ($signed(sext_ln703_10_fu_1539_p1) - $signed(sext_ln703_1_fu_1035_p1));

assign sub_ln1193_fu_1039_p2 = ($signed(sext_ln703_fu_1031_p1) - $signed(sext_ln703_1_fu_1035_p1));

assign tmp_11_fu_1634_p4 = {{sub_ln1193_1_fu_1095_p2[15:6]}};

assign tmp_12_fu_1673_p4 = {{sub_ln1193_2_fu_1151_p2[15:6]}};

assign tmp_13_fu_1712_p4 = {{sub_ln1193_3_fu_1207_p2[15:6]}};

assign tmp_14_fu_1751_p4 = {{sub_ln1193_4_fu_1263_p2[15:6]}};

assign tmp_15_fu_1790_p4 = {{sub_ln1193_5_fu_1319_p2[15:6]}};

assign tmp_16_fu_1824_p4 = {{sub_ln1193_6_fu_1375_p2[15:6]}};

assign tmp_17_fu_1858_p4 = {{sub_ln1193_7_fu_1431_p2[15:6]}};

assign tmp_18_fu_1892_p4 = {{sub_ln1193_8_fu_1487_p2[15:6]}};

assign tmp_19_fu_1926_p4 = {{sub_ln1193_9_fu_1543_p2[15:6]}};

assign tmp_20_fu_2217_p4 = {{p_Val2_29_fu_2173_p2[17:8]}};

assign tmp_21_fu_1045_p3 = sub_ln1193_fu_1039_p2[32'd16];

assign tmp_22_fu_1053_p3 = sub_ln1193_fu_1039_p2[32'd15];

assign tmp_23_fu_1101_p3 = sub_ln1193_1_fu_1095_p2[32'd16];

assign tmp_24_fu_1109_p3 = sub_ln1193_1_fu_1095_p2[32'd15];

assign tmp_25_fu_1157_p3 = sub_ln1193_2_fu_1151_p2[32'd16];

assign tmp_26_fu_1165_p3 = sub_ln1193_2_fu_1151_p2[32'd15];

assign tmp_27_fu_1213_p3 = sub_ln1193_3_fu_1207_p2[32'd16];

assign tmp_28_fu_1221_p3 = sub_ln1193_3_fu_1207_p2[32'd15];

assign tmp_29_fu_1269_p3 = sub_ln1193_4_fu_1263_p2[32'd16];

assign tmp_30_fu_1277_p3 = sub_ln1193_4_fu_1263_p2[32'd15];

assign tmp_31_fu_1325_p3 = sub_ln1193_5_fu_1319_p2[32'd16];

assign tmp_32_fu_1333_p3 = sub_ln1193_5_fu_1319_p2[32'd15];

assign tmp_33_fu_1381_p3 = sub_ln1193_6_fu_1375_p2[32'd16];

assign tmp_34_fu_1389_p3 = sub_ln1193_6_fu_1375_p2[32'd15];

assign tmp_35_fu_1437_p3 = sub_ln1193_7_fu_1431_p2[32'd16];

assign tmp_36_fu_1445_p3 = sub_ln1193_7_fu_1431_p2[32'd15];

assign tmp_37_fu_1493_p3 = sub_ln1193_8_fu_1487_p2[32'd16];

assign tmp_38_fu_1501_p3 = sub_ln1193_8_fu_1487_p2[32'd15];

assign tmp_39_fu_1549_p3 = sub_ln1193_9_fu_1543_p2[32'd16];

assign tmp_40_fu_1557_p3 = sub_ln1193_9_fu_1543_p2[32'd15];

assign tmp_fu_1595_p4 = {{sub_ln1193_fu_1039_p2[15:6]}};

assign underflow_1_fu_2193_p2 = (xor_ln786_11_fu_2187_p2 & p_Result_20_fu_2165_p3);

assign underflow_fu_2067_p2 = (xor_ln786_10_fu_2061_p2 & p_Result_s_fu_2039_p3);

assign x_max_V_fu_1023_p3 = ((icmp_ln1496_8_fu_1017_p2[0:0] === 1'b1) ? select_ln65_7_fu_1009_p3 : select_ln65_6_fu_995_p3);

assign xor_ln340_10_fu_1073_p2 = (tmp_22_fu_1053_p3 ^ tmp_21_fu_1045_p3);

assign xor_ln340_11_fu_1129_p2 = (tmp_24_fu_1109_p3 ^ tmp_23_fu_1101_p3);

assign xor_ln340_12_fu_1185_p2 = (tmp_26_fu_1165_p3 ^ tmp_25_fu_1157_p3);

assign xor_ln340_13_fu_1241_p2 = (tmp_28_fu_1221_p3 ^ tmp_27_fu_1213_p3);

assign xor_ln340_14_fu_1297_p2 = (tmp_30_fu_1277_p3 ^ tmp_29_fu_1269_p3);

assign xor_ln340_15_fu_1353_p2 = (tmp_32_fu_1333_p3 ^ tmp_31_fu_1325_p3);

assign xor_ln340_16_fu_1409_p2 = (tmp_34_fu_1389_p3 ^ tmp_33_fu_1381_p3);

assign xor_ln340_17_fu_1465_p2 = (tmp_36_fu_1445_p3 ^ tmp_35_fu_1437_p3);

assign xor_ln340_18_fu_1521_p2 = (tmp_38_fu_1501_p3 ^ tmp_37_fu_1493_p3);

assign xor_ln340_19_fu_1577_p2 = (tmp_40_fu_1557_p3 ^ tmp_39_fu_1549_p3);

assign xor_ln340_1_fu_1135_p2 = (tmp_23_fu_1101_p3 ^ 1'd1);

assign xor_ln340_20_fu_2073_p2 = (p_Result_s_fu_2039_p3 ^ p_Result_18_fu_2053_p3);

assign xor_ln340_21_fu_2079_p2 = (p_Result_s_fu_2039_p3 ^ 1'd1);

assign xor_ln340_22_fu_2199_p2 = (p_Result_21_fu_2179_p3 ^ p_Result_20_fu_2165_p3);

assign xor_ln340_23_fu_2205_p2 = (p_Result_20_fu_2165_p3 ^ 1'd1);

assign xor_ln340_2_fu_1191_p2 = (tmp_25_fu_1157_p3 ^ 1'd1);

assign xor_ln340_3_fu_1247_p2 = (tmp_27_fu_1213_p3 ^ 1'd1);

assign xor_ln340_4_fu_1303_p2 = (tmp_29_fu_1269_p3 ^ 1'd1);

assign xor_ln340_5_fu_1359_p2 = (tmp_31_fu_1325_p3 ^ 1'd1);

assign xor_ln340_6_fu_1415_p2 = (tmp_33_fu_1381_p3 ^ 1'd1);

assign xor_ln340_7_fu_1471_p2 = (tmp_35_fu_1437_p3 ^ 1'd1);

assign xor_ln340_8_fu_1527_p2 = (tmp_37_fu_1493_p3 ^ 1'd1);

assign xor_ln340_9_fu_1583_p2 = (tmp_39_fu_1549_p3 ^ 1'd1);

assign xor_ln340_fu_1079_p2 = (tmp_21_fu_1045_p3 ^ 1'd1);

assign xor_ln786_10_fu_2061_p2 = (p_Result_18_fu_2053_p3 ^ 1'd1);

assign xor_ln786_11_fu_2187_p2 = (p_Result_21_fu_2179_p3 ^ 1'd1);

assign xor_ln786_1_fu_1117_p2 = (tmp_24_fu_1109_p3 ^ 1'd1);

assign xor_ln786_2_fu_1173_p2 = (tmp_26_fu_1165_p3 ^ 1'd1);

assign xor_ln786_3_fu_1229_p2 = (tmp_28_fu_1221_p3 ^ 1'd1);

assign xor_ln786_4_fu_1285_p2 = (tmp_30_fu_1277_p3 ^ 1'd1);

assign xor_ln786_5_fu_1341_p2 = (tmp_32_fu_1333_p3 ^ 1'd1);

assign xor_ln786_6_fu_1397_p2 = (tmp_34_fu_1389_p3 ^ 1'd1);

assign xor_ln786_7_fu_1453_p2 = (tmp_36_fu_1445_p3 ^ 1'd1);

assign xor_ln786_8_fu_1509_p2 = (tmp_38_fu_1501_p3 ^ 1'd1);

assign xor_ln786_9_fu_1565_p2 = (tmp_40_fu_1557_p3 ^ 1'd1);

assign xor_ln786_fu_1061_p2 = (tmp_22_fu_1053_p3 ^ 1'd1);

assign y_V_10_fu_2243_p3 = ((or_ln340_11_fu_2211_p2[0:0] === 1'b1) ? select_ln340_22_fu_2227_p3 : select_ln388_11_fu_2235_p3);

assign y_V_1_fu_1660_p3 = ((or_ln340_1_fu_1141_p2[0:0] === 1'b1) ? select_ln340_2_fu_1644_p3 : select_ln388_1_fu_1652_p3);

assign y_V_2_fu_1699_p3 = ((or_ln340_2_fu_1197_p2[0:0] === 1'b1) ? select_ln340_4_fu_1683_p3 : select_ln388_2_fu_1691_p3);

assign y_V_3_fu_1738_p3 = ((or_ln340_3_fu_1253_p2[0:0] === 1'b1) ? select_ln340_6_fu_1722_p3 : select_ln388_3_fu_1730_p3);

assign y_V_4_fu_1777_p3 = ((or_ln340_4_fu_1309_p2[0:0] === 1'b1) ? select_ln340_8_fu_1761_p3 : select_ln388_4_fu_1769_p3);

assign y_V_5_fu_1816_p3 = ((or_ln340_5_fu_1365_p2[0:0] === 1'b1) ? select_ln340_10_fu_1800_p3 : select_ln388_5_fu_1808_p3);

assign y_V_6_fu_1850_p3 = ((or_ln340_6_fu_1421_p2[0:0] === 1'b1) ? select_ln340_12_fu_1834_p3 : select_ln388_6_fu_1842_p3);

assign y_V_7_fu_1884_p3 = ((or_ln340_7_fu_1477_p2[0:0] === 1'b1) ? select_ln340_14_fu_1868_p3 : select_ln388_7_fu_1876_p3);

assign y_V_8_fu_1918_p3 = ((or_ln340_8_fu_1533_p2[0:0] === 1'b1) ? select_ln340_16_fu_1902_p3 : select_ln388_8_fu_1910_p3);

assign y_V_9_fu_1952_p3 = ((or_ln340_9_fu_1589_p2[0:0] === 1'b1) ? select_ln340_18_fu_1936_p3 : select_ln388_9_fu_1944_p3);

assign y_V_fu_1621_p3 = ((or_ln340_fu_1085_p2[0:0] === 1'b1) ? select_ln340_fu_1605_p3 : select_ln388_fu_1613_p3);

assign zext_ln225_1_fu_1668_p1 = y_V_1_fu_1660_p3;

assign zext_ln225_2_fu_1707_p1 = y_V_2_fu_1699_p3;

assign zext_ln225_3_fu_1746_p1 = y_V_3_fu_1738_p3;

assign zext_ln225_4_fu_1785_p1 = y_V_4_fu_1777_p3;

assign zext_ln225_5_fu_1960_p1 = y_V_5_reg_2515;

assign zext_ln225_6_fu_1964_p1 = y_V_6_reg_2520;

assign zext_ln225_7_fu_1968_p1 = y_V_7_reg_2525;

assign zext_ln225_8_fu_1972_p1 = y_V_8_reg_2530;

assign zext_ln225_9_fu_1976_p1 = y_V_9_reg_2535;

assign zext_ln225_fu_1629_p1 = y_V_fu_1621_p3;

assign zext_ln235_fu_2251_p1 = y_V_10_fu_2243_p3;

assign zext_ln746_fu_2147_p1 = p_Val2_27_fu_2139_p3;

endmodule //softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config10_s
