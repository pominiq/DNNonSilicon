// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_10u_config9_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_stream_V_data_0_V_dout,
        data_stream_V_data_0_V_empty_n,
        data_stream_V_data_0_V_read,
        data_stream_V_data_1_V_dout,
        data_stream_V_data_1_V_empty_n,
        data_stream_V_data_1_V_read,
        data_stream_V_data_2_V_dout,
        data_stream_V_data_2_V_empty_n,
        data_stream_V_data_2_V_read,
        data_stream_V_data_3_V_dout,
        data_stream_V_data_3_V_empty_n,
        data_stream_V_data_3_V_read,
        data_stream_V_data_4_V_dout,
        data_stream_V_data_4_V_empty_n,
        data_stream_V_data_4_V_read,
        data_stream_V_data_5_V_dout,
        data_stream_V_data_5_V_empty_n,
        data_stream_V_data_5_V_read,
        data_stream_V_data_6_V_dout,
        data_stream_V_data_6_V_empty_n,
        data_stream_V_data_6_V_read,
        data_stream_V_data_7_V_dout,
        data_stream_V_data_7_V_empty_n,
        data_stream_V_data_7_V_read,
        res_stream_V_data_0_V_din,
        res_stream_V_data_0_V_full_n,
        res_stream_V_data_0_V_write,
        res_stream_V_data_1_V_din,
        res_stream_V_data_1_V_full_n,
        res_stream_V_data_1_V_write,
        res_stream_V_data_2_V_din,
        res_stream_V_data_2_V_full_n,
        res_stream_V_data_2_V_write,
        res_stream_V_data_3_V_din,
        res_stream_V_data_3_V_full_n,
        res_stream_V_data_3_V_write,
        res_stream_V_data_4_V_din,
        res_stream_V_data_4_V_full_n,
        res_stream_V_data_4_V_write,
        res_stream_V_data_5_V_din,
        res_stream_V_data_5_V_full_n,
        res_stream_V_data_5_V_write,
        res_stream_V_data_6_V_din,
        res_stream_V_data_6_V_full_n,
        res_stream_V_data_6_V_write,
        res_stream_V_data_7_V_din,
        res_stream_V_data_7_V_full_n,
        res_stream_V_data_7_V_write,
        res_stream_V_data_8_V_din,
        res_stream_V_data_8_V_full_n,
        res_stream_V_data_8_V_write,
        res_stream_V_data_9_V_din,
        res_stream_V_data_9_V_full_n,
        res_stream_V_data_9_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_stream_V_data_0_V_dout;
input   data_stream_V_data_0_V_empty_n;
output   data_stream_V_data_0_V_read;
input  [15:0] data_stream_V_data_1_V_dout;
input   data_stream_V_data_1_V_empty_n;
output   data_stream_V_data_1_V_read;
input  [15:0] data_stream_V_data_2_V_dout;
input   data_stream_V_data_2_V_empty_n;
output   data_stream_V_data_2_V_read;
input  [15:0] data_stream_V_data_3_V_dout;
input   data_stream_V_data_3_V_empty_n;
output   data_stream_V_data_3_V_read;
input  [15:0] data_stream_V_data_4_V_dout;
input   data_stream_V_data_4_V_empty_n;
output   data_stream_V_data_4_V_read;
input  [15:0] data_stream_V_data_5_V_dout;
input   data_stream_V_data_5_V_empty_n;
output   data_stream_V_data_5_V_read;
input  [15:0] data_stream_V_data_6_V_dout;
input   data_stream_V_data_6_V_empty_n;
output   data_stream_V_data_6_V_read;
input  [15:0] data_stream_V_data_7_V_dout;
input   data_stream_V_data_7_V_empty_n;
output   data_stream_V_data_7_V_read;
output  [15:0] res_stream_V_data_0_V_din;
input   res_stream_V_data_0_V_full_n;
output   res_stream_V_data_0_V_write;
output  [15:0] res_stream_V_data_1_V_din;
input   res_stream_V_data_1_V_full_n;
output   res_stream_V_data_1_V_write;
output  [15:0] res_stream_V_data_2_V_din;
input   res_stream_V_data_2_V_full_n;
output   res_stream_V_data_2_V_write;
output  [15:0] res_stream_V_data_3_V_din;
input   res_stream_V_data_3_V_full_n;
output   res_stream_V_data_3_V_write;
output  [15:0] res_stream_V_data_4_V_din;
input   res_stream_V_data_4_V_full_n;
output   res_stream_V_data_4_V_write;
output  [15:0] res_stream_V_data_5_V_din;
input   res_stream_V_data_5_V_full_n;
output   res_stream_V_data_5_V_write;
output  [15:0] res_stream_V_data_6_V_din;
input   res_stream_V_data_6_V_full_n;
output   res_stream_V_data_6_V_write;
output  [15:0] res_stream_V_data_7_V_din;
input   res_stream_V_data_7_V_full_n;
output   res_stream_V_data_7_V_write;
output  [15:0] res_stream_V_data_8_V_din;
input   res_stream_V_data_8_V_full_n;
output   res_stream_V_data_8_V_write;
output  [15:0] res_stream_V_data_9_V_din;
input   res_stream_V_data_9_V_full_n;
output   res_stream_V_data_9_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_stream_V_data_0_V_read;
reg data_stream_V_data_1_V_read;
reg data_stream_V_data_2_V_read;
reg data_stream_V_data_3_V_read;
reg data_stream_V_data_4_V_read;
reg data_stream_V_data_5_V_read;
reg data_stream_V_data_6_V_read;
reg data_stream_V_data_7_V_read;
reg res_stream_V_data_0_V_write;
reg res_stream_V_data_1_V_write;
reg res_stream_V_data_2_V_write;
reg res_stream_V_data_3_V_write;
reg res_stream_V_data_4_V_write;
reg res_stream_V_data_5_V_write;
reg res_stream_V_data_6_V_write;
reg res_stream_V_data_7_V_write;
reg res_stream_V_data_8_V_write;
reg res_stream_V_data_9_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_stream_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    data_stream_V_data_1_V_blk_n;
reg    data_stream_V_data_2_V_blk_n;
reg    data_stream_V_data_3_V_blk_n;
reg    data_stream_V_data_4_V_blk_n;
reg    data_stream_V_data_5_V_blk_n;
reg    data_stream_V_data_6_V_blk_n;
reg    data_stream_V_data_7_V_blk_n;
reg    res_stream_V_data_0_V_blk_n;
wire    ap_CS_fsm_state4;
reg    res_stream_V_data_1_V_blk_n;
reg    res_stream_V_data_2_V_blk_n;
reg    res_stream_V_data_3_V_blk_n;
reg    res_stream_V_data_4_V_blk_n;
reg    res_stream_V_data_5_V_blk_n;
reg    res_stream_V_data_6_V_blk_n;
reg    res_stream_V_data_7_V_blk_n;
reg    res_stream_V_data_8_V_blk_n;
reg    res_stream_V_data_9_V_blk_n;
reg   [2:0] i_in_0_reg_486;
wire   [0:0] icmp_ln36_fu_533_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op75;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [2:0] i_in_fu_539_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] trunc_ln203_fu_545_p1;
reg   [1:0] trunc_ln203_reg_1120;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_ready;
wire   [15:0] call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_0;
wire   [15:0] call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_1;
wire   [15:0] call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_2;
wire   [15:0] call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_3;
wire   [15:0] call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_4;
wire   [15:0] call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_5;
wire   [15:0] call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_6;
wire   [15:0] call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_7;
wire   [15:0] call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_8;
wire   [15:0] call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_9;
reg   [15:0] data_24_V_fu_304;
reg   [15:0] data_25_V_fu_308;
reg   [15:0] data_26_V_fu_312;
reg   [15:0] data_27_V_fu_316;
reg   [15:0] data_28_V_fu_320;
reg   [15:0] data_29_V_fu_324;
reg   [15:0] data_30_V_fu_328;
reg   [15:0] data_31_V_fu_332;
reg   [15:0] data_24_V_1_fu_336;
reg   [15:0] data_25_V_1_fu_340;
reg   [15:0] data_26_V_1_fu_344;
reg   [15:0] data_27_V_1_fu_348;
reg   [15:0] data_28_V_1_fu_352;
reg   [15:0] data_29_V_1_fu_356;
reg   [15:0] data_30_V_1_fu_360;
reg   [15:0] data_31_V_1_fu_364;
reg   [15:0] data_24_V_2_fu_368;
reg   [15:0] data_25_V_2_fu_372;
reg   [15:0] data_26_V_2_fu_376;
reg   [15:0] data_27_V_2_fu_380;
reg   [15:0] data_28_V_2_fu_384;
reg   [15:0] data_29_V_2_fu_388;
reg   [15:0] data_30_V_2_fu_392;
reg   [15:0] data_31_V_2_fu_396;
reg   [15:0] data_24_V_3_fu_400;
reg   [15:0] data_25_V_3_fu_404;
reg   [15:0] data_26_V_3_fu_408;
reg   [15:0] data_27_V_3_fu_412;
reg   [15:0] data_28_V_3_fu_416;
reg   [15:0] data_29_V_3_fu_420;
reg   [15:0] data_30_V_3_fu_424;
reg   [15:0] data_31_V_3_fu_428;
wire    io_acc_block_signal_op192;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497(
    .ap_ready(call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_ready),
    .data_0_V_read(data_24_V_fu_304),
    .data_1_V_read(data_25_V_fu_308),
    .data_2_V_read(data_26_V_fu_312),
    .data_3_V_read(data_27_V_fu_316),
    .data_4_V_read(data_28_V_fu_320),
    .data_5_V_read(data_29_V_fu_324),
    .data_6_V_read(data_30_V_fu_328),
    .data_7_V_read(data_31_V_fu_332),
    .data_8_V_read(data_24_V_1_fu_336),
    .data_9_V_read(data_25_V_1_fu_340),
    .data_10_V_read(data_26_V_1_fu_344),
    .data_11_V_read(data_27_V_1_fu_348),
    .data_12_V_read(data_28_V_1_fu_352),
    .data_13_V_read(data_29_V_1_fu_356),
    .data_14_V_read(data_30_V_1_fu_360),
    .data_15_V_read(data_31_V_1_fu_364),
    .data_16_V_read(data_24_V_2_fu_368),
    .data_17_V_read(data_25_V_2_fu_372),
    .data_18_V_read(data_26_V_2_fu_376),
    .data_19_V_read(data_27_V_2_fu_380),
    .data_20_V_read(data_28_V_2_fu_384),
    .data_21_V_read(data_29_V_2_fu_388),
    .data_22_V_read(data_30_V_2_fu_392),
    .data_23_V_read(data_31_V_2_fu_396),
    .data_24_V_read(data_24_V_3_fu_400),
    .data_25_V_read(data_25_V_3_fu_404),
    .data_26_V_read(data_26_V_3_fu_408),
    .data_27_V_read(data_27_V_3_fu_412),
    .data_28_V_read(data_28_V_3_fu_416),
    .data_29_V_read(data_29_V_3_fu_420),
    .data_30_V_read(data_30_V_3_fu_424),
    .data_31_V_read(data_31_V_3_fu_428),
    .ap_return_0(call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_0),
    .ap_return_1(call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_1),
    .ap_return_2(call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_2),
    .ap_return_3(call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_3),
    .ap_return_4(call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_4),
    .ap_return_5(call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_5),
    .ap_return_6(call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_6),
    .ap_return_7(call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_7),
    .ap_return_8(call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_8),
    .ap_return_9(call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_9)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((io_acc_block_signal_op192 == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln36_fu_533_p2 == 1'd0))) begin
        i_in_0_reg_486 <= i_in_fu_539_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_in_0_reg_486 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1120 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_24_V_1_fu_336 <= data_stream_V_data_0_V_dout;
        data_25_V_1_fu_340 <= data_stream_V_data_1_V_dout;
        data_26_V_1_fu_344 <= data_stream_V_data_2_V_dout;
        data_27_V_1_fu_348 <= data_stream_V_data_3_V_dout;
        data_28_V_1_fu_352 <= data_stream_V_data_4_V_dout;
        data_29_V_1_fu_356 <= data_stream_V_data_5_V_dout;
        data_30_V_1_fu_360 <= data_stream_V_data_6_V_dout;
        data_31_V_1_fu_364 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1120 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_24_V_2_fu_368 <= data_stream_V_data_0_V_dout;
        data_25_V_2_fu_372 <= data_stream_V_data_1_V_dout;
        data_26_V_2_fu_376 <= data_stream_V_data_2_V_dout;
        data_27_V_2_fu_380 <= data_stream_V_data_3_V_dout;
        data_28_V_2_fu_384 <= data_stream_V_data_4_V_dout;
        data_29_V_2_fu_388 <= data_stream_V_data_5_V_dout;
        data_30_V_2_fu_392 <= data_stream_V_data_6_V_dout;
        data_31_V_2_fu_396 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1120 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_24_V_3_fu_400 <= data_stream_V_data_0_V_dout;
        data_25_V_3_fu_404 <= data_stream_V_data_1_V_dout;
        data_26_V_3_fu_408 <= data_stream_V_data_2_V_dout;
        data_27_V_3_fu_412 <= data_stream_V_data_3_V_dout;
        data_28_V_3_fu_416 <= data_stream_V_data_4_V_dout;
        data_29_V_3_fu_420 <= data_stream_V_data_5_V_dout;
        data_30_V_3_fu_424 <= data_stream_V_data_6_V_dout;
        data_31_V_3_fu_428 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1120 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_24_V_fu_304 <= data_stream_V_data_0_V_dout;
        data_25_V_fu_308 <= data_stream_V_data_1_V_dout;
        data_26_V_fu_312 <= data_stream_V_data_2_V_dout;
        data_27_V_fu_316 <= data_stream_V_data_3_V_dout;
        data_28_V_fu_320 <= data_stream_V_data_4_V_dout;
        data_29_V_fu_324 <= data_stream_V_data_5_V_dout;
        data_30_V_fu_328 <= data_stream_V_data_6_V_dout;
        data_31_V_fu_332 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln36_fu_533_p2 == 1'd0))) begin
        trunc_ln203_reg_1120 <= trunc_ln203_fu_545_p1;
    end
end

always @ (*) begin
    if ((icmp_ln36_fu_533_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op192 == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_0_V_blk_n = data_stream_V_data_0_V_empty_n;
    end else begin
        data_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_0_V_read = 1'b1;
    end else begin
        data_stream_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_1_V_blk_n = data_stream_V_data_1_V_empty_n;
    end else begin
        data_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_1_V_read = 1'b1;
    end else begin
        data_stream_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_2_V_blk_n = data_stream_V_data_2_V_empty_n;
    end else begin
        data_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_2_V_read = 1'b1;
    end else begin
        data_stream_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_3_V_blk_n = data_stream_V_data_3_V_empty_n;
    end else begin
        data_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_3_V_read = 1'b1;
    end else begin
        data_stream_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_4_V_blk_n = data_stream_V_data_4_V_empty_n;
    end else begin
        data_stream_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_4_V_read = 1'b1;
    end else begin
        data_stream_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_5_V_blk_n = data_stream_V_data_5_V_empty_n;
    end else begin
        data_stream_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_5_V_read = 1'b1;
    end else begin
        data_stream_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_6_V_blk_n = data_stream_V_data_6_V_empty_n;
    end else begin
        data_stream_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_6_V_read = 1'b1;
    end else begin
        data_stream_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_7_V_blk_n = data_stream_V_data_7_V_empty_n;
    end else begin
        data_stream_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_7_V_read = 1'b1;
    end else begin
        data_stream_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op192 == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_stream_V_data_0_V_blk_n = res_stream_V_data_0_V_full_n;
    end else begin
        res_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op192 == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        res_stream_V_data_0_V_write = 1'b1;
    end else begin
        res_stream_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_stream_V_data_1_V_blk_n = res_stream_V_data_1_V_full_n;
    end else begin
        res_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op192 == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        res_stream_V_data_1_V_write = 1'b1;
    end else begin
        res_stream_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_stream_V_data_2_V_blk_n = res_stream_V_data_2_V_full_n;
    end else begin
        res_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op192 == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        res_stream_V_data_2_V_write = 1'b1;
    end else begin
        res_stream_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_stream_V_data_3_V_blk_n = res_stream_V_data_3_V_full_n;
    end else begin
        res_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op192 == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        res_stream_V_data_3_V_write = 1'b1;
    end else begin
        res_stream_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_stream_V_data_4_V_blk_n = res_stream_V_data_4_V_full_n;
    end else begin
        res_stream_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op192 == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        res_stream_V_data_4_V_write = 1'b1;
    end else begin
        res_stream_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_stream_V_data_5_V_blk_n = res_stream_V_data_5_V_full_n;
    end else begin
        res_stream_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op192 == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        res_stream_V_data_5_V_write = 1'b1;
    end else begin
        res_stream_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_stream_V_data_6_V_blk_n = res_stream_V_data_6_V_full_n;
    end else begin
        res_stream_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op192 == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        res_stream_V_data_6_V_write = 1'b1;
    end else begin
        res_stream_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_stream_V_data_7_V_blk_n = res_stream_V_data_7_V_full_n;
    end else begin
        res_stream_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op192 == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        res_stream_V_data_7_V_write = 1'b1;
    end else begin
        res_stream_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_stream_V_data_8_V_blk_n = res_stream_V_data_8_V_full_n;
    end else begin
        res_stream_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op192 == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        res_stream_V_data_8_V_write = 1'b1;
    end else begin
        res_stream_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_stream_V_data_9_V_blk_n = res_stream_V_data_9_V_full_n;
    end else begin
        res_stream_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op192 == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        res_stream_V_data_9_V_write = 1'b1;
    end else begin
        res_stream_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln36_fu_533_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln36_fu_533_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((io_acc_block_signal_op192 == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((io_acc_block_signal_op75 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((io_acc_block_signal_op75 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (io_acc_block_signal_op75 == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_in_fu_539_p2 = (i_in_0_reg_486 + 3'd1);

assign icmp_ln36_fu_533_p2 = ((i_in_0_reg_486 == 3'd4) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op192 = (res_stream_V_data_9_V_full_n & res_stream_V_data_8_V_full_n & res_stream_V_data_7_V_full_n & res_stream_V_data_6_V_full_n & res_stream_V_data_5_V_full_n & res_stream_V_data_4_V_full_n & res_stream_V_data_3_V_full_n & res_stream_V_data_2_V_full_n & res_stream_V_data_1_V_full_n & res_stream_V_data_0_V_full_n);

assign io_acc_block_signal_op75 = (data_stream_V_data_7_V_empty_n & data_stream_V_data_6_V_empty_n & data_stream_V_data_5_V_empty_n & data_stream_V_data_4_V_empty_n & data_stream_V_data_3_V_empty_n & data_stream_V_data_2_V_empty_n & data_stream_V_data_1_V_empty_n & data_stream_V_data_0_V_empty_n);

assign res_stream_V_data_0_V_din = call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_0;

assign res_stream_V_data_1_V_din = call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_1;

assign res_stream_V_data_2_V_din = call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_2;

assign res_stream_V_data_3_V_din = call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_3;

assign res_stream_V_data_4_V_din = call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_4;

assign res_stream_V_data_5_V_din = call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_5;

assign res_stream_V_data_6_V_din = call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_6;

assign res_stream_V_data_7_V_din = call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_7;

assign res_stream_V_data_8_V_din = call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_8;

assign res_stream_V_data_9_V_din = call_ret_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_fu_497_ap_return_9;

assign start_out = real_start;

assign trunc_ln203_fu_545_p1 = i_in_0_reg_486[1:0];

endmodule //dense_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_10u_config9_s
