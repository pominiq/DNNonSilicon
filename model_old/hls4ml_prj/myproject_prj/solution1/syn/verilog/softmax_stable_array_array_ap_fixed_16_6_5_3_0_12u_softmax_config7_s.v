// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_array_array_ap_fixed_16_6_5_3_0_12u_softmax_config7_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        res_V_data_0_V_TREADY,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        data_V_data_10_V_dout,
        data_V_data_10_V_empty_n,
        data_V_data_10_V_read,
        data_V_data_11_V_dout,
        data_V_data_11_V_empty_n,
        data_V_data_11_V_read,
        res_V_data_0_V_TDATA,
        res_V_data_0_V_TVALID,
        res_V_data_1_V_TDATA,
        res_V_data_1_V_TVALID,
        res_V_data_1_V_TREADY,
        res_V_data_2_V_TDATA,
        res_V_data_2_V_TVALID,
        res_V_data_2_V_TREADY,
        res_V_data_3_V_TDATA,
        res_V_data_3_V_TVALID,
        res_V_data_3_V_TREADY,
        res_V_data_4_V_TDATA,
        res_V_data_4_V_TVALID,
        res_V_data_4_V_TREADY,
        res_V_data_5_V_TDATA,
        res_V_data_5_V_TVALID,
        res_V_data_5_V_TREADY,
        res_V_data_6_V_TDATA,
        res_V_data_6_V_TVALID,
        res_V_data_6_V_TREADY,
        res_V_data_7_V_TDATA,
        res_V_data_7_V_TVALID,
        res_V_data_7_V_TREADY,
        res_V_data_8_V_TDATA,
        res_V_data_8_V_TVALID,
        res_V_data_8_V_TREADY,
        res_V_data_9_V_TDATA,
        res_V_data_9_V_TVALID,
        res_V_data_9_V_TREADY,
        res_V_data_10_V_TDATA,
        res_V_data_10_V_TVALID,
        res_V_data_10_V_TREADY,
        res_V_data_11_V_TDATA,
        res_V_data_11_V_TVALID,
        res_V_data_11_V_TREADY,
        data_V_data_0_V_blk_n,
        data_V_data_1_V_blk_n,
        data_V_data_2_V_blk_n,
        data_V_data_3_V_blk_n,
        data_V_data_4_V_blk_n,
        data_V_data_5_V_blk_n,
        data_V_data_6_V_blk_n,
        data_V_data_7_V_blk_n,
        data_V_data_8_V_blk_n,
        data_V_data_9_V_blk_n,
        data_V_data_10_V_blk_n,
        data_V_data_11_V_blk_n,
        res_V_data_0_V_TDATA_blk_n,
        res_V_data_1_V_TDATA_blk_n,
        res_V_data_2_V_TDATA_blk_n,
        res_V_data_3_V_TDATA_blk_n,
        res_V_data_4_V_TDATA_blk_n,
        res_V_data_5_V_TDATA_blk_n,
        res_V_data_6_V_TDATA_blk_n,
        res_V_data_7_V_TDATA_blk_n,
        res_V_data_8_V_TDATA_blk_n,
        res_V_data_9_V_TDATA_blk_n,
        res_V_data_10_V_TDATA_blk_n,
        res_V_data_11_V_TDATA_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   res_V_data_0_V_TREADY;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [15:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [15:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input  [15:0] data_V_data_10_V_dout;
input   data_V_data_10_V_empty_n;
output   data_V_data_10_V_read;
input  [15:0] data_V_data_11_V_dout;
input   data_V_data_11_V_empty_n;
output   data_V_data_11_V_read;
output  [15:0] res_V_data_0_V_TDATA;
output   res_V_data_0_V_TVALID;
output  [15:0] res_V_data_1_V_TDATA;
output   res_V_data_1_V_TVALID;
input   res_V_data_1_V_TREADY;
output  [15:0] res_V_data_2_V_TDATA;
output   res_V_data_2_V_TVALID;
input   res_V_data_2_V_TREADY;
output  [15:0] res_V_data_3_V_TDATA;
output   res_V_data_3_V_TVALID;
input   res_V_data_3_V_TREADY;
output  [15:0] res_V_data_4_V_TDATA;
output   res_V_data_4_V_TVALID;
input   res_V_data_4_V_TREADY;
output  [15:0] res_V_data_5_V_TDATA;
output   res_V_data_5_V_TVALID;
input   res_V_data_5_V_TREADY;
output  [15:0] res_V_data_6_V_TDATA;
output   res_V_data_6_V_TVALID;
input   res_V_data_6_V_TREADY;
output  [15:0] res_V_data_7_V_TDATA;
output   res_V_data_7_V_TVALID;
input   res_V_data_7_V_TREADY;
output  [15:0] res_V_data_8_V_TDATA;
output   res_V_data_8_V_TVALID;
input   res_V_data_8_V_TREADY;
output  [15:0] res_V_data_9_V_TDATA;
output   res_V_data_9_V_TVALID;
input   res_V_data_9_V_TREADY;
output  [15:0] res_V_data_10_V_TDATA;
output   res_V_data_10_V_TVALID;
input   res_V_data_10_V_TREADY;
output  [15:0] res_V_data_11_V_TDATA;
output   res_V_data_11_V_TVALID;
input   res_V_data_11_V_TREADY;
output   data_V_data_0_V_blk_n;
output   data_V_data_1_V_blk_n;
output   data_V_data_2_V_blk_n;
output   data_V_data_3_V_blk_n;
output   data_V_data_4_V_blk_n;
output   data_V_data_5_V_blk_n;
output   data_V_data_6_V_blk_n;
output   data_V_data_7_V_blk_n;
output   data_V_data_8_V_blk_n;
output   data_V_data_9_V_blk_n;
output   data_V_data_10_V_blk_n;
output   data_V_data_11_V_blk_n;
output   res_V_data_0_V_TDATA_blk_n;
output   res_V_data_1_V_TDATA_blk_n;
output   res_V_data_2_V_TDATA_blk_n;
output   res_V_data_3_V_TDATA_blk_n;
output   res_V_data_4_V_TDATA_blk_n;
output   res_V_data_5_V_TDATA_blk_n;
output   res_V_data_6_V_TDATA_blk_n;
output   res_V_data_7_V_TDATA_blk_n;
output   res_V_data_8_V_TDATA_blk_n;
output   res_V_data_9_V_TDATA_blk_n;
output   res_V_data_10_V_TDATA_blk_n;
output   res_V_data_11_V_TDATA_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg data_V_data_10_V_read;
reg data_V_data_11_V_read;
reg res_V_data_0_V_TVALID;
reg res_V_data_1_V_TVALID;
reg res_V_data_2_V_TVALID;
reg res_V_data_3_V_TVALID;
reg res_V_data_4_V_TVALID;
reg res_V_data_5_V_TVALID;
reg res_V_data_6_V_TVALID;
reg res_V_data_7_V_TVALID;
reg res_V_data_8_V_TVALID;
reg res_V_data_9_V_TVALID;
reg res_V_data_10_V_TVALID;
reg res_V_data_11_V_TVALID;
reg data_V_data_0_V_blk_n;
reg data_V_data_1_V_blk_n;
reg data_V_data_2_V_blk_n;
reg data_V_data_3_V_blk_n;
reg data_V_data_4_V_blk_n;
reg data_V_data_5_V_blk_n;
reg data_V_data_6_V_blk_n;
reg data_V_data_7_V_blk_n;
reg data_V_data_8_V_blk_n;
reg data_V_data_9_V_blk_n;
reg data_V_data_10_V_blk_n;
reg data_V_data_11_V_blk_n;
reg res_V_data_0_V_TDATA_blk_n;
reg res_V_data_1_V_TDATA_blk_n;
reg res_V_data_2_V_TDATA_blk_n;
reg res_V_data_3_V_TDATA_blk_n;
reg res_V_data_4_V_TDATA_blk_n;
reg res_V_data_5_V_TDATA_blk_n;
reg res_V_data_6_V_TDATA_blk_n;
reg res_V_data_7_V_TDATA_blk_n;
reg res_V_data_8_V_TDATA_blk_n;
reg res_V_data_9_V_TDATA_blk_n;
reg res_V_data_10_V_TDATA_blk_n;
reg res_V_data_11_V_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state6_pp0_stage2_iter1;
wire    ap_block_state9_pp0_stage2_iter2;
reg    ap_block_pp0_stage2_11001;
reg   [9:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [16:0] exp_table1_q0;
reg   [9:0] exp_table1_address1;
reg    exp_table1_ce1;
wire   [16:0] exp_table1_q1;
reg   [9:0] exp_table1_address2;
reg    exp_table1_ce2;
wire   [16:0] exp_table1_q2;
reg   [9:0] exp_table1_address3;
reg    exp_table1_ce3;
wire   [16:0] exp_table1_q3;
wire   [9:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [17:0] invert_table2_q0;
wire    ap_block_pp0_stage2;
wire    io_acc_block_signal_op22;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] y_V_4_fu_1733_p3;
reg   [9:0] y_V_4_reg_2226;
wire   [9:0] y_V_5_fu_1767_p3;
reg   [9:0] y_V_5_reg_2231;
wire   [9:0] y_V_6_fu_1801_p3;
reg   [9:0] y_V_6_reg_2236;
wire   [9:0] y_V_7_fu_1835_p3;
reg   [9:0] y_V_7_reg_2241;
wire   [9:0] y_V_8_fu_1869_p3;
reg   [9:0] y_V_8_reg_2246;
wire   [9:0] y_V_9_fu_1903_p3;
reg   [9:0] y_V_9_reg_2251;
wire   [9:0] y_V_10_fu_1937_p3;
reg   [9:0] y_V_10_reg_2256;
wire   [9:0] y_V_11_fu_1971_p3;
reg   [9:0] y_V_11_reg_2261;
reg   [16:0] exp_res_0_V_1_reg_2266;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state8_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [16:0] exp_res_0_V_1_reg_2266_pp0_iter1_reg;
reg   [16:0] exp_res_1_V_1_reg_2272;
reg   [16:0] exp_res_1_V_1_reg_2272_pp0_iter1_reg;
reg   [16:0] exp_res_2_V_1_reg_2278;
reg   [16:0] exp_res_2_V_1_reg_2278_pp0_iter1_reg;
reg   [16:0] exp_res_3_V_1_reg_2284;
reg   [16:0] exp_res_3_V_1_reg_2284_pp0_iter1_reg;
reg   [16:0] exp_res_4_V_1_reg_2310;
reg   [16:0] exp_res_4_V_1_reg_2310_pp0_iter1_reg;
reg   [16:0] exp_res_5_V_1_reg_2316;
reg   [16:0] exp_res_5_V_1_reg_2316_pp0_iter1_reg;
reg   [16:0] exp_res_6_V_1_reg_2322;
reg   [16:0] exp_res_6_V_1_reg_2322_pp0_iter1_reg;
reg   [16:0] exp_res_7_V_1_reg_2328;
reg   [16:0] exp_res_7_V_1_reg_2328_pp0_iter1_reg;
reg   [16:0] exp_res_8_V_1_reg_2354;
reg   [16:0] exp_res_8_V_1_reg_2354_pp0_iter2_reg;
reg   [16:0] exp_res_9_V_1_reg_2359;
reg   [16:0] exp_res_9_V_1_reg_2359_pp0_iter2_reg;
reg   [16:0] exp_res_10_V_1_reg_2364;
reg   [16:0] exp_res_10_V_1_reg_2364_pp0_iter2_reg;
reg   [16:0] exp_res_11_V_1_reg_2369;
reg   [16:0] exp_res_11_V_1_reg_2369_pp0_iter2_reg;
wire  signed [25:0] sext_ln241_fu_2078_p1;
reg  signed [25:0] sext_ln241_reg_2379;
reg   [15:0] tmp_data_0_V_reg_2387;
reg   [15:0] tmp_data_1_V_reg_2392;
reg   [15:0] tmp_data_2_V_reg_2397;
reg   [15:0] tmp_data_3_V_reg_2402;
reg   [15:0] tmp_data_4_V_reg_2407;
reg   [15:0] tmp_data_5_V_reg_2412;
reg   [15:0] tmp_data_6_V_reg_2417;
reg   [15:0] tmp_data_7_V_reg_2422;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage2_subdone;
wire    grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_start;
wire    grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_done;
wire    grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_idle;
wire    grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_ready;
wire   [17:0] grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_return;
reg    grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_ce;
wire    ap_block_state2_pp0_stage1_iter0_ignore_call279;
wire    ap_block_state5_pp0_stage1_iter1_ignore_call279;
wire    ap_block_state8_pp0_stage1_iter2_ignore_call279;
wire    ap_block_pp0_stage1_11001_ignoreCallOp274;
wire    ap_block_state3_pp0_stage2_iter0_ignore_call279;
wire    ap_block_state6_pp0_stage2_iter1_ignore_call279;
wire    ap_block_state9_pp0_stage2_iter2_ignore_call279;
reg    ap_block_pp0_stage2_11001_ignoreCallOp275;
reg    grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_start_reg;
reg   [16:0] exp_res_0_V_fu_270;
wire    ap_block_pp0_stage1;
reg   [16:0] exp_res_1_V_fu_274;
reg   [16:0] exp_res_2_V_fu_278;
reg   [16:0] exp_res_3_V_fu_282;
reg   [16:0] exp_res_4_V_fu_286;
reg   [16:0] exp_res_5_V_fu_290;
reg   [16:0] exp_res_6_V_fu_294;
reg   [16:0] exp_res_7_V_fu_298;
reg   [16:0] exp_res_8_V_fu_302;
reg   [16:0] exp_res_9_V_fu_306;
reg   [16:0] exp_res_10_V_fu_310;
reg   [16:0] exp_res_11_V_fu_314;
wire   [63:0] zext_ln225_fu_1585_p1;
wire   [63:0] zext_ln225_1_fu_1624_p1;
wire   [63:0] zext_ln225_2_fu_1663_p1;
wire   [63:0] zext_ln225_3_fu_1702_p1;
wire   [63:0] zext_ln225_4_fu_1979_p1;
wire   [63:0] zext_ln225_5_fu_1983_p1;
wire   [63:0] zext_ln225_6_fu_1987_p1;
wire   [63:0] zext_ln225_7_fu_1991_p1;
wire   [63:0] zext_ln225_8_fu_1995_p1;
wire   [63:0] zext_ln225_9_fu_1999_p1;
wire   [63:0] zext_ln225_10_fu_2003_p1;
wire   [63:0] zext_ln225_11_fu_2007_p1;
wire   [63:0] zext_ln235_fu_2073_p1;
wire    ap_block_pp0_stage2_01001;
reg   [16:0] grp_fu_512_p0;
wire   [25:0] zext_ln1118_2_fu_2094_p1;
wire   [25:0] zext_ln1118_6_fu_2110_p1;
wire   [25:0] zext_ln1118_10_fu_2126_p1;
reg  signed [17:0] grp_fu_512_p1;
reg   [16:0] grp_fu_513_p0;
wire   [25:0] zext_ln1118_fu_2086_p1;
wire   [25:0] zext_ln1118_4_fu_2102_p1;
wire   [25:0] zext_ln1118_8_fu_2118_p1;
reg  signed [17:0] grp_fu_513_p1;
reg   [16:0] grp_fu_514_p0;
wire   [25:0] zext_ln1118_3_fu_2098_p1;
wire   [25:0] zext_ln1118_7_fu_2114_p1;
wire   [25:0] zext_ln1118_11_fu_2130_p1;
reg  signed [17:0] grp_fu_514_p1;
reg   [16:0] grp_fu_515_p0;
wire   [25:0] zext_ln1118_1_fu_2090_p1;
wire   [25:0] zext_ln1118_5_fu_2106_p1;
wire   [25:0] zext_ln1118_9_fu_2122_p1;
reg  signed [17:0] grp_fu_515_p1;
wire   [25:0] grp_fu_513_p2;
wire   [25:0] grp_fu_515_p2;
wire   [25:0] grp_fu_512_p2;
wire   [25:0] grp_fu_514_p2;
wire  signed [15:0] icmp_ln1496_fu_721_p0;
wire  signed [15:0] icmp_ln1496_fu_721_p1;
wire   [0:0] icmp_ln1496_fu_721_p2;
wire  signed [15:0] select_ln65_fu_727_p1;
wire  signed [15:0] select_ln65_fu_727_p2;
wire  signed [15:0] icmp_ln1496_1_fu_735_p0;
wire  signed [15:0] icmp_ln1496_1_fu_735_p1;
wire   [0:0] icmp_ln1496_1_fu_735_p2;
wire  signed [15:0] select_ln65_1_fu_741_p1;
wire  signed [15:0] select_ln65_1_fu_741_p2;
wire   [15:0] select_ln65_fu_727_p3;
wire   [15:0] select_ln65_1_fu_741_p3;
wire   [0:0] icmp_ln1496_2_fu_749_p2;
wire  signed [15:0] icmp_ln1496_3_fu_763_p0;
wire  signed [15:0] icmp_ln1496_3_fu_763_p1;
wire   [0:0] icmp_ln1496_3_fu_763_p2;
wire  signed [15:0] select_ln65_3_fu_769_p1;
wire  signed [15:0] select_ln65_3_fu_769_p2;
wire  signed [15:0] icmp_ln1496_4_fu_777_p0;
wire  signed [15:0] icmp_ln1496_4_fu_777_p1;
wire   [0:0] icmp_ln1496_4_fu_777_p2;
wire  signed [15:0] select_ln65_4_fu_783_p1;
wire  signed [15:0] select_ln65_4_fu_783_p2;
wire   [15:0] select_ln65_3_fu_769_p3;
wire   [15:0] select_ln65_4_fu_783_p3;
wire   [0:0] icmp_ln1496_5_fu_791_p2;
wire   [15:0] select_ln65_2_fu_755_p3;
wire   [15:0] select_ln65_5_fu_797_p3;
wire   [0:0] icmp_ln1496_6_fu_805_p2;
wire  signed [15:0] icmp_ln1496_7_fu_819_p0;
wire  signed [15:0] icmp_ln1496_7_fu_819_p1;
wire   [0:0] icmp_ln1496_7_fu_819_p2;
wire  signed [15:0] select_ln65_7_fu_825_p1;
wire  signed [15:0] select_ln65_7_fu_825_p2;
wire  signed [15:0] icmp_ln1496_8_fu_833_p0;
wire  signed [15:0] icmp_ln1496_8_fu_833_p1;
wire   [0:0] icmp_ln1496_8_fu_833_p2;
wire  signed [15:0] select_ln65_8_fu_839_p1;
wire  signed [15:0] select_ln65_8_fu_839_p2;
wire   [15:0] select_ln65_7_fu_825_p3;
wire   [15:0] select_ln65_8_fu_839_p3;
wire   [0:0] icmp_ln1496_9_fu_847_p2;
wire   [15:0] select_ln65_6_fu_811_p3;
wire   [15:0] select_ln65_9_fu_853_p3;
wire   [0:0] icmp_ln1496_10_fu_861_p2;
wire  signed [15:0] sext_ln703_fu_875_p0;
wire   [15:0] x_max_V_fu_867_p3;
wire  signed [16:0] sext_ln703_fu_875_p1;
wire  signed [16:0] sext_ln703_1_fu_879_p1;
wire   [16:0] sub_ln1193_fu_883_p2;
wire   [0:0] tmp_25_fu_897_p3;
wire   [0:0] tmp_24_fu_889_p3;
wire   [0:0] xor_ln786_fu_905_p2;
wire   [0:0] xor_ln340_fu_923_p2;
wire  signed [15:0] sext_ln703_2_fu_935_p0;
wire  signed [16:0] sext_ln703_2_fu_935_p1;
wire   [16:0] sub_ln1193_1_fu_939_p2;
wire   [0:0] tmp_27_fu_953_p3;
wire   [0:0] tmp_26_fu_945_p3;
wire   [0:0] xor_ln786_1_fu_961_p2;
wire   [0:0] xor_ln340_1_fu_979_p2;
wire  signed [15:0] sext_ln703_3_fu_991_p0;
wire  signed [16:0] sext_ln703_3_fu_991_p1;
wire   [16:0] sub_ln1193_2_fu_995_p2;
wire   [0:0] tmp_29_fu_1009_p3;
wire   [0:0] tmp_28_fu_1001_p3;
wire   [0:0] xor_ln786_2_fu_1017_p2;
wire   [0:0] xor_ln340_2_fu_1035_p2;
wire  signed [15:0] sext_ln703_4_fu_1047_p0;
wire  signed [16:0] sext_ln703_4_fu_1047_p1;
wire   [16:0] sub_ln1193_3_fu_1051_p2;
wire   [0:0] tmp_31_fu_1065_p3;
wire   [0:0] tmp_30_fu_1057_p3;
wire   [0:0] xor_ln786_3_fu_1073_p2;
wire   [0:0] xor_ln340_3_fu_1091_p2;
wire  signed [15:0] sext_ln703_5_fu_1103_p0;
wire  signed [16:0] sext_ln703_5_fu_1103_p1;
wire   [16:0] sub_ln1193_4_fu_1107_p2;
wire   [0:0] tmp_33_fu_1121_p3;
wire   [0:0] tmp_32_fu_1113_p3;
wire   [0:0] xor_ln786_4_fu_1129_p2;
wire   [0:0] xor_ln340_4_fu_1147_p2;
wire  signed [15:0] sext_ln703_6_fu_1159_p0;
wire  signed [16:0] sext_ln703_6_fu_1159_p1;
wire   [16:0] sub_ln1193_5_fu_1163_p2;
wire   [0:0] tmp_35_fu_1177_p3;
wire   [0:0] tmp_34_fu_1169_p3;
wire   [0:0] xor_ln786_5_fu_1185_p2;
wire   [0:0] xor_ln340_5_fu_1203_p2;
wire  signed [15:0] sext_ln703_7_fu_1215_p0;
wire  signed [16:0] sext_ln703_7_fu_1215_p1;
wire   [16:0] sub_ln1193_6_fu_1219_p2;
wire   [0:0] tmp_37_fu_1233_p3;
wire   [0:0] tmp_36_fu_1225_p3;
wire   [0:0] xor_ln786_6_fu_1241_p2;
wire   [0:0] xor_ln340_6_fu_1259_p2;
wire  signed [15:0] sext_ln703_8_fu_1271_p0;
wire  signed [16:0] sext_ln703_8_fu_1271_p1;
wire   [16:0] sub_ln1193_7_fu_1275_p2;
wire   [0:0] tmp_39_fu_1289_p3;
wire   [0:0] tmp_38_fu_1281_p3;
wire   [0:0] xor_ln786_7_fu_1297_p2;
wire   [0:0] xor_ln340_7_fu_1315_p2;
wire  signed [15:0] sext_ln703_9_fu_1327_p0;
wire  signed [16:0] sext_ln703_9_fu_1327_p1;
wire   [16:0] sub_ln1193_8_fu_1331_p2;
wire   [0:0] tmp_41_fu_1345_p3;
wire   [0:0] tmp_40_fu_1337_p3;
wire   [0:0] xor_ln786_8_fu_1353_p2;
wire   [0:0] xor_ln340_8_fu_1371_p2;
wire  signed [15:0] sext_ln703_10_fu_1383_p0;
wire  signed [16:0] sext_ln703_10_fu_1383_p1;
wire   [16:0] sub_ln1193_9_fu_1387_p2;
wire   [0:0] tmp_43_fu_1401_p3;
wire   [0:0] tmp_42_fu_1393_p3;
wire   [0:0] xor_ln786_9_fu_1409_p2;
wire   [0:0] xor_ln340_9_fu_1427_p2;
wire  signed [15:0] sext_ln703_11_fu_1439_p0;
wire  signed [16:0] sext_ln703_11_fu_1439_p1;
wire   [16:0] sub_ln1193_10_fu_1443_p2;
wire   [0:0] tmp_45_fu_1457_p3;
wire   [0:0] tmp_44_fu_1449_p3;
wire   [0:0] xor_ln786_10_fu_1465_p2;
wire   [0:0] xor_ln340_10_fu_1483_p2;
wire  signed [15:0] sext_ln703_12_fu_1495_p0;
wire  signed [16:0] sext_ln703_12_fu_1495_p1;
wire   [16:0] sub_ln1193_11_fu_1499_p2;
wire   [0:0] tmp_47_fu_1513_p3;
wire   [0:0] tmp_46_fu_1505_p3;
wire   [0:0] xor_ln786_11_fu_1521_p2;
wire   [0:0] xor_ln340_11_fu_1539_p2;
wire   [0:0] xor_ln340_12_fu_917_p2;
wire   [9:0] tmp_fu_1551_p4;
wire   [0:0] and_ln786_fu_911_p2;
wire   [0:0] or_ln340_fu_929_p2;
wire   [9:0] select_ln340_fu_1561_p3;
wire   [9:0] select_ln388_fu_1569_p3;
wire   [9:0] y_V_fu_1577_p3;
wire   [0:0] xor_ln340_13_fu_973_p2;
wire   [9:0] tmp_13_fu_1590_p4;
wire   [0:0] and_ln786_1_fu_967_p2;
wire   [0:0] or_ln340_1_fu_985_p2;
wire   [9:0] select_ln340_2_fu_1600_p3;
wire   [9:0] select_ln388_1_fu_1608_p3;
wire   [9:0] y_V_1_fu_1616_p3;
wire   [0:0] xor_ln340_14_fu_1029_p2;
wire   [9:0] tmp_14_fu_1629_p4;
wire   [0:0] and_ln786_2_fu_1023_p2;
wire   [0:0] or_ln340_2_fu_1041_p2;
wire   [9:0] select_ln340_4_fu_1639_p3;
wire   [9:0] select_ln388_2_fu_1647_p3;
wire   [9:0] y_V_2_fu_1655_p3;
wire   [0:0] xor_ln340_15_fu_1085_p2;
wire   [9:0] tmp_15_fu_1668_p4;
wire   [0:0] and_ln786_3_fu_1079_p2;
wire   [0:0] or_ln340_3_fu_1097_p2;
wire   [9:0] select_ln340_6_fu_1678_p3;
wire   [9:0] select_ln388_3_fu_1686_p3;
wire   [9:0] y_V_3_fu_1694_p3;
wire   [0:0] xor_ln340_16_fu_1141_p2;
wire   [9:0] tmp_16_fu_1707_p4;
wire   [0:0] and_ln786_4_fu_1135_p2;
wire   [0:0] or_ln340_4_fu_1153_p2;
wire   [9:0] select_ln340_8_fu_1717_p3;
wire   [9:0] select_ln388_4_fu_1725_p3;
wire   [0:0] xor_ln340_17_fu_1197_p2;
wire   [9:0] tmp_17_fu_1741_p4;
wire   [0:0] and_ln786_5_fu_1191_p2;
wire   [0:0] or_ln340_5_fu_1209_p2;
wire   [9:0] select_ln340_10_fu_1751_p3;
wire   [9:0] select_ln388_5_fu_1759_p3;
wire   [0:0] xor_ln340_18_fu_1253_p2;
wire   [9:0] tmp_18_fu_1775_p4;
wire   [0:0] and_ln786_6_fu_1247_p2;
wire   [0:0] or_ln340_6_fu_1265_p2;
wire   [9:0] select_ln340_12_fu_1785_p3;
wire   [9:0] select_ln388_6_fu_1793_p3;
wire   [0:0] xor_ln340_19_fu_1309_p2;
wire   [9:0] tmp_19_fu_1809_p4;
wire   [0:0] and_ln786_7_fu_1303_p2;
wire   [0:0] or_ln340_7_fu_1321_p2;
wire   [9:0] select_ln340_14_fu_1819_p3;
wire   [9:0] select_ln388_7_fu_1827_p3;
wire   [0:0] xor_ln340_20_fu_1365_p2;
wire   [9:0] tmp_20_fu_1843_p4;
wire   [0:0] and_ln786_8_fu_1359_p2;
wire   [0:0] or_ln340_8_fu_1377_p2;
wire   [9:0] select_ln340_16_fu_1853_p3;
wire   [9:0] select_ln388_8_fu_1861_p3;
wire   [0:0] xor_ln340_21_fu_1421_p2;
wire   [9:0] tmp_21_fu_1877_p4;
wire   [0:0] and_ln786_9_fu_1415_p2;
wire   [0:0] or_ln340_9_fu_1433_p2;
wire   [9:0] select_ln340_18_fu_1887_p3;
wire   [9:0] select_ln388_9_fu_1895_p3;
wire   [0:0] xor_ln340_22_fu_1477_p2;
wire   [9:0] tmp_22_fu_1911_p4;
wire   [0:0] and_ln786_10_fu_1471_p2;
wire   [0:0] or_ln340_10_fu_1489_p2;
wire   [9:0] select_ln340_20_fu_1921_p3;
wire   [9:0] select_ln388_10_fu_1929_p3;
wire   [0:0] xor_ln340_23_fu_1533_p2;
wire   [9:0] tmp_23_fu_1945_p4;
wire   [0:0] and_ln786_11_fu_1527_p2;
wire   [0:0] or_ln340_11_fu_1545_p2;
wire   [9:0] select_ln340_22_fu_1955_p3;
wire   [9:0] select_ln388_11_fu_1963_p3;
wire   [9:0] y_V_12_fu_2063_p4;
reg   [2:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_start_reg = 1'b0;
end

softmax_stable_array_array_ap_fixed_16_6_5_3_0_12u_softmax_config7_s_exp_table1 #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0),
    .address1(exp_table1_address1),
    .ce1(exp_table1_ce1),
    .q1(exp_table1_q1),
    .address2(exp_table1_address2),
    .ce2(exp_table1_ce2),
    .q2(exp_table1_q2),
    .address3(exp_table1_address3),
    .ce3(exp_table1_ce3),
    .q3(exp_table1_q3)
);

softmax_stable_array_array_ap_fixed_16_6_5_3_0_12u_softmax_config7_s_invert_tqcK #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_start),
    .ap_done(grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_done),
    .ap_idle(grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_idle),
    .ap_ready(grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_ready),
    .x_0_V(exp_res_0_V_fu_270),
    .x_1_V(exp_res_1_V_fu_274),
    .x_2_V(exp_res_2_V_fu_278),
    .x_3_V(exp_res_3_V_fu_282),
    .x_4_V(exp_res_4_V_fu_286),
    .x_5_V(exp_res_5_V_fu_290),
    .x_6_V(exp_res_6_V_fu_294),
    .x_7_V(exp_res_7_V_fu_298),
    .x_8_V(exp_res_8_V_fu_302),
    .x_9_V(exp_res_9_V_fu_306),
    .x_10_V(exp_res_10_V_fu_310),
    .x_11_V(exp_res_11_V_fu_314),
    .ap_return(grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_return),
    .ap_ce(grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_start_reg <= 1'b1;
        end else if ((grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_ready == 1'b1)) begin
            grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_0_V_1_reg_2266 <= exp_table1_q0;
        exp_res_1_V_1_reg_2272 <= exp_table1_q1;
        exp_res_2_V_1_reg_2278 <= exp_table1_q2;
        exp_res_3_V_1_reg_2284 <= exp_table1_q3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_res_0_V_1_reg_2266_pp0_iter1_reg <= exp_res_0_V_1_reg_2266;
        exp_res_1_V_1_reg_2272_pp0_iter1_reg <= exp_res_1_V_1_reg_2272;
        exp_res_2_V_1_reg_2278_pp0_iter1_reg <= exp_res_2_V_1_reg_2278;
        exp_res_3_V_1_reg_2284_pp0_iter1_reg <= exp_res_3_V_1_reg_2284;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_res_0_V_fu_270 <= exp_res_0_V_1_reg_2266;
        exp_res_10_V_1_reg_2364 <= exp_table1_q2;
        exp_res_10_V_fu_310 <= exp_table1_q2;
        exp_res_11_V_1_reg_2369 <= exp_table1_q3;
        exp_res_11_V_fu_314 <= exp_table1_q3;
        exp_res_1_V_fu_274 <= exp_res_1_V_1_reg_2272;
        exp_res_2_V_fu_278 <= exp_res_2_V_1_reg_2278;
        exp_res_3_V_fu_282 <= exp_res_3_V_1_reg_2284;
        exp_res_4_V_fu_286 <= exp_res_4_V_1_reg_2310;
        exp_res_5_V_fu_290 <= exp_res_5_V_1_reg_2316;
        exp_res_6_V_fu_294 <= exp_res_6_V_1_reg_2322;
        exp_res_7_V_fu_298 <= exp_res_7_V_1_reg_2328;
        exp_res_8_V_1_reg_2354 <= exp_table1_q0;
        exp_res_8_V_fu_302 <= exp_table1_q0;
        exp_res_9_V_1_reg_2359 <= exp_table1_q1;
        exp_res_9_V_fu_306 <= exp_table1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_res_10_V_1_reg_2364_pp0_iter2_reg <= exp_res_10_V_1_reg_2364;
        exp_res_11_V_1_reg_2369_pp0_iter2_reg <= exp_res_11_V_1_reg_2369;
        exp_res_8_V_1_reg_2354_pp0_iter2_reg <= exp_res_8_V_1_reg_2354;
        exp_res_9_V_1_reg_2359_pp0_iter2_reg <= exp_res_9_V_1_reg_2359;
        sext_ln241_reg_2379 <= sext_ln241_fu_2078_p1;
        y_V_10_reg_2256 <= y_V_10_fu_1937_p3;
        y_V_11_reg_2261 <= y_V_11_fu_1971_p3;
        y_V_4_reg_2226 <= y_V_4_fu_1733_p3;
        y_V_5_reg_2231 <= y_V_5_fu_1767_p3;
        y_V_6_reg_2236 <= y_V_6_fu_1801_p3;
        y_V_7_reg_2241 <= y_V_7_fu_1835_p3;
        y_V_8_reg_2246 <= y_V_8_fu_1869_p3;
        y_V_9_reg_2251 <= y_V_9_fu_1903_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_4_V_1_reg_2310 <= exp_table1_q0;
        exp_res_5_V_1_reg_2316 <= exp_table1_q1;
        exp_res_6_V_1_reg_2322 <= exp_table1_q2;
        exp_res_7_V_1_reg_2328 <= exp_table1_q3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exp_res_4_V_1_reg_2310_pp0_iter1_reg <= exp_res_4_V_1_reg_2310;
        exp_res_5_V_1_reg_2316_pp0_iter1_reg <= exp_res_5_V_1_reg_2316;
        exp_res_6_V_1_reg_2322_pp0_iter1_reg <= exp_res_6_V_1_reg_2322;
        exp_res_7_V_1_reg_2328_pp0_iter1_reg <= exp_res_7_V_1_reg_2328;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_0_V_reg_2387 <= {{grp_fu_513_p2[25:10]}};
        tmp_data_1_V_reg_2392 <= {{grp_fu_515_p2[25:10]}};
        tmp_data_2_V_reg_2397 <= {{grp_fu_512_p2[25:10]}};
        tmp_data_3_V_reg_2402 <= {{grp_fu_514_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_data_4_V_reg_2407 <= {{grp_fu_513_p2[25:10]}};
        tmp_data_5_V_reg_2412 <= {{grp_fu_515_p2[25:10]}};
        tmp_data_6_V_reg_2417 <= {{grp_fu_512_p2[25:10]}};
        tmp_data_7_V_reg_2422 <= {{grp_fu_514_p2[25:10]}};
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_10_V_blk_n = data_V_data_10_V_empty_n;
    end else begin
        data_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_10_V_read = 1'b1;
    end else begin
        data_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_11_V_blk_n = data_V_data_11_V_empty_n;
    end else begin
        data_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_11_V_read = 1'b1;
    end else begin
        data_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            exp_table1_address0 = zext_ln225_8_fu_1995_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            exp_table1_address0 = zext_ln225_4_fu_1979_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            exp_table1_address0 = zext_ln225_fu_1585_p1;
        end else begin
            exp_table1_address0 = 'bx;
        end
    end else begin
        exp_table1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            exp_table1_address1 = zext_ln225_9_fu_1999_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            exp_table1_address1 = zext_ln225_5_fu_1983_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            exp_table1_address1 = zext_ln225_1_fu_1624_p1;
        end else begin
            exp_table1_address1 = 'bx;
        end
    end else begin
        exp_table1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            exp_table1_address2 = zext_ln225_10_fu_2003_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            exp_table1_address2 = zext_ln225_6_fu_1987_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            exp_table1_address2 = zext_ln225_2_fu_1663_p1;
        end else begin
            exp_table1_address2 = 'bx;
        end
    end else begin
        exp_table1_address2 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            exp_table1_address3 = zext_ln225_11_fu_2007_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            exp_table1_address3 = zext_ln225_7_fu_1991_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            exp_table1_address3 = zext_ln225_3_fu_1702_p1;
        end else begin
            exp_table1_address3 = 'bx;
        end
    end else begin
        exp_table1_address3 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        exp_table1_ce1 = 1'b1;
    end else begin
        exp_table1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        exp_table1_ce2 = 1'b1;
    end else begin
        exp_table1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        exp_table1_ce3 = 1'b1;
    end else begin
        exp_table1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            grp_fu_512_p0 = zext_ln1118_10_fu_2126_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_512_p0 = zext_ln1118_6_fu_2110_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_512_p0 = zext_ln1118_2_fu_2094_p1;
        end else begin
            grp_fu_512_p0 = 'bx;
        end
    end else begin
        grp_fu_512_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2)))) begin
        grp_fu_512_p1 = sext_ln241_reg_2379;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_512_p1 = sext_ln241_fu_2078_p1;
    end else begin
        grp_fu_512_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            grp_fu_513_p0 = zext_ln1118_8_fu_2118_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_513_p0 = zext_ln1118_4_fu_2102_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_513_p0 = zext_ln1118_fu_2086_p1;
        end else begin
            grp_fu_513_p0 = 'bx;
        end
    end else begin
        grp_fu_513_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2)))) begin
        grp_fu_513_p1 = sext_ln241_reg_2379;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_513_p1 = sext_ln241_fu_2078_p1;
    end else begin
        grp_fu_513_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            grp_fu_514_p0 = zext_ln1118_11_fu_2130_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_514_p0 = zext_ln1118_7_fu_2114_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_514_p0 = zext_ln1118_3_fu_2098_p1;
        end else begin
            grp_fu_514_p0 = 'bx;
        end
    end else begin
        grp_fu_514_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2)))) begin
        grp_fu_514_p1 = sext_ln241_reg_2379;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_514_p1 = sext_ln241_fu_2078_p1;
    end else begin
        grp_fu_514_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            grp_fu_515_p0 = zext_ln1118_9_fu_2122_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_515_p0 = zext_ln1118_5_fu_2106_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_515_p0 = zext_ln1118_1_fu_2090_p1;
        end else begin
            grp_fu_515_p0 = 'bx;
        end
    end else begin
        grp_fu_515_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2)))) begin
        grp_fu_515_p1 = sext_ln241_reg_2379;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_515_p1 = sext_ln241_fu_2078_p1;
    end else begin
        grp_fu_515_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001_ignoreCallOp275) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp274) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_ce = 1'b1;
    end else begin
        grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        res_V_data_0_V_TDATA_blk_n = res_V_data_0_V_TREADY;
    end else begin
        res_V_data_0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_0_V_TVALID = 1'b1;
    end else begin
        res_V_data_0_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        res_V_data_10_V_TDATA_blk_n = res_V_data_10_V_TREADY;
    end else begin
        res_V_data_10_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_10_V_TVALID = 1'b1;
    end else begin
        res_V_data_10_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        res_V_data_11_V_TDATA_blk_n = res_V_data_11_V_TREADY;
    end else begin
        res_V_data_11_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_11_V_TVALID = 1'b1;
    end else begin
        res_V_data_11_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        res_V_data_1_V_TDATA_blk_n = res_V_data_1_V_TREADY;
    end else begin
        res_V_data_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_1_V_TVALID = 1'b1;
    end else begin
        res_V_data_1_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        res_V_data_2_V_TDATA_blk_n = res_V_data_2_V_TREADY;
    end else begin
        res_V_data_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_2_V_TVALID = 1'b1;
    end else begin
        res_V_data_2_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        res_V_data_3_V_TDATA_blk_n = res_V_data_3_V_TREADY;
    end else begin
        res_V_data_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_3_V_TVALID = 1'b1;
    end else begin
        res_V_data_3_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        res_V_data_4_V_TDATA_blk_n = res_V_data_4_V_TREADY;
    end else begin
        res_V_data_4_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_4_V_TVALID = 1'b1;
    end else begin
        res_V_data_4_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        res_V_data_5_V_TDATA_blk_n = res_V_data_5_V_TREADY;
    end else begin
        res_V_data_5_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_5_V_TVALID = 1'b1;
    end else begin
        res_V_data_5_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        res_V_data_6_V_TDATA_blk_n = res_V_data_6_V_TREADY;
    end else begin
        res_V_data_6_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_6_V_TVALID = 1'b1;
    end else begin
        res_V_data_6_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        res_V_data_7_V_TDATA_blk_n = res_V_data_7_V_TREADY;
    end else begin
        res_V_data_7_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_7_V_TVALID = 1'b1;
    end else begin
        res_V_data_7_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        res_V_data_8_V_TDATA_blk_n = res_V_data_8_V_TREADY;
    end else begin
        res_V_data_8_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_8_V_TVALID = 1'b1;
    end else begin
        res_V_data_8_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        res_V_data_9_V_TDATA_blk_n = res_V_data_9_V_TREADY;
    end else begin
        res_V_data_9_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_9_V_TVALID = 1'b1;
    end else begin
        res_V_data_9_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((((1'b0 == ap_block_pp0_stage2_subdone) & (ap_reset_idle_pp0 == 1'b0)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (ap_reset_idle_pp0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln786_10_fu_1471_p2 = (xor_ln786_10_fu_1465_p2 & tmp_44_fu_1449_p3);

assign and_ln786_11_fu_1527_p2 = (xor_ln786_11_fu_1521_p2 & tmp_46_fu_1505_p3);

assign and_ln786_1_fu_967_p2 = (xor_ln786_1_fu_961_p2 & tmp_26_fu_945_p3);

assign and_ln786_2_fu_1023_p2 = (xor_ln786_2_fu_1017_p2 & tmp_28_fu_1001_p3);

assign and_ln786_3_fu_1079_p2 = (xor_ln786_3_fu_1073_p2 & tmp_30_fu_1057_p3);

assign and_ln786_4_fu_1135_p2 = (xor_ln786_4_fu_1129_p2 & tmp_32_fu_1113_p3);

assign and_ln786_5_fu_1191_p2 = (xor_ln786_5_fu_1185_p2 & tmp_34_fu_1169_p3);

assign and_ln786_6_fu_1247_p2 = (xor_ln786_6_fu_1241_p2 & tmp_36_fu_1225_p3);

assign and_ln786_7_fu_1303_p2 = (xor_ln786_7_fu_1297_p2 & tmp_38_fu_1281_p3);

assign and_ln786_8_fu_1359_p2 = (xor_ln786_8_fu_1353_p2 & tmp_40_fu_1337_p3);

assign and_ln786_9_fu_1415_p2 = (xor_ln786_9_fu_1409_p2 & tmp_42_fu_1393_p3);

assign and_ln786_fu_911_p2 = (xor_ln786_fu_905_p2 & tmp_24_fu_889_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_start == 1'b0) | (io_acc_block_signal_op22 == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_start == 1'b0) | (io_acc_block_signal_op22 == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001_ignoreCallOp274 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_11001_ignoreCallOp275 = ((res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (io_acc_block_signal_op22 == 1'b0));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0_ignore_call279 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0_ignore_call279 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1_ignore_call279 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter1_ignore_call279 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter2_ignore_call279 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter2_ignore_call279 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_512_p2 = ($signed({{1'b0}, {grp_fu_512_p0}}) * $signed(grp_fu_512_p1));

assign grp_fu_513_p2 = ($signed({{1'b0}, {grp_fu_513_p0}}) * $signed(grp_fu_513_p1));

assign grp_fu_514_p2 = ($signed({{1'b0}, {grp_fu_514_p0}}) * $signed(grp_fu_514_p1));

assign grp_fu_515_p2 = ($signed({{1'b0}, {grp_fu_515_p0}}) * $signed(grp_fu_515_p1));

assign grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_start = grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_start_reg;

assign icmp_ln1496_10_fu_861_p2 = (($signed(select_ln65_6_fu_811_p3) < $signed(select_ln65_9_fu_853_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_1_fu_735_p0 = data_V_data_2_V_dout;

assign icmp_ln1496_1_fu_735_p1 = data_V_data_3_V_dout;

assign icmp_ln1496_1_fu_735_p2 = (($signed(icmp_ln1496_1_fu_735_p0) < $signed(icmp_ln1496_1_fu_735_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_749_p2 = (($signed(select_ln65_fu_727_p3) < $signed(select_ln65_1_fu_741_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_763_p0 = data_V_data_4_V_dout;

assign icmp_ln1496_3_fu_763_p1 = data_V_data_5_V_dout;

assign icmp_ln1496_3_fu_763_p2 = (($signed(icmp_ln1496_3_fu_763_p0) < $signed(icmp_ln1496_3_fu_763_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_777_p0 = data_V_data_6_V_dout;

assign icmp_ln1496_4_fu_777_p1 = data_V_data_7_V_dout;

assign icmp_ln1496_4_fu_777_p2 = (($signed(icmp_ln1496_4_fu_777_p0) < $signed(icmp_ln1496_4_fu_777_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_791_p2 = (($signed(select_ln65_3_fu_769_p3) < $signed(select_ln65_4_fu_783_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_805_p2 = (($signed(select_ln65_2_fu_755_p3) < $signed(select_ln65_5_fu_797_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_819_p0 = data_V_data_8_V_dout;

assign icmp_ln1496_7_fu_819_p1 = data_V_data_9_V_dout;

assign icmp_ln1496_7_fu_819_p2 = (($signed(icmp_ln1496_7_fu_819_p0) < $signed(icmp_ln1496_7_fu_819_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_833_p0 = data_V_data_10_V_dout;

assign icmp_ln1496_8_fu_833_p1 = data_V_data_11_V_dout;

assign icmp_ln1496_8_fu_833_p2 = (($signed(icmp_ln1496_8_fu_833_p0) < $signed(icmp_ln1496_8_fu_833_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_9_fu_847_p2 = (($signed(select_ln65_7_fu_825_p3) < $signed(select_ln65_8_fu_839_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_721_p0 = data_V_data_0_V_dout;

assign icmp_ln1496_fu_721_p1 = data_V_data_1_V_dout;

assign icmp_ln1496_fu_721_p2 = (($signed(icmp_ln1496_fu_721_p0) < $signed(icmp_ln1496_fu_721_p1)) ? 1'b1 : 1'b0);

assign invert_table2_address0 = zext_ln235_fu_2073_p1;

assign io_acc_block_signal_op22 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_11_V_empty_n & data_V_data_10_V_empty_n & data_V_data_0_V_empty_n);

assign or_ln340_10_fu_1489_p2 = (xor_ln340_10_fu_1483_p2 | tmp_45_fu_1457_p3);

assign or_ln340_11_fu_1545_p2 = (xor_ln340_11_fu_1539_p2 | tmp_47_fu_1513_p3);

assign or_ln340_1_fu_985_p2 = (xor_ln340_1_fu_979_p2 | tmp_27_fu_953_p3);

assign or_ln340_2_fu_1041_p2 = (xor_ln340_2_fu_1035_p2 | tmp_29_fu_1009_p3);

assign or_ln340_3_fu_1097_p2 = (xor_ln340_3_fu_1091_p2 | tmp_31_fu_1065_p3);

assign or_ln340_4_fu_1153_p2 = (xor_ln340_4_fu_1147_p2 | tmp_33_fu_1121_p3);

assign or_ln340_5_fu_1209_p2 = (xor_ln340_5_fu_1203_p2 | tmp_35_fu_1177_p3);

assign or_ln340_6_fu_1265_p2 = (xor_ln340_6_fu_1259_p2 | tmp_37_fu_1233_p3);

assign or_ln340_7_fu_1321_p2 = (xor_ln340_7_fu_1315_p2 | tmp_39_fu_1289_p3);

assign or_ln340_8_fu_1377_p2 = (xor_ln340_8_fu_1371_p2 | tmp_41_fu_1345_p3);

assign or_ln340_9_fu_1433_p2 = (xor_ln340_9_fu_1427_p2 | tmp_43_fu_1401_p3);

assign or_ln340_fu_929_p2 = (xor_ln340_fu_923_p2 | tmp_25_fu_897_p3);

assign res_V_data_0_V_TDATA = tmp_data_0_V_reg_2387;

assign res_V_data_10_V_TDATA = {{grp_fu_512_p2[25:10]}};

assign res_V_data_11_V_TDATA = {{grp_fu_514_p2[25:10]}};

assign res_V_data_1_V_TDATA = tmp_data_1_V_reg_2392;

assign res_V_data_2_V_TDATA = tmp_data_2_V_reg_2397;

assign res_V_data_3_V_TDATA = tmp_data_3_V_reg_2402;

assign res_V_data_4_V_TDATA = tmp_data_4_V_reg_2407;

assign res_V_data_5_V_TDATA = tmp_data_5_V_reg_2412;

assign res_V_data_6_V_TDATA = tmp_data_6_V_reg_2417;

assign res_V_data_7_V_TDATA = tmp_data_7_V_reg_2422;

assign res_V_data_8_V_TDATA = {{grp_fu_513_p2[25:10]}};

assign res_V_data_9_V_TDATA = {{grp_fu_515_p2[25:10]}};

assign select_ln340_10_fu_1751_p3 = ((xor_ln340_17_fu_1197_p2[0:0] === 1'b1) ? 10'd511 : tmp_17_fu_1741_p4);

assign select_ln340_12_fu_1785_p3 = ((xor_ln340_18_fu_1253_p2[0:0] === 1'b1) ? 10'd511 : tmp_18_fu_1775_p4);

assign select_ln340_14_fu_1819_p3 = ((xor_ln340_19_fu_1309_p2[0:0] === 1'b1) ? 10'd511 : tmp_19_fu_1809_p4);

assign select_ln340_16_fu_1853_p3 = ((xor_ln340_20_fu_1365_p2[0:0] === 1'b1) ? 10'd511 : tmp_20_fu_1843_p4);

assign select_ln340_18_fu_1887_p3 = ((xor_ln340_21_fu_1421_p2[0:0] === 1'b1) ? 10'd511 : tmp_21_fu_1877_p4);

assign select_ln340_20_fu_1921_p3 = ((xor_ln340_22_fu_1477_p2[0:0] === 1'b1) ? 10'd511 : tmp_22_fu_1911_p4);

assign select_ln340_22_fu_1955_p3 = ((xor_ln340_23_fu_1533_p2[0:0] === 1'b1) ? 10'd511 : tmp_23_fu_1945_p4);

assign select_ln340_2_fu_1600_p3 = ((xor_ln340_13_fu_973_p2[0:0] === 1'b1) ? 10'd511 : tmp_13_fu_1590_p4);

assign select_ln340_4_fu_1639_p3 = ((xor_ln340_14_fu_1029_p2[0:0] === 1'b1) ? 10'd511 : tmp_14_fu_1629_p4);

assign select_ln340_6_fu_1678_p3 = ((xor_ln340_15_fu_1085_p2[0:0] === 1'b1) ? 10'd511 : tmp_15_fu_1668_p4);

assign select_ln340_8_fu_1717_p3 = ((xor_ln340_16_fu_1141_p2[0:0] === 1'b1) ? 10'd511 : tmp_16_fu_1707_p4);

assign select_ln340_fu_1561_p3 = ((xor_ln340_12_fu_917_p2[0:0] === 1'b1) ? 10'd511 : tmp_fu_1551_p4);

assign select_ln388_10_fu_1929_p3 = ((and_ln786_10_fu_1471_p2[0:0] === 1'b1) ? 10'd512 : tmp_22_fu_1911_p4);

assign select_ln388_11_fu_1963_p3 = ((and_ln786_11_fu_1527_p2[0:0] === 1'b1) ? 10'd512 : tmp_23_fu_1945_p4);

assign select_ln388_1_fu_1608_p3 = ((and_ln786_1_fu_967_p2[0:0] === 1'b1) ? 10'd512 : tmp_13_fu_1590_p4);

assign select_ln388_2_fu_1647_p3 = ((and_ln786_2_fu_1023_p2[0:0] === 1'b1) ? 10'd512 : tmp_14_fu_1629_p4);

assign select_ln388_3_fu_1686_p3 = ((and_ln786_3_fu_1079_p2[0:0] === 1'b1) ? 10'd512 : tmp_15_fu_1668_p4);

assign select_ln388_4_fu_1725_p3 = ((and_ln786_4_fu_1135_p2[0:0] === 1'b1) ? 10'd512 : tmp_16_fu_1707_p4);

assign select_ln388_5_fu_1759_p3 = ((and_ln786_5_fu_1191_p2[0:0] === 1'b1) ? 10'd512 : tmp_17_fu_1741_p4);

assign select_ln388_6_fu_1793_p3 = ((and_ln786_6_fu_1247_p2[0:0] === 1'b1) ? 10'd512 : tmp_18_fu_1775_p4);

assign select_ln388_7_fu_1827_p3 = ((and_ln786_7_fu_1303_p2[0:0] === 1'b1) ? 10'd512 : tmp_19_fu_1809_p4);

assign select_ln388_8_fu_1861_p3 = ((and_ln786_8_fu_1359_p2[0:0] === 1'b1) ? 10'd512 : tmp_20_fu_1843_p4);

assign select_ln388_9_fu_1895_p3 = ((and_ln786_9_fu_1415_p2[0:0] === 1'b1) ? 10'd512 : tmp_21_fu_1877_p4);

assign select_ln388_fu_1569_p3 = ((and_ln786_fu_911_p2[0:0] === 1'b1) ? 10'd512 : tmp_fu_1551_p4);

assign select_ln65_1_fu_741_p1 = data_V_data_3_V_dout;

assign select_ln65_1_fu_741_p2 = data_V_data_2_V_dout;

assign select_ln65_1_fu_741_p3 = ((icmp_ln1496_1_fu_735_p2[0:0] === 1'b1) ? select_ln65_1_fu_741_p1 : select_ln65_1_fu_741_p2);

assign select_ln65_2_fu_755_p3 = ((icmp_ln1496_2_fu_749_p2[0:0] === 1'b1) ? select_ln65_1_fu_741_p3 : select_ln65_fu_727_p3);

assign select_ln65_3_fu_769_p1 = data_V_data_5_V_dout;

assign select_ln65_3_fu_769_p2 = data_V_data_4_V_dout;

assign select_ln65_3_fu_769_p3 = ((icmp_ln1496_3_fu_763_p2[0:0] === 1'b1) ? select_ln65_3_fu_769_p1 : select_ln65_3_fu_769_p2);

assign select_ln65_4_fu_783_p1 = data_V_data_7_V_dout;

assign select_ln65_4_fu_783_p2 = data_V_data_6_V_dout;

assign select_ln65_4_fu_783_p3 = ((icmp_ln1496_4_fu_777_p2[0:0] === 1'b1) ? select_ln65_4_fu_783_p1 : select_ln65_4_fu_783_p2);

assign select_ln65_5_fu_797_p3 = ((icmp_ln1496_5_fu_791_p2[0:0] === 1'b1) ? select_ln65_4_fu_783_p3 : select_ln65_3_fu_769_p3);

assign select_ln65_6_fu_811_p3 = ((icmp_ln1496_6_fu_805_p2[0:0] === 1'b1) ? select_ln65_5_fu_797_p3 : select_ln65_2_fu_755_p3);

assign select_ln65_7_fu_825_p1 = data_V_data_9_V_dout;

assign select_ln65_7_fu_825_p2 = data_V_data_8_V_dout;

assign select_ln65_7_fu_825_p3 = ((icmp_ln1496_7_fu_819_p2[0:0] === 1'b1) ? select_ln65_7_fu_825_p1 : select_ln65_7_fu_825_p2);

assign select_ln65_8_fu_839_p1 = data_V_data_11_V_dout;

assign select_ln65_8_fu_839_p2 = data_V_data_10_V_dout;

assign select_ln65_8_fu_839_p3 = ((icmp_ln1496_8_fu_833_p2[0:0] === 1'b1) ? select_ln65_8_fu_839_p1 : select_ln65_8_fu_839_p2);

assign select_ln65_9_fu_853_p3 = ((icmp_ln1496_9_fu_847_p2[0:0] === 1'b1) ? select_ln65_8_fu_839_p3 : select_ln65_7_fu_825_p3);

assign select_ln65_fu_727_p1 = data_V_data_1_V_dout;

assign select_ln65_fu_727_p2 = data_V_data_0_V_dout;

assign select_ln65_fu_727_p3 = ((icmp_ln1496_fu_721_p2[0:0] === 1'b1) ? select_ln65_fu_727_p1 : select_ln65_fu_727_p2);

assign sext_ln241_fu_2078_p1 = $signed(invert_table2_q0);

assign sext_ln703_10_fu_1383_p0 = data_V_data_9_V_dout;

assign sext_ln703_10_fu_1383_p1 = sext_ln703_10_fu_1383_p0;

assign sext_ln703_11_fu_1439_p0 = data_V_data_10_V_dout;

assign sext_ln703_11_fu_1439_p1 = sext_ln703_11_fu_1439_p0;

assign sext_ln703_12_fu_1495_p0 = data_V_data_11_V_dout;

assign sext_ln703_12_fu_1495_p1 = sext_ln703_12_fu_1495_p0;

assign sext_ln703_1_fu_879_p1 = $signed(x_max_V_fu_867_p3);

assign sext_ln703_2_fu_935_p0 = data_V_data_1_V_dout;

assign sext_ln703_2_fu_935_p1 = sext_ln703_2_fu_935_p0;

assign sext_ln703_3_fu_991_p0 = data_V_data_2_V_dout;

assign sext_ln703_3_fu_991_p1 = sext_ln703_3_fu_991_p0;

assign sext_ln703_4_fu_1047_p0 = data_V_data_3_V_dout;

assign sext_ln703_4_fu_1047_p1 = sext_ln703_4_fu_1047_p0;

assign sext_ln703_5_fu_1103_p0 = data_V_data_4_V_dout;

assign sext_ln703_5_fu_1103_p1 = sext_ln703_5_fu_1103_p0;

assign sext_ln703_6_fu_1159_p0 = data_V_data_5_V_dout;

assign sext_ln703_6_fu_1159_p1 = sext_ln703_6_fu_1159_p0;

assign sext_ln703_7_fu_1215_p0 = data_V_data_6_V_dout;

assign sext_ln703_7_fu_1215_p1 = sext_ln703_7_fu_1215_p0;

assign sext_ln703_8_fu_1271_p0 = data_V_data_7_V_dout;

assign sext_ln703_8_fu_1271_p1 = sext_ln703_8_fu_1271_p0;

assign sext_ln703_9_fu_1327_p0 = data_V_data_8_V_dout;

assign sext_ln703_9_fu_1327_p1 = sext_ln703_9_fu_1327_p0;

assign sext_ln703_fu_875_p0 = data_V_data_0_V_dout;

assign sext_ln703_fu_875_p1 = sext_ln703_fu_875_p0;

assign sub_ln1193_10_fu_1443_p2 = ($signed(sext_ln703_11_fu_1439_p1) - $signed(sext_ln703_1_fu_879_p1));

assign sub_ln1193_11_fu_1499_p2 = ($signed(sext_ln703_12_fu_1495_p1) - $signed(sext_ln703_1_fu_879_p1));

assign sub_ln1193_1_fu_939_p2 = ($signed(sext_ln703_2_fu_935_p1) - $signed(sext_ln703_1_fu_879_p1));

assign sub_ln1193_2_fu_995_p2 = ($signed(sext_ln703_3_fu_991_p1) - $signed(sext_ln703_1_fu_879_p1));

assign sub_ln1193_3_fu_1051_p2 = ($signed(sext_ln703_4_fu_1047_p1) - $signed(sext_ln703_1_fu_879_p1));

assign sub_ln1193_4_fu_1107_p2 = ($signed(sext_ln703_5_fu_1103_p1) - $signed(sext_ln703_1_fu_879_p1));

assign sub_ln1193_5_fu_1163_p2 = ($signed(sext_ln703_6_fu_1159_p1) - $signed(sext_ln703_1_fu_879_p1));

assign sub_ln1193_6_fu_1219_p2 = ($signed(sext_ln703_7_fu_1215_p1) - $signed(sext_ln703_1_fu_879_p1));

assign sub_ln1193_7_fu_1275_p2 = ($signed(sext_ln703_8_fu_1271_p1) - $signed(sext_ln703_1_fu_879_p1));

assign sub_ln1193_8_fu_1331_p2 = ($signed(sext_ln703_9_fu_1327_p1) - $signed(sext_ln703_1_fu_879_p1));

assign sub_ln1193_9_fu_1387_p2 = ($signed(sext_ln703_10_fu_1383_p1) - $signed(sext_ln703_1_fu_879_p1));

assign sub_ln1193_fu_883_p2 = ($signed(sext_ln703_fu_875_p1) - $signed(sext_ln703_1_fu_879_p1));

assign tmp_13_fu_1590_p4 = {{sub_ln1193_1_fu_939_p2[15:6]}};

assign tmp_14_fu_1629_p4 = {{sub_ln1193_2_fu_995_p2[15:6]}};

assign tmp_15_fu_1668_p4 = {{sub_ln1193_3_fu_1051_p2[15:6]}};

assign tmp_16_fu_1707_p4 = {{sub_ln1193_4_fu_1107_p2[15:6]}};

assign tmp_17_fu_1741_p4 = {{sub_ln1193_5_fu_1163_p2[15:6]}};

assign tmp_18_fu_1775_p4 = {{sub_ln1193_6_fu_1219_p2[15:6]}};

assign tmp_19_fu_1809_p4 = {{sub_ln1193_7_fu_1275_p2[15:6]}};

assign tmp_20_fu_1843_p4 = {{sub_ln1193_8_fu_1331_p2[15:6]}};

assign tmp_21_fu_1877_p4 = {{sub_ln1193_9_fu_1387_p2[15:6]}};

assign tmp_22_fu_1911_p4 = {{sub_ln1193_10_fu_1443_p2[15:6]}};

assign tmp_23_fu_1945_p4 = {{sub_ln1193_11_fu_1499_p2[15:6]}};

assign tmp_24_fu_889_p3 = sub_ln1193_fu_883_p2[32'd16];

assign tmp_25_fu_897_p3 = sub_ln1193_fu_883_p2[32'd15];

assign tmp_26_fu_945_p3 = sub_ln1193_1_fu_939_p2[32'd16];

assign tmp_27_fu_953_p3 = sub_ln1193_1_fu_939_p2[32'd15];

assign tmp_28_fu_1001_p3 = sub_ln1193_2_fu_995_p2[32'd16];

assign tmp_29_fu_1009_p3 = sub_ln1193_2_fu_995_p2[32'd15];

assign tmp_30_fu_1057_p3 = sub_ln1193_3_fu_1051_p2[32'd16];

assign tmp_31_fu_1065_p3 = sub_ln1193_3_fu_1051_p2[32'd15];

assign tmp_32_fu_1113_p3 = sub_ln1193_4_fu_1107_p2[32'd16];

assign tmp_33_fu_1121_p3 = sub_ln1193_4_fu_1107_p2[32'd15];

assign tmp_34_fu_1169_p3 = sub_ln1193_5_fu_1163_p2[32'd16];

assign tmp_35_fu_1177_p3 = sub_ln1193_5_fu_1163_p2[32'd15];

assign tmp_36_fu_1225_p3 = sub_ln1193_6_fu_1219_p2[32'd16];

assign tmp_37_fu_1233_p3 = sub_ln1193_6_fu_1219_p2[32'd15];

assign tmp_38_fu_1281_p3 = sub_ln1193_7_fu_1275_p2[32'd16];

assign tmp_39_fu_1289_p3 = sub_ln1193_7_fu_1275_p2[32'd15];

assign tmp_40_fu_1337_p3 = sub_ln1193_8_fu_1331_p2[32'd16];

assign tmp_41_fu_1345_p3 = sub_ln1193_8_fu_1331_p2[32'd15];

assign tmp_42_fu_1393_p3 = sub_ln1193_9_fu_1387_p2[32'd16];

assign tmp_43_fu_1401_p3 = sub_ln1193_9_fu_1387_p2[32'd15];

assign tmp_44_fu_1449_p3 = sub_ln1193_10_fu_1443_p2[32'd16];

assign tmp_45_fu_1457_p3 = sub_ln1193_10_fu_1443_p2[32'd15];

assign tmp_46_fu_1505_p3 = sub_ln1193_11_fu_1499_p2[32'd16];

assign tmp_47_fu_1513_p3 = sub_ln1193_11_fu_1499_p2[32'd15];

assign tmp_fu_1551_p4 = {{sub_ln1193_fu_883_p2[15:6]}};

assign x_max_V_fu_867_p3 = ((icmp_ln1496_10_fu_861_p2[0:0] === 1'b1) ? select_ln65_9_fu_853_p3 : select_ln65_6_fu_811_p3);

assign xor_ln340_10_fu_1483_p2 = (tmp_44_fu_1449_p3 ^ 1'd1);

assign xor_ln340_11_fu_1539_p2 = (tmp_46_fu_1505_p3 ^ 1'd1);

assign xor_ln340_12_fu_917_p2 = (tmp_25_fu_897_p3 ^ tmp_24_fu_889_p3);

assign xor_ln340_13_fu_973_p2 = (tmp_27_fu_953_p3 ^ tmp_26_fu_945_p3);

assign xor_ln340_14_fu_1029_p2 = (tmp_29_fu_1009_p3 ^ tmp_28_fu_1001_p3);

assign xor_ln340_15_fu_1085_p2 = (tmp_31_fu_1065_p3 ^ tmp_30_fu_1057_p3);

assign xor_ln340_16_fu_1141_p2 = (tmp_33_fu_1121_p3 ^ tmp_32_fu_1113_p3);

assign xor_ln340_17_fu_1197_p2 = (tmp_35_fu_1177_p3 ^ tmp_34_fu_1169_p3);

assign xor_ln340_18_fu_1253_p2 = (tmp_37_fu_1233_p3 ^ tmp_36_fu_1225_p3);

assign xor_ln340_19_fu_1309_p2 = (tmp_39_fu_1289_p3 ^ tmp_38_fu_1281_p3);

assign xor_ln340_1_fu_979_p2 = (tmp_26_fu_945_p3 ^ 1'd1);

assign xor_ln340_20_fu_1365_p2 = (tmp_41_fu_1345_p3 ^ tmp_40_fu_1337_p3);

assign xor_ln340_21_fu_1421_p2 = (tmp_43_fu_1401_p3 ^ tmp_42_fu_1393_p3);

assign xor_ln340_22_fu_1477_p2 = (tmp_45_fu_1457_p3 ^ tmp_44_fu_1449_p3);

assign xor_ln340_23_fu_1533_p2 = (tmp_47_fu_1513_p3 ^ tmp_46_fu_1505_p3);

assign xor_ln340_2_fu_1035_p2 = (tmp_28_fu_1001_p3 ^ 1'd1);

assign xor_ln340_3_fu_1091_p2 = (tmp_30_fu_1057_p3 ^ 1'd1);

assign xor_ln340_4_fu_1147_p2 = (tmp_32_fu_1113_p3 ^ 1'd1);

assign xor_ln340_5_fu_1203_p2 = (tmp_34_fu_1169_p3 ^ 1'd1);

assign xor_ln340_6_fu_1259_p2 = (tmp_36_fu_1225_p3 ^ 1'd1);

assign xor_ln340_7_fu_1315_p2 = (tmp_38_fu_1281_p3 ^ 1'd1);

assign xor_ln340_8_fu_1371_p2 = (tmp_40_fu_1337_p3 ^ 1'd1);

assign xor_ln340_9_fu_1427_p2 = (tmp_42_fu_1393_p3 ^ 1'd1);

assign xor_ln340_fu_923_p2 = (tmp_24_fu_889_p3 ^ 1'd1);

assign xor_ln786_10_fu_1465_p2 = (tmp_45_fu_1457_p3 ^ 1'd1);

assign xor_ln786_11_fu_1521_p2 = (tmp_47_fu_1513_p3 ^ 1'd1);

assign xor_ln786_1_fu_961_p2 = (tmp_27_fu_953_p3 ^ 1'd1);

assign xor_ln786_2_fu_1017_p2 = (tmp_29_fu_1009_p3 ^ 1'd1);

assign xor_ln786_3_fu_1073_p2 = (tmp_31_fu_1065_p3 ^ 1'd1);

assign xor_ln786_4_fu_1129_p2 = (tmp_33_fu_1121_p3 ^ 1'd1);

assign xor_ln786_5_fu_1185_p2 = (tmp_35_fu_1177_p3 ^ 1'd1);

assign xor_ln786_6_fu_1241_p2 = (tmp_37_fu_1233_p3 ^ 1'd1);

assign xor_ln786_7_fu_1297_p2 = (tmp_39_fu_1289_p3 ^ 1'd1);

assign xor_ln786_8_fu_1353_p2 = (tmp_41_fu_1345_p3 ^ 1'd1);

assign xor_ln786_9_fu_1409_p2 = (tmp_43_fu_1401_p3 ^ 1'd1);

assign xor_ln786_fu_905_p2 = (tmp_25_fu_897_p3 ^ 1'd1);

assign y_V_10_fu_1937_p3 = ((or_ln340_10_fu_1489_p2[0:0] === 1'b1) ? select_ln340_20_fu_1921_p3 : select_ln388_10_fu_1929_p3);

assign y_V_11_fu_1971_p3 = ((or_ln340_11_fu_1545_p2[0:0] === 1'b1) ? select_ln340_22_fu_1955_p3 : select_ln388_11_fu_1963_p3);

assign y_V_12_fu_2063_p4 = {{grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_613_ap_return[17:8]}};

assign y_V_1_fu_1616_p3 = ((or_ln340_1_fu_985_p2[0:0] === 1'b1) ? select_ln340_2_fu_1600_p3 : select_ln388_1_fu_1608_p3);

assign y_V_2_fu_1655_p3 = ((or_ln340_2_fu_1041_p2[0:0] === 1'b1) ? select_ln340_4_fu_1639_p3 : select_ln388_2_fu_1647_p3);

assign y_V_3_fu_1694_p3 = ((or_ln340_3_fu_1097_p2[0:0] === 1'b1) ? select_ln340_6_fu_1678_p3 : select_ln388_3_fu_1686_p3);

assign y_V_4_fu_1733_p3 = ((or_ln340_4_fu_1153_p2[0:0] === 1'b1) ? select_ln340_8_fu_1717_p3 : select_ln388_4_fu_1725_p3);

assign y_V_5_fu_1767_p3 = ((or_ln340_5_fu_1209_p2[0:0] === 1'b1) ? select_ln340_10_fu_1751_p3 : select_ln388_5_fu_1759_p3);

assign y_V_6_fu_1801_p3 = ((or_ln340_6_fu_1265_p2[0:0] === 1'b1) ? select_ln340_12_fu_1785_p3 : select_ln388_6_fu_1793_p3);

assign y_V_7_fu_1835_p3 = ((or_ln340_7_fu_1321_p2[0:0] === 1'b1) ? select_ln340_14_fu_1819_p3 : select_ln388_7_fu_1827_p3);

assign y_V_8_fu_1869_p3 = ((or_ln340_8_fu_1377_p2[0:0] === 1'b1) ? select_ln340_16_fu_1853_p3 : select_ln388_8_fu_1861_p3);

assign y_V_9_fu_1903_p3 = ((or_ln340_9_fu_1433_p2[0:0] === 1'b1) ? select_ln340_18_fu_1887_p3 : select_ln388_9_fu_1895_p3);

assign y_V_fu_1577_p3 = ((or_ln340_fu_929_p2[0:0] === 1'b1) ? select_ln340_fu_1561_p3 : select_ln388_fu_1569_p3);

assign zext_ln1118_10_fu_2126_p1 = exp_res_10_V_1_reg_2364_pp0_iter2_reg;

assign zext_ln1118_11_fu_2130_p1 = exp_res_11_V_1_reg_2369_pp0_iter2_reg;

assign zext_ln1118_1_fu_2090_p1 = exp_res_1_V_1_reg_2272_pp0_iter1_reg;

assign zext_ln1118_2_fu_2094_p1 = exp_res_2_V_1_reg_2278_pp0_iter1_reg;

assign zext_ln1118_3_fu_2098_p1 = exp_res_3_V_1_reg_2284_pp0_iter1_reg;

assign zext_ln1118_4_fu_2102_p1 = exp_res_4_V_1_reg_2310_pp0_iter1_reg;

assign zext_ln1118_5_fu_2106_p1 = exp_res_5_V_1_reg_2316_pp0_iter1_reg;

assign zext_ln1118_6_fu_2110_p1 = exp_res_6_V_1_reg_2322_pp0_iter1_reg;

assign zext_ln1118_7_fu_2114_p1 = exp_res_7_V_1_reg_2328_pp0_iter1_reg;

assign zext_ln1118_8_fu_2118_p1 = exp_res_8_V_1_reg_2354_pp0_iter2_reg;

assign zext_ln1118_9_fu_2122_p1 = exp_res_9_V_1_reg_2359_pp0_iter2_reg;

assign zext_ln1118_fu_2086_p1 = exp_res_0_V_1_reg_2266_pp0_iter1_reg;

assign zext_ln225_10_fu_2003_p1 = y_V_10_reg_2256;

assign zext_ln225_11_fu_2007_p1 = y_V_11_reg_2261;

assign zext_ln225_1_fu_1624_p1 = y_V_1_fu_1616_p3;

assign zext_ln225_2_fu_1663_p1 = y_V_2_fu_1655_p3;

assign zext_ln225_3_fu_1702_p1 = y_V_3_fu_1694_p3;

assign zext_ln225_4_fu_1979_p1 = y_V_4_reg_2226;

assign zext_ln225_5_fu_1983_p1 = y_V_5_reg_2231;

assign zext_ln225_6_fu_1987_p1 = y_V_6_reg_2236;

assign zext_ln225_7_fu_1991_p1 = y_V_7_reg_2241;

assign zext_ln225_8_fu_1995_p1 = y_V_8_reg_2246;

assign zext_ln225_9_fu_1999_p1 = y_V_9_reg_2251;

assign zext_ln225_fu_1585_p1 = y_V_fu_1577_p3;

assign zext_ln235_fu_2073_p1 = y_V_12_fu_2063_p4;

endmodule //softmax_stable_array_array_ap_fixed_16_6_5_3_0_12u_softmax_config7_s
