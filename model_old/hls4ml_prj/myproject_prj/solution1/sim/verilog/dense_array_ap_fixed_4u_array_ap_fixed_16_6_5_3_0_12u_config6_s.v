// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_12u_config6_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_stream_V_data_0_V_dout,
        data_stream_V_data_0_V_empty_n,
        data_stream_V_data_0_V_read,
        data_stream_V_data_1_V_dout,
        data_stream_V_data_1_V_empty_n,
        data_stream_V_data_1_V_read,
        data_stream_V_data_2_V_dout,
        data_stream_V_data_2_V_empty_n,
        data_stream_V_data_2_V_read,
        data_stream_V_data_3_V_dout,
        data_stream_V_data_3_V_empty_n,
        data_stream_V_data_3_V_read,
        res_stream_V_data_0_V_din,
        res_stream_V_data_0_V_full_n,
        res_stream_V_data_0_V_write,
        res_stream_V_data_1_V_din,
        res_stream_V_data_1_V_full_n,
        res_stream_V_data_1_V_write,
        res_stream_V_data_2_V_din,
        res_stream_V_data_2_V_full_n,
        res_stream_V_data_2_V_write,
        res_stream_V_data_3_V_din,
        res_stream_V_data_3_V_full_n,
        res_stream_V_data_3_V_write,
        res_stream_V_data_4_V_din,
        res_stream_V_data_4_V_full_n,
        res_stream_V_data_4_V_write,
        res_stream_V_data_5_V_din,
        res_stream_V_data_5_V_full_n,
        res_stream_V_data_5_V_write,
        res_stream_V_data_6_V_din,
        res_stream_V_data_6_V_full_n,
        res_stream_V_data_6_V_write,
        res_stream_V_data_7_V_din,
        res_stream_V_data_7_V_full_n,
        res_stream_V_data_7_V_write,
        res_stream_V_data_8_V_din,
        res_stream_V_data_8_V_full_n,
        res_stream_V_data_8_V_write,
        res_stream_V_data_9_V_din,
        res_stream_V_data_9_V_full_n,
        res_stream_V_data_9_V_write,
        res_stream_V_data_10_V_din,
        res_stream_V_data_10_V_full_n,
        res_stream_V_data_10_V_write,
        res_stream_V_data_11_V_din,
        res_stream_V_data_11_V_full_n,
        res_stream_V_data_11_V_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state4 = 5'd4;
parameter    ap_ST_fsm_state5 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_stream_V_data_0_V_dout;
input   data_stream_V_data_0_V_empty_n;
output   data_stream_V_data_0_V_read;
input  [15:0] data_stream_V_data_1_V_dout;
input   data_stream_V_data_1_V_empty_n;
output   data_stream_V_data_1_V_read;
input  [15:0] data_stream_V_data_2_V_dout;
input   data_stream_V_data_2_V_empty_n;
output   data_stream_V_data_2_V_read;
input  [15:0] data_stream_V_data_3_V_dout;
input   data_stream_V_data_3_V_empty_n;
output   data_stream_V_data_3_V_read;
output  [15:0] res_stream_V_data_0_V_din;
input   res_stream_V_data_0_V_full_n;
output   res_stream_V_data_0_V_write;
output  [15:0] res_stream_V_data_1_V_din;
input   res_stream_V_data_1_V_full_n;
output   res_stream_V_data_1_V_write;
output  [15:0] res_stream_V_data_2_V_din;
input   res_stream_V_data_2_V_full_n;
output   res_stream_V_data_2_V_write;
output  [15:0] res_stream_V_data_3_V_din;
input   res_stream_V_data_3_V_full_n;
output   res_stream_V_data_3_V_write;
output  [15:0] res_stream_V_data_4_V_din;
input   res_stream_V_data_4_V_full_n;
output   res_stream_V_data_4_V_write;
output  [15:0] res_stream_V_data_5_V_din;
input   res_stream_V_data_5_V_full_n;
output   res_stream_V_data_5_V_write;
output  [15:0] res_stream_V_data_6_V_din;
input   res_stream_V_data_6_V_full_n;
output   res_stream_V_data_6_V_write;
output  [15:0] res_stream_V_data_7_V_din;
input   res_stream_V_data_7_V_full_n;
output   res_stream_V_data_7_V_write;
output  [15:0] res_stream_V_data_8_V_din;
input   res_stream_V_data_8_V_full_n;
output   res_stream_V_data_8_V_write;
output  [15:0] res_stream_V_data_9_V_din;
input   res_stream_V_data_9_V_full_n;
output   res_stream_V_data_9_V_write;
output  [15:0] res_stream_V_data_10_V_din;
input   res_stream_V_data_10_V_full_n;
output   res_stream_V_data_10_V_write;
output  [15:0] res_stream_V_data_11_V_din;
input   res_stream_V_data_11_V_full_n;
output   res_stream_V_data_11_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_stream_V_data_0_V_read;
reg data_stream_V_data_1_V_read;
reg data_stream_V_data_2_V_read;
reg data_stream_V_data_3_V_read;
reg res_stream_V_data_0_V_write;
reg res_stream_V_data_1_V_write;
reg res_stream_V_data_2_V_write;
reg res_stream_V_data_3_V_write;
reg res_stream_V_data_4_V_write;
reg res_stream_V_data_5_V_write;
reg res_stream_V_data_6_V_write;
reg res_stream_V_data_7_V_write;
reg res_stream_V_data_8_V_write;
reg res_stream_V_data_9_V_write;
reg res_stream_V_data_10_V_write;
reg res_stream_V_data_11_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_stream_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    data_stream_V_data_1_V_blk_n;
reg    data_stream_V_data_2_V_blk_n;
reg    data_stream_V_data_3_V_blk_n;
reg    res_stream_V_data_0_V_blk_n;
wire    ap_CS_fsm_state6;
reg    res_stream_V_data_1_V_blk_n;
reg    res_stream_V_data_2_V_blk_n;
reg    res_stream_V_data_3_V_blk_n;
reg    res_stream_V_data_4_V_blk_n;
reg    res_stream_V_data_5_V_blk_n;
reg    res_stream_V_data_6_V_blk_n;
reg    res_stream_V_data_7_V_blk_n;
reg    res_stream_V_data_8_V_blk_n;
reg    res_stream_V_data_9_V_blk_n;
reg    res_stream_V_data_10_V_blk_n;
reg    res_stream_V_data_11_V_blk_n;
reg   [5:0] i_in_0_reg_966;
wire   [0:0] icmp_ln36_fu_1128_p2;
reg   [0:0] icmp_ln36_reg_3364;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op321;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [5:0] i_in_fu_1134_p2;
reg   [5:0] i_in_reg_3368;
reg    ap_enable_reg_pp0_iter0;
wire    ap_CS_fsm_state4;
reg   [15:0] tmp_data_0_V37_reg_4093;
wire    ap_CS_fsm_state5;
wire    grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_ready;
wire    grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_done;
reg   [15:0] tmp_data_1_V37_reg_4098;
reg   [15:0] tmp_data_2_V37_reg_4103;
reg   [15:0] tmp_data_3_V37_reg_4108;
reg   [15:0] tmp_data_4_V_reg_4113;
reg   [15:0] tmp_data_5_V_reg_4118;
reg   [15:0] tmp_data_6_V_reg_4123;
reg   [15:0] tmp_data_7_V_reg_4128;
reg   [15:0] tmp_data_8_V_reg_4133;
reg   [15:0] tmp_data_9_V_reg_4138;
reg   [15:0] tmp_data_10_V_reg_4143;
reg   [15:0] tmp_data_11_V_reg_4148;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_start;
wire    grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_idle;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_0;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_1;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_2;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_3;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_4;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_5;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_6;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_7;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_8;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_9;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_10;
wire   [15:0] grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_11;
reg   [5:0] ap_phi_mux_i_in_0_phi_fu_970_p4;
reg    grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_start_reg;
reg   [15:0] tmp_data_0_V_fu_338;
reg   [15:0] tmp_data_1_V_fu_342;
reg   [15:0] tmp_data_2_V_fu_346;
reg   [15:0] tmp_data_3_V_fu_350;
reg   [15:0] tmp_data_0_V_2_fu_354;
reg   [15:0] tmp_data_1_V_2_fu_358;
reg   [15:0] tmp_data_2_V_2_fu_362;
reg   [15:0] tmp_data_3_V_2_fu_366;
reg   [15:0] tmp_data_0_V_3_fu_370;
reg   [15:0] tmp_data_1_V_3_fu_374;
reg   [15:0] tmp_data_2_V_3_fu_378;
reg   [15:0] tmp_data_3_V_3_fu_382;
reg   [15:0] tmp_data_0_V_4_fu_386;
reg   [15:0] tmp_data_1_V_4_fu_390;
reg   [15:0] tmp_data_2_V_4_fu_394;
reg   [15:0] tmp_data_3_V_4_fu_398;
reg   [15:0] tmp_data_0_V_5_fu_402;
reg   [15:0] tmp_data_1_V_5_fu_406;
reg   [15:0] tmp_data_2_V_5_fu_410;
reg   [15:0] tmp_data_3_V_5_fu_414;
reg   [15:0] tmp_data_0_V_6_fu_418;
reg   [15:0] tmp_data_1_V_6_fu_422;
reg   [15:0] tmp_data_2_V_6_fu_426;
reg   [15:0] tmp_data_3_V_6_fu_430;
reg   [15:0] tmp_data_0_V_7_fu_434;
reg   [15:0] tmp_data_1_V_7_fu_438;
reg   [15:0] tmp_data_2_V_7_fu_442;
reg   [15:0] tmp_data_3_V_7_fu_446;
reg   [15:0] tmp_data_0_V_8_fu_450;
reg   [15:0] tmp_data_1_V_8_fu_454;
reg   [15:0] tmp_data_2_V_8_fu_458;
reg   [15:0] tmp_data_3_V_8_fu_462;
reg   [15:0] tmp_data_0_V_9_fu_466;
reg   [15:0] tmp_data_1_V_9_fu_470;
reg   [15:0] tmp_data_2_V_9_fu_474;
reg   [15:0] tmp_data_3_V_9_fu_478;
reg   [15:0] tmp_data_0_V_10_fu_482;
reg   [15:0] tmp_data_1_V_10_fu_486;
reg   [15:0] tmp_data_2_V_10_fu_490;
reg   [15:0] tmp_data_3_V_10_fu_494;
reg   [15:0] tmp_data_0_V_11_fu_498;
reg   [15:0] tmp_data_1_V_11_fu_502;
reg   [15:0] tmp_data_2_V_11_fu_506;
reg   [15:0] tmp_data_3_V_11_fu_510;
reg   [15:0] tmp_data_0_V_12_fu_514;
reg   [15:0] tmp_data_1_V_12_fu_518;
reg   [15:0] tmp_data_2_V_12_fu_522;
reg   [15:0] tmp_data_3_V_12_fu_526;
reg   [15:0] tmp_data_0_V_13_fu_530;
reg   [15:0] tmp_data_1_V_13_fu_534;
reg   [15:0] tmp_data_2_V_13_fu_538;
reg   [15:0] tmp_data_3_V_13_fu_542;
reg   [15:0] tmp_data_0_V_14_fu_546;
reg   [15:0] tmp_data_1_V_14_fu_550;
reg   [15:0] tmp_data_2_V_14_fu_554;
reg   [15:0] tmp_data_3_V_14_fu_558;
reg   [15:0] tmp_data_0_V_15_fu_562;
reg   [15:0] tmp_data_1_V_15_fu_566;
reg   [15:0] tmp_data_2_V_15_fu_570;
reg   [15:0] tmp_data_3_V_15_fu_574;
reg   [15:0] tmp_data_0_V_16_fu_578;
reg   [15:0] tmp_data_1_V_16_fu_582;
reg   [15:0] tmp_data_2_V_16_fu_586;
reg   [15:0] tmp_data_3_V_16_fu_590;
reg   [15:0] tmp_data_0_V_17_fu_594;
reg   [15:0] tmp_data_1_V_17_fu_598;
reg   [15:0] tmp_data_2_V_17_fu_602;
reg   [15:0] tmp_data_3_V_17_fu_606;
reg   [15:0] tmp_data_0_V_18_fu_610;
reg   [15:0] tmp_data_1_V_18_fu_614;
reg   [15:0] tmp_data_2_V_18_fu_618;
reg   [15:0] tmp_data_3_V_18_fu_622;
reg   [15:0] tmp_data_0_V_19_fu_626;
reg   [15:0] tmp_data_1_V_19_fu_630;
reg   [15:0] tmp_data_2_V_19_fu_634;
reg   [15:0] tmp_data_3_V_19_fu_638;
reg   [15:0] tmp_data_0_V_20_fu_642;
reg   [15:0] tmp_data_1_V_20_fu_646;
reg   [15:0] tmp_data_2_V_20_fu_650;
reg   [15:0] tmp_data_3_V_20_fu_654;
reg   [15:0] tmp_data_0_V_21_fu_658;
reg   [15:0] tmp_data_1_V_21_fu_662;
reg   [15:0] tmp_data_2_V_21_fu_666;
reg   [15:0] tmp_data_3_V_21_fu_670;
reg   [15:0] tmp_data_0_V_22_fu_674;
reg   [15:0] tmp_data_1_V_22_fu_678;
reg   [15:0] tmp_data_2_V_22_fu_682;
reg   [15:0] tmp_data_3_V_22_fu_686;
reg   [15:0] tmp_data_0_V_23_fu_690;
reg   [15:0] tmp_data_1_V_23_fu_694;
reg   [15:0] tmp_data_2_V_23_fu_698;
reg   [15:0] tmp_data_3_V_23_fu_702;
reg   [15:0] tmp_data_0_V_24_fu_706;
reg   [15:0] tmp_data_1_V_24_fu_710;
reg   [15:0] tmp_data_2_V_24_fu_714;
reg   [15:0] tmp_data_3_V_24_fu_718;
reg   [15:0] tmp_data_0_V_25_fu_722;
reg   [15:0] tmp_data_1_V_25_fu_726;
reg   [15:0] tmp_data_2_V_25_fu_730;
reg   [15:0] tmp_data_3_V_25_fu_734;
reg   [15:0] tmp_data_0_V_26_fu_738;
reg   [15:0] tmp_data_1_V_26_fu_742;
reg   [15:0] tmp_data_2_V_26_fu_746;
reg   [15:0] tmp_data_3_V_26_fu_750;
reg   [15:0] tmp_data_0_V_27_fu_754;
reg   [15:0] tmp_data_1_V_27_fu_758;
reg   [15:0] tmp_data_2_V_27_fu_762;
reg   [15:0] tmp_data_3_V_27_fu_766;
reg   [15:0] tmp_data_0_V_28_fu_770;
reg   [15:0] tmp_data_1_V_28_fu_774;
reg   [15:0] tmp_data_2_V_28_fu_778;
reg   [15:0] tmp_data_3_V_28_fu_782;
reg   [15:0] tmp_data_0_V_29_fu_786;
reg   [15:0] tmp_data_1_V_29_fu_790;
reg   [15:0] tmp_data_2_V_29_fu_794;
reg   [15:0] tmp_data_3_V_29_fu_798;
reg   [15:0] tmp_data_0_V_30_fu_802;
reg   [15:0] tmp_data_1_V_30_fu_806;
reg   [15:0] tmp_data_2_V_30_fu_810;
reg   [15:0] tmp_data_3_V_30_fu_814;
reg   [15:0] tmp_data_0_V_31_fu_818;
reg   [15:0] tmp_data_1_V_31_fu_822;
reg   [15:0] tmp_data_2_V_31_fu_826;
reg   [15:0] tmp_data_3_V_31_fu_830;
reg   [15:0] tmp_data_0_V_32_fu_834;
reg   [15:0] tmp_data_1_V_32_fu_838;
reg   [15:0] tmp_data_2_V_32_fu_842;
reg   [15:0] tmp_data_3_V_32_fu_846;
reg   [15:0] tmp_data_0_V_33_fu_850;
reg   [15:0] tmp_data_1_V_33_fu_854;
reg   [15:0] tmp_data_2_V_33_fu_858;
reg   [15:0] tmp_data_3_V_33_fu_862;
reg   [15:0] tmp_data_0_V_34_fu_866;
reg   [15:0] tmp_data_1_V_34_fu_870;
reg   [15:0] tmp_data_2_V_34_fu_874;
reg   [15:0] tmp_data_3_V_34_fu_878;
reg   [15:0] tmp_data_0_V_35_fu_882;
reg   [15:0] tmp_data_1_V_35_fu_886;
reg   [15:0] tmp_data_2_V_35_fu_890;
reg   [15:0] tmp_data_3_V_35_fu_894;
reg   [15:0] tmp_data_0_V_36_fu_898;
reg   [15:0] tmp_data_1_V_36_fu_902;
reg   [15:0] tmp_data_2_V_36_fu_906;
reg   [15:0] tmp_data_3_V_36_fu_910;
wire    io_acc_block_signal_op634;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_start_reg = 1'b0;
end

dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_start),
    .ap_done(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_done),
    .ap_idle(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_idle),
    .ap_ready(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_ready),
    .data_0_V_read(tmp_data_0_V_fu_338),
    .data_1_V_read(tmp_data_1_V_fu_342),
    .data_2_V_read(tmp_data_2_V_fu_346),
    .data_3_V_read(tmp_data_3_V_fu_350),
    .data_4_V_read(tmp_data_0_V_2_fu_354),
    .data_5_V_read(tmp_data_1_V_2_fu_358),
    .data_6_V_read(tmp_data_2_V_2_fu_362),
    .data_7_V_read(tmp_data_3_V_2_fu_366),
    .data_8_V_read(tmp_data_0_V_3_fu_370),
    .data_9_V_read(tmp_data_1_V_3_fu_374),
    .data_10_V_read(tmp_data_2_V_3_fu_378),
    .data_11_V_read(tmp_data_3_V_3_fu_382),
    .data_12_V_read(tmp_data_0_V_4_fu_386),
    .data_13_V_read(tmp_data_1_V_4_fu_390),
    .data_14_V_read(tmp_data_2_V_4_fu_394),
    .data_15_V_read(tmp_data_3_V_4_fu_398),
    .data_16_V_read(tmp_data_0_V_5_fu_402),
    .data_17_V_read(tmp_data_1_V_5_fu_406),
    .data_18_V_read(tmp_data_2_V_5_fu_410),
    .data_19_V_read(tmp_data_3_V_5_fu_414),
    .data_20_V_read(tmp_data_0_V_6_fu_418),
    .data_21_V_read(tmp_data_1_V_6_fu_422),
    .data_22_V_read(tmp_data_2_V_6_fu_426),
    .data_23_V_read(tmp_data_3_V_6_fu_430),
    .data_24_V_read(tmp_data_0_V_7_fu_434),
    .data_25_V_read(tmp_data_1_V_7_fu_438),
    .data_26_V_read(tmp_data_2_V_7_fu_442),
    .data_27_V_read(tmp_data_3_V_7_fu_446),
    .data_28_V_read(tmp_data_0_V_8_fu_450),
    .data_29_V_read(tmp_data_1_V_8_fu_454),
    .data_30_V_read(tmp_data_2_V_8_fu_458),
    .data_31_V_read(tmp_data_3_V_8_fu_462),
    .data_32_V_read(tmp_data_0_V_9_fu_466),
    .data_33_V_read(tmp_data_1_V_9_fu_470),
    .data_34_V_read(tmp_data_2_V_9_fu_474),
    .data_35_V_read(tmp_data_3_V_9_fu_478),
    .data_36_V_read(tmp_data_0_V_10_fu_482),
    .data_37_V_read(tmp_data_1_V_10_fu_486),
    .data_38_V_read(tmp_data_2_V_10_fu_490),
    .data_39_V_read(tmp_data_3_V_10_fu_494),
    .data_40_V_read(tmp_data_0_V_11_fu_498),
    .data_41_V_read(tmp_data_1_V_11_fu_502),
    .data_42_V_read(tmp_data_2_V_11_fu_506),
    .data_43_V_read(tmp_data_3_V_11_fu_510),
    .data_44_V_read(tmp_data_0_V_12_fu_514),
    .data_45_V_read(tmp_data_1_V_12_fu_518),
    .data_46_V_read(tmp_data_2_V_12_fu_522),
    .data_47_V_read(tmp_data_3_V_12_fu_526),
    .data_48_V_read(tmp_data_0_V_13_fu_530),
    .data_49_V_read(tmp_data_1_V_13_fu_534),
    .data_50_V_read(tmp_data_2_V_13_fu_538),
    .data_51_V_read(tmp_data_3_V_13_fu_542),
    .data_52_V_read(tmp_data_0_V_14_fu_546),
    .data_53_V_read(tmp_data_1_V_14_fu_550),
    .data_54_V_read(tmp_data_2_V_14_fu_554),
    .data_55_V_read(tmp_data_3_V_14_fu_558),
    .data_56_V_read(tmp_data_0_V_15_fu_562),
    .data_57_V_read(tmp_data_1_V_15_fu_566),
    .data_58_V_read(tmp_data_2_V_15_fu_570),
    .data_59_V_read(tmp_data_3_V_15_fu_574),
    .data_60_V_read(tmp_data_0_V_16_fu_578),
    .data_61_V_read(tmp_data_1_V_16_fu_582),
    .data_62_V_read(tmp_data_2_V_16_fu_586),
    .data_63_V_read(tmp_data_3_V_16_fu_590),
    .data_64_V_read(tmp_data_0_V_17_fu_594),
    .data_65_V_read(tmp_data_1_V_17_fu_598),
    .data_66_V_read(tmp_data_2_V_17_fu_602),
    .data_67_V_read(tmp_data_3_V_17_fu_606),
    .data_68_V_read(tmp_data_0_V_18_fu_610),
    .data_69_V_read(tmp_data_1_V_18_fu_614),
    .data_70_V_read(tmp_data_2_V_18_fu_618),
    .data_71_V_read(tmp_data_3_V_18_fu_622),
    .data_72_V_read(tmp_data_0_V_19_fu_626),
    .data_73_V_read(tmp_data_1_V_19_fu_630),
    .data_74_V_read(tmp_data_2_V_19_fu_634),
    .data_75_V_read(tmp_data_3_V_19_fu_638),
    .data_76_V_read(tmp_data_0_V_20_fu_642),
    .data_77_V_read(tmp_data_1_V_20_fu_646),
    .data_78_V_read(tmp_data_2_V_20_fu_650),
    .data_79_V_read(tmp_data_3_V_20_fu_654),
    .data_80_V_read(tmp_data_0_V_21_fu_658),
    .data_81_V_read(tmp_data_1_V_21_fu_662),
    .data_82_V_read(tmp_data_2_V_21_fu_666),
    .data_83_V_read(tmp_data_3_V_21_fu_670),
    .data_84_V_read(tmp_data_0_V_22_fu_674),
    .data_85_V_read(tmp_data_1_V_22_fu_678),
    .data_86_V_read(tmp_data_2_V_22_fu_682),
    .data_87_V_read(tmp_data_3_V_22_fu_686),
    .data_88_V_read(tmp_data_0_V_23_fu_690),
    .data_89_V_read(tmp_data_1_V_23_fu_694),
    .data_90_V_read(tmp_data_2_V_23_fu_698),
    .data_91_V_read(tmp_data_3_V_23_fu_702),
    .data_92_V_read(tmp_data_0_V_24_fu_706),
    .data_93_V_read(tmp_data_1_V_24_fu_710),
    .data_94_V_read(tmp_data_2_V_24_fu_714),
    .data_95_V_read(tmp_data_3_V_24_fu_718),
    .data_96_V_read(tmp_data_0_V_25_fu_722),
    .data_97_V_read(tmp_data_1_V_25_fu_726),
    .data_98_V_read(tmp_data_2_V_25_fu_730),
    .data_99_V_read(tmp_data_3_V_25_fu_734),
    .data_100_V_read(tmp_data_0_V_26_fu_738),
    .data_101_V_read(tmp_data_1_V_26_fu_742),
    .data_102_V_read(tmp_data_2_V_26_fu_746),
    .data_103_V_read(tmp_data_3_V_26_fu_750),
    .data_104_V_read(tmp_data_0_V_27_fu_754),
    .data_105_V_read(tmp_data_1_V_27_fu_758),
    .data_106_V_read(tmp_data_2_V_27_fu_762),
    .data_107_V_read(tmp_data_3_V_27_fu_766),
    .data_108_V_read(tmp_data_0_V_28_fu_770),
    .data_109_V_read(tmp_data_1_V_28_fu_774),
    .data_110_V_read(tmp_data_2_V_28_fu_778),
    .data_111_V_read(tmp_data_3_V_28_fu_782),
    .data_112_V_read(tmp_data_0_V_29_fu_786),
    .data_113_V_read(tmp_data_1_V_29_fu_790),
    .data_114_V_read(tmp_data_2_V_29_fu_794),
    .data_115_V_read(tmp_data_3_V_29_fu_798),
    .data_116_V_read(tmp_data_0_V_30_fu_802),
    .data_117_V_read(tmp_data_1_V_30_fu_806),
    .data_118_V_read(tmp_data_2_V_30_fu_810),
    .data_119_V_read(tmp_data_3_V_30_fu_814),
    .data_120_V_read(tmp_data_0_V_31_fu_818),
    .data_121_V_read(tmp_data_1_V_31_fu_822),
    .data_122_V_read(tmp_data_2_V_31_fu_826),
    .data_123_V_read(tmp_data_3_V_31_fu_830),
    .data_124_V_read(tmp_data_0_V_32_fu_834),
    .data_125_V_read(tmp_data_1_V_32_fu_838),
    .data_126_V_read(tmp_data_2_V_32_fu_842),
    .data_127_V_read(tmp_data_3_V_32_fu_846),
    .data_128_V_read(tmp_data_0_V_33_fu_850),
    .data_129_V_read(tmp_data_1_V_33_fu_854),
    .data_130_V_read(tmp_data_2_V_33_fu_858),
    .data_131_V_read(tmp_data_3_V_33_fu_862),
    .data_132_V_read(tmp_data_0_V_34_fu_866),
    .data_133_V_read(tmp_data_1_V_34_fu_870),
    .data_134_V_read(tmp_data_2_V_34_fu_874),
    .data_135_V_read(tmp_data_3_V_34_fu_878),
    .data_136_V_read(tmp_data_0_V_35_fu_882),
    .data_137_V_read(tmp_data_1_V_35_fu_886),
    .data_138_V_read(tmp_data_2_V_35_fu_890),
    .data_139_V_read(tmp_data_3_V_35_fu_894),
    .data_140_V_read(tmp_data_0_V_36_fu_898),
    .data_141_V_read(tmp_data_1_V_36_fu_902),
    .data_142_V_read(tmp_data_2_V_36_fu_906),
    .data_143_V_read(tmp_data_3_V_36_fu_910),
    .ap_return_0(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_0),
    .ap_return_1(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_1),
    .ap_return_2(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_2),
    .ap_return_3(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_3),
    .ap_return_4(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_4),
    .ap_return_5(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_5),
    .ap_return_6(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_6),
    .ap_return_7(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_7),
    .ap_return_8(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_8),
    .ap_return_9(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_9),
    .ap_return_10(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_10),
    .ap_return_11(grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_11)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op634 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_start_reg <= 1'b1;
        end else if ((grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_ready == 1'b1)) begin
            grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln36_reg_3364 == 1'd0))) begin
        i_in_0_reg_966 <= i_in_reg_3368;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_in_0_reg_966 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_in_reg_3368 <= i_in_fu_1134_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln36_reg_3364 <= icmp_ln36_fu_1128_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_data_0_V37_reg_4093 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_0;
        tmp_data_10_V_reg_4143 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_10;
        tmp_data_11_V_reg_4148 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_11;
        tmp_data_1_V37_reg_4098 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_1;
        tmp_data_2_V37_reg_4103 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_2;
        tmp_data_3_V37_reg_4108 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_3;
        tmp_data_4_V_reg_4113 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_4;
        tmp_data_5_V_reg_4118 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_5;
        tmp_data_6_V_reg_4123 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_6;
        tmp_data_7_V_reg_4128 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_7;
        tmp_data_8_V_reg_4133 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_8;
        tmp_data_9_V_reg_4138 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_return_9;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd9))) begin
        tmp_data_0_V_10_fu_482 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_10_fu_486 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_10_fu_490 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_10_fu_494 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd10))) begin
        tmp_data_0_V_11_fu_498 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_11_fu_502 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_11_fu_506 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_11_fu_510 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd11))) begin
        tmp_data_0_V_12_fu_514 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_12_fu_518 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_12_fu_522 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_12_fu_526 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd12))) begin
        tmp_data_0_V_13_fu_530 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_13_fu_534 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_13_fu_538 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_13_fu_542 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd13))) begin
        tmp_data_0_V_14_fu_546 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_14_fu_550 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_14_fu_554 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_14_fu_558 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd14))) begin
        tmp_data_0_V_15_fu_562 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_15_fu_566 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_15_fu_570 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_15_fu_574 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd15))) begin
        tmp_data_0_V_16_fu_578 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_16_fu_582 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_16_fu_586 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_16_fu_590 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd16))) begin
        tmp_data_0_V_17_fu_594 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_17_fu_598 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_17_fu_602 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_17_fu_606 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd17))) begin
        tmp_data_0_V_18_fu_610 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_18_fu_614 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_18_fu_618 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_18_fu_622 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd18))) begin
        tmp_data_0_V_19_fu_626 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_19_fu_630 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_19_fu_634 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_19_fu_638 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd19))) begin
        tmp_data_0_V_20_fu_642 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_20_fu_646 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_20_fu_650 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_20_fu_654 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd20))) begin
        tmp_data_0_V_21_fu_658 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_21_fu_662 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_21_fu_666 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_21_fu_670 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd21))) begin
        tmp_data_0_V_22_fu_674 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_22_fu_678 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_22_fu_682 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_22_fu_686 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd22))) begin
        tmp_data_0_V_23_fu_690 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_23_fu_694 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_23_fu_698 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_23_fu_702 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd23))) begin
        tmp_data_0_V_24_fu_706 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_24_fu_710 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_24_fu_714 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_24_fu_718 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd24))) begin
        tmp_data_0_V_25_fu_722 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_25_fu_726 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_25_fu_730 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_25_fu_734 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd25))) begin
        tmp_data_0_V_26_fu_738 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_26_fu_742 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_26_fu_746 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_26_fu_750 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd26))) begin
        tmp_data_0_V_27_fu_754 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_27_fu_758 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_27_fu_762 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_27_fu_766 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd27))) begin
        tmp_data_0_V_28_fu_770 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_28_fu_774 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_28_fu_778 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_28_fu_782 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd28))) begin
        tmp_data_0_V_29_fu_786 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_29_fu_790 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_29_fu_794 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_29_fu_798 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd1))) begin
        tmp_data_0_V_2_fu_354 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_2_fu_358 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_2_fu_362 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_2_fu_366 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd29))) begin
        tmp_data_0_V_30_fu_802 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_30_fu_806 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_30_fu_810 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_30_fu_814 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd30))) begin
        tmp_data_0_V_31_fu_818 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_31_fu_822 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_31_fu_826 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_31_fu_830 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd31))) begin
        tmp_data_0_V_32_fu_834 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_32_fu_838 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_32_fu_842 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_32_fu_846 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd32))) begin
        tmp_data_0_V_33_fu_850 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_33_fu_854 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_33_fu_858 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_33_fu_862 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd33))) begin
        tmp_data_0_V_34_fu_866 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_34_fu_870 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_34_fu_874 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_34_fu_878 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd34))) begin
        tmp_data_0_V_35_fu_882 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_35_fu_886 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_35_fu_890 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_35_fu_894 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & ((i_in_0_reg_966 == 6'd35) | ((i_in_0_reg_966 == 6'd36) | ((i_in_0_reg_966 == 6'd37) | ((i_in_0_reg_966 == 6'd38) | ((i_in_0_reg_966 == 6'd39) | ((i_in_0_reg_966 == 6'd40) | ((i_in_0_reg_966 == 6'd41) | ((i_in_0_reg_966 == 6'd42) | ((i_in_0_reg_966 == 6'd43) | ((i_in_0_reg_966 == 6'd44) | ((i_in_0_reg_966 == 6'd45) | ((i_in_0_reg_966 == 6'd46) | ((i_in_0_reg_966 == 6'd47) | ((i_in_0_reg_966 == 6'd48) | ((i_in_0_reg_966 == 6'd49) | ((i_in_0_reg_966 == 6'd50) | ((i_in_0_reg_966 == 6'd51) | ((i_in_0_reg_966 == 6'd52) | ((i_in_0_reg_966 == 6'd53) | ((i_in_0_reg_966 == 6'd54) | ((i_in_0_reg_966 == 6'd55) | ((i_in_0_reg_966 == 6'd56) | ((i_in_0_reg_966 == 6'd57) | ((i_in_0_reg_966 == 6'd58) | ((i_in_0_reg_966 == 6'd59) | ((i_in_0_reg_966 == 6'd60) | ((i_in_0_reg_966 == 6'd61) | ((i_in_0_reg_966 == 6'd62) | (i_in_0_reg_966 == 6'd63))))))))))))))))))))))))))))))) begin
        tmp_data_0_V_36_fu_898 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_36_fu_902 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_36_fu_906 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_36_fu_910 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd2))) begin
        tmp_data_0_V_3_fu_370 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_3_fu_374 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_3_fu_378 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_3_fu_382 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd3))) begin
        tmp_data_0_V_4_fu_386 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_4_fu_390 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_4_fu_394 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_4_fu_398 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd4))) begin
        tmp_data_0_V_5_fu_402 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_5_fu_406 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_5_fu_410 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_5_fu_414 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd5))) begin
        tmp_data_0_V_6_fu_418 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_6_fu_422 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_6_fu_426 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_6_fu_430 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd6))) begin
        tmp_data_0_V_7_fu_434 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_7_fu_438 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_7_fu_442 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_7_fu_446 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd7))) begin
        tmp_data_0_V_8_fu_450 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_8_fu_454 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_8_fu_458 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_8_fu_462 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd8))) begin
        tmp_data_0_V_9_fu_466 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_9_fu_470 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_9_fu_474 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_9_fu_478 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_966 == 6'd0))) begin
        tmp_data_0_V_fu_338 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_fu_342 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_fu_346 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_fu_350 <= data_stream_V_data_3_V_dout;
    end
end

always @ (*) begin
    if ((icmp_ln36_fu_1128_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op634 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_3364 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_in_0_phi_fu_970_p4 = i_in_reg_3368;
    end else begin
        ap_phi_mux_i_in_0_phi_fu_970_p4 = i_in_0_reg_966;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_0_V_blk_n = data_stream_V_data_0_V_empty_n;
    end else begin
        data_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_0_V_read = 1'b1;
    end else begin
        data_stream_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_1_V_blk_n = data_stream_V_data_1_V_empty_n;
    end else begin
        data_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_1_V_read = 1'b1;
    end else begin
        data_stream_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_2_V_blk_n = data_stream_V_data_2_V_empty_n;
    end else begin
        data_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_2_V_read = 1'b1;
    end else begin
        data_stream_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_3_V_blk_n = data_stream_V_data_3_V_empty_n;
    end else begin
        data_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_3_V_read = 1'b1;
    end else begin
        data_stream_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op634 == 1'b1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_0_V_blk_n = res_stream_V_data_0_V_full_n;
    end else begin
        res_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op634 == 1'b1))) begin
        res_stream_V_data_0_V_write = 1'b1;
    end else begin
        res_stream_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_10_V_blk_n = res_stream_V_data_10_V_full_n;
    end else begin
        res_stream_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op634 == 1'b1))) begin
        res_stream_V_data_10_V_write = 1'b1;
    end else begin
        res_stream_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_11_V_blk_n = res_stream_V_data_11_V_full_n;
    end else begin
        res_stream_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op634 == 1'b1))) begin
        res_stream_V_data_11_V_write = 1'b1;
    end else begin
        res_stream_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_1_V_blk_n = res_stream_V_data_1_V_full_n;
    end else begin
        res_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op634 == 1'b1))) begin
        res_stream_V_data_1_V_write = 1'b1;
    end else begin
        res_stream_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_2_V_blk_n = res_stream_V_data_2_V_full_n;
    end else begin
        res_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op634 == 1'b1))) begin
        res_stream_V_data_2_V_write = 1'b1;
    end else begin
        res_stream_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_3_V_blk_n = res_stream_V_data_3_V_full_n;
    end else begin
        res_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op634 == 1'b1))) begin
        res_stream_V_data_3_V_write = 1'b1;
    end else begin
        res_stream_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_4_V_blk_n = res_stream_V_data_4_V_full_n;
    end else begin
        res_stream_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op634 == 1'b1))) begin
        res_stream_V_data_4_V_write = 1'b1;
    end else begin
        res_stream_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_5_V_blk_n = res_stream_V_data_5_V_full_n;
    end else begin
        res_stream_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op634 == 1'b1))) begin
        res_stream_V_data_5_V_write = 1'b1;
    end else begin
        res_stream_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_6_V_blk_n = res_stream_V_data_6_V_full_n;
    end else begin
        res_stream_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op634 == 1'b1))) begin
        res_stream_V_data_6_V_write = 1'b1;
    end else begin
        res_stream_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_7_V_blk_n = res_stream_V_data_7_V_full_n;
    end else begin
        res_stream_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op634 == 1'b1))) begin
        res_stream_V_data_7_V_write = 1'b1;
    end else begin
        res_stream_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_8_V_blk_n = res_stream_V_data_8_V_full_n;
    end else begin
        res_stream_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op634 == 1'b1))) begin
        res_stream_V_data_8_V_write = 1'b1;
    end else begin
        res_stream_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        res_stream_V_data_9_V_blk_n = res_stream_V_data_9_V_full_n;
    end else begin
        res_stream_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op634 == 1'b1))) begin
        res_stream_V_data_9_V_write = 1'b1;
    end else begin
        res_stream_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_fu_1128_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_fu_1128_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op634 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((io_acc_block_signal_op321 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((io_acc_block_signal_op321 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (io_acc_block_signal_op321 == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_start = grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_978_ap_start_reg;

assign i_in_fu_1134_p2 = (ap_phi_mux_i_in_0_phi_fu_970_p4 + 6'd1);

assign icmp_ln36_fu_1128_p2 = ((ap_phi_mux_i_in_0_phi_fu_970_p4 == 6'd36) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op321 = (data_stream_V_data_3_V_empty_n & data_stream_V_data_2_V_empty_n & data_stream_V_data_1_V_empty_n & data_stream_V_data_0_V_empty_n);

assign io_acc_block_signal_op634 = (res_stream_V_data_9_V_full_n & res_stream_V_data_8_V_full_n & res_stream_V_data_7_V_full_n & res_stream_V_data_6_V_full_n & res_stream_V_data_5_V_full_n & res_stream_V_data_4_V_full_n & res_stream_V_data_3_V_full_n & res_stream_V_data_2_V_full_n & res_stream_V_data_1_V_full_n & res_stream_V_data_11_V_full_n & res_stream_V_data_10_V_full_n & res_stream_V_data_0_V_full_n);

assign res_stream_V_data_0_V_din = tmp_data_0_V37_reg_4093;

assign res_stream_V_data_10_V_din = tmp_data_10_V_reg_4143;

assign res_stream_V_data_11_V_din = tmp_data_11_V_reg_4148;

assign res_stream_V_data_1_V_din = tmp_data_1_V37_reg_4098;

assign res_stream_V_data_2_V_din = tmp_data_2_V37_reg_4103;

assign res_stream_V_data_3_V_din = tmp_data_3_V37_reg_4108;

assign res_stream_V_data_4_V_din = tmp_data_4_V_reg_4113;

assign res_stream_V_data_5_V_din = tmp_data_5_V_reg_4118;

assign res_stream_V_data_6_V_din = tmp_data_6_V_reg_4123;

assign res_stream_V_data_7_V_din = tmp_data_7_V_reg_4128;

assign res_stream_V_data_8_V_din = tmp_data_8_V_reg_4133;

assign res_stream_V_data_9_V_din = tmp_data_9_V_reg_4138;

assign start_out = real_start;

endmodule //dense_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_12u_config6_s
