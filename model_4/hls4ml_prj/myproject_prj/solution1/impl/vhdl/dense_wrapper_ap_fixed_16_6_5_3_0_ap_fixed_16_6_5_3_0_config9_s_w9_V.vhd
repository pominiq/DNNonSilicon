-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_rom is 
    generic(
             DWIDTH     : integer := 76; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111011000011111111000001111111111101001010000000001000001011111111111000001", 
    1 => "1110100001001111110001111011111111010111111100000010011001101111101110100110", 
    2 => "1110010101001111110110110010111111100100101100000010010001010000000010110100", 
    3 => "1100110000100000000100000010000000001001101111111110110110000000001010101111", 
    4 => "0000001100111111111101000001000000010111100011111110110100110000000001001110", 
    5 => "1101010010010000000100000111111111101001011000000000110000000000000000000010", 
    6 => "0001100011001111111111000111111111101110101000000000001011111111110100101101", 
    7 => "1111000110111111111111110101111111101001111000000000000011110000000100010010", 
    8 => "0000000001111111111100110010111111100111010100000000100011000000000000000111", 
    9 => "1110100001111111110101111100111111101011000111111110110010110000000100011010", 
    10 => "1101110011000000010010100010111111010101011111111110000111101111110011111010", 
    11 => "1100000010100000000101011111000000001010101011111111001110111111111110000110", 
    12 => "1111111100101111111010101111000000000011001011111111000010011111111110011010", 
    13 => "1110111101000000001110010110000000001010011011111100010011111111110010111000", 
    14 => "1111110001001111111100101000000001000110010011111110111001110000000101000001", 
    15 => "0010011001101111111100011000111111011001111111111101110110000000000011100011", 
    16 => "1111101001001111110100110111000000011001000111111101110001101111111001001011", 
    17 => "1110110010101111110111100011000000011001011111111111001111111111110001100110", 
    18 => "1100001101001111110101001100111110111001001000000000001110101111111111111101", 
    19 => "0000101000001111111100001101111111000101100000000010010100101111110100111010", 
    20 => "0010010010000000000111001001111111110100001100000010111110010000000101011100", 
    21 => "1110100100001111111001001001000000001001010011111110000101101111111010001011", 
    22 => "0000011111000000000111110101111111011010011111111110000111111111111111111101", 
    23 => "0001010000111111111110010000000000000111100011111111111110111111111011000010", 
    24 => "1110111110010000000011000011111111110011110011111110001000100000000110010010", 
    25 => "1111000111110000000001101010111111111011011100000001001101100000001001100011", 
    26 => "1101111000110000000010000111111111011101100100000011000000111111111110000111", 
    27 => "1110000110111111111110101101111111011100000011111111100001110000001110011100", 
    28 => "1110000011010000000100101100000000000011101100000001110011111111111101011100", 
    29 => "0001011011101111111000000101000000100010011011111111111100111111111111110111", 
    30 => "1101011101101111111011110110000000100110110100000001001011110000000000011001", 
    31 => "0001100010100000000100110010000000010101110100000001011111011111111111110111", 
    32 => "1110010010000000000100011010111111100101100000000001101011110000000111101000", 
    33 => "1100111101000000000011101011111111011101000000000001101100100000001000010011", 
    34 => "0000101111010000000100101001000000001000100011111111010111100000000110011110", 
    35 => "0010100001011111111101000100111111101101010111111100110111101111111100101111", 
    36 => "1110100110110000000100101010000000000011000111111110100010101111110110100111", 
    37 => "0001010100100000000010011110000000001001110111111101111001011111111011000111", 
    38 => "1111011100111111110011011110000000010100110111111110100000000000000000000001", 
    39 => "0001110111000000000110011111111111111110001100000000000110011111110100011011", 
    40 => "0000101001000000000000000111111111010010110100000000000001101111110110111000", 
    41 => "1101110100100000000010110101000000110100010011111101011001011111110010001100", 
    42 => "1111110101110000000101000011000000001100101111111111010110001111111100110111", 
    43 => "1111101000101111110111010110111111011010100011111101010010000000000001000010", 
    44 => "0000010100111111111011111101111111110000010100000010110111010000001010011011", 
    45 => "1100101101110000000011100100000001000001010011111101100111100000000100011011", 
    46 => "1011101101000000001011101000111111010110100011111111010101000000000001001011", 
    47 => "0000111101001111111101010111000000011010010111111111001001101111111100100111", 
    48 => "0010010011001111111101101101000000010010101000000000101001000000000011100101", 
    49 => "0001101101010000000101001110000000010010001111111111110100010000000101100011", 
    50 => "1110011100011111110111011111000000011000000100000010010100010000000111010111", 
    51 => "1101101011100000000110101110111110111101111111111101110110100000001000110010", 
    52 => "1101111001101111110001100000000000000101011111111111101111111111111100010010", 
    53 => "1111100011100000000001101011000000001001100100000001011010110000000110001000", 
    54 => "1111011100111111111100010001111111110001010111111110010101100000000100001011", 
    55 => "0000011110111111110111100000111111101010111011111111100011111111111000100101", 
    56 => "1111010000001111111101110111000000000001000100000010100001101111111011000011", 
    57 => "0000100010101111111100001000000000001001111111111110110101011111111101100101", 
    58 => "1101111001001111101101010001111111011011000011111110101010010000000000001011", 
    59 => "1111011110110000000001111010000000001110000111111110000010111111111110010100", 
    60 => "1110110000011111111111111110111111111110111000000000010010000000000100011110", 
    61 => "1111010110110000001100101000111111101111011111111111001010011111111111100111", 
    62 => "0001110101010000000011011100111111010110111011111101010000110000000100000010", 
    63 => "1101101010100000000001011100111111111010011011111110011111101111110111010100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V is
    generic (
        DataWidth : INTEGER := 76;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V is
    component dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_rom_U :  component dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


