// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_H__
#define __dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 76;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_ram) {
        ram[0] = "0b1111011000011111111000001111111111101001010000000001000001011111111111000001";
        ram[1] = "0b1110100001001111110001111011111111010111111100000010011001101111101110100110";
        ram[2] = "0b1110010101001111110110110010111111100100101100000010010001010000000010110100";
        ram[3] = "0b1100110000100000000100000010000000001001101111111110110110000000001010101111";
        ram[4] = "0b0000001100111111111101000001000000010111100011111110110100110000000001001110";
        ram[5] = "0b1101010010010000000100000111111111101001011000000000110000000000000000000010";
        ram[6] = "0b0001100011001111111111000111111111101110101000000000001011111111110100101101";
        ram[7] = "0b1111000110111111111111110101111111101001111000000000000011110000000100010010";
        ram[8] = "0b0000000001111111111100110010111111100111010100000000100011000000000000000111";
        ram[9] = "0b1110100001111111110101111100111111101011000111111110110010110000000100011010";
        ram[10] = "0b1101110011000000010010100010111111010101011111111110000111101111110011111010";
        ram[11] = "0b1100000010100000000101011111000000001010101011111111001110111111111110000110";
        ram[12] = "0b1111111100101111111010101111000000000011001011111111000010011111111110011010";
        ram[13] = "0b1110111101000000001110010110000000001010011011111100010011111111110010111000";
        ram[14] = "0b1111110001001111111100101000000001000110010011111110111001110000000101000001";
        ram[15] = "0b0010011001101111111100011000111111011001111111111101110110000000000011100011";
        ram[16] = "0b1111101001001111110100110111000000011001000111111101110001101111111001001011";
        ram[17] = "0b1110110010101111110111100011000000011001011111111111001111111111110001100110";
        ram[18] = "0b1100001101001111110101001100111110111001001000000000001110101111111111111101";
        ram[19] = "0b0000101000001111111100001101111111000101100000000010010100101111110100111010";
        ram[20] = "0b0010010010000000000111001001111111110100001100000010111110010000000101011100";
        ram[21] = "0b1110100100001111111001001001000000001001010011111110000101101111111010001011";
        ram[22] = "0b0000011111000000000111110101111111011010011111111110000111111111111111111101";
        ram[23] = "0b0001010000111111111110010000000000000111100011111111111110111111111011000010";
        ram[24] = "0b1110111110010000000011000011111111110011110011111110001000100000000110010010";
        ram[25] = "0b1111000111110000000001101010111111111011011100000001001101100000001001100011";
        ram[26] = "0b1101111000110000000010000111111111011101100100000011000000111111111110000111";
        ram[27] = "0b1110000110111111111110101101111111011100000011111111100001110000001110011100";
        ram[28] = "0b1110000011010000000100101100000000000011101100000001110011111111111101011100";
        ram[29] = "0b0001011011101111111000000101000000100010011011111111111100111111111111110111";
        ram[30] = "0b1101011101101111111011110110000000100110110100000001001011110000000000011001";
        ram[31] = "0b0001100010100000000100110010000000010101110100000001011111011111111111110111";
        ram[32] = "0b1110010010000000000100011010111111100101100000000001101011110000000111101000";
        ram[33] = "0b1100111101000000000011101011111111011101000000000001101100100000001000010011";
        ram[34] = "0b0000101111010000000100101001000000001000100011111111010111100000000110011110";
        ram[35] = "0b0010100001011111111101000100111111101101010111111100110111101111111100101111";
        ram[36] = "0b1110100110110000000100101010000000000011000111111110100010101111110110100111";
        ram[37] = "0b0001010100100000000010011110000000001001110111111101111001011111111011000111";
        ram[38] = "0b1111011100111111110011011110000000010100110111111110100000000000000000000001";
        ram[39] = "0b0001110111000000000110011111111111111110001100000000000110011111110100011011";
        ram[40] = "0b0000101001000000000000000111111111010010110100000000000001101111110110111000";
        ram[41] = "0b1101110100100000000010110101000000110100010011111101011001011111110010001100";
        ram[42] = "0b1111110101110000000101000011000000001100101111111111010110001111111100110111";
        ram[43] = "0b1111101000101111110111010110111111011010100011111101010010000000000001000010";
        ram[44] = "0b0000010100111111111011111101111111110000010100000010110111010000001010011011";
        ram[45] = "0b1100101101110000000011100100000001000001010011111101100111100000000100011011";
        ram[46] = "0b1011101101000000001011101000111111010110100011111111010101000000000001001011";
        ram[47] = "0b0000111101001111111101010111000000011010010111111111001001101111111100100111";
        ram[48] = "0b0010010011001111111101101101000000010010101000000000101001000000000011100101";
        ram[49] = "0b0001101101010000000101001110000000010010001111111111110100010000000101100011";
        ram[50] = "0b1110011100011111110111011111000000011000000100000010010100010000000111010111";
        ram[51] = "0b1101101011100000000110101110111110111101111111111101110110100000001000110010";
        ram[52] = "0b1101111001101111110001100000000000000101011111111111101111111111111100010010";
        ram[53] = "0b1111100011100000000001101011000000001001100100000001011010110000000110001000";
        ram[54] = "0b1111011100111111111100010001111111110001010111111110010101100000000100001011";
        ram[55] = "0b0000011110111111110111100000111111101010111011111111100011111111111000100101";
        ram[56] = "0b1111010000001111111101110111000000000001000100000010100001101111111011000011";
        ram[57] = "0b0000100010101111111100001000000000001001111111111110110101011111111101100101";
        ram[58] = "0b1101111001001111101101010001111111011011000011111110101010010000000000001011";
        ram[59] = "0b1111011110110000000001111010000000001110000111111110000010111111111110010100";
        ram[60] = "0b1110110000011111111111111110111111111110111000000000010010000000000100011110";
        ram[61] = "0b1111010110110000001100101000111111101111011111111111001010011111111111100111";
        ram[62] = "0b0001110101010000000011011100111111010110111011111101010000110000000100000010";
        ram[63] = "0b1101101010100000000001011100111111111010011011111110011111101111110111010100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V) {


static const unsigned DataWidth = 76;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_ram* meminst;


SC_CTOR(dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V) {
meminst = new dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_ram("dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V() {
    delete meminst;
}


};//endmodule
#endif
