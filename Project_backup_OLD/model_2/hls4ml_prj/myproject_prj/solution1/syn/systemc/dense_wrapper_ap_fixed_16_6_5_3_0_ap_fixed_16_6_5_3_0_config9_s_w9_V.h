// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_H__
#define __dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 155;
  static const unsigned AddressRange = 32;
  static const unsigned AddressWidth = 5;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_ram) {
        ram[0] = "0b10111011001000000011000000100000001000100100000000001111000000000000001010000000001000101100000000010110110000000001101011111111110101000111111111010101001";
        ram[1] = "0b11110110010000000001001100111111101010111110000000101101011000000001101000000000001010001001111111001010011000000001011101111111101101110110000000011001010";
        ram[2] = "0b11111000001111111011010100111111110001101000000000001101011000000001101010000000000111011111111110010010100111111101101010000000000010010110000000010011000";
        ram[3] = "0b11010101011000000000111111011111110110100111111111000001101000000011110000011111110110011000000000010011000000000010010001100000001111100101111111000110010";
        ram[4] = "0b00001101101111111101101101100000000001000100000000001011001000000011010001100000010001100111111111000011000111111111101110000000001101001100000000010001100";
        ram[5] = "0b01101010100000000011000000011111101100100000000000000111111000000010110101000000000111011001111111000101101111111000111010011111110010110101111111011001100";
        ram[6] = "0b11001000011111111101000111000000001010011010000000111100011000000001111110000000000001101111111111100000110000000000010000000000000011101110000001011001101";
        ram[7] = "0b00010000110111111111101111100000000110010011111101110101011000000010010000000000000011110001111111111011000111111101101111111111111001101111111111010101111";
        ram[8] = "0b00100001110000000000100011111111111100000101111111001101010111111100001111011111110001011000000001000101111000000001111010111111110111111110000000100111010";
        ram[9] = "0b10100001011111111110100111011111111110111111111111011100011111111001010000000000001110010100000001000100000111111101101001000000000111111001111111000010101";
        ram[10] = "0b00010010100111111011101001100000000101001000000000000011000111111110101010100000010010011011111110101111100000000011111001000000001111000011111111101111101";
        ram[11] = "0b11010111000111111000110001000000001100110001111111000000011111111111000101011111110010000001111111100010111000000000110010011111101110110110000001000100010";
        ram[12] = "0b11001011011111111010100011100000011100100001111111110001111111110010110111000000001010110100000000010011101111111111011001000000100100011111111111001001110";
        ram[13] = "0b11001111011000000000101100111111110110110110000001001100111000000010100001100000000011101001111111110011101111111011001000111111111110100110000000000010010";
        ram[14] = "0b00010100000111111110011001000000000000011111111110000101111111111101010110011111110001001000000001000101001000000011101001000000001001111011111111000010110";
        ram[15] = "0b00110010110111111110110001100000010110111011111110001110100111111110010000111111100101001110000000000000011111111110100100111111101100100111111111111100001";
        ram[16] = "0b00011101011000000011111010011111101010110110000000011010111000000000110101100000000010010001111111110010110111111110000001111111101010101100000000100010111";
        ram[17] = "0b11101001001000000000100101011111101110100110000000011111111000000000100001111111110000000110000000000001010111111101111111100000001100110010000000010110100";
        ram[18] = "0b00001110100111111110000111100000001001101010000001000011011111111011010110111111111011100011111111000011001000000000001000111111111101010110000000100110111";
        ram[19] = "0b11110011011111111100101110011111111011011110000001000111100111111101000110100000001100110001111110101101110111111110010010100000000100100001111111111101101";
        ram[20] = "0b11111101001000000010011000011111111010000110000000010110111000000001100110011111110110111100000000001010100111111111011101100000000010010001111111111101100";
        ram[21] = "0b10111111110000000001100011011111101010001000000001001110100111111110100101111111110001111011111111110110100000000001001111111111100110011010000000101010010";
        ram[22] = "0b11101010001000000001110001000000001110111111111111100110001111111101011010100000000001111111111110000011110000000000111010011111111110101001111111011100011";
        ram[23] = "0b11001110100111111100101001111111110101010001111111000101111000000011001000011111110111011000000000000000000000000010011000100000000011001110000000001100111";
        ram[24] = "0b11001001110000000000000011100000000100101011111111100000001000000001101111011111111011011110000000101110001000000100001101011111111101100010000000010011011";
        ram[25] = "0b00001111110111111110101111100000001011011000000000000110011111111110101010000000000101110101111111010001100000000010001111100000001001000000000000001101000";
        ram[26] = "0b01001001111111111110110000100000000100101001111110100101010000000001110100100000000001100100000000101101111111111001001100100000000111101000000001001001111";
        ram[27] = "0b00101111101111111000110101100000000011110011111111010011111111111101011101100000001100111011111111001101010000000010011101111111110100111101111110111101010";
        ram[28] = "0b11011110110111111110000001000000000010110111111110011011101000000010110101111111111000111100000000011001111111111111010100100000010000111011111111110110011";
        ram[29] = "0b11011110001000000100011111100000000101011111111111011110110111111010000101011111111110010001111110111011011000000010101101000000000100100101111110011000110";
        ram[30] = "0b00000110001111111111110000111111111101111100000000100011100000000011000000111111111101100000000000001100110111111000101101011111111010111011111110111110000";
        ram[31] = "0b10100000111111111011100100111111101010011000000000101100010000000010110100111111100100010010000000011100110000000010110100000000000111011011111110110011011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V) {


static const unsigned DataWidth = 155;
static const unsigned AddressRange = 32;
static const unsigned AddressWidth = 5;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_ram* meminst;


SC_CTOR(dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V) {
meminst = new dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_ram("dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V() {
    delete meminst;
}


};//endmodule
#endif
