-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2d_cl_array_ap_fixed_1u_array_ap_fixed_16_6_5_3_0_4u_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_V_TVALID : IN STD_LOGIC;
    data_V_data_V_TREADY : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC );
end;


architecture behav of conv_2d_cl_array_ap_fixed_1u_array_ap_fixed_16_6_5_3_0_4u_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv16_FF26 : STD_LOGIC_VECTOR (15 downto 0) := "1111111100100110";
    constant ap_const_lv16_FFBD : STD_LOGIC_VECTOR (15 downto 0) := "1111111110111101";
    constant ap_const_lv16_FD92 : STD_LOGIC_VECTOR (15 downto 0) := "1111110110010010";
    constant ap_const_lv16_3C : STD_LOGIC_VECTOR (15 downto 0) := "0000000000111100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_23 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv10_30F : STD_LOGIC_VECTOR (9 downto 0) := "1100001111";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal kernel_data_V_1143 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2144 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sX_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pX_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal outidx_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal outidx_ce0 : STD_LOGIC;
    signal outidx_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal kernel_data_V_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_3145 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal w2_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal w2_V_ce0 : STD_LOGIC;
    signal w2_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buffer_Array_V_0_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_0_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_0_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_1142_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1142_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1142_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_data_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal and_ln289_4_reg_1078 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal w_index52_reg_283 : STD_LOGIC_VECTOR (5 downto 0);
    signal in_index_0_i_i_i_i53_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_0_V_751_reg_305 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_1_V_749_reg_316 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_747_reg_327 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_745_reg_338 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_reg_349 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_reg_368 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_1_V_reg_387 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_0_V_2_reg_406 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_0_V_reg_1000 : STD_LOGIC_VECTOR (15 downto 0);
    signal DataOut_V_8_reg_1005 : STD_LOGIC_VECTOR (15 downto 0);
    signal DataOut_V_reg_1010 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_2144_load_reg_1015 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_5_load_reg_1020 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_8_load_reg_1025 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln79_fu_479_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln79_reg_1030 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_iw_fu_491_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sX_3_load_reg_1046 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln289_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln289_reg_1051 : STD_LOGIC_VECTOR (0 downto 0);
    signal sY_3_load_reg_1056 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln289_4_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln289_4_reg_1061 : STD_LOGIC_VECTOR (0 downto 0);
    signal pY_3_load_reg_1066 : STD_LOGIC_VECTOR (31 downto 0);
    signal pX_3_load_reg_1072 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln289_4_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal w_index_fu_657_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_index_reg_1092 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln129_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln129_reg_1097 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln148_fu_892_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal indvar_flatten54_reg_260 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal io_acc_block_signal_op150 : STD_LOGIC;
    signal ap_block_state7 : BOOLEAN;
    signal icmp_ln79_fu_987_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_iw_0_i_i_i_i_reg_272 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln194_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_w_index52_phi_fu_287_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_tmp_data_0_V_2_phi_fu_411_p8 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_tmp_data_1_V_phi_fu_392_p8 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_tmp_data_2_V_phi_fu_373_p8 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_tmp_data_3_V_phi_fu_354_p8 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_0_V_fu_870_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp1_iter1_tmp_data_3_V_reg_349 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp1_iter1_tmp_data_2_V_reg_368 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp1_iter1_tmp_data_1_V_reg_387 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp1_iter1_tmp_data_0_V_2_reg_406 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln323_fu_967_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_storemerge_i_i_phi_fu_428_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln313_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln317_fu_946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln133_fu_651_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln203_fu_501_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln201_fu_497_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln203_12_fu_520_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln203_13_fu_539_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln328_fu_921_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln321_fu_951_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln326_fu_905_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_597_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_7_fu_617_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln289_5_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln289_6_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln289_3_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln289_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln139_fu_669_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln19_7_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_6_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_5_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_4_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_3_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_2_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_1_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_fu_733_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln19_1_fu_747_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln19_1_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_2_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_2_fu_761_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln19_3_fu_775_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln19_3_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_4_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_4_fu_789_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln19_5_fu_803_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln19_5_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_6_fu_825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_6_fu_817_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln19_7_fu_831_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_993_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_21_fu_856_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln5_fu_847_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_index_fu_880_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln148_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln328_fu_916_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln323_fu_962_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal regslice_both_data_V_data_V_U_apdone_blk : STD_LOGIC;
    signal data_V_data_V_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_data_V_TVALID_int : STD_LOGIC;
    signal data_V_data_V_TREADY_int : STD_LOGIC;
    signal regslice_both_data_V_data_V_U_ack_in : STD_LOGIC;
    signal ap_condition_239 : BOOLEAN;
    signal ap_condition_345 : BOOLEAN;

    component myproject_mux_42_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_mul_mul_12s_16s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component conv_2d_cl_array_ap_fixed_1u_array_ap_fixed_16_6_5_3_0_4u_config2_s_outidx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component conv_2d_cl_array_ap_fixed_1u_array_ap_fixed_16_6_5_3_0_4u_config2_s_w2_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component conv_2d_cl_array_ap_fixed_1u_array_ap_fixed_16_6_5_3_0_4u_config2_s_line_buffbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    outidx_U : component conv_2d_cl_array_ap_fixed_1u_array_ap_fixed_16_6_5_3_0_4u_config2_s_outidx
    generic map (
        DataWidth => 2,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => outidx_address0,
        ce0 => outidx_ce0,
        q0 => outidx_q0);

    w2_V_U : component conv_2d_cl_array_ap_fixed_1u_array_ap_fixed_16_6_5_3_0_4u_config2_s_w2_V
    generic map (
        DataWidth => 12,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w2_V_address0,
        ce0 => w2_V_ce0,
        q0 => w2_V_q0);

    line_buffer_Array_V_0_0_U : component conv_2d_cl_array_ap_fixed_1u_array_ap_fixed_16_6_5_3_0_4u_config2_s_line_buffbkb
    generic map (
        DataWidth => 16,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1B,
        ce0 => line_buffer_Array_V_0_0_ce0,
        we0 => line_buffer_Array_V_0_0_we0,
        d0 => data_V_data_V_TDATA_int,
        q0 => line_buffer_Array_V_0_0_q0);

    line_buffer_Array_V_1142_0_U : component conv_2d_cl_array_ap_fixed_1u_array_ap_fixed_16_6_5_3_0_4u_config2_s_line_buffbkb
    generic map (
        DataWidth => 16,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1B,
        ce0 => line_buffer_Array_V_1142_0_ce0,
        we0 => line_buffer_Array_V_1142_0_we0,
        d0 => line_buffer_Array_V_0_0_q0,
        q0 => line_buffer_Array_V_1142_0_q0);

    myproject_mux_42_16_1_1_U1 : component myproject_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_data_0_V_751_reg_305,
        din1 => tmp_data_1_V_749_reg_316,
        din2 => tmp_data_2_V_747_reg_327,
        din3 => tmp_data_3_V_745_reg_338,
        din4 => outidx_q0,
        dout => tmp_21_fu_856_p6);

    myproject_mul_mul_12s_16s_26_1_1_U2 : component myproject_mul_mul_12s_16s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        dout_WIDTH => 26)
    port map (
        din0 => w2_V_q0,
        din1 => select_ln19_7_fu_831_p3,
        dout => r_V_fu_993_p2);

    regslice_both_data_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => data_V_data_V_TDATA,
        vld_in => data_V_data_V_TVALID,
        ack_in => regslice_both_data_V_data_V_U_ack_in,
        data_out => data_V_data_V_TDATA_int,
        vld_out => data_V_data_V_TVALID_int,
        ack_out => data_V_data_V_TREADY_int,
        apdone_blk => regslice_both_data_V_data_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((io_acc_block_signal_op150 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1078))) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln79_fu_987_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln129_fu_663_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_4_fu_645_p2))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_4_fu_645_p2))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_iw_0_i_i_i_i_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln194_fu_485_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_iw_0_i_i_i_i_reg_272 <= i_iw_fu_491_p2;
            elsif (((data_V_data_V_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_iw_0_i_i_i_i_reg_272 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    in_index_0_i_i_i_i53_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_reg_1097 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                in_index_0_i_i_i_i53_reg_294 <= select_ln148_fu_892_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_4_fu_645_p2))) then 
                in_index_0_i_i_i_i53_reg_294 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten54_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((io_acc_block_signal_op150 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1078))) and (icmp_ln79_fu_987_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                indvar_flatten54_reg_260 <= add_ln79_reg_1030;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten54_reg_260 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    pX_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_239)) then
                if ((icmp_ln313_fu_900_p2 = ap_const_lv1_1)) then 
                    pX_3 <= ap_const_lv32_0;
                elsif ((icmp_ln313_fu_900_p2 = ap_const_lv1_0)) then 
                    pX_3 <= add_ln326_fu_905_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_345)) then
                if ((icmp_ln317_fu_946_p2 = ap_const_lv1_1)) then 
                    pY_3 <= ap_const_lv32_0;
                elsif ((icmp_ln317_fu_946_p2 = ap_const_lv1_0)) then 
                    pY_3 <= add_ln321_fu_951_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_239)) then
                if ((icmp_ln313_fu_900_p2 = ap_const_lv1_1)) then 
                    sX_3 <= ap_const_lv32_0;
                elsif ((icmp_ln313_fu_900_p2 = ap_const_lv1_0)) then 
                    sX_3 <= select_ln328_fu_921_p3;
                end if;
            end if; 
        end if;
    end process;

    tmp_data_0_V_2_reg_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((outidx_q0 = ap_const_lv2_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                tmp_data_0_V_2_reg_406 <= acc_0_V_fu_870_p2;
            elsif ((((outidx_q0 = ap_const_lv2_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((outidx_q0 = ap_const_lv2_2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((outidx_q0 = ap_const_lv2_3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
                tmp_data_0_V_2_reg_406 <= tmp_data_0_V_751_reg_305;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                tmp_data_0_V_2_reg_406 <= ap_phi_reg_pp1_iter1_tmp_data_0_V_2_reg_406;
            end if; 
        end if;
    end process;

    tmp_data_0_V_751_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_reg_1097 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                tmp_data_0_V_751_reg_305 <= ap_phi_mux_tmp_data_0_V_2_phi_fu_411_p8;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_4_fu_645_p2))) then 
                tmp_data_0_V_751_reg_305 <= ap_const_lv16_FF26;
            end if; 
        end if;
    end process;

    tmp_data_1_V_749_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_reg_1097 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                tmp_data_1_V_749_reg_316 <= ap_phi_mux_tmp_data_1_V_phi_fu_392_p8;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_4_fu_645_p2))) then 
                tmp_data_1_V_749_reg_316 <= ap_const_lv16_FFBD;
            end if; 
        end if;
    end process;

    tmp_data_1_V_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((outidx_q0 = ap_const_lv2_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                tmp_data_1_V_reg_387 <= acc_0_V_fu_870_p2;
            elsif ((((outidx_q0 = ap_const_lv2_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((outidx_q0 = ap_const_lv2_2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((outidx_q0 = ap_const_lv2_3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
                tmp_data_1_V_reg_387 <= tmp_data_1_V_749_reg_316;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                tmp_data_1_V_reg_387 <= ap_phi_reg_pp1_iter1_tmp_data_1_V_reg_387;
            end if; 
        end if;
    end process;

    tmp_data_2_V_747_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_reg_1097 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                tmp_data_2_V_747_reg_327 <= ap_phi_mux_tmp_data_2_V_phi_fu_373_p8;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_4_fu_645_p2))) then 
                tmp_data_2_V_747_reg_327 <= ap_const_lv16_FD92;
            end if; 
        end if;
    end process;

    tmp_data_2_V_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((outidx_q0 = ap_const_lv2_2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                tmp_data_2_V_reg_368 <= acc_0_V_fu_870_p2;
            elsif ((((outidx_q0 = ap_const_lv2_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((outidx_q0 = ap_const_lv2_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((outidx_q0 = ap_const_lv2_3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
                tmp_data_2_V_reg_368 <= tmp_data_2_V_747_reg_327;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                tmp_data_2_V_reg_368 <= ap_phi_reg_pp1_iter1_tmp_data_2_V_reg_368;
            end if; 
        end if;
    end process;

    tmp_data_3_V_745_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_reg_1097 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                tmp_data_3_V_745_reg_338 <= ap_phi_mux_tmp_data_3_V_phi_fu_354_p8;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_4_fu_645_p2))) then 
                tmp_data_3_V_745_reg_338 <= ap_const_lv16_3C;
            end if; 
        end if;
    end process;

    tmp_data_3_V_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((outidx_q0 = ap_const_lv2_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((outidx_q0 = ap_const_lv2_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((outidx_q0 = ap_const_lv2_2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
                tmp_data_3_V_reg_349 <= tmp_data_3_V_745_reg_338;
            elsif (((outidx_q0 = ap_const_lv2_3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                tmp_data_3_V_reg_349 <= acc_0_V_fu_870_p2;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                tmp_data_3_V_reg_349 <= ap_phi_reg_pp1_iter1_tmp_data_3_V_reg_349;
            end if; 
        end if;
    end process;

    w_index52_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_reg_1097 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                w_index52_reg_283 <= w_index_reg_1092;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_4_fu_645_p2))) then 
                w_index52_reg_283 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_data_V_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                DataOut_V_8_reg_1005 <= line_buffer_Array_V_0_0_q0;
                DataOut_V_reg_1010 <= line_buffer_Array_V_1142_0_q0;
                add_ln79_reg_1030 <= add_ln79_fu_479_p2;
                kernel_data_V_2144_load_reg_1015 <= kernel_data_V_2144;
                kernel_data_V_5_load_reg_1020 <= kernel_data_V_5;
                kernel_data_V_8_load_reg_1025 <= kernel_data_V_8;
                tmp_data_0_V_reg_1000 <= data_V_data_V_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                and_ln289_4_reg_1078 <= and_ln289_4_fu_645_p2;
                icmp_ln289_4_reg_1061 <= icmp_ln289_4_fu_587_p2;
                icmp_ln289_reg_1051 <= icmp_ln289_fu_577_p2;
                kernel_data_V_2144 <= DataOut_V_reg_1010;
                kernel_data_V_5 <= DataOut_V_8_reg_1005;
                kernel_data_V_8 <= tmp_data_0_V_reg_1000;
                pX_3_load_reg_1072 <= pX_3;
                pY_3_load_reg_1066 <= pY_3;
                sX_3_load_reg_1046 <= sX_3;
                sY_3_load_reg_1056 <= sY_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln129_reg_1097 <= icmp_ln129_fu_663_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln201_fu_497_p1 = ap_const_lv1_0) and (icmp_ln194_fu_485_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_data_V_0 <= select_ln203_fu_501_p3;
                kernel_data_V_3145 <= select_ln203_12_fu_520_p3;
                kernel_data_V_6 <= select_ln203_13_fu_539_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln194_fu_485_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (trunc_ln201_fu_497_p1 = ap_const_lv1_1))) then
                kernel_data_V_1143 <= select_ln203_fu_501_p3;
                kernel_data_V_4 <= select_ln203_12_fu_520_p3;
                kernel_data_V_7 <= select_ln203_13_fu_539_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((io_acc_block_signal_op150 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1078))) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln313_fu_900_p2 = ap_const_lv1_1))) then
                sY_3 <= ap_phi_mux_storemerge_i_i_phi_fu_428_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                w_index_reg_1092 <= w_index_fu_657_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state7, and_ln289_4_reg_1078, ap_CS_fsm_state3, ap_CS_fsm_state4, and_ln289_4_fu_645_p2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_subdone, io_acc_block_signal_op150, icmp_ln79_fu_987_p2, icmp_ln194_fu_485_p2, data_V_data_V_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((data_V_data_V_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln194_fu_485_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_4_fu_645_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                if ((not(((io_acc_block_signal_op150 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1078))) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln79_fu_987_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((io_acc_block_signal_op150 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1078))) and (icmp_ln79_fu_987_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    acc_0_V_fu_870_p2 <= std_logic_vector(unsigned(tmp_21_fu_856_p6) + unsigned(trunc_ln5_fu_847_p4));
    add_ln321_fu_951_p2 <= std_logic_vector(unsigned(pY_3_load_reg_1066) + unsigned(ap_const_lv32_1));
    add_ln323_fu_962_p2 <= std_logic_vector(unsigned(sY_3_load_reg_1056) + unsigned(ap_const_lv32_1));
    add_ln326_fu_905_p2 <= std_logic_vector(unsigned(pX_3_load_reg_1072) + unsigned(ap_const_lv32_1));
    add_ln328_fu_916_p2 <= std_logic_vector(unsigned(sX_3_load_reg_1046) + unsigned(ap_const_lv32_1));
    add_ln79_fu_479_p2 <= std_logic_vector(unsigned(indvar_flatten54_reg_260) + unsigned(ap_const_lv10_1));
    and_ln289_3_fu_639_p2 <= (icmp_ln289_6_fu_627_p2 and icmp_ln289_5_fu_607_p2);
    and_ln289_4_fu_645_p2 <= (and_ln289_fu_633_p2 and and_ln289_3_fu_639_p2);
    and_ln289_fu_633_p2 <= (icmp_ln289_fu_577_p2 and icmp_ln289_4_fu_587_p2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_assign_proc : process(and_ln289_4_reg_1078, io_acc_block_signal_op150)
    begin
                ap_block_state7 <= ((io_acc_block_signal_op150 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1078));
    end process;


    ap_condition_239_assign_proc : process(ap_CS_fsm_state7, and_ln289_4_reg_1078, io_acc_block_signal_op150)
    begin
                ap_condition_239 <= (not(((io_acc_block_signal_op150 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1078))) and (ap_const_logic_1 = ap_CS_fsm_state7));
    end process;


    ap_condition_345_assign_proc : process(ap_CS_fsm_state7, and_ln289_4_reg_1078, io_acc_block_signal_op150, icmp_ln313_fu_900_p2)
    begin
                ap_condition_345 <= (not(((io_acc_block_signal_op150 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1078))) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln313_fu_900_p2 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7, and_ln289_4_reg_1078, io_acc_block_signal_op150, icmp_ln79_fu_987_p2)
    begin
        if ((not(((io_acc_block_signal_op150 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1078))) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln79_fu_987_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_storemerge_i_i_phi_fu_428_p4_assign_proc : process(ap_CS_fsm_state7, select_ln323_fu_967_p3, icmp_ln313_fu_900_p2, icmp_ln317_fu_946_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln313_fu_900_p2 = ap_const_lv1_1))) then
            if ((icmp_ln317_fu_946_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge_i_i_phi_fu_428_p4 <= ap_const_lv32_0;
            elsif ((icmp_ln317_fu_946_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge_i_i_phi_fu_428_p4 <= select_ln323_fu_967_p3;
            else 
                ap_phi_mux_storemerge_i_i_phi_fu_428_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_storemerge_i_i_phi_fu_428_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_tmp_data_0_V_2_phi_fu_411_p8_assign_proc : process(outidx_q0, tmp_data_0_V_751_reg_305, acc_0_V_fu_870_p2, ap_phi_reg_pp1_iter1_tmp_data_0_V_2_reg_406)
    begin
        if ((outidx_q0 = ap_const_lv2_0)) then 
            ap_phi_mux_tmp_data_0_V_2_phi_fu_411_p8 <= acc_0_V_fu_870_p2;
        elsif (((outidx_q0 = ap_const_lv2_1) or (outidx_q0 = ap_const_lv2_2) or (outidx_q0 = ap_const_lv2_3))) then 
            ap_phi_mux_tmp_data_0_V_2_phi_fu_411_p8 <= tmp_data_0_V_751_reg_305;
        else 
            ap_phi_mux_tmp_data_0_V_2_phi_fu_411_p8 <= ap_phi_reg_pp1_iter1_tmp_data_0_V_2_reg_406;
        end if; 
    end process;


    ap_phi_mux_tmp_data_1_V_phi_fu_392_p8_assign_proc : process(outidx_q0, tmp_data_1_V_749_reg_316, acc_0_V_fu_870_p2, ap_phi_reg_pp1_iter1_tmp_data_1_V_reg_387)
    begin
        if ((outidx_q0 = ap_const_lv2_1)) then 
            ap_phi_mux_tmp_data_1_V_phi_fu_392_p8 <= acc_0_V_fu_870_p2;
        elsif (((outidx_q0 = ap_const_lv2_2) or (outidx_q0 = ap_const_lv2_3) or (outidx_q0 = ap_const_lv2_0))) then 
            ap_phi_mux_tmp_data_1_V_phi_fu_392_p8 <= tmp_data_1_V_749_reg_316;
        else 
            ap_phi_mux_tmp_data_1_V_phi_fu_392_p8 <= ap_phi_reg_pp1_iter1_tmp_data_1_V_reg_387;
        end if; 
    end process;


    ap_phi_mux_tmp_data_2_V_phi_fu_373_p8_assign_proc : process(outidx_q0, tmp_data_2_V_747_reg_327, acc_0_V_fu_870_p2, ap_phi_reg_pp1_iter1_tmp_data_2_V_reg_368)
    begin
        if ((outidx_q0 = ap_const_lv2_2)) then 
            ap_phi_mux_tmp_data_2_V_phi_fu_373_p8 <= acc_0_V_fu_870_p2;
        elsif (((outidx_q0 = ap_const_lv2_1) or (outidx_q0 = ap_const_lv2_3) or (outidx_q0 = ap_const_lv2_0))) then 
            ap_phi_mux_tmp_data_2_V_phi_fu_373_p8 <= tmp_data_2_V_747_reg_327;
        else 
            ap_phi_mux_tmp_data_2_V_phi_fu_373_p8 <= ap_phi_reg_pp1_iter1_tmp_data_2_V_reg_368;
        end if; 
    end process;


    ap_phi_mux_tmp_data_3_V_phi_fu_354_p8_assign_proc : process(outidx_q0, tmp_data_3_V_745_reg_338, acc_0_V_fu_870_p2, ap_phi_reg_pp1_iter1_tmp_data_3_V_reg_349)
    begin
        if (((outidx_q0 = ap_const_lv2_1) or (outidx_q0 = ap_const_lv2_2) or (outidx_q0 = ap_const_lv2_0))) then 
            ap_phi_mux_tmp_data_3_V_phi_fu_354_p8 <= tmp_data_3_V_745_reg_338;
        elsif ((outidx_q0 = ap_const_lv2_3)) then 
            ap_phi_mux_tmp_data_3_V_phi_fu_354_p8 <= acc_0_V_fu_870_p2;
        else 
            ap_phi_mux_tmp_data_3_V_phi_fu_354_p8 <= ap_phi_reg_pp1_iter1_tmp_data_3_V_reg_349;
        end if; 
    end process;


    ap_phi_mux_w_index52_phi_fu_287_p4_assign_proc : process(w_index52_reg_283, ap_CS_fsm_pp1_stage0, w_index_reg_1092, icmp_ln129_reg_1097, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln129_reg_1097 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_w_index52_phi_fu_287_p4 <= w_index_reg_1092;
        else 
            ap_phi_mux_w_index52_phi_fu_287_p4 <= w_index52_reg_283;
        end if; 
    end process;

    ap_phi_reg_pp1_iter1_tmp_data_0_V_2_reg_406 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp1_iter1_tmp_data_1_V_reg_387 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp1_iter1_tmp_data_2_V_reg_368 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp1_iter1_tmp_data_3_V_reg_349 <= "XXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    data_V_data_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, data_V_data_V_TVALID_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_V_data_V_TDATA_blk_n <= data_V_data_V_TVALID_int;
        else 
            data_V_data_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_V_TREADY_assign_proc : process(data_V_data_V_TVALID, regslice_both_data_V_data_V_U_ack_in)
    begin
        if (((regslice_both_data_V_data_V_U_ack_in = ap_const_logic_1) and (data_V_data_V_TVALID = ap_const_logic_1))) then 
            data_V_data_V_TREADY <= ap_const_logic_1;
        else 
            data_V_data_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_V_TREADY_int_assign_proc : process(ap_CS_fsm_state2, data_V_data_V_TVALID_int)
    begin
        if (((data_V_data_V_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_V_data_V_TREADY_int <= ap_const_logic_1;
        else 
            data_V_data_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    i_iw_fu_491_p2 <= std_logic_vector(unsigned(i_iw_0_i_i_i_i_reg_272) + unsigned(ap_const_lv2_1));
    icmp_ln129_fu_663_p2 <= "1" when (ap_phi_mux_w_index52_phi_fu_287_p4 = ap_const_lv6_23) else "0";
    icmp_ln148_fu_886_p2 <= "1" when (signed(in_index_fu_880_p2) > signed(ap_const_lv32_8)) else "0";
    icmp_ln194_fu_485_p2 <= "1" when (i_iw_0_i_i_i_i_reg_272 = ap_const_lv2_2) else "0";
    icmp_ln19_1_fu_691_p2 <= "1" when (trunc_ln139_fu_669_p1 = ap_const_lv4_1) else "0";
    icmp_ln19_2_fu_697_p2 <= "1" when (trunc_ln139_fu_669_p1 = ap_const_lv4_2) else "0";
    icmp_ln19_3_fu_703_p2 <= "1" when (trunc_ln139_fu_669_p1 = ap_const_lv4_3) else "0";
    icmp_ln19_4_fu_709_p2 <= "1" when (trunc_ln139_fu_669_p1 = ap_const_lv4_4) else "0";
    icmp_ln19_5_fu_715_p2 <= "1" when (trunc_ln139_fu_669_p1 = ap_const_lv4_5) else "0";
    icmp_ln19_6_fu_721_p2 <= "1" when (trunc_ln139_fu_669_p1 = ap_const_lv4_6) else "0";
    icmp_ln19_7_fu_727_p2 <= "1" when (trunc_ln139_fu_669_p1 = ap_const_lv4_7) else "0";
    icmp_ln19_fu_685_p2 <= "1" when (trunc_ln139_fu_669_p1 = ap_const_lv4_0) else "0";
    icmp_ln289_4_fu_587_p2 <= "1" when (sY_3 = ap_const_lv32_2) else "0";
    icmp_ln289_5_fu_607_p2 <= "1" when (signed(tmp_fu_597_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln289_6_fu_627_p2 <= "1" when (signed(tmp_7_fu_617_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln289_fu_577_p2 <= "1" when (sX_3 = ap_const_lv32_2) else "0";
    icmp_ln313_fu_900_p2 <= "1" when (pX_3_load_reg_1072 = ap_const_lv32_1B) else "0";
    icmp_ln317_fu_946_p2 <= "1" when (pY_3_load_reg_1066 = ap_const_lv32_1B) else "0";
    icmp_ln79_fu_987_p2 <= "1" when (indvar_flatten54_reg_260 = ap_const_lv10_30F) else "0";
    in_index_fu_880_p2 <= std_logic_vector(unsigned(in_index_0_i_i_i_i53_reg_294) + unsigned(ap_const_lv32_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state7, and_ln289_4_reg_1078, io_acc_block_signal_op150, icmp_ln79_fu_987_p2)
    begin
        if ((not(((io_acc_block_signal_op150 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1078))) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln79_fu_987_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op150 <= (res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);

    line_buffer_Array_V_0_0_ce0_assign_proc : process(ap_CS_fsm_state2, data_V_data_V_TVALID_int)
    begin
        if (((data_V_data_V_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            line_buffer_Array_V_0_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_0_0_we0_assign_proc : process(ap_CS_fsm_state2, data_V_data_V_TVALID_int)
    begin
        if (((data_V_data_V_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            line_buffer_Array_V_0_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1142_0_ce0_assign_proc : process(ap_CS_fsm_state2, data_V_data_V_TVALID_int)
    begin
        if (((data_V_data_V_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            line_buffer_Array_V_1142_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1142_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1142_0_we0_assign_proc : process(ap_CS_fsm_state2, data_V_data_V_TVALID_int)
    begin
        if (((data_V_data_V_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            line_buffer_Array_V_1142_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1142_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln19_1_fu_755_p2 <= (icmp_ln19_5_fu_715_p2 or icmp_ln19_4_fu_709_p2);
    or_ln19_2_fu_769_p2 <= (icmp_ln19_3_fu_703_p2 or icmp_ln19_2_fu_697_p2);
    or_ln19_3_fu_783_p2 <= (icmp_ln19_fu_685_p2 or icmp_ln19_1_fu_691_p2);
    or_ln19_4_fu_797_p2 <= (or_ln19_fu_741_p2 or or_ln19_1_fu_755_p2);
    or_ln19_5_fu_811_p2 <= (or_ln19_3_fu_783_p2 or or_ln19_2_fu_769_p2);
    or_ln19_6_fu_825_p2 <= (or_ln19_5_fu_811_p2 or or_ln19_4_fu_797_p2);
    or_ln19_fu_741_p2 <= (icmp_ln19_7_fu_727_p2 or icmp_ln19_6_fu_721_p2);
    outidx_address0 <= zext_ln133_fu_651_p1(6 - 1 downto 0);

    outidx_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            outidx_ce0 <= ap_const_logic_1;
        else 
            outidx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_CS_fsm_state7, and_ln289_4_reg_1078)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln289_4_reg_1078))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= tmp_data_0_V_2_reg_406;

    res_V_data_0_V_write_assign_proc : process(ap_CS_fsm_state7, and_ln289_4_reg_1078, io_acc_block_signal_op150)
    begin
        if ((not(((io_acc_block_signal_op150 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1078))) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln289_4_reg_1078))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_CS_fsm_state7, and_ln289_4_reg_1078)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln289_4_reg_1078))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= tmp_data_1_V_reg_387;

    res_V_data_1_V_write_assign_proc : process(ap_CS_fsm_state7, and_ln289_4_reg_1078, io_acc_block_signal_op150)
    begin
        if ((not(((io_acc_block_signal_op150 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1078))) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln289_4_reg_1078))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_CS_fsm_state7, and_ln289_4_reg_1078)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln289_4_reg_1078))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= tmp_data_2_V_reg_368;

    res_V_data_2_V_write_assign_proc : process(ap_CS_fsm_state7, and_ln289_4_reg_1078, io_acc_block_signal_op150)
    begin
        if ((not(((io_acc_block_signal_op150 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1078))) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln289_4_reg_1078))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_CS_fsm_state7, and_ln289_4_reg_1078)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln289_4_reg_1078))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= tmp_data_3_V_reg_349;

    res_V_data_3_V_write_assign_proc : process(ap_CS_fsm_state7, and_ln289_4_reg_1078, io_acc_block_signal_op150)
    begin
        if ((not(((io_acc_block_signal_op150 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_4_reg_1078))) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = and_ln289_4_reg_1078))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln148_fu_892_p3 <= 
        ap_const_lv32_0 when (icmp_ln148_fu_886_p2(0) = '1') else 
        in_index_fu_880_p2;
    select_ln19_1_fu_747_p3 <= 
        kernel_data_V_5 when (icmp_ln19_5_fu_715_p2(0) = '1') else 
        kernel_data_V_4;
    select_ln19_2_fu_761_p3 <= 
        kernel_data_V_3145 when (icmp_ln19_3_fu_703_p2(0) = '1') else 
        kernel_data_V_2144;
    select_ln19_3_fu_775_p3 <= 
        kernel_data_V_1143 when (icmp_ln19_1_fu_691_p2(0) = '1') else 
        kernel_data_V_0;
    select_ln19_4_fu_789_p3 <= 
        select_ln19_fu_733_p3 when (or_ln19_fu_741_p2(0) = '1') else 
        select_ln19_1_fu_747_p3;
    select_ln19_5_fu_803_p3 <= 
        select_ln19_2_fu_761_p3 when (or_ln19_2_fu_769_p2(0) = '1') else 
        select_ln19_3_fu_775_p3;
    select_ln19_6_fu_817_p3 <= 
        select_ln19_4_fu_789_p3 when (or_ln19_4_fu_797_p2(0) = '1') else 
        select_ln19_5_fu_803_p3;
    select_ln19_7_fu_831_p3 <= 
        select_ln19_6_fu_817_p3 when (or_ln19_6_fu_825_p2(0) = '1') else 
        kernel_data_V_8;
    select_ln19_fu_733_p3 <= 
        kernel_data_V_7 when (icmp_ln19_7_fu_727_p2(0) = '1') else 
        kernel_data_V_6;
    select_ln203_12_fu_520_p3 <= 
        kernel_data_V_5_load_reg_1020 when (trunc_ln201_fu_497_p1(0) = '1') else 
        kernel_data_V_4;
    select_ln203_13_fu_539_p3 <= 
        kernel_data_V_8_load_reg_1025 when (trunc_ln201_fu_497_p1(0) = '1') else 
        kernel_data_V_7;
    select_ln203_fu_501_p3 <= 
        kernel_data_V_2144_load_reg_1015 when (trunc_ln201_fu_497_p1(0) = '1') else 
        kernel_data_V_1143;
    select_ln323_fu_967_p3 <= 
        ap_const_lv32_2 when (icmp_ln289_4_reg_1061(0) = '1') else 
        add_ln323_fu_962_p2;
    select_ln328_fu_921_p3 <= 
        ap_const_lv32_2 when (icmp_ln289_reg_1051(0) = '1') else 
        add_ln328_fu_916_p2;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_7_fu_617_p4 <= pX_3(31 downto 1);
    tmp_fu_597_p4 <= pY_3(31 downto 1);
    trunc_ln139_fu_669_p1 <= in_index_0_i_i_i_i53_reg_294(4 - 1 downto 0);
    trunc_ln201_fu_497_p1 <= i_iw_0_i_i_i_i_reg_272(1 - 1 downto 0);
    trunc_ln5_fu_847_p4 <= r_V_fu_993_p2(25 downto 10);
    w2_V_address0 <= zext_ln133_fu_651_p1(6 - 1 downto 0);

    w2_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            w2_V_ce0 <= ap_const_logic_1;
        else 
            w2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_index_fu_657_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(ap_phi_mux_w_index52_phi_fu_287_p4));
    zext_ln133_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_w_index52_phi_fu_287_p4),64));
end behav;
