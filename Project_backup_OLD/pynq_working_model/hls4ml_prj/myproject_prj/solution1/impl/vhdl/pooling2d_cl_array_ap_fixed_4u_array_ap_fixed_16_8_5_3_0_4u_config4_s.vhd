-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_8_5_3_0_4u_config4_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC );
end;


architecture behav of pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_8_5_3_0_4u_config4_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv10_271 : STD_LOGIC_VECTOR (9 downto 0) := "1001110001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal pX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_1_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_12 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_13 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_14 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_15 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal line_buffer_Array_V_1_0_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1_0_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1_0_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_1_0_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1_0_1_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1_0_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_1_0_2_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1_0_2_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1_0_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_1_0_3_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_1_0_3_we0 : STD_LOGIC;
    signal line_buffer_Array_V_1_0_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln241_reg_796 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_data_1_V_blk_n : STD_LOGIC;
    signal data_V_data_2_V_blk_n : STD_LOGIC;
    signal data_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal and_ln191_2_reg_869 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_234 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln241_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal io_acc_block_signal_op20 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal io_acc_block_signal_op117 : STD_LOGIC;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln241_reg_796_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln241_fu_262_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal pool_window_3_V_reg_805 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_1_reg_813 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_2_reg_821 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_3_reg_829 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_reg_837 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_1_reg_845 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_2_reg_853 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_3_reg_861 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln191_2_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_0_V_fu_504_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_0_V_reg_873 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_1_V_fu_566_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_1_V_reg_878 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_fu_628_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_reg_883 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_fu_690_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_reg_888 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln212_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln216_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln222_fu_776_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_reg_pp0_iter0_storemerge_i_i_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_i_i_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_storemerge_i_i_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_storemerge_i_i_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln225_fu_708_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln227_fu_726_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln220_fu_758_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_sY_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln191_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_2_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_3_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_1_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_1_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_459_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_5_fu_479_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_2_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_11_fu_471_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_fu_492_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_data_0_V_fu_504_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1496_4_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_5_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_7_fu_521_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_9_fu_541_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_6_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_16_fu_533_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_1_fu_554_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_data_1_V_fu_566_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1496_7_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_8_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_10_fu_583_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_12_fu_603_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_9_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_18_fu_595_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_2_fu_616_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_data_2_V_fu_628_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1496_3_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_10_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_13_fu_645_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_15_fu_665_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_11_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_20_fu_657_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_3_fu_678_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_data_3_V_fu_690_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln227_fu_720_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln222_fu_770_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_222 : BOOLEAN;
    signal ap_condition_255 : BOOLEAN;
    signal ap_condition_613 : BOOLEAN;

    component myproject_mux_42_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_8_5_3_0_4u_config4_s_line_bueOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    line_buffer_Array_V_1_0_0_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_8_5_3_0_4u_config4_s_line_bueOg
    generic map (
        DataWidth => 16,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_18,
        ce0 => line_buffer_Array_V_1_0_0_ce0,
        we0 => line_buffer_Array_V_1_0_0_we0,
        d0 => data_V_data_0_V_dout,
        q0 => line_buffer_Array_V_1_0_0_q0);

    line_buffer_Array_V_1_0_1_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_8_5_3_0_4u_config4_s_line_bueOg
    generic map (
        DataWidth => 16,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_18,
        ce0 => line_buffer_Array_V_1_0_1_ce0,
        we0 => line_buffer_Array_V_1_0_1_we0,
        d0 => data_V_data_1_V_dout,
        q0 => line_buffer_Array_V_1_0_1_q0);

    line_buffer_Array_V_1_0_2_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_8_5_3_0_4u_config4_s_line_bueOg
    generic map (
        DataWidth => 16,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_18,
        ce0 => line_buffer_Array_V_1_0_2_ce0,
        we0 => line_buffer_Array_V_1_0_2_we0,
        d0 => data_V_data_2_V_dout,
        q0 => line_buffer_Array_V_1_0_2_q0);

    line_buffer_Array_V_1_0_3_U : component pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_8_5_3_0_4u_config4_s_line_bueOg
    generic map (
        DataWidth => 16,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_18,
        ce0 => line_buffer_Array_V_1_0_3_ce0,
        we0 => line_buffer_Array_V_1_0_3_we0,
        d0 => data_V_data_3_V_dout,
        q0 => line_buffer_Array_V_1_0_3_q0);

    myproject_mux_42_16_1_1_U16 : component myproject_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_1_4,
        din1 => pool_window_1_V_reg_837,
        din2 => kernel_data_V_1_12,
        din3 => pool_window_3_V_reg_805,
        din4 => tmp_data_0_V_fu_504_p5,
        dout => tmp_data_0_V_fu_504_p6);

    myproject_mux_42_16_1_1_U17 : component myproject_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_1_5,
        din1 => pool_window_1_V_1_reg_845,
        din2 => kernel_data_V_1_13,
        din3 => pool_window_3_V_1_reg_813,
        din4 => tmp_data_1_V_fu_566_p5,
        dout => tmp_data_1_V_fu_566_p6);

    myproject_mux_42_16_1_1_U18 : component myproject_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_1_6,
        din1 => pool_window_1_V_2_reg_853,
        din2 => kernel_data_V_1_14,
        din3 => pool_window_3_V_2_reg_821,
        din4 => tmp_data_2_V_fu_628_p5,
        dout => tmp_data_2_V_fu_628_p6);

    myproject_mux_42_16_1_1_U19 : component myproject_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_1_7,
        din1 => pool_window_1_V_3_reg_861,
        din2 => kernel_data_V_1_15,
        din3 => pool_window_3_V_3_reg_829,
        din4 => tmp_data_3_V_fu_690_p5,
        dout => tmp_data_3_V_fu_690_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter3_storemerge_i_i_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_const_boolean_1 = ap_condition_255)) then 
                    ap_phi_reg_pp0_iter3_storemerge_i_i_reg_245 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_222)) then 
                    ap_phi_reg_pp0_iter3_storemerge_i_i_reg_245 <= select_ln222_fu_776_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter3_storemerge_i_i_reg_245 <= ap_phi_reg_pp0_iter2_storemerge_i_i_reg_245;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_fu_256_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_234 <= add_ln241_fu_262_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_234 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    pX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((icmp_ln212_fu_702_p2 = ap_const_lv1_1)) then 
                    pX <= ap_const_lv32_0;
                elsif ((icmp_ln212_fu_702_p2 = ap_const_lv1_0)) then 
                    pX <= add_ln225_fu_708_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_613)) then
                if ((icmp_ln216_fu_752_p2 = ap_const_lv1_1)) then 
                    pY <= ap_const_lv32_0;
                elsif ((icmp_ln216_fu_752_p2 = ap_const_lv1_0)) then 
                    pY <= add_ln220_fu_758_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((icmp_ln212_fu_702_p2 = ap_const_lv1_1)) then 
                    sX <= ap_const_lv32_0;
                elsif ((icmp_ln212_fu_702_p2 = ap_const_lv1_0)) then 
                    sX <= select_ln227_fu_726_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_796_pp0_iter1_reg = ap_const_lv1_0))) then
                and_ln191_2_reg_869 <= and_ln191_2_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_storemerge_i_i_reg_245 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_245;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_storemerge_i_i_reg_245 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_245;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln212_reg_893 <= icmp_ln212_fu_702_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln241_reg_796 <= icmp_ln241_fu_256_p2;
                icmp_ln241_reg_796_pp0_iter1_reg <= icmp_ln241_reg_796;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_796_pp0_iter1_reg = ap_const_lv1_0))) then
                kernel_data_V_1_12 <= pool_window_3_V_reg_805;
                kernel_data_V_1_13 <= pool_window_3_V_1_reg_813;
                kernel_data_V_1_14 <= pool_window_3_V_2_reg_821;
                kernel_data_V_1_15 <= pool_window_3_V_3_reg_829;
                kernel_data_V_1_4 <= pool_window_1_V_reg_837;
                kernel_data_V_1_5 <= pool_window_1_V_1_reg_845;
                kernel_data_V_1_6 <= pool_window_1_V_2_reg_853;
                kernel_data_V_1_7 <= pool_window_1_V_3_reg_861;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_796 = ap_const_lv1_0))) then
                pool_window_1_V_1_reg_845 <= line_buffer_Array_V_1_0_1_q0;
                pool_window_1_V_2_reg_853 <= line_buffer_Array_V_1_0_2_q0;
                pool_window_1_V_3_reg_861 <= line_buffer_Array_V_1_0_3_q0;
                pool_window_1_V_reg_837 <= line_buffer_Array_V_1_0_0_q0;
                pool_window_3_V_1_reg_813 <= data_V_data_1_V_dout;
                pool_window_3_V_2_reg_821 <= data_V_data_2_V_dout;
                pool_window_3_V_3_reg_829 <= data_V_data_3_V_dout;
                pool_window_3_V_reg_805 <= data_V_data_0_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_reg_893 = ap_const_lv1_1))) then
                sY <= ap_phi_reg_pp0_iter3_storemerge_i_i_reg_245;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_fu_448_p2))) then
                tmp_data_0_V_reg_873 <= tmp_data_0_V_fu_504_p6;
                tmp_data_1_V_reg_878 <= tmp_data_1_V_fu_566_p6;
                tmp_data_2_V_reg_883 <= tmp_data_2_V_fu_628_p6;
                tmp_data_3_V_reg_888 <= tmp_data_3_V_fu_690_p6;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, icmp_ln241_fu_256_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln241_fu_256_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln241_fu_256_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln220_fu_758_p2 <= std_logic_vector(unsigned(pY) + unsigned(ap_const_lv32_1));
    add_ln222_fu_770_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_sY_load) + unsigned(ap_const_lv32_1));
    add_ln225_fu_708_p2 <= std_logic_vector(unsigned(pX) + unsigned(ap_const_lv32_1));
    add_ln227_fu_720_p2 <= std_logic_vector(unsigned(sX) + unsigned(ap_const_lv32_1));
    add_ln241_fu_262_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_234) + unsigned(ap_const_lv10_1));
    and_ln191_1_fu_442_p2 <= (icmp_ln191_3_fu_430_p2 and icmp_ln191_2_fu_420_p2);
    and_ln191_2_fu_448_p2 <= (and_ln191_fu_436_p2 and and_ln191_1_fu_442_p2);
    and_ln191_fu_436_p2 <= (icmp_ln191_fu_400_p2 and icmp_ln191_1_fu_410_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln241_reg_796, ap_enable_reg_pp0_iter3, and_ln191_2_reg_869, io_acc_block_signal_op20, io_acc_block_signal_op117)
    begin
                ap_block_pp0_stage0_01001 <= (((io_acc_block_signal_op117 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_2_reg_869)) or ((io_acc_block_signal_op20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln241_reg_796 = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln241_reg_796, ap_enable_reg_pp0_iter3, and_ln191_2_reg_869, io_acc_block_signal_op20, io_acc_block_signal_op117)
    begin
                ap_block_pp0_stage0_11001 <= (((io_acc_block_signal_op117 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_2_reg_869)) or ((io_acc_block_signal_op20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln241_reg_796 = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln241_reg_796, ap_enable_reg_pp0_iter3, and_ln191_2_reg_869, io_acc_block_signal_op20, io_acc_block_signal_op117)
    begin
                ap_block_pp0_stage0_subdone <= (((io_acc_block_signal_op117 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_2_reg_869)) or ((io_acc_block_signal_op20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln241_reg_796 = ap_const_lv1_0)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(icmp_ln241_reg_796, io_acc_block_signal_op20)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((io_acc_block_signal_op20 = ap_const_logic_0) and (icmp_ln241_reg_796 = ap_const_lv1_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter3_assign_proc : process(and_ln191_2_reg_869, io_acc_block_signal_op117)
    begin
                ap_block_state5_pp0_stage0_iter3 <= ((io_acc_block_signal_op117 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_2_reg_869));
    end process;


    ap_condition_222_assign_proc : process(icmp_ln241_reg_796_pp0_iter1_reg, icmp_ln212_fu_702_p2, icmp_ln216_fu_752_p2)
    begin
                ap_condition_222 <= ((icmp_ln212_fu_702_p2 = ap_const_lv1_1) and (icmp_ln216_fu_752_p2 = ap_const_lv1_0) and (icmp_ln241_reg_796_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_255_assign_proc : process(icmp_ln241_reg_796_pp0_iter1_reg, icmp_ln212_fu_702_p2, icmp_ln216_fu_752_p2)
    begin
                ap_condition_255 <= ((icmp_ln216_fu_752_p2 = ap_const_lv1_1) and (icmp_ln212_fu_702_p2 = ap_const_lv1_1) and (icmp_ln241_reg_796_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_613_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln241_reg_796_pp0_iter1_reg, icmp_ln212_fu_702_p2, ap_enable_reg_pp0_iter2)
    begin
                ap_condition_613 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_702_p2 = ap_const_lv1_1) and (icmp_ln241_reg_796_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln241_fu_256_p2)
    begin
        if ((icmp_ln241_fu_256_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge_i_i_reg_245 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    ap_sig_allocacmp_sY_load_assign_proc : process(sY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln212_reg_893, ap_phi_reg_pp0_iter3_storemerge_i_i_reg_245)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln212_reg_893 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_sY_load <= ap_phi_reg_pp0_iter3_storemerge_i_i_reg_245;
        else 
            ap_sig_allocacmp_sY_load <= sY;
        end if; 
    end process;


    data_V_data_0_V_blk_n_assign_proc : process(data_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_796)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln241_reg_796 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_796, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_796 = ap_const_lv1_0))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(data_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_796)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln241_reg_796 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_796, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_796 = ap_const_lv1_0))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(data_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_796)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln241_reg_796 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_796, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_796 = ap_const_lv1_0))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(data_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_796)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln241_reg_796 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_796, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_796 = ap_const_lv1_0))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1496_10_fu_652_p2 <= "1" when (signed(kernel_data_V_1_15) < signed(pool_window_3_V_3_reg_829)) else "0";
    icmp_ln1496_11_fu_672_p2 <= "1" when (signed(select_ln65_13_fu_645_p3) < signed(select_ln65_15_fu_665_p3)) else "0";
    icmp_ln1496_1_fu_466_p2 <= "1" when (signed(kernel_data_V_1_12) < signed(pool_window_3_V_reg_805)) else "0";
    icmp_ln1496_2_fu_486_p2 <= "1" when (signed(select_ln65_fu_459_p3) < signed(select_ln65_5_fu_479_p3)) else "0";
    icmp_ln1496_3_fu_640_p2 <= "1" when (signed(kernel_data_V_1_7) < signed(pool_window_1_V_3_reg_861)) else "0";
    icmp_ln1496_4_fu_516_p2 <= "1" when (signed(kernel_data_V_1_5) < signed(pool_window_1_V_1_reg_845)) else "0";
    icmp_ln1496_5_fu_528_p2 <= "1" when (signed(kernel_data_V_1_13) < signed(pool_window_3_V_1_reg_813)) else "0";
    icmp_ln1496_6_fu_548_p2 <= "1" when (signed(select_ln65_7_fu_521_p3) < signed(select_ln65_9_fu_541_p3)) else "0";
    icmp_ln1496_7_fu_578_p2 <= "1" when (signed(kernel_data_V_1_6) < signed(pool_window_1_V_2_reg_853)) else "0";
    icmp_ln1496_8_fu_590_p2 <= "1" when (signed(kernel_data_V_1_14) < signed(pool_window_3_V_2_reg_821)) else "0";
    icmp_ln1496_9_fu_610_p2 <= "1" when (signed(select_ln65_10_fu_583_p3) < signed(select_ln65_12_fu_603_p3)) else "0";
    icmp_ln1496_fu_454_p2 <= "1" when (signed(kernel_data_V_1_4) < signed(pool_window_1_V_reg_837)) else "0";
    icmp_ln191_1_fu_410_p2 <= "1" when (ap_sig_allocacmp_sY_load = ap_const_lv32_1) else "0";
    icmp_ln191_2_fu_420_p2 <= "1" when (signed(pY) > signed(ap_const_lv32_0)) else "0";
    icmp_ln191_3_fu_430_p2 <= "1" when (signed(pX) > signed(ap_const_lv32_0)) else "0";
    icmp_ln191_fu_400_p2 <= "1" when (sX = ap_const_lv32_1) else "0";
    icmp_ln212_fu_702_p2 <= "1" when (pX = ap_const_lv32_18) else "0";
    icmp_ln216_fu_752_p2 <= "1" when (pY = ap_const_lv32_18) else "0";
    icmp_ln241_fu_256_p2 <= "1" when (indvar_flatten_reg_234 = ap_const_lv10_271) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op117 <= (res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    io_acc_block_signal_op20 <= (data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);

    line_buffer_Array_V_1_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_796, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_796 = ap_const_lv1_0))) then 
            line_buffer_Array_V_1_0_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_0_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_796, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_796 = ap_const_lv1_0))) then 
            line_buffer_Array_V_1_0_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_0_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_796, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_796 = ap_const_lv1_0))) then 
            line_buffer_Array_V_1_0_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_0_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_796, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_796 = ap_const_lv1_0))) then 
            line_buffer_Array_V_1_0_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_0_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_796, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_796 = ap_const_lv1_0))) then 
            line_buffer_Array_V_1_0_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_0_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_796, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_796 = ap_const_lv1_0))) then 
            line_buffer_Array_V_1_0_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_0_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_796, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_796 = ap_const_lv1_0))) then 
            line_buffer_Array_V_1_0_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_1_0_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_796, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_796 = ap_const_lv1_0))) then 
            line_buffer_Array_V_1_0_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_1_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, and_ln191_2_reg_869)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_2_reg_869) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= tmp_data_0_V_reg_873;

    res_V_data_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, and_ln191_2_reg_869, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_869))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, and_ln191_2_reg_869)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_2_reg_869) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= tmp_data_1_V_reg_878;

    res_V_data_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, and_ln191_2_reg_869, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_869))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, and_ln191_2_reg_869)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_2_reg_869) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= tmp_data_2_V_reg_883;

    res_V_data_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, and_ln191_2_reg_869, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_869))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, and_ln191_2_reg_869)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_2_reg_869) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= tmp_data_3_V_reg_888;

    res_V_data_3_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, and_ln191_2_reg_869, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_869))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln222_fu_776_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_1_fu_410_p2(0) = '1') else 
        add_ln222_fu_770_p2;
    select_ln227_fu_726_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_fu_400_p2(0) = '1') else 
        add_ln227_fu_720_p2;
    select_ln65_10_fu_583_p3 <= 
        pool_window_1_V_2_reg_853 when (icmp_ln1496_7_fu_578_p2(0) = '1') else 
        kernel_data_V_1_6;
    select_ln65_11_fu_471_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_1_fu_466_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_12_fu_603_p3 <= 
        pool_window_3_V_2_reg_821 when (icmp_ln1496_8_fu_590_p2(0) = '1') else 
        kernel_data_V_1_14;
    select_ln65_13_fu_645_p3 <= 
        pool_window_1_V_3_reg_861 when (icmp_ln1496_3_fu_640_p2(0) = '1') else 
        kernel_data_V_1_7;
    select_ln65_15_fu_665_p3 <= 
        pool_window_3_V_3_reg_829 when (icmp_ln1496_10_fu_652_p2(0) = '1') else 
        kernel_data_V_1_15;
    select_ln65_16_fu_533_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_5_fu_528_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_18_fu_595_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_8_fu_590_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_20_fu_657_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_10_fu_652_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_5_fu_479_p3 <= 
        pool_window_3_V_reg_805 when (icmp_ln1496_1_fu_466_p2(0) = '1') else 
        kernel_data_V_1_12;
    select_ln65_7_fu_521_p3 <= 
        pool_window_1_V_1_reg_845 when (icmp_ln1496_4_fu_516_p2(0) = '1') else 
        kernel_data_V_1_5;
    select_ln65_9_fu_541_p3 <= 
        pool_window_3_V_1_reg_813 when (icmp_ln1496_5_fu_528_p2(0) = '1') else 
        kernel_data_V_1_13;
    select_ln65_fu_459_p3 <= 
        pool_window_1_V_reg_837 when (icmp_ln1496_fu_454_p2(0) = '1') else 
        kernel_data_V_1_4;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_data_0_V_fu_504_p5 <= 
        select_ln65_11_fu_471_p3 when (icmp_ln1496_2_fu_486_p2(0) = '1') else 
        zext_ln65_fu_492_p1;
    tmp_data_1_V_fu_566_p5 <= 
        select_ln65_16_fu_533_p3 when (icmp_ln1496_6_fu_548_p2(0) = '1') else 
        zext_ln65_1_fu_554_p1;
    tmp_data_2_V_fu_628_p5 <= 
        select_ln65_18_fu_595_p3 when (icmp_ln1496_9_fu_610_p2(0) = '1') else 
        zext_ln65_2_fu_616_p1;
    tmp_data_3_V_fu_690_p5 <= 
        select_ln65_20_fu_657_p3 when (icmp_ln1496_11_fu_672_p2(0) = '1') else 
        zext_ln65_3_fu_678_p1;
    zext_ln65_1_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_4_fu_516_p2),2));
    zext_ln65_2_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_7_fu_578_p2),2));
    zext_ln65_3_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_3_fu_640_p2),2));
    zext_ln65_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_fu_454_p2),2));
end behav;
