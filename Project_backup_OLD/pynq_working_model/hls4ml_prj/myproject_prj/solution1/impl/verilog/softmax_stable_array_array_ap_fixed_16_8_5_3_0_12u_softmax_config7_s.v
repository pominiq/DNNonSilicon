// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_array_array_ap_fixed_16_8_5_3_0_12u_softmax_config7_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        data_V_data_10_V_dout,
        data_V_data_10_V_empty_n,
        data_V_data_10_V_read,
        data_V_data_11_V_dout,
        data_V_data_11_V_empty_n,
        data_V_data_11_V_read,
        res_V_data_0_V_TDATA,
        res_V_data_0_V_TVALID,
        res_V_data_0_V_TREADY,
        res_V_data_1_V_TDATA,
        res_V_data_1_V_TVALID,
        res_V_data_1_V_TREADY,
        res_V_data_2_V_TDATA,
        res_V_data_2_V_TVALID,
        res_V_data_2_V_TREADY,
        res_V_data_3_V_TDATA,
        res_V_data_3_V_TVALID,
        res_V_data_3_V_TREADY,
        res_V_data_4_V_TDATA,
        res_V_data_4_V_TVALID,
        res_V_data_4_V_TREADY,
        res_V_data_5_V_TDATA,
        res_V_data_5_V_TVALID,
        res_V_data_5_V_TREADY,
        res_V_data_6_V_TDATA,
        res_V_data_6_V_TVALID,
        res_V_data_6_V_TREADY,
        res_V_data_7_V_TDATA,
        res_V_data_7_V_TVALID,
        res_V_data_7_V_TREADY,
        res_V_data_8_V_TDATA,
        res_V_data_8_V_TVALID,
        res_V_data_8_V_TREADY,
        res_V_data_9_V_TDATA,
        res_V_data_9_V_TVALID,
        res_V_data_9_V_TREADY,
        res_V_data_10_V_TDATA,
        res_V_data_10_V_TVALID,
        res_V_data_10_V_TREADY,
        res_V_data_11_V_TDATA,
        res_V_data_11_V_TVALID,
        res_V_data_11_V_TREADY,
        data_V_data_0_V_blk_n,
        data_V_data_1_V_blk_n,
        data_V_data_2_V_blk_n,
        data_V_data_3_V_blk_n,
        data_V_data_4_V_blk_n,
        data_V_data_5_V_blk_n,
        data_V_data_6_V_blk_n,
        data_V_data_7_V_blk_n,
        data_V_data_8_V_blk_n,
        data_V_data_9_V_blk_n,
        data_V_data_10_V_blk_n,
        data_V_data_11_V_blk_n,
        res_V_data_0_V_TDATA_blk_n,
        res_V_data_1_V_TDATA_blk_n,
        res_V_data_2_V_TDATA_blk_n,
        res_V_data_3_V_TDATA_blk_n,
        res_V_data_4_V_TDATA_blk_n,
        res_V_data_5_V_TDATA_blk_n,
        res_V_data_6_V_TDATA_blk_n,
        res_V_data_7_V_TDATA_blk_n,
        res_V_data_8_V_TDATA_blk_n,
        res_V_data_9_V_TDATA_blk_n,
        res_V_data_10_V_TDATA_blk_n,
        res_V_data_11_V_TDATA_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 12'd1;
parameter    ap_ST_fsm_pp0_stage1 = 12'd2;
parameter    ap_ST_fsm_pp0_stage2 = 12'd4;
parameter    ap_ST_fsm_pp0_stage3 = 12'd8;
parameter    ap_ST_fsm_pp0_stage4 = 12'd16;
parameter    ap_ST_fsm_pp0_stage5 = 12'd32;
parameter    ap_ST_fsm_pp0_stage6 = 12'd64;
parameter    ap_ST_fsm_pp0_stage7 = 12'd128;
parameter    ap_ST_fsm_pp0_stage8 = 12'd256;
parameter    ap_ST_fsm_pp0_stage9 = 12'd512;
parameter    ap_ST_fsm_pp0_stage10 = 12'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [15:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [15:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input  [15:0] data_V_data_10_V_dout;
input   data_V_data_10_V_empty_n;
output   data_V_data_10_V_read;
input  [15:0] data_V_data_11_V_dout;
input   data_V_data_11_V_empty_n;
output   data_V_data_11_V_read;
output  [15:0] res_V_data_0_V_TDATA;
output   res_V_data_0_V_TVALID;
input   res_V_data_0_V_TREADY;
output  [15:0] res_V_data_1_V_TDATA;
output   res_V_data_1_V_TVALID;
input   res_V_data_1_V_TREADY;
output  [15:0] res_V_data_2_V_TDATA;
output   res_V_data_2_V_TVALID;
input   res_V_data_2_V_TREADY;
output  [15:0] res_V_data_3_V_TDATA;
output   res_V_data_3_V_TVALID;
input   res_V_data_3_V_TREADY;
output  [15:0] res_V_data_4_V_TDATA;
output   res_V_data_4_V_TVALID;
input   res_V_data_4_V_TREADY;
output  [15:0] res_V_data_5_V_TDATA;
output   res_V_data_5_V_TVALID;
input   res_V_data_5_V_TREADY;
output  [15:0] res_V_data_6_V_TDATA;
output   res_V_data_6_V_TVALID;
input   res_V_data_6_V_TREADY;
output  [15:0] res_V_data_7_V_TDATA;
output   res_V_data_7_V_TVALID;
input   res_V_data_7_V_TREADY;
output  [15:0] res_V_data_8_V_TDATA;
output   res_V_data_8_V_TVALID;
input   res_V_data_8_V_TREADY;
output  [15:0] res_V_data_9_V_TDATA;
output   res_V_data_9_V_TVALID;
input   res_V_data_9_V_TREADY;
output  [15:0] res_V_data_10_V_TDATA;
output   res_V_data_10_V_TVALID;
input   res_V_data_10_V_TREADY;
output  [15:0] res_V_data_11_V_TDATA;
output   res_V_data_11_V_TVALID;
input   res_V_data_11_V_TREADY;
output   data_V_data_0_V_blk_n;
output   data_V_data_1_V_blk_n;
output   data_V_data_2_V_blk_n;
output   data_V_data_3_V_blk_n;
output   data_V_data_4_V_blk_n;
output   data_V_data_5_V_blk_n;
output   data_V_data_6_V_blk_n;
output   data_V_data_7_V_blk_n;
output   data_V_data_8_V_blk_n;
output   data_V_data_9_V_blk_n;
output   data_V_data_10_V_blk_n;
output   data_V_data_11_V_blk_n;
output   res_V_data_0_V_TDATA_blk_n;
output   res_V_data_1_V_TDATA_blk_n;
output   res_V_data_2_V_TDATA_blk_n;
output   res_V_data_3_V_TDATA_blk_n;
output   res_V_data_4_V_TDATA_blk_n;
output   res_V_data_5_V_TDATA_blk_n;
output   res_V_data_6_V_TDATA_blk_n;
output   res_V_data_7_V_TDATA_blk_n;
output   res_V_data_8_V_TDATA_blk_n;
output   res_V_data_9_V_TDATA_blk_n;
output   res_V_data_10_V_TDATA_blk_n;
output   res_V_data_11_V_TDATA_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg data_V_data_10_V_read;
reg data_V_data_11_V_read;
reg res_V_data_0_V_TVALID;
reg res_V_data_1_V_TVALID;
reg res_V_data_2_V_TVALID;
reg res_V_data_3_V_TVALID;
reg res_V_data_4_V_TVALID;
reg res_V_data_5_V_TVALID;
reg res_V_data_6_V_TVALID;
reg res_V_data_7_V_TVALID;
reg res_V_data_8_V_TVALID;
reg res_V_data_9_V_TVALID;
reg res_V_data_10_V_TVALID;
reg res_V_data_11_V_TVALID;
reg data_V_data_0_V_blk_n;
reg data_V_data_1_V_blk_n;
reg data_V_data_2_V_blk_n;
reg data_V_data_3_V_blk_n;
reg data_V_data_4_V_blk_n;
reg data_V_data_5_V_blk_n;
reg data_V_data_6_V_blk_n;
reg data_V_data_7_V_blk_n;
reg data_V_data_8_V_blk_n;
reg data_V_data_9_V_blk_n;
reg data_V_data_10_V_blk_n;
reg data_V_data_11_V_blk_n;
reg res_V_data_0_V_TDATA_blk_n;
reg res_V_data_1_V_TDATA_blk_n;
reg res_V_data_2_V_TDATA_blk_n;
reg res_V_data_3_V_TDATA_blk_n;
reg res_V_data_4_V_TDATA_blk_n;
reg res_V_data_5_V_TDATA_blk_n;
reg res_V_data_6_V_TDATA_blk_n;
reg res_V_data_7_V_TDATA_blk_n;
reg res_V_data_8_V_TDATA_blk_n;
reg res_V_data_9_V_TDATA_blk_n;
reg res_V_data_10_V_TDATA_blk_n;
reg res_V_data_11_V_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state12_pp0_stage11_iter0;
wire    ap_block_state24_pp0_stage11_iter1;
wire    ap_block_pp0_stage11_11001;
reg   [9:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [16:0] exp_table1_q0;
wire   [9:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [17:0] invert_table2_q0;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
wire    io_acc_block_signal_op47;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_state25_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg  signed [15:0] data_array_0_V_reg_2059;
reg  signed [15:0] data_array_1_V_reg_2065;
reg  signed [15:0] data_array_2_V_reg_2071;
reg  signed [15:0] data_array_3_V_reg_2077;
reg  signed [15:0] data_array_4_V_reg_2083;
reg  signed [15:0] data_array_5_V_reg_2089;
reg  signed [15:0] data_array_6_V_reg_2095;
reg  signed [15:0] data_array_7_V_reg_2101;
reg  signed [15:0] data_array_8_V_reg_2107;
reg  signed [15:0] data_array_9_V_reg_2114;
reg  signed [15:0] data_array_10_V_reg_2121;
reg  signed [15:0] data_array_11_V_reg_2128;
wire   [0:0] icmp_ln1496_fu_615_p2;
reg   [0:0] icmp_ln1496_reg_2135;
wire   [0:0] icmp_ln1496_1_fu_621_p2;
reg   [0:0] icmp_ln1496_1_reg_2140;
wire   [0:0] icmp_ln1496_3_fu_627_p2;
reg   [0:0] icmp_ln1496_3_reg_2145;
wire   [0:0] icmp_ln1496_4_fu_633_p2;
reg   [0:0] icmp_ln1496_4_reg_2150;
wire   [15:0] select_ln65_6_fu_693_p3;
reg   [15:0] select_ln65_6_reg_2155;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state14_pp0_stage1_iter1;
wire    ap_block_state26_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [15:0] select_ln65_9_fu_727_p3;
reg   [15:0] select_ln65_9_reg_2161;
wire   [9:0] y_V_fu_1435_p3;
reg   [9:0] y_V_reg_2167;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state15_pp0_stage2_iter1;
wire    ap_block_state27_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire   [9:0] y_V_1_fu_1469_p3;
reg   [9:0] y_V_1_reg_2172;
wire   [9:0] y_V_2_fu_1503_p3;
reg   [9:0] y_V_2_reg_2177;
wire   [9:0] y_V_3_fu_1537_p3;
reg   [9:0] y_V_3_reg_2182;
wire   [9:0] y_V_4_fu_1571_p3;
reg   [9:0] y_V_4_reg_2187;
wire   [9:0] y_V_5_fu_1605_p3;
reg   [9:0] y_V_5_reg_2192;
wire   [9:0] y_V_6_fu_1639_p3;
reg   [9:0] y_V_6_reg_2197;
wire   [9:0] y_V_7_fu_1673_p3;
reg   [9:0] y_V_7_reg_2202;
wire   [9:0] y_V_8_fu_1707_p3;
reg   [9:0] y_V_8_reg_2207;
wire   [9:0] y_V_9_fu_1741_p3;
reg   [9:0] y_V_9_reg_2212;
wire   [9:0] y_V_10_fu_1775_p3;
reg   [9:0] y_V_10_reg_2217;
wire   [9:0] y_V_11_fu_1809_p3;
reg   [9:0] y_V_11_reg_2222;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state16_pp0_stage3_iter1;
wire    ap_block_state28_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_11001;
reg   [16:0] exp_res_0_V_1_reg_2232;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state17_pp0_stage4_iter1;
wire    ap_block_state29_pp0_stage4_iter2;
wire    ap_block_pp0_stage4_11001;
reg   [16:0] exp_res_0_V_1_reg_2232_pp0_iter1_reg;
reg   [16:0] exp_res_1_V_1_reg_2243;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state18_pp0_stage5_iter1;
wire    ap_block_state30_pp0_stage5_iter2;
wire    ap_block_pp0_stage5_11001;
reg   [16:0] exp_res_1_V_1_reg_2243_pp0_iter1_reg;
reg   [16:0] exp_res_2_V_1_reg_2254;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_state19_pp0_stage6_iter1;
wire    ap_block_state31_pp0_stage6_iter2;
wire    ap_block_pp0_stage6_11001;
reg   [16:0] exp_res_2_V_1_reg_2254_pp0_iter1_reg;
reg   [16:0] exp_res_3_V_1_reg_2265;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_state20_pp0_stage7_iter1;
wire    ap_block_state32_pp0_stage7_iter2;
wire    ap_block_pp0_stage7_11001;
reg   [16:0] exp_res_3_V_1_reg_2265_pp0_iter1_reg;
reg   [16:0] exp_res_4_V_1_reg_2276;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_state21_pp0_stage8_iter1;
wire    ap_block_state33_pp0_stage8_iter2;
wire    ap_block_pp0_stage8_11001;
reg   [16:0] exp_res_4_V_1_reg_2276_pp0_iter1_reg;
reg   [16:0] exp_res_5_V_1_reg_2287;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_state22_pp0_stage9_iter1;
wire    ap_block_state34_pp0_stage9_iter2;
reg    ap_block_pp0_stage9_11001;
reg   [16:0] exp_res_5_V_1_reg_2287_pp0_iter1_reg;
reg   [16:0] exp_res_6_V_1_reg_2297;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_block_state23_pp0_stage10_iter1;
wire    ap_block_pp0_stage10_11001;
reg   [16:0] exp_res_6_V_1_reg_2297_pp0_iter1_reg;
reg   [16:0] exp_res_7_V_1_reg_2307;
reg   [16:0] exp_res_7_V_1_reg_2307_pp0_iter1_reg;
reg   [16:0] exp_res_8_V_1_reg_2317;
reg   [16:0] exp_res_8_V_1_reg_2317_pp0_iter2_reg;
reg   [16:0] exp_res_9_V_1_reg_2327;
reg   [16:0] exp_res_9_V_1_reg_2327_pp0_iter2_reg;
reg   [16:0] exp_res_10_V_1_reg_2337;
reg   [16:0] exp_res_10_V_1_reg_2337_pp0_iter2_reg;
reg   [16:0] exp_res_11_V_1_reg_2347;
reg   [16:0] exp_res_11_V_1_reg_2347_pp0_iter2_reg;
reg   [17:0] inv_exp_sum_V_reg_2357;
wire  signed [27:0] sext_ln241_fu_1935_p1;
reg  signed [27:0] sext_ln241_reg_2362;
reg   [15:0] tmp_data_0_V_reg_2367;
reg   [15:0] tmp_data_1_V_reg_2372;
reg   [15:0] tmp_data_2_V_reg_2377;
reg   [15:0] tmp_data_3_V_reg_2382;
reg   [15:0] tmp_data_4_V_reg_2387;
reg   [15:0] tmp_data_5_V_reg_2392;
reg   [15:0] tmp_data_6_V_reg_2397;
reg   [15:0] tmp_data_7_V_reg_2402;
reg   [15:0] tmp_data_8_V_reg_2407;
reg   [15:0] tmp_data_9_V_reg_2412;
reg   [15:0] tmp_data_10_V_reg_2417;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage11_subdone;
reg    ap_block_pp0_stage9_subdone;
wire    grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_start;
wire    grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_done;
wire    grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_idle;
wire    grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_ready;
wire   [17:0] grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_return;
reg    grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_ce;
wire    ap_block_state5_pp0_stage4_iter0_ignore_call279;
wire    ap_block_state17_pp0_stage4_iter1_ignore_call279;
wire    ap_block_state29_pp0_stage4_iter2_ignore_call279;
wire    ap_block_pp0_stage4_11001_ignoreCallOp299;
wire    ap_block_state6_pp0_stage5_iter0_ignore_call279;
wire    ap_block_state18_pp0_stage5_iter1_ignore_call279;
wire    ap_block_state30_pp0_stage5_iter2_ignore_call279;
wire    ap_block_pp0_stage5_11001_ignoreCallOp300;
wire    ap_block_state7_pp0_stage6_iter0_ignore_call279;
wire    ap_block_state19_pp0_stage6_iter1_ignore_call279;
wire    ap_block_state31_pp0_stage6_iter2_ignore_call279;
wire    ap_block_pp0_stage6_11001_ignoreCallOp301;
wire    ap_block_state8_pp0_stage7_iter0_ignore_call279;
wire    ap_block_state20_pp0_stage7_iter1_ignore_call279;
wire    ap_block_state32_pp0_stage7_iter2_ignore_call279;
wire    ap_block_pp0_stage7_11001_ignoreCallOp302;
wire    ap_block_state9_pp0_stage8_iter0_ignore_call279;
wire    ap_block_state21_pp0_stage8_iter1_ignore_call279;
wire    ap_block_state33_pp0_stage8_iter2_ignore_call279;
wire    ap_block_pp0_stage8_11001_ignoreCallOp303;
reg    grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_start_reg;
reg   [16:0] exp_res_0_V_fu_266;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage6;
reg   [16:0] exp_res_1_V_fu_270;
reg   [16:0] exp_res_2_V_fu_274;
reg   [16:0] exp_res_3_V_fu_278;
reg   [16:0] exp_res_4_V_fu_282;
reg   [16:0] exp_res_5_V_fu_286;
reg   [16:0] exp_res_6_V_fu_290;
reg   [16:0] exp_res_7_V_fu_294;
reg   [16:0] exp_res_8_V_fu_298;
reg   [16:0] exp_res_9_V_fu_302;
reg   [16:0] exp_res_10_V_fu_306;
reg   [16:0] exp_res_11_V_fu_310;
wire   [63:0] zext_ln225_fu_1817_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln225_1_fu_1821_p1;
wire   [63:0] zext_ln225_2_fu_1825_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln225_3_fu_1829_p1;
wire   [63:0] zext_ln225_4_fu_1833_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln225_5_fu_1837_p1;
wire    ap_block_pp0_stage8;
wire   [63:0] zext_ln225_6_fu_1866_p1;
wire   [63:0] zext_ln225_7_fu_1875_p1;
wire    ap_block_pp0_stage10;
wire   [63:0] zext_ln225_8_fu_1884_p1;
wire    ap_block_pp0_stage11;
wire   [63:0] zext_ln225_9_fu_1893_p1;
wire   [63:0] zext_ln225_10_fu_1902_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln225_11_fu_1911_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln235_fu_1930_p1;
wire    ap_block_pp0_stage9_01001;
reg   [16:0] grp_fu_496_p0;
wire   [27:0] zext_ln1118_fu_1939_p1;
wire   [27:0] zext_ln1118_1_fu_1943_p1;
wire   [27:0] zext_ln1118_2_fu_1947_p1;
wire   [27:0] zext_ln1118_3_fu_1951_p1;
wire   [27:0] zext_ln1118_4_fu_1955_p1;
wire   [27:0] zext_ln1118_5_fu_1959_p1;
wire   [27:0] zext_ln1118_6_fu_1963_p1;
wire   [27:0] zext_ln1118_7_fu_1967_p1;
wire   [27:0] zext_ln1118_8_fu_1971_p1;
wire   [27:0] zext_ln1118_9_fu_1975_p1;
wire   [27:0] zext_ln1118_10_fu_1979_p1;
wire   [27:0] zext_ln1118_11_fu_1983_p1;
reg  signed [17:0] grp_fu_496_p1;
wire   [27:0] grp_fu_496_p2;
wire  signed [15:0] icmp_ln1496_fu_615_p0;
wire  signed [15:0] icmp_ln1496_fu_615_p1;
wire  signed [15:0] icmp_ln1496_1_fu_621_p0;
wire  signed [15:0] icmp_ln1496_1_fu_621_p1;
wire  signed [15:0] icmp_ln1496_3_fu_627_p0;
wire  signed [15:0] icmp_ln1496_3_fu_627_p1;
wire  signed [15:0] icmp_ln1496_4_fu_633_p0;
wire  signed [15:0] icmp_ln1496_4_fu_633_p1;
wire   [15:0] select_ln65_fu_639_p3;
wire   [15:0] select_ln65_1_fu_644_p3;
wire   [0:0] icmp_ln1496_2_fu_649_p2;
wire   [15:0] select_ln65_3_fu_663_p3;
wire   [15:0] select_ln65_4_fu_668_p3;
wire   [0:0] icmp_ln1496_5_fu_673_p2;
wire   [15:0] select_ln65_2_fu_655_p3;
wire   [15:0] select_ln65_5_fu_679_p3;
wire   [0:0] icmp_ln1496_6_fu_687_p2;
wire   [0:0] icmp_ln1496_7_fu_701_p2;
wire   [0:0] icmp_ln1496_8_fu_711_p2;
wire   [15:0] select_ln65_7_fu_705_p3;
wire   [15:0] select_ln65_8_fu_715_p3;
wire   [0:0] icmp_ln1496_9_fu_721_p2;
wire   [0:0] icmp_ln1496_10_fu_735_p2;
wire   [15:0] x_max_V_fu_739_p3;
wire  signed [16:0] sext_ln703_fu_745_p1;
wire  signed [16:0] sext_ln703_1_fu_748_p1;
wire   [16:0] sub_ln1193_fu_752_p2;
wire   [0:0] tmp_25_fu_766_p3;
wire   [0:0] tmp_24_fu_758_p3;
wire   [0:0] xor_ln786_fu_774_p2;
wire   [0:0] xor_ln340_fu_792_p2;
wire  signed [16:0] sext_ln703_2_fu_804_p1;
wire   [16:0] sub_ln1193_1_fu_807_p2;
wire   [0:0] tmp_27_fu_821_p3;
wire   [0:0] tmp_26_fu_813_p3;
wire   [0:0] xor_ln786_1_fu_829_p2;
wire   [0:0] xor_ln340_1_fu_847_p2;
wire  signed [16:0] sext_ln703_3_fu_859_p1;
wire   [16:0] sub_ln1193_2_fu_862_p2;
wire   [0:0] tmp_29_fu_876_p3;
wire   [0:0] tmp_28_fu_868_p3;
wire   [0:0] xor_ln786_2_fu_884_p2;
wire   [0:0] xor_ln340_2_fu_902_p2;
wire  signed [16:0] sext_ln703_4_fu_914_p1;
wire   [16:0] sub_ln1193_3_fu_917_p2;
wire   [0:0] tmp_31_fu_931_p3;
wire   [0:0] tmp_30_fu_923_p3;
wire   [0:0] xor_ln786_3_fu_939_p2;
wire   [0:0] xor_ln340_3_fu_957_p2;
wire  signed [16:0] sext_ln703_5_fu_969_p1;
wire   [16:0] sub_ln1193_4_fu_972_p2;
wire   [0:0] tmp_33_fu_986_p3;
wire   [0:0] tmp_32_fu_978_p3;
wire   [0:0] xor_ln786_4_fu_994_p2;
wire   [0:0] xor_ln340_4_fu_1012_p2;
wire  signed [16:0] sext_ln703_6_fu_1024_p1;
wire   [16:0] sub_ln1193_5_fu_1027_p2;
wire   [0:0] tmp_35_fu_1041_p3;
wire   [0:0] tmp_34_fu_1033_p3;
wire   [0:0] xor_ln786_5_fu_1049_p2;
wire   [0:0] xor_ln340_5_fu_1067_p2;
wire  signed [16:0] sext_ln703_7_fu_1079_p1;
wire   [16:0] sub_ln1193_6_fu_1082_p2;
wire   [0:0] tmp_37_fu_1096_p3;
wire   [0:0] tmp_36_fu_1088_p3;
wire   [0:0] xor_ln786_6_fu_1104_p2;
wire   [0:0] xor_ln340_6_fu_1122_p2;
wire  signed [16:0] sext_ln703_8_fu_1134_p1;
wire   [16:0] sub_ln1193_7_fu_1137_p2;
wire   [0:0] tmp_39_fu_1151_p3;
wire   [0:0] tmp_38_fu_1143_p3;
wire   [0:0] xor_ln786_7_fu_1159_p2;
wire   [0:0] xor_ln340_7_fu_1177_p2;
wire  signed [16:0] sext_ln703_9_fu_1189_p1;
wire   [16:0] sub_ln1193_8_fu_1192_p2;
wire   [0:0] tmp_41_fu_1206_p3;
wire   [0:0] tmp_40_fu_1198_p3;
wire   [0:0] xor_ln786_8_fu_1214_p2;
wire   [0:0] xor_ln340_8_fu_1232_p2;
wire  signed [16:0] sext_ln703_10_fu_1244_p1;
wire   [16:0] sub_ln1193_9_fu_1247_p2;
wire   [0:0] tmp_43_fu_1261_p3;
wire   [0:0] tmp_42_fu_1253_p3;
wire   [0:0] xor_ln786_9_fu_1269_p2;
wire   [0:0] xor_ln340_9_fu_1287_p2;
wire  signed [16:0] sext_ln703_11_fu_1299_p1;
wire   [16:0] sub_ln1193_10_fu_1302_p2;
wire   [0:0] tmp_45_fu_1316_p3;
wire   [0:0] tmp_44_fu_1308_p3;
wire   [0:0] xor_ln786_10_fu_1324_p2;
wire   [0:0] xor_ln340_10_fu_1342_p2;
wire  signed [16:0] sext_ln703_12_fu_1354_p1;
wire   [16:0] sub_ln1193_11_fu_1357_p2;
wire   [0:0] tmp_47_fu_1371_p3;
wire   [0:0] tmp_46_fu_1363_p3;
wire   [0:0] xor_ln786_11_fu_1379_p2;
wire   [0:0] xor_ln340_11_fu_1397_p2;
wire   [0:0] xor_ln340_12_fu_786_p2;
wire   [9:0] tmp_fu_1409_p4;
wire   [0:0] and_ln786_fu_780_p2;
wire   [0:0] or_ln340_fu_798_p2;
wire   [9:0] select_ln340_fu_1419_p3;
wire   [9:0] select_ln388_fu_1427_p3;
wire   [0:0] xor_ln340_13_fu_841_p2;
wire   [9:0] tmp_13_fu_1443_p4;
wire   [0:0] and_ln786_1_fu_835_p2;
wire   [0:0] or_ln340_1_fu_853_p2;
wire   [9:0] select_ln340_2_fu_1453_p3;
wire   [9:0] select_ln388_1_fu_1461_p3;
wire   [0:0] xor_ln340_14_fu_896_p2;
wire   [9:0] tmp_14_fu_1477_p4;
wire   [0:0] and_ln786_2_fu_890_p2;
wire   [0:0] or_ln340_2_fu_908_p2;
wire   [9:0] select_ln340_4_fu_1487_p3;
wire   [9:0] select_ln388_2_fu_1495_p3;
wire   [0:0] xor_ln340_15_fu_951_p2;
wire   [9:0] tmp_15_fu_1511_p4;
wire   [0:0] and_ln786_3_fu_945_p2;
wire   [0:0] or_ln340_3_fu_963_p2;
wire   [9:0] select_ln340_6_fu_1521_p3;
wire   [9:0] select_ln388_3_fu_1529_p3;
wire   [0:0] xor_ln340_16_fu_1006_p2;
wire   [9:0] tmp_16_fu_1545_p4;
wire   [0:0] and_ln786_4_fu_1000_p2;
wire   [0:0] or_ln340_4_fu_1018_p2;
wire   [9:0] select_ln340_8_fu_1555_p3;
wire   [9:0] select_ln388_4_fu_1563_p3;
wire   [0:0] xor_ln340_17_fu_1061_p2;
wire   [9:0] tmp_17_fu_1579_p4;
wire   [0:0] and_ln786_5_fu_1055_p2;
wire   [0:0] or_ln340_5_fu_1073_p2;
wire   [9:0] select_ln340_10_fu_1589_p3;
wire   [9:0] select_ln388_5_fu_1597_p3;
wire   [0:0] xor_ln340_18_fu_1116_p2;
wire   [9:0] tmp_18_fu_1613_p4;
wire   [0:0] and_ln786_6_fu_1110_p2;
wire   [0:0] or_ln340_6_fu_1128_p2;
wire   [9:0] select_ln340_12_fu_1623_p3;
wire   [9:0] select_ln388_6_fu_1631_p3;
wire   [0:0] xor_ln340_19_fu_1171_p2;
wire   [9:0] tmp_19_fu_1647_p4;
wire   [0:0] and_ln786_7_fu_1165_p2;
wire   [0:0] or_ln340_7_fu_1183_p2;
wire   [9:0] select_ln340_14_fu_1657_p3;
wire   [9:0] select_ln388_7_fu_1665_p3;
wire   [0:0] xor_ln340_20_fu_1226_p2;
wire   [9:0] tmp_20_fu_1681_p4;
wire   [0:0] and_ln786_8_fu_1220_p2;
wire   [0:0] or_ln340_8_fu_1238_p2;
wire   [9:0] select_ln340_16_fu_1691_p3;
wire   [9:0] select_ln388_8_fu_1699_p3;
wire   [0:0] xor_ln340_21_fu_1281_p2;
wire   [9:0] tmp_21_fu_1715_p4;
wire   [0:0] and_ln786_9_fu_1275_p2;
wire   [0:0] or_ln340_9_fu_1293_p2;
wire   [9:0] select_ln340_18_fu_1725_p3;
wire   [9:0] select_ln388_9_fu_1733_p3;
wire   [0:0] xor_ln340_22_fu_1336_p2;
wire   [9:0] tmp_22_fu_1749_p4;
wire   [0:0] and_ln786_10_fu_1330_p2;
wire   [0:0] or_ln340_10_fu_1348_p2;
wire   [9:0] select_ln340_20_fu_1759_p3;
wire   [9:0] select_ln388_10_fu_1767_p3;
wire   [0:0] xor_ln340_23_fu_1391_p2;
wire   [9:0] tmp_23_fu_1783_p4;
wire   [0:0] and_ln786_11_fu_1385_p2;
wire   [0:0] or_ln340_11_fu_1403_p2;
wire   [9:0] select_ln340_22_fu_1793_p3;
wire   [9:0] select_ln388_11_fu_1801_p3;
wire   [9:0] y_V_12_fu_1920_p4;
reg   [11:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_block_pp0_stage10_subdone;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_start_reg = 1'b0;
end

softmax_stable_array_array_ap_fixed_16_8_5_3_0_12u_softmax_config7_s_exp_table1 #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0)
);

softmax_stable_array_array_ap_fixed_16_8_5_3_0_12u_softmax_config7_s_invert_tibs #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_start),
    .ap_done(grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_done),
    .ap_idle(grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_idle),
    .ap_ready(grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_ready),
    .x_0_V(exp_res_0_V_fu_266),
    .x_1_V(exp_res_1_V_fu_270),
    .x_2_V(exp_res_2_V_fu_274),
    .x_3_V(exp_res_3_V_fu_278),
    .x_4_V(exp_res_4_V_fu_282),
    .x_5_V(exp_res_5_V_fu_286),
    .x_6_V(exp_res_6_V_fu_290),
    .x_7_V(exp_res_7_V_fu_294),
    .x_8_V(exp_res_8_V_fu_298),
    .x_9_V(exp_res_9_V_fu_302),
    .x_10_V(exp_res_10_V_fu_306),
    .x_11_V(exp_res_11_V_fu_310),
    .ap_return(grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_return),
    .ap_ce(grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage11_subdone) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage11_subdone) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b0 == ap_block_pp0_stage9_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_start_reg <= 1'b1;
        end else if ((grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_ready == 1'b1)) begin
            grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_array_0_V_reg_2059 <= data_V_data_0_V_dout;
        data_array_10_V_reg_2121 <= data_V_data_10_V_dout;
        data_array_11_V_reg_2128 <= data_V_data_11_V_dout;
        data_array_1_V_reg_2065 <= data_V_data_1_V_dout;
        data_array_2_V_reg_2071 <= data_V_data_2_V_dout;
        data_array_3_V_reg_2077 <= data_V_data_3_V_dout;
        data_array_4_V_reg_2083 <= data_V_data_4_V_dout;
        data_array_5_V_reg_2089 <= data_V_data_5_V_dout;
        data_array_6_V_reg_2095 <= data_V_data_6_V_dout;
        data_array_7_V_reg_2101 <= data_V_data_7_V_dout;
        data_array_8_V_reg_2107 <= data_V_data_8_V_dout;
        data_array_9_V_reg_2114 <= data_V_data_9_V_dout;
        exp_res_8_V_1_reg_2317_pp0_iter2_reg <= exp_res_8_V_1_reg_2317;
        icmp_ln1496_1_reg_2140 <= icmp_ln1496_1_fu_621_p2;
        icmp_ln1496_3_reg_2145 <= icmp_ln1496_3_fu_627_p2;
        icmp_ln1496_4_reg_2150 <= icmp_ln1496_4_fu_633_p2;
        icmp_ln1496_reg_2135 <= icmp_ln1496_fu_615_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_0_V_1_reg_2232 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        exp_res_0_V_1_reg_2232_pp0_iter1_reg <= exp_res_0_V_1_reg_2232;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        exp_res_0_V_fu_266 <= exp_res_0_V_1_reg_2232;
        exp_res_1_V_fu_270 <= exp_res_1_V_1_reg_2243;
        exp_res_2_V_fu_274 <= exp_res_2_V_1_reg_2254;
        exp_res_3_V_fu_278 <= exp_res_3_V_1_reg_2265;
        exp_res_4_V_fu_282 <= exp_res_4_V_1_reg_2276;
        exp_res_5_V_1_reg_2287 <= exp_table1_q0;
        exp_res_5_V_fu_286 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exp_res_10_V_1_reg_2337 <= exp_table1_q0;
        exp_res_10_V_fu_306 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exp_res_10_V_1_reg_2337_pp0_iter2_reg <= exp_res_10_V_1_reg_2337;
        y_V_10_reg_2217 <= y_V_10_fu_1775_p3;
        y_V_11_reg_2222 <= y_V_11_fu_1809_p3;
        y_V_1_reg_2172 <= y_V_1_fu_1469_p3;
        y_V_2_reg_2177 <= y_V_2_fu_1503_p3;
        y_V_3_reg_2182 <= y_V_3_fu_1537_p3;
        y_V_4_reg_2187 <= y_V_4_fu_1571_p3;
        y_V_5_reg_2192 <= y_V_5_fu_1605_p3;
        y_V_6_reg_2197 <= y_V_6_fu_1639_p3;
        y_V_7_reg_2202 <= y_V_7_fu_1673_p3;
        y_V_8_reg_2207 <= y_V_8_fu_1707_p3;
        y_V_9_reg_2212 <= y_V_9_fu_1741_p3;
        y_V_reg_2167 <= y_V_fu_1435_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        exp_res_11_V_1_reg_2347 <= exp_table1_q0;
        exp_res_11_V_fu_310 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        exp_res_11_V_1_reg_2347_pp0_iter2_reg <= exp_res_11_V_1_reg_2347;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_1_V_1_reg_2243 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        exp_res_1_V_1_reg_2243_pp0_iter1_reg <= exp_res_1_V_1_reg_2243;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_2_V_1_reg_2254 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        exp_res_2_V_1_reg_2254_pp0_iter1_reg <= exp_res_2_V_1_reg_2254;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_3_V_1_reg_2265 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        exp_res_3_V_1_reg_2265_pp0_iter1_reg <= exp_res_3_V_1_reg_2265;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_4_V_1_reg_2276 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        exp_res_4_V_1_reg_2276_pp0_iter1_reg <= exp_res_4_V_1_reg_2276;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        exp_res_5_V_1_reg_2287_pp0_iter1_reg <= exp_res_5_V_1_reg_2287;
        inv_exp_sum_V_reg_2357 <= invert_table2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_6_V_1_reg_2297 <= exp_table1_q0;
        exp_res_6_V_fu_290 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        exp_res_6_V_1_reg_2297_pp0_iter1_reg <= exp_res_6_V_1_reg_2297;
        sext_ln241_reg_2362 <= sext_ln241_fu_1935_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_7_V_1_reg_2307 <= exp_table1_q0;
        exp_res_7_V_fu_294 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        exp_res_7_V_1_reg_2307_pp0_iter1_reg <= exp_res_7_V_1_reg_2307;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_res_8_V_1_reg_2317 <= exp_table1_q0;
        exp_res_8_V_fu_298 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_res_9_V_1_reg_2327 <= exp_table1_q0;
        exp_res_9_V_fu_302 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_res_9_V_1_reg_2327_pp0_iter2_reg <= exp_res_9_V_1_reg_2327;
        select_ln65_6_reg_2155 <= select_ln65_6_fu_693_p3;
        select_ln65_9_reg_2161 <= select_ln65_9_fu_727_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        tmp_data_0_V_reg_2367 <= {{grp_fu_496_p2[27:12]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        tmp_data_10_V_reg_2417 <= {{grp_fu_496_p2[27:12]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        tmp_data_1_V_reg_2372 <= {{grp_fu_496_p2[27:12]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_2_V_reg_2377 <= {{grp_fu_496_p2[27:12]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_data_3_V_reg_2382 <= {{grp_fu_496_p2[27:12]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_data_4_V_reg_2387 <= {{grp_fu_496_p2[27:12]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_data_5_V_reg_2392 <= {{grp_fu_496_p2[27:12]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp_data_6_V_reg_2397 <= {{grp_fu_496_p2[27:12]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        tmp_data_7_V_reg_2402 <= {{grp_fu_496_p2[27:12]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        tmp_data_8_V_reg_2407 <= {{grp_fu_496_p2[27:12]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        tmp_data_9_V_reg_2412 <= {{grp_fu_496_p2[27:12]}};
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_10_V_blk_n = data_V_data_10_V_empty_n;
    end else begin
        data_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_10_V_read = 1'b1;
    end else begin
        data_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_11_V_blk_n = data_V_data_11_V_empty_n;
    end else begin
        data_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_11_V_read = 1'b1;
    end else begin
        data_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exp_table1_address0 = zext_ln225_11_fu_1911_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_table1_address0 = zext_ln225_10_fu_1902_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_address0 = zext_ln225_9_fu_1893_p1;
    end else if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table1_address0 = zext_ln225_8_fu_1884_p1;
    end else if (((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table1_address0 = zext_ln225_7_fu_1875_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
        exp_table1_address0 = zext_ln225_6_fu_1866_p1;
    end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table1_address0 = zext_ln225_5_fu_1837_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table1_address0 = zext_ln225_4_fu_1833_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table1_address0 = zext_ln225_3_fu_1829_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table1_address0 = zext_ln225_2_fu_1825_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table1_address0 = zext_ln225_1_fu_1821_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table1_address0 = zext_ln225_fu_1817_p1;
    end else begin
        exp_table1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
        grp_fu_496_p0 = zext_ln1118_11_fu_1983_p1;
    end else if (((1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        grp_fu_496_p0 = zext_ln1118_10_fu_1979_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_fu_496_p0 = zext_ln1118_9_fu_1975_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_496_p0 = zext_ln1118_8_fu_1971_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_496_p0 = zext_ln1118_7_fu_1967_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_496_p0 = zext_ln1118_6_fu_1963_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_496_p0 = zext_ln1118_5_fu_1959_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_496_p0 = zext_ln1118_4_fu_1955_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_496_p0 = zext_ln1118_3_fu_1951_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_496_p0 = zext_ln1118_2_fu_1947_p1;
    end else if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_496_p0 = zext_ln1118_1_fu_1943_p1;
    end else if (((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_496_p0 = zext_ln1118_fu_1939_p1;
    end else begin
        grp_fu_496_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9)))) begin
        grp_fu_496_p1 = sext_ln241_reg_2362;
    end else if (((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_496_p1 = sext_ln241_fu_1935_p1;
    end else begin
        grp_fu_496_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage8_11001_ignoreCallOp303) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7_11001_ignoreCallOp302) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001_ignoreCallOp301) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001_ignoreCallOp300) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001_ignoreCallOp299) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_ce = 1'b1;
    end else begin
        grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
        res_V_data_0_V_TDATA_blk_n = res_V_data_0_V_TREADY;
    end else begin
        res_V_data_0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        res_V_data_0_V_TVALID = 1'b1;
    end else begin
        res_V_data_0_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
        res_V_data_10_V_TDATA_blk_n = res_V_data_10_V_TREADY;
    end else begin
        res_V_data_10_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        res_V_data_10_V_TVALID = 1'b1;
    end else begin
        res_V_data_10_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
        res_V_data_11_V_TDATA_blk_n = res_V_data_11_V_TREADY;
    end else begin
        res_V_data_11_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        res_V_data_11_V_TVALID = 1'b1;
    end else begin
        res_V_data_11_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
        res_V_data_1_V_TDATA_blk_n = res_V_data_1_V_TREADY;
    end else begin
        res_V_data_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        res_V_data_1_V_TVALID = 1'b1;
    end else begin
        res_V_data_1_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
        res_V_data_2_V_TDATA_blk_n = res_V_data_2_V_TREADY;
    end else begin
        res_V_data_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        res_V_data_2_V_TVALID = 1'b1;
    end else begin
        res_V_data_2_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
        res_V_data_3_V_TDATA_blk_n = res_V_data_3_V_TREADY;
    end else begin
        res_V_data_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        res_V_data_3_V_TVALID = 1'b1;
    end else begin
        res_V_data_3_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
        res_V_data_4_V_TDATA_blk_n = res_V_data_4_V_TREADY;
    end else begin
        res_V_data_4_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        res_V_data_4_V_TVALID = 1'b1;
    end else begin
        res_V_data_4_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
        res_V_data_5_V_TDATA_blk_n = res_V_data_5_V_TREADY;
    end else begin
        res_V_data_5_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        res_V_data_5_V_TVALID = 1'b1;
    end else begin
        res_V_data_5_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
        res_V_data_6_V_TDATA_blk_n = res_V_data_6_V_TREADY;
    end else begin
        res_V_data_6_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        res_V_data_6_V_TVALID = 1'b1;
    end else begin
        res_V_data_6_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
        res_V_data_7_V_TDATA_blk_n = res_V_data_7_V_TREADY;
    end else begin
        res_V_data_7_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        res_V_data_7_V_TVALID = 1'b1;
    end else begin
        res_V_data_7_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
        res_V_data_8_V_TDATA_blk_n = res_V_data_8_V_TREADY;
    end else begin
        res_V_data_8_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        res_V_data_8_V_TVALID = 1'b1;
    end else begin
        res_V_data_8_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
        res_V_data_9_V_TDATA_blk_n = res_V_data_9_V_TREADY;
    end else begin
        res_V_data_9_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        res_V_data_9_V_TVALID = 1'b1;
    end else begin
        res_V_data_9_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if (((1'b0 == ap_block_pp0_stage9_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else if (((1'b0 == ap_block_pp0_stage9_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln786_10_fu_1330_p2 = (xor_ln786_10_fu_1324_p2 & tmp_44_fu_1308_p3);

assign and_ln786_11_fu_1385_p2 = (xor_ln786_11_fu_1379_p2 & tmp_46_fu_1363_p3);

assign and_ln786_1_fu_835_p2 = (xor_ln786_1_fu_829_p2 & tmp_26_fu_813_p3);

assign and_ln786_2_fu_890_p2 = (xor_ln786_2_fu_884_p2 & tmp_28_fu_868_p3);

assign and_ln786_3_fu_945_p2 = (xor_ln786_3_fu_939_p2 & tmp_30_fu_923_p3);

assign and_ln786_4_fu_1000_p2 = (xor_ln786_4_fu_994_p2 & tmp_32_fu_978_p3);

assign and_ln786_5_fu_1055_p2 = (xor_ln786_5_fu_1049_p2 & tmp_34_fu_1033_p3);

assign and_ln786_6_fu_1110_p2 = (xor_ln786_6_fu_1104_p2 & tmp_36_fu_1088_p3);

assign and_ln786_7_fu_1165_p2 = (xor_ln786_7_fu_1159_p2 & tmp_38_fu_1143_p3);

assign and_ln786_8_fu_1220_p2 = (xor_ln786_8_fu_1214_p2 & tmp_40_fu_1198_p3);

assign and_ln786_9_fu_1275_p2 = (xor_ln786_9_fu_1269_p2 & tmp_42_fu_1253_p3);

assign and_ln786_fu_780_p2 = (xor_ln786_fu_774_p2 & tmp_24_fu_758_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((io_acc_block_signal_op47 == 1'b0) | (ap_start == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((io_acc_block_signal_op47 == 1'b0) | (ap_start == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001_ignoreCallOp299 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001_ignoreCallOp300 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001_ignoreCallOp301 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001_ignoreCallOp302 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001_ignoreCallOp303 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001 = ((res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage4_iter1_ignore_call279 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage5_iter1_ignore_call279 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage6_iter1_ignore_call279 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((io_acc_block_signal_op47 == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state20_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage7_iter1_ignore_call279 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage8_iter1_ignore_call279 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage9_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage10_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage11_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage4_iter2_ignore_call279 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage5_iter2_ignore_call279 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage6_iter2_ignore_call279 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage7_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage7_iter2_ignore_call279 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage8_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage8_iter2_ignore_call279 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage9_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0_ignore_call279 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0_ignore_call279 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0_ignore_call279 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0_ignore_call279 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0_ignore_call279 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_496_p2 = ($signed({{1'b0}, {grp_fu_496_p0}}) * $signed(grp_fu_496_p1));

assign grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_start = grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_start_reg;

assign icmp_ln1496_10_fu_735_p2 = (($signed(select_ln65_6_reg_2155) < $signed(select_ln65_9_reg_2161)) ? 1'b1 : 1'b0);

assign icmp_ln1496_1_fu_621_p0 = data_V_data_2_V_dout;

assign icmp_ln1496_1_fu_621_p1 = data_V_data_3_V_dout;

assign icmp_ln1496_1_fu_621_p2 = (($signed(icmp_ln1496_1_fu_621_p0) < $signed(icmp_ln1496_1_fu_621_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_649_p2 = (($signed(select_ln65_fu_639_p3) < $signed(select_ln65_1_fu_644_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_627_p0 = data_V_data_4_V_dout;

assign icmp_ln1496_3_fu_627_p1 = data_V_data_5_V_dout;

assign icmp_ln1496_3_fu_627_p2 = (($signed(icmp_ln1496_3_fu_627_p0) < $signed(icmp_ln1496_3_fu_627_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_633_p0 = data_V_data_6_V_dout;

assign icmp_ln1496_4_fu_633_p1 = data_V_data_7_V_dout;

assign icmp_ln1496_4_fu_633_p2 = (($signed(icmp_ln1496_4_fu_633_p0) < $signed(icmp_ln1496_4_fu_633_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_673_p2 = (($signed(select_ln65_3_fu_663_p3) < $signed(select_ln65_4_fu_668_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_687_p2 = (($signed(select_ln65_2_fu_655_p3) < $signed(select_ln65_5_fu_679_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_701_p2 = (($signed(data_array_8_V_reg_2107) < $signed(data_array_9_V_reg_2114)) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_711_p2 = (($signed(data_array_10_V_reg_2121) < $signed(data_array_11_V_reg_2128)) ? 1'b1 : 1'b0);

assign icmp_ln1496_9_fu_721_p2 = (($signed(select_ln65_7_fu_705_p3) < $signed(select_ln65_8_fu_715_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_615_p0 = data_V_data_0_V_dout;

assign icmp_ln1496_fu_615_p1 = data_V_data_1_V_dout;

assign icmp_ln1496_fu_615_p2 = (($signed(icmp_ln1496_fu_615_p0) < $signed(icmp_ln1496_fu_615_p1)) ? 1'b1 : 1'b0);

assign invert_table2_address0 = zext_ln235_fu_1930_p1;

assign io_acc_block_signal_op47 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_11_V_empty_n & data_V_data_10_V_empty_n & data_V_data_0_V_empty_n);

assign or_ln340_10_fu_1348_p2 = (xor_ln340_10_fu_1342_p2 | tmp_45_fu_1316_p3);

assign or_ln340_11_fu_1403_p2 = (xor_ln340_11_fu_1397_p2 | tmp_47_fu_1371_p3);

assign or_ln340_1_fu_853_p2 = (xor_ln340_1_fu_847_p2 | tmp_27_fu_821_p3);

assign or_ln340_2_fu_908_p2 = (xor_ln340_2_fu_902_p2 | tmp_29_fu_876_p3);

assign or_ln340_3_fu_963_p2 = (xor_ln340_3_fu_957_p2 | tmp_31_fu_931_p3);

assign or_ln340_4_fu_1018_p2 = (xor_ln340_4_fu_1012_p2 | tmp_33_fu_986_p3);

assign or_ln340_5_fu_1073_p2 = (xor_ln340_5_fu_1067_p2 | tmp_35_fu_1041_p3);

assign or_ln340_6_fu_1128_p2 = (xor_ln340_6_fu_1122_p2 | tmp_37_fu_1096_p3);

assign or_ln340_7_fu_1183_p2 = (xor_ln340_7_fu_1177_p2 | tmp_39_fu_1151_p3);

assign or_ln340_8_fu_1238_p2 = (xor_ln340_8_fu_1232_p2 | tmp_41_fu_1206_p3);

assign or_ln340_9_fu_1293_p2 = (xor_ln340_9_fu_1287_p2 | tmp_43_fu_1261_p3);

assign or_ln340_fu_798_p2 = (xor_ln340_fu_792_p2 | tmp_25_fu_766_p3);

assign res_V_data_0_V_TDATA = tmp_data_0_V_reg_2367;

assign res_V_data_10_V_TDATA = tmp_data_10_V_reg_2417;

assign res_V_data_11_V_TDATA = {{grp_fu_496_p2[27:12]}};

assign res_V_data_1_V_TDATA = tmp_data_1_V_reg_2372;

assign res_V_data_2_V_TDATA = tmp_data_2_V_reg_2377;

assign res_V_data_3_V_TDATA = tmp_data_3_V_reg_2382;

assign res_V_data_4_V_TDATA = tmp_data_4_V_reg_2387;

assign res_V_data_5_V_TDATA = tmp_data_5_V_reg_2392;

assign res_V_data_6_V_TDATA = tmp_data_6_V_reg_2397;

assign res_V_data_7_V_TDATA = tmp_data_7_V_reg_2402;

assign res_V_data_8_V_TDATA = tmp_data_8_V_reg_2407;

assign res_V_data_9_V_TDATA = tmp_data_9_V_reg_2412;

assign select_ln340_10_fu_1589_p3 = ((xor_ln340_17_fu_1061_p2[0:0] === 1'b1) ? 10'd511 : tmp_17_fu_1579_p4);

assign select_ln340_12_fu_1623_p3 = ((xor_ln340_18_fu_1116_p2[0:0] === 1'b1) ? 10'd511 : tmp_18_fu_1613_p4);

assign select_ln340_14_fu_1657_p3 = ((xor_ln340_19_fu_1171_p2[0:0] === 1'b1) ? 10'd511 : tmp_19_fu_1647_p4);

assign select_ln340_16_fu_1691_p3 = ((xor_ln340_20_fu_1226_p2[0:0] === 1'b1) ? 10'd511 : tmp_20_fu_1681_p4);

assign select_ln340_18_fu_1725_p3 = ((xor_ln340_21_fu_1281_p2[0:0] === 1'b1) ? 10'd511 : tmp_21_fu_1715_p4);

assign select_ln340_20_fu_1759_p3 = ((xor_ln340_22_fu_1336_p2[0:0] === 1'b1) ? 10'd511 : tmp_22_fu_1749_p4);

assign select_ln340_22_fu_1793_p3 = ((xor_ln340_23_fu_1391_p2[0:0] === 1'b1) ? 10'd511 : tmp_23_fu_1783_p4);

assign select_ln340_2_fu_1453_p3 = ((xor_ln340_13_fu_841_p2[0:0] === 1'b1) ? 10'd511 : tmp_13_fu_1443_p4);

assign select_ln340_4_fu_1487_p3 = ((xor_ln340_14_fu_896_p2[0:0] === 1'b1) ? 10'd511 : tmp_14_fu_1477_p4);

assign select_ln340_6_fu_1521_p3 = ((xor_ln340_15_fu_951_p2[0:0] === 1'b1) ? 10'd511 : tmp_15_fu_1511_p4);

assign select_ln340_8_fu_1555_p3 = ((xor_ln340_16_fu_1006_p2[0:0] === 1'b1) ? 10'd511 : tmp_16_fu_1545_p4);

assign select_ln340_fu_1419_p3 = ((xor_ln340_12_fu_786_p2[0:0] === 1'b1) ? 10'd511 : tmp_fu_1409_p4);

assign select_ln388_10_fu_1767_p3 = ((and_ln786_10_fu_1330_p2[0:0] === 1'b1) ? 10'd512 : tmp_22_fu_1749_p4);

assign select_ln388_11_fu_1801_p3 = ((and_ln786_11_fu_1385_p2[0:0] === 1'b1) ? 10'd512 : tmp_23_fu_1783_p4);

assign select_ln388_1_fu_1461_p3 = ((and_ln786_1_fu_835_p2[0:0] === 1'b1) ? 10'd512 : tmp_13_fu_1443_p4);

assign select_ln388_2_fu_1495_p3 = ((and_ln786_2_fu_890_p2[0:0] === 1'b1) ? 10'd512 : tmp_14_fu_1477_p4);

assign select_ln388_3_fu_1529_p3 = ((and_ln786_3_fu_945_p2[0:0] === 1'b1) ? 10'd512 : tmp_15_fu_1511_p4);

assign select_ln388_4_fu_1563_p3 = ((and_ln786_4_fu_1000_p2[0:0] === 1'b1) ? 10'd512 : tmp_16_fu_1545_p4);

assign select_ln388_5_fu_1597_p3 = ((and_ln786_5_fu_1055_p2[0:0] === 1'b1) ? 10'd512 : tmp_17_fu_1579_p4);

assign select_ln388_6_fu_1631_p3 = ((and_ln786_6_fu_1110_p2[0:0] === 1'b1) ? 10'd512 : tmp_18_fu_1613_p4);

assign select_ln388_7_fu_1665_p3 = ((and_ln786_7_fu_1165_p2[0:0] === 1'b1) ? 10'd512 : tmp_19_fu_1647_p4);

assign select_ln388_8_fu_1699_p3 = ((and_ln786_8_fu_1220_p2[0:0] === 1'b1) ? 10'd512 : tmp_20_fu_1681_p4);

assign select_ln388_9_fu_1733_p3 = ((and_ln786_9_fu_1275_p2[0:0] === 1'b1) ? 10'd512 : tmp_21_fu_1715_p4);

assign select_ln388_fu_1427_p3 = ((and_ln786_fu_780_p2[0:0] === 1'b1) ? 10'd512 : tmp_fu_1409_p4);

assign select_ln65_1_fu_644_p3 = ((icmp_ln1496_1_reg_2140[0:0] === 1'b1) ? data_array_3_V_reg_2077 : data_array_2_V_reg_2071);

assign select_ln65_2_fu_655_p3 = ((icmp_ln1496_2_fu_649_p2[0:0] === 1'b1) ? select_ln65_1_fu_644_p3 : select_ln65_fu_639_p3);

assign select_ln65_3_fu_663_p3 = ((icmp_ln1496_3_reg_2145[0:0] === 1'b1) ? data_array_5_V_reg_2089 : data_array_4_V_reg_2083);

assign select_ln65_4_fu_668_p3 = ((icmp_ln1496_4_reg_2150[0:0] === 1'b1) ? data_array_7_V_reg_2101 : data_array_6_V_reg_2095);

assign select_ln65_5_fu_679_p3 = ((icmp_ln1496_5_fu_673_p2[0:0] === 1'b1) ? select_ln65_4_fu_668_p3 : select_ln65_3_fu_663_p3);

assign select_ln65_6_fu_693_p3 = ((icmp_ln1496_6_fu_687_p2[0:0] === 1'b1) ? select_ln65_5_fu_679_p3 : select_ln65_2_fu_655_p3);

assign select_ln65_7_fu_705_p3 = ((icmp_ln1496_7_fu_701_p2[0:0] === 1'b1) ? data_array_9_V_reg_2114 : data_array_8_V_reg_2107);

assign select_ln65_8_fu_715_p3 = ((icmp_ln1496_8_fu_711_p2[0:0] === 1'b1) ? data_array_11_V_reg_2128 : data_array_10_V_reg_2121);

assign select_ln65_9_fu_727_p3 = ((icmp_ln1496_9_fu_721_p2[0:0] === 1'b1) ? select_ln65_8_fu_715_p3 : select_ln65_7_fu_705_p3);

assign select_ln65_fu_639_p3 = ((icmp_ln1496_reg_2135[0:0] === 1'b1) ? data_array_1_V_reg_2065 : data_array_0_V_reg_2059);

assign sext_ln241_fu_1935_p1 = $signed(inv_exp_sum_V_reg_2357);

assign sext_ln703_10_fu_1244_p1 = data_array_9_V_reg_2114;

assign sext_ln703_11_fu_1299_p1 = data_array_10_V_reg_2121;

assign sext_ln703_12_fu_1354_p1 = data_array_11_V_reg_2128;

assign sext_ln703_1_fu_748_p1 = $signed(x_max_V_fu_739_p3);

assign sext_ln703_2_fu_804_p1 = data_array_1_V_reg_2065;

assign sext_ln703_3_fu_859_p1 = data_array_2_V_reg_2071;

assign sext_ln703_4_fu_914_p1 = data_array_3_V_reg_2077;

assign sext_ln703_5_fu_969_p1 = data_array_4_V_reg_2083;

assign sext_ln703_6_fu_1024_p1 = data_array_5_V_reg_2089;

assign sext_ln703_7_fu_1079_p1 = data_array_6_V_reg_2095;

assign sext_ln703_8_fu_1134_p1 = data_array_7_V_reg_2101;

assign sext_ln703_9_fu_1189_p1 = data_array_8_V_reg_2107;

assign sext_ln703_fu_745_p1 = data_array_0_V_reg_2059;

assign sub_ln1193_10_fu_1302_p2 = ($signed(sext_ln703_11_fu_1299_p1) - $signed(sext_ln703_1_fu_748_p1));

assign sub_ln1193_11_fu_1357_p2 = ($signed(sext_ln703_12_fu_1354_p1) - $signed(sext_ln703_1_fu_748_p1));

assign sub_ln1193_1_fu_807_p2 = ($signed(sext_ln703_2_fu_804_p1) - $signed(sext_ln703_1_fu_748_p1));

assign sub_ln1193_2_fu_862_p2 = ($signed(sext_ln703_3_fu_859_p1) - $signed(sext_ln703_1_fu_748_p1));

assign sub_ln1193_3_fu_917_p2 = ($signed(sext_ln703_4_fu_914_p1) - $signed(sext_ln703_1_fu_748_p1));

assign sub_ln1193_4_fu_972_p2 = ($signed(sext_ln703_5_fu_969_p1) - $signed(sext_ln703_1_fu_748_p1));

assign sub_ln1193_5_fu_1027_p2 = ($signed(sext_ln703_6_fu_1024_p1) - $signed(sext_ln703_1_fu_748_p1));

assign sub_ln1193_6_fu_1082_p2 = ($signed(sext_ln703_7_fu_1079_p1) - $signed(sext_ln703_1_fu_748_p1));

assign sub_ln1193_7_fu_1137_p2 = ($signed(sext_ln703_8_fu_1134_p1) - $signed(sext_ln703_1_fu_748_p1));

assign sub_ln1193_8_fu_1192_p2 = ($signed(sext_ln703_9_fu_1189_p1) - $signed(sext_ln703_1_fu_748_p1));

assign sub_ln1193_9_fu_1247_p2 = ($signed(sext_ln703_10_fu_1244_p1) - $signed(sext_ln703_1_fu_748_p1));

assign sub_ln1193_fu_752_p2 = ($signed(sext_ln703_fu_745_p1) - $signed(sext_ln703_1_fu_748_p1));

assign tmp_13_fu_1443_p4 = {{sub_ln1193_1_fu_807_p2[15:6]}};

assign tmp_14_fu_1477_p4 = {{sub_ln1193_2_fu_862_p2[15:6]}};

assign tmp_15_fu_1511_p4 = {{sub_ln1193_3_fu_917_p2[15:6]}};

assign tmp_16_fu_1545_p4 = {{sub_ln1193_4_fu_972_p2[15:6]}};

assign tmp_17_fu_1579_p4 = {{sub_ln1193_5_fu_1027_p2[15:6]}};

assign tmp_18_fu_1613_p4 = {{sub_ln1193_6_fu_1082_p2[15:6]}};

assign tmp_19_fu_1647_p4 = {{sub_ln1193_7_fu_1137_p2[15:6]}};

assign tmp_20_fu_1681_p4 = {{sub_ln1193_8_fu_1192_p2[15:6]}};

assign tmp_21_fu_1715_p4 = {{sub_ln1193_9_fu_1247_p2[15:6]}};

assign tmp_22_fu_1749_p4 = {{sub_ln1193_10_fu_1302_p2[15:6]}};

assign tmp_23_fu_1783_p4 = {{sub_ln1193_11_fu_1357_p2[15:6]}};

assign tmp_24_fu_758_p3 = sub_ln1193_fu_752_p2[32'd16];

assign tmp_25_fu_766_p3 = sub_ln1193_fu_752_p2[32'd15];

assign tmp_26_fu_813_p3 = sub_ln1193_1_fu_807_p2[32'd16];

assign tmp_27_fu_821_p3 = sub_ln1193_1_fu_807_p2[32'd15];

assign tmp_28_fu_868_p3 = sub_ln1193_2_fu_862_p2[32'd16];

assign tmp_29_fu_876_p3 = sub_ln1193_2_fu_862_p2[32'd15];

assign tmp_30_fu_923_p3 = sub_ln1193_3_fu_917_p2[32'd16];

assign tmp_31_fu_931_p3 = sub_ln1193_3_fu_917_p2[32'd15];

assign tmp_32_fu_978_p3 = sub_ln1193_4_fu_972_p2[32'd16];

assign tmp_33_fu_986_p3 = sub_ln1193_4_fu_972_p2[32'd15];

assign tmp_34_fu_1033_p3 = sub_ln1193_5_fu_1027_p2[32'd16];

assign tmp_35_fu_1041_p3 = sub_ln1193_5_fu_1027_p2[32'd15];

assign tmp_36_fu_1088_p3 = sub_ln1193_6_fu_1082_p2[32'd16];

assign tmp_37_fu_1096_p3 = sub_ln1193_6_fu_1082_p2[32'd15];

assign tmp_38_fu_1143_p3 = sub_ln1193_7_fu_1137_p2[32'd16];

assign tmp_39_fu_1151_p3 = sub_ln1193_7_fu_1137_p2[32'd15];

assign tmp_40_fu_1198_p3 = sub_ln1193_8_fu_1192_p2[32'd16];

assign tmp_41_fu_1206_p3 = sub_ln1193_8_fu_1192_p2[32'd15];

assign tmp_42_fu_1253_p3 = sub_ln1193_9_fu_1247_p2[32'd16];

assign tmp_43_fu_1261_p3 = sub_ln1193_9_fu_1247_p2[32'd15];

assign tmp_44_fu_1308_p3 = sub_ln1193_10_fu_1302_p2[32'd16];

assign tmp_45_fu_1316_p3 = sub_ln1193_10_fu_1302_p2[32'd15];

assign tmp_46_fu_1363_p3 = sub_ln1193_11_fu_1357_p2[32'd16];

assign tmp_47_fu_1371_p3 = sub_ln1193_11_fu_1357_p2[32'd15];

assign tmp_fu_1409_p4 = {{sub_ln1193_fu_752_p2[15:6]}};

assign x_max_V_fu_739_p3 = ((icmp_ln1496_10_fu_735_p2[0:0] === 1'b1) ? select_ln65_9_reg_2161 : select_ln65_6_reg_2155);

assign xor_ln340_10_fu_1342_p2 = (tmp_44_fu_1308_p3 ^ 1'd1);

assign xor_ln340_11_fu_1397_p2 = (tmp_46_fu_1363_p3 ^ 1'd1);

assign xor_ln340_12_fu_786_p2 = (tmp_25_fu_766_p3 ^ tmp_24_fu_758_p3);

assign xor_ln340_13_fu_841_p2 = (tmp_27_fu_821_p3 ^ tmp_26_fu_813_p3);

assign xor_ln340_14_fu_896_p2 = (tmp_29_fu_876_p3 ^ tmp_28_fu_868_p3);

assign xor_ln340_15_fu_951_p2 = (tmp_31_fu_931_p3 ^ tmp_30_fu_923_p3);

assign xor_ln340_16_fu_1006_p2 = (tmp_33_fu_986_p3 ^ tmp_32_fu_978_p3);

assign xor_ln340_17_fu_1061_p2 = (tmp_35_fu_1041_p3 ^ tmp_34_fu_1033_p3);

assign xor_ln340_18_fu_1116_p2 = (tmp_37_fu_1096_p3 ^ tmp_36_fu_1088_p3);

assign xor_ln340_19_fu_1171_p2 = (tmp_39_fu_1151_p3 ^ tmp_38_fu_1143_p3);

assign xor_ln340_1_fu_847_p2 = (tmp_26_fu_813_p3 ^ 1'd1);

assign xor_ln340_20_fu_1226_p2 = (tmp_41_fu_1206_p3 ^ tmp_40_fu_1198_p3);

assign xor_ln340_21_fu_1281_p2 = (tmp_43_fu_1261_p3 ^ tmp_42_fu_1253_p3);

assign xor_ln340_22_fu_1336_p2 = (tmp_45_fu_1316_p3 ^ tmp_44_fu_1308_p3);

assign xor_ln340_23_fu_1391_p2 = (tmp_47_fu_1371_p3 ^ tmp_46_fu_1363_p3);

assign xor_ln340_2_fu_902_p2 = (tmp_28_fu_868_p3 ^ 1'd1);

assign xor_ln340_3_fu_957_p2 = (tmp_30_fu_923_p3 ^ 1'd1);

assign xor_ln340_4_fu_1012_p2 = (tmp_32_fu_978_p3 ^ 1'd1);

assign xor_ln340_5_fu_1067_p2 = (tmp_34_fu_1033_p3 ^ 1'd1);

assign xor_ln340_6_fu_1122_p2 = (tmp_36_fu_1088_p3 ^ 1'd1);

assign xor_ln340_7_fu_1177_p2 = (tmp_38_fu_1143_p3 ^ 1'd1);

assign xor_ln340_8_fu_1232_p2 = (tmp_40_fu_1198_p3 ^ 1'd1);

assign xor_ln340_9_fu_1287_p2 = (tmp_42_fu_1253_p3 ^ 1'd1);

assign xor_ln340_fu_792_p2 = (tmp_24_fu_758_p3 ^ 1'd1);

assign xor_ln786_10_fu_1324_p2 = (tmp_45_fu_1316_p3 ^ 1'd1);

assign xor_ln786_11_fu_1379_p2 = (tmp_47_fu_1371_p3 ^ 1'd1);

assign xor_ln786_1_fu_829_p2 = (tmp_27_fu_821_p3 ^ 1'd1);

assign xor_ln786_2_fu_884_p2 = (tmp_29_fu_876_p3 ^ 1'd1);

assign xor_ln786_3_fu_939_p2 = (tmp_31_fu_931_p3 ^ 1'd1);

assign xor_ln786_4_fu_994_p2 = (tmp_33_fu_986_p3 ^ 1'd1);

assign xor_ln786_5_fu_1049_p2 = (tmp_35_fu_1041_p3 ^ 1'd1);

assign xor_ln786_6_fu_1104_p2 = (tmp_37_fu_1096_p3 ^ 1'd1);

assign xor_ln786_7_fu_1159_p2 = (tmp_39_fu_1151_p3 ^ 1'd1);

assign xor_ln786_8_fu_1214_p2 = (tmp_41_fu_1206_p3 ^ 1'd1);

assign xor_ln786_9_fu_1269_p2 = (tmp_43_fu_1261_p3 ^ 1'd1);

assign xor_ln786_fu_774_p2 = (tmp_25_fu_766_p3 ^ 1'd1);

assign y_V_10_fu_1775_p3 = ((or_ln340_10_fu_1348_p2[0:0] === 1'b1) ? select_ln340_20_fu_1759_p3 : select_ln388_10_fu_1767_p3);

assign y_V_11_fu_1809_p3 = ((or_ln340_11_fu_1403_p2[0:0] === 1'b1) ? select_ln340_22_fu_1793_p3 : select_ln388_11_fu_1801_p3);

assign y_V_12_fu_1920_p4 = {{grp_reduce_ap_fixed_18_8_0_0_0_12_Op_add_ap_fixed_18_8_0_0_0_s_fu_540_ap_return[17:8]}};

assign y_V_1_fu_1469_p3 = ((or_ln340_1_fu_853_p2[0:0] === 1'b1) ? select_ln340_2_fu_1453_p3 : select_ln388_1_fu_1461_p3);

assign y_V_2_fu_1503_p3 = ((or_ln340_2_fu_908_p2[0:0] === 1'b1) ? select_ln340_4_fu_1487_p3 : select_ln388_2_fu_1495_p3);

assign y_V_3_fu_1537_p3 = ((or_ln340_3_fu_963_p2[0:0] === 1'b1) ? select_ln340_6_fu_1521_p3 : select_ln388_3_fu_1529_p3);

assign y_V_4_fu_1571_p3 = ((or_ln340_4_fu_1018_p2[0:0] === 1'b1) ? select_ln340_8_fu_1555_p3 : select_ln388_4_fu_1563_p3);

assign y_V_5_fu_1605_p3 = ((or_ln340_5_fu_1073_p2[0:0] === 1'b1) ? select_ln340_10_fu_1589_p3 : select_ln388_5_fu_1597_p3);

assign y_V_6_fu_1639_p3 = ((or_ln340_6_fu_1128_p2[0:0] === 1'b1) ? select_ln340_12_fu_1623_p3 : select_ln388_6_fu_1631_p3);

assign y_V_7_fu_1673_p3 = ((or_ln340_7_fu_1183_p2[0:0] === 1'b1) ? select_ln340_14_fu_1657_p3 : select_ln388_7_fu_1665_p3);

assign y_V_8_fu_1707_p3 = ((or_ln340_8_fu_1238_p2[0:0] === 1'b1) ? select_ln340_16_fu_1691_p3 : select_ln388_8_fu_1699_p3);

assign y_V_9_fu_1741_p3 = ((or_ln340_9_fu_1293_p2[0:0] === 1'b1) ? select_ln340_18_fu_1725_p3 : select_ln388_9_fu_1733_p3);

assign y_V_fu_1435_p3 = ((or_ln340_fu_798_p2[0:0] === 1'b1) ? select_ln340_fu_1419_p3 : select_ln388_fu_1427_p3);

assign zext_ln1118_10_fu_1979_p1 = exp_res_10_V_1_reg_2337_pp0_iter2_reg;

assign zext_ln1118_11_fu_1983_p1 = exp_res_11_V_1_reg_2347_pp0_iter2_reg;

assign zext_ln1118_1_fu_1943_p1 = exp_res_1_V_1_reg_2243_pp0_iter1_reg;

assign zext_ln1118_2_fu_1947_p1 = exp_res_2_V_1_reg_2254_pp0_iter1_reg;

assign zext_ln1118_3_fu_1951_p1 = exp_res_3_V_1_reg_2265_pp0_iter1_reg;

assign zext_ln1118_4_fu_1955_p1 = exp_res_4_V_1_reg_2276_pp0_iter1_reg;

assign zext_ln1118_5_fu_1959_p1 = exp_res_5_V_1_reg_2287_pp0_iter1_reg;

assign zext_ln1118_6_fu_1963_p1 = exp_res_6_V_1_reg_2297_pp0_iter1_reg;

assign zext_ln1118_7_fu_1967_p1 = exp_res_7_V_1_reg_2307_pp0_iter1_reg;

assign zext_ln1118_8_fu_1971_p1 = exp_res_8_V_1_reg_2317_pp0_iter2_reg;

assign zext_ln1118_9_fu_1975_p1 = exp_res_9_V_1_reg_2327_pp0_iter2_reg;

assign zext_ln1118_fu_1939_p1 = exp_res_0_V_1_reg_2232_pp0_iter1_reg;

assign zext_ln225_10_fu_1902_p1 = y_V_10_reg_2217;

assign zext_ln225_11_fu_1911_p1 = y_V_11_reg_2222;

assign zext_ln225_1_fu_1821_p1 = y_V_1_reg_2172;

assign zext_ln225_2_fu_1825_p1 = y_V_2_reg_2177;

assign zext_ln225_3_fu_1829_p1 = y_V_3_reg_2182;

assign zext_ln225_4_fu_1833_p1 = y_V_4_reg_2187;

assign zext_ln225_5_fu_1837_p1 = y_V_5_reg_2192;

assign zext_ln225_6_fu_1866_p1 = y_V_6_reg_2197;

assign zext_ln225_7_fu_1875_p1 = y_V_7_reg_2202;

assign zext_ln225_8_fu_1884_p1 = y_V_8_reg_2207;

assign zext_ln225_9_fu_1893_p1 = y_V_9_reg_2212;

assign zext_ln225_fu_1817_p1 = y_V_reg_2167;

assign zext_ln235_fu_1930_p1 = y_V_12_fu_1920_p4;

endmodule //softmax_stable_array_array_ap_fixed_16_8_5_3_0_12u_softmax_config7_s
