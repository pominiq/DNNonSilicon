// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_0_V,
        x_1_V,
        x_2_V,
        x_3_V,
        x_4_V,
        x_5_V,
        x_6_V,
        x_7_V,
        x_8_V,
        x_9_V,
        x_10_V,
        x_11_V,
        x_V_offset,
        ap_return,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [16:0] x_0_V;
input  [16:0] x_1_V;
input  [16:0] x_2_V;
input  [16:0] x_3_V;
input  [16:0] x_4_V;
input  [16:0] x_5_V;
input  [16:0] x_6_V;
input  [16:0] x_7_V;
input  [16:0] x_8_V;
input  [16:0] x_9_V;
input  [16:0] x_10_V;
input  [16:0] x_11_V;
input  [4:0] x_V_offset;
output  [17:0] ap_return;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [17:0] p_Val2_21_fu_338_p3;
reg  signed [17:0] p_Val2_21_reg_602;
wire  signed [17:0] p_Val2_22_fu_508_p3;
reg  signed [17:0] p_Val2_22_reg_608;
wire   [17:0] zext_ln43_fu_138_p1;
wire   [17:0] zext_ln43_1_fu_142_p1;
wire   [17:0] zext_ln43_2_fu_146_p1;
wire   [17:0] zext_ln43_3_fu_150_p1;
wire   [17:0] zext_ln43_4_fu_154_p1;
wire   [17:0] zext_ln43_5_fu_158_p1;
wire   [17:0] zext_ln43_6_fu_162_p1;
wire   [17:0] zext_ln43_7_fu_166_p1;
wire   [17:0] zext_ln43_8_fu_170_p1;
wire   [17:0] zext_ln43_9_fu_174_p1;
wire   [17:0] zext_ln43_10_fu_178_p1;
wire   [17:0] zext_ln43_11_fu_182_p1;
wire   [3:0] p_Val2_s_fu_186_p13;
wire   [2:0] empty_fu_130_p1;
wire   [2:0] add_ln43_fu_216_p2;
wire   [3:0] p_Val2_15_fu_226_p13;
wire  signed [17:0] p_Val2_s_fu_186_p14;
wire  signed [17:0] p_Val2_15_fu_226_p14;
wire  signed [18:0] rhs_V_1_fu_260_p1;
wire  signed [18:0] lhs_V_1_fu_256_p1;
wire   [18:0] ret_V_fu_264_p2;
wire   [17:0] p_Val2_17_fu_278_p2;
wire   [0:0] p_Result_13_fu_284_p3;
wire   [0:0] p_Result_s_fu_270_p3;
wire   [0:0] xor_ln786_12_fu_292_p2;
wire   [0:0] xor_ln340_25_fu_310_p2;
wire   [0:0] xor_ln340_24_fu_304_p2;
wire   [0:0] underflow_fu_298_p2;
wire   [0:0] or_ln340_12_fu_316_p2;
wire   [17:0] select_ln340_24_fu_322_p3;
wire   [17:0] select_ln388_12_fu_330_p3;
wire   [2:0] add_ln45_fu_346_p2;
wire   [3:0] p_Val2_18_fu_356_p13;
wire   [2:0] add_ln43_1_fu_386_p2;
wire   [3:0] p_Val2_1_fu_396_p13;
wire  signed [17:0] p_Val2_18_fu_356_p14;
wire  signed [17:0] p_Val2_1_fu_396_p14;
wire  signed [18:0] rhs_V_2_fu_430_p1;
wire  signed [18:0] lhs_V_2_fu_426_p1;
wire   [18:0] ret_V_1_fu_434_p2;
wire   [17:0] p_Val2_20_fu_448_p2;
wire   [0:0] p_Result_15_fu_454_p3;
wire   [0:0] p_Result_14_fu_440_p3;
wire   [0:0] xor_ln786_13_fu_462_p2;
wire   [0:0] xor_ln340_27_fu_480_p2;
wire   [0:0] xor_ln340_26_fu_474_p2;
wire   [0:0] underflow_1_fu_468_p2;
wire   [0:0] or_ln340_13_fu_486_p2;
wire   [17:0] select_ln340_26_fu_492_p3;
wire   [17:0] select_ln388_13_fu_500_p3;
wire    ap_CS_fsm_state2;
wire  signed [18:0] lhs_V_fu_516_p1;
wire  signed [18:0] rhs_V_fu_519_p1;
wire   [18:0] ret_V_2_fu_522_p2;
wire   [17:0] p_Val2_24_fu_536_p2;
wire   [0:0] p_Result_17_fu_540_p3;
wire   [0:0] p_Result_16_fu_528_p3;
wire   [0:0] xor_ln786_fu_548_p2;
wire   [0:0] xor_ln340_fu_566_p2;
wire   [0:0] xor_ln340_28_fu_560_p2;
wire   [0:0] underflow_2_fu_554_p2;
wire   [0:0] or_ln340_fu_572_p2;
wire   [17:0] select_ln340_fu_578_p3;
wire   [17:0] select_ln388_fu_586_p3;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

myproject_mux_124_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 18 ),
    .din3_WIDTH( 18 ),
    .din4_WIDTH( 18 ),
    .din5_WIDTH( 18 ),
    .din6_WIDTH( 18 ),
    .din7_WIDTH( 18 ),
    .din8_WIDTH( 18 ),
    .din9_WIDTH( 18 ),
    .din10_WIDTH( 18 ),
    .din11_WIDTH( 18 ),
    .din12_WIDTH( 4 ),
    .dout_WIDTH( 18 ))
myproject_mux_124_18_1_1_U1059(
    .din0(zext_ln43_fu_138_p1),
    .din1(zext_ln43_1_fu_142_p1),
    .din2(zext_ln43_2_fu_146_p1),
    .din3(zext_ln43_3_fu_150_p1),
    .din4(zext_ln43_4_fu_154_p1),
    .din5(zext_ln43_5_fu_158_p1),
    .din6(zext_ln43_6_fu_162_p1),
    .din7(zext_ln43_7_fu_166_p1),
    .din8(zext_ln43_8_fu_170_p1),
    .din9(zext_ln43_9_fu_174_p1),
    .din10(zext_ln43_10_fu_178_p1),
    .din11(zext_ln43_11_fu_182_p1),
    .din12(p_Val2_s_fu_186_p13),
    .dout(p_Val2_s_fu_186_p14)
);

myproject_mux_124_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 18 ),
    .din3_WIDTH( 18 ),
    .din4_WIDTH( 18 ),
    .din5_WIDTH( 18 ),
    .din6_WIDTH( 18 ),
    .din7_WIDTH( 18 ),
    .din8_WIDTH( 18 ),
    .din9_WIDTH( 18 ),
    .din10_WIDTH( 18 ),
    .din11_WIDTH( 18 ),
    .din12_WIDTH( 4 ),
    .dout_WIDTH( 18 ))
myproject_mux_124_18_1_1_U1060(
    .din0(zext_ln43_fu_138_p1),
    .din1(zext_ln43_1_fu_142_p1),
    .din2(zext_ln43_2_fu_146_p1),
    .din3(zext_ln43_3_fu_150_p1),
    .din4(zext_ln43_4_fu_154_p1),
    .din5(zext_ln43_5_fu_158_p1),
    .din6(zext_ln43_6_fu_162_p1),
    .din7(zext_ln43_7_fu_166_p1),
    .din8(zext_ln43_8_fu_170_p1),
    .din9(zext_ln43_9_fu_174_p1),
    .din10(zext_ln43_10_fu_178_p1),
    .din11(zext_ln43_11_fu_182_p1),
    .din12(p_Val2_15_fu_226_p13),
    .dout(p_Val2_15_fu_226_p14)
);

myproject_mux_124_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 18 ),
    .din3_WIDTH( 18 ),
    .din4_WIDTH( 18 ),
    .din5_WIDTH( 18 ),
    .din6_WIDTH( 18 ),
    .din7_WIDTH( 18 ),
    .din8_WIDTH( 18 ),
    .din9_WIDTH( 18 ),
    .din10_WIDTH( 18 ),
    .din11_WIDTH( 18 ),
    .din12_WIDTH( 4 ),
    .dout_WIDTH( 18 ))
myproject_mux_124_18_1_1_U1061(
    .din0(zext_ln43_fu_138_p1),
    .din1(zext_ln43_1_fu_142_p1),
    .din2(zext_ln43_2_fu_146_p1),
    .din3(zext_ln43_3_fu_150_p1),
    .din4(zext_ln43_4_fu_154_p1),
    .din5(zext_ln43_5_fu_158_p1),
    .din6(zext_ln43_6_fu_162_p1),
    .din7(zext_ln43_7_fu_166_p1),
    .din8(zext_ln43_8_fu_170_p1),
    .din9(zext_ln43_9_fu_174_p1),
    .din10(zext_ln43_10_fu_178_p1),
    .din11(zext_ln43_11_fu_182_p1),
    .din12(p_Val2_18_fu_356_p13),
    .dout(p_Val2_18_fu_356_p14)
);

myproject_mux_124_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 18 ),
    .din3_WIDTH( 18 ),
    .din4_WIDTH( 18 ),
    .din5_WIDTH( 18 ),
    .din6_WIDTH( 18 ),
    .din7_WIDTH( 18 ),
    .din8_WIDTH( 18 ),
    .din9_WIDTH( 18 ),
    .din10_WIDTH( 18 ),
    .din11_WIDTH( 18 ),
    .din12_WIDTH( 4 ),
    .dout_WIDTH( 18 ))
myproject_mux_124_18_1_1_U1062(
    .din0(zext_ln43_fu_138_p1),
    .din1(zext_ln43_1_fu_142_p1),
    .din2(zext_ln43_2_fu_146_p1),
    .din3(zext_ln43_3_fu_150_p1),
    .din4(zext_ln43_4_fu_154_p1),
    .din5(zext_ln43_5_fu_158_p1),
    .din6(zext_ln43_6_fu_162_p1),
    .din7(zext_ln43_7_fu_166_p1),
    .din8(zext_ln43_8_fu_170_p1),
    .din9(zext_ln43_9_fu_174_p1),
    .din10(zext_ln43_10_fu_178_p1),
    .din11(zext_ln43_11_fu_182_p1),
    .din12(p_Val2_1_fu_396_p13),
    .dout(p_Val2_1_fu_396_p14)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_21_reg_602 <= p_Val2_21_fu_338_p3;
        p_Val2_22_reg_608 <= p_Val2_22_fu_508_p3;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln43_1_fu_386_p2 = (3'd3 + empty_fu_130_p1);

assign add_ln43_fu_216_p2 = (3'd1 + empty_fu_130_p1);

assign add_ln45_fu_346_p2 = (3'd2 + empty_fu_130_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return = ((or_ln340_fu_572_p2[0:0] === 1'b1) ? select_ln340_fu_578_p3 : select_ln388_fu_586_p3);

assign empty_fu_130_p1 = x_V_offset[2:0];

assign lhs_V_1_fu_256_p1 = p_Val2_s_fu_186_p14;

assign lhs_V_2_fu_426_p1 = p_Val2_18_fu_356_p14;

assign lhs_V_fu_516_p1 = p_Val2_21_reg_602;

assign or_ln340_12_fu_316_p2 = (xor_ln340_25_fu_310_p2 | p_Result_13_fu_284_p3);

assign or_ln340_13_fu_486_p2 = (xor_ln340_27_fu_480_p2 | p_Result_15_fu_454_p3);

assign or_ln340_fu_572_p2 = (xor_ln340_fu_566_p2 | p_Result_17_fu_540_p3);

assign p_Result_13_fu_284_p3 = p_Val2_17_fu_278_p2[32'd17];

assign p_Result_14_fu_440_p3 = ret_V_1_fu_434_p2[32'd18];

assign p_Result_15_fu_454_p3 = p_Val2_20_fu_448_p2[32'd17];

assign p_Result_16_fu_528_p3 = ret_V_2_fu_522_p2[32'd18];

assign p_Result_17_fu_540_p3 = p_Val2_24_fu_536_p2[32'd17];

assign p_Result_s_fu_270_p3 = ret_V_fu_264_p2[32'd18];

assign p_Val2_15_fu_226_p13 = add_ln43_fu_216_p2;

assign p_Val2_17_fu_278_p2 = ($signed(p_Val2_s_fu_186_p14) + $signed(p_Val2_15_fu_226_p14));

assign p_Val2_18_fu_356_p13 = add_ln45_fu_346_p2;

assign p_Val2_1_fu_396_p13 = add_ln43_1_fu_386_p2;

assign p_Val2_20_fu_448_p2 = ($signed(p_Val2_18_fu_356_p14) + $signed(p_Val2_1_fu_396_p14));

assign p_Val2_21_fu_338_p3 = ((or_ln340_12_fu_316_p2[0:0] === 1'b1) ? select_ln340_24_fu_322_p3 : select_ln388_12_fu_330_p3);

assign p_Val2_22_fu_508_p3 = ((or_ln340_13_fu_486_p2[0:0] === 1'b1) ? select_ln340_26_fu_492_p3 : select_ln388_13_fu_500_p3);

assign p_Val2_24_fu_536_p2 = ($signed(p_Val2_22_reg_608) + $signed(p_Val2_21_reg_602));

assign p_Val2_s_fu_186_p13 = x_V_offset[3:0];

assign ret_V_1_fu_434_p2 = ($signed(rhs_V_2_fu_430_p1) + $signed(lhs_V_2_fu_426_p1));

assign ret_V_2_fu_522_p2 = ($signed(lhs_V_fu_516_p1) + $signed(rhs_V_fu_519_p1));

assign ret_V_fu_264_p2 = ($signed(rhs_V_1_fu_260_p1) + $signed(lhs_V_1_fu_256_p1));

assign rhs_V_1_fu_260_p1 = p_Val2_15_fu_226_p14;

assign rhs_V_2_fu_430_p1 = p_Val2_1_fu_396_p14;

assign rhs_V_fu_519_p1 = p_Val2_22_reg_608;

assign select_ln340_24_fu_322_p3 = ((xor_ln340_24_fu_304_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_17_fu_278_p2);

assign select_ln340_26_fu_492_p3 = ((xor_ln340_26_fu_474_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_20_fu_448_p2);

assign select_ln340_fu_578_p3 = ((xor_ln340_28_fu_560_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_24_fu_536_p2);

assign select_ln388_12_fu_330_p3 = ((underflow_fu_298_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_17_fu_278_p2);

assign select_ln388_13_fu_500_p3 = ((underflow_1_fu_468_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_20_fu_448_p2);

assign select_ln388_fu_586_p3 = ((underflow_2_fu_554_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_24_fu_536_p2);

assign underflow_1_fu_468_p2 = (xor_ln786_13_fu_462_p2 & p_Result_14_fu_440_p3);

assign underflow_2_fu_554_p2 = (xor_ln786_fu_548_p2 & p_Result_16_fu_528_p3);

assign underflow_fu_298_p2 = (xor_ln786_12_fu_292_p2 & p_Result_s_fu_270_p3);

assign xor_ln340_24_fu_304_p2 = (p_Result_s_fu_270_p3 ^ p_Result_13_fu_284_p3);

assign xor_ln340_25_fu_310_p2 = (p_Result_s_fu_270_p3 ^ 1'd1);

assign xor_ln340_26_fu_474_p2 = (p_Result_15_fu_454_p3 ^ p_Result_14_fu_440_p3);

assign xor_ln340_27_fu_480_p2 = (p_Result_14_fu_440_p3 ^ 1'd1);

assign xor_ln340_28_fu_560_p2 = (p_Result_17_fu_540_p3 ^ p_Result_16_fu_528_p3);

assign xor_ln340_fu_566_p2 = (p_Result_16_fu_528_p3 ^ 1'd1);

assign xor_ln786_12_fu_292_p2 = (p_Result_13_fu_284_p3 ^ 1'd1);

assign xor_ln786_13_fu_462_p2 = (p_Result_15_fu_454_p3 ^ 1'd1);

assign xor_ln786_fu_548_p2 = (p_Result_17_fu_540_p3 ^ 1'd1);

assign zext_ln43_10_fu_178_p1 = x_10_V;

assign zext_ln43_11_fu_182_p1 = x_11_V;

assign zext_ln43_1_fu_142_p1 = x_1_V;

assign zext_ln43_2_fu_146_p1 = x_2_V;

assign zext_ln43_3_fu_150_p1 = x_3_V;

assign zext_ln43_4_fu_154_p1 = x_4_V;

assign zext_ln43_5_fu_158_p1 = x_5_V;

assign zext_ln43_6_fu_162_p1 = x_6_V;

assign zext_ln43_7_fu_166_p1 = x_7_V;

assign zext_ln43_8_fu_170_p1 = x_8_V;

assign zext_ln43_9_fu_174_p1 = x_9_V;

assign zext_ln43_fu_138_p1 = x_0_V;

endmodule //reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s
