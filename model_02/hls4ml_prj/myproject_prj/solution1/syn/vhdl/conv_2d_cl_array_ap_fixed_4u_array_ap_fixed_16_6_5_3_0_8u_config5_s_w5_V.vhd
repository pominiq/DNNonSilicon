-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_rom is 
    generic(
             DWIDTH     : integer := 60; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 72
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "000111100101111111101010010100000000101111011111111111010100", 
    1 => "111011111011111111110100000100000001010100101111111110110001", 
    2 => "110111000111111111111110001000000000100001011111111011000101", 
    3 => "101101000000000000000001001100000000011001101111111011101100", 
    4 => "000100010010000000100011001100000000111110010000000010001000", 
    5 => "000010011100000000010000110100000001101111000000000010100010", 
    6 => "000000011000000000000010000000000001000011111111111111001100", 
    7 => "111111100101111111010110100111111111111110111111111011101101", 
    8 => "111101010010000000000100000100000000011000001111111011010100", 
    9 => "111110010111000000011000101000000001110011110000000001110110", 
    10 => "000101000100111111110011001000000000100110010000000001011010", 
    11 => "110101110111111111101011010111111110001000101111111011110010", 
    12 => "001011100000000000001000100011111110000111110000000010100111", 
    13 => "000010000000111111011011010111111100101101110000000010110111", 
    14 => "000010011001111111101010010000000000111010100000000010011111", 
    15 => "111110000100111111100111000100000001100110001111111001111111", 
    16 => "110101111110000000010101111011111111111101001111111100100010", 
    17 => "000000001000000000010000000100000001000011010000000101110110", 
    18 => "111110000001111111110110110000000000110001101111111111101010", 
    19 => "010001101010111110100000111011111111111110010000000011011100", 
    20 => "110111000000111111011111001000000000001011011111111111000011", 
    21 => "111101010110111111110111010100000011011000010000000000101010", 
    22 => "111100000000111111101101011000000000110111010000000111110100", 
    23 => "000101110011000000000010001111111111001111110000001000100010", 
    24 => "000100011011000000010111111011111111010000100000000110010100", 
    25 => "000101110110000000001111100000000000110100010000000010000011", 
    26 => "000011010111111111111000011111111110011001011111111100111111", 
    27 => "000011000111111111000011111111111111111011111111111010110011", 
    28 => "000000010011111111111010111100000000010001110000000010000001", 
    29 => "000010001001000000110101100100000000010000010000000000000000", 
    30 => "111110001101111111111100100011111111111001100000001000100100", 
    31 => "001000101100000000000010000011111110100110110000010000001000", 
    32 => "111011100100000000011010101100000000000101100000000010100100", 
    33 => "000001111001111111110111011000000000011001110000000100000001", 
    34 => "111010100010000000001101111000000000101110110000001001011111", 
    35 => "000110001110000000000101011111111111101011000000001010010111", 
    36 => "000011011010111111111100011011111111011101011111111111011010", 
    37 => "000011111110000000010101001111111110110001001111111011010010", 
    38 => "000000010111000000000000110011111111101111111111111111000011", 
    39 => "111010100011111111111111010000000010011111010000000011000111", 
    40 => "111011101000111111111010101111111111001111000000000011010111", 
    41 => "111011111111000000010101100011111101100010010000000010100011", 
    42 => "111000100001111111110001011100000000001100000000001000111001", 
    43 => "001000001110111111010110111000000000110011110000001001010100", 
    44 => "111010100101111111111111101111111111000010000000000001101011", 
    45 => "111101000111111111111000010111111111100010001111111110001000", 
    46 => "111101010101000000000100100011111110111010100000001000011010", 
    47 => "111101010101000000001000001111111111010010000000001011001011", 
    48 => "111111001110000000001011001011111111011111011111111010101011", 
    49 => "111110100100000000001100001011111111011101010000000011100010", 
    50 => "000010100111000000000111011000000000011001010000000001011101", 
    51 => "001000011101111111110110100011111110110010110000001001100001", 
    52 => "000001011000000000000000000000000000010100001111111010001000", 
    53 => "001000001110000000000010000011111111000001111111111010001100", 
    54 => "000101100110000001000000010011111111111100111111111110011000", 
    55 => "001101110110000001000011001111111101100000110000001110001110", 
    56 => "111010010000000000000110110000000000001011001111111110001101", 
    57 => "000001111010111111100000011011111111101101111111111111001110", 
    58 => "110100110101000001001111000100000001001010101111111111110011", 
    59 => "110011111010000000101010011100000010000010000000000001001011", 
    60 => "111111000101111111110100100100000001000000000000000001100110", 
    61 => "111101011011111111110111011100000000000010110000000000101110", 
    62 => "111110111101111111110010000100000000000000010000001000000001", 
    63 => "001001001101111111101111100011111110111010010000000111101000", 
    64 => "001011000101111111110110011100000001111010000000001000001000", 
    65 => "111110110001111111111000000100000001111111011111111011111101", 
    66 => "000110110101111111101110110100000000011011110000000111111000", 
    67 => "000010111110000000100010100011111111111000010000000010100110", 
    68 => "111111001000111111111111110100000000001010001111111110111100", 
    69 => "000011101011000000000000110100000001001011001111111100110100", 
    70 => "111011011000111111011000110000000000011101011111111111100000", 
    71 => "001001100111000000010100100000000001001101011111110110010010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V is
    generic (
        DataWidth : INTEGER := 60;
        AddressRange : INTEGER := 72;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V is
    component conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_rom_U :  component conv_2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_8u_config5_s_w5_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


