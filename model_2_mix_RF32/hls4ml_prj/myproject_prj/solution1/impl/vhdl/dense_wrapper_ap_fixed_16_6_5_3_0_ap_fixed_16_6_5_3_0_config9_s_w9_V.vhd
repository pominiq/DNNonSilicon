-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_rom is 
    generic(
             DWIDTH     : integer := 155; 
             AWIDTH     : integer := 5; 
             MEM_SIZE    : integer := 32
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011001000000011000000100000001000100100000000001111000000000000001010000000001000101100000000010110110000000001101011111111110101000111111111010101001", 
    1 => "11110110010000000001001100111111101010111110000000101101011000000001101000000000001010001001111111001010011000000001011101111111101101110110000000011001010", 
    2 => "11111000001111111011010100111111110001101000000000001101011000000001101010000000000111011111111110010010100111111101101010000000000010010110000000010011000", 
    3 => "11010101011000000000111111011111110110100111111111000001101000000011110000011111110110011000000000010011000000000010010001100000001111100101111111000110010", 
    4 => "00001101101111111101101101100000000001000100000000001011001000000011010001100000010001100111111111000011000111111111101110000000001101001100000000010001100", 
    5 => "01101010100000000011000000011111101100100000000000000111111000000010110101000000000111011001111111000101101111111000111010011111110010110101111111011001100", 
    6 => "11001000011111111101000111000000001010011010000000111100011000000001111110000000000001101111111111100000110000000000010000000000000011101110000001011001101", 
    7 => "00010000110111111111101111100000000110010011111101110101011000000010010000000000000011110001111111111011000111111101101111111111111001101111111111010101111", 
    8 => "00100001110000000000100011111111111100000101111111001101010111111100001111011111110001011000000001000101111000000001111010111111110111111110000000100111010", 
    9 => "10100001011111111110100111011111111110111111111111011100011111111001010000000000001110010100000001000100000111111101101001000000000111111001111111000010101", 
    10 => "00010010100111111011101001100000000101001000000000000011000111111110101010100000010010011011111110101111100000000011111001000000001111000011111111101111101", 
    11 => "11010111000111111000110001000000001100110001111111000000011111111111000101011111110010000001111111100010111000000000110010011111101110110110000001000100010", 
    12 => "11001011011111111010100011100000011100100001111111110001111111110010110111000000001010110100000000010011101111111111011001000000100100011111111111001001110", 
    13 => "11001111011000000000101100111111110110110110000001001100111000000010100001100000000011101001111111110011101111111011001000111111111110100110000000000010010", 
    14 => "00010100000111111110011001000000000000011111111110000101111111111101010110011111110001001000000001000101001000000011101001000000001001111011111111000010110", 
    15 => "00110010110111111110110001100000010110111011111110001110100111111110010000111111100101001110000000000000011111111110100100111111101100100111111111111100001", 
    16 => "00011101011000000011111010011111101010110110000000011010111000000000110101100000000010010001111111110010110111111110000001111111101010101100000000100010111", 
    17 => "11101001001000000000100101011111101110100110000000011111111000000000100001111111110000000110000000000001010111111101111111100000001100110010000000010110100", 
    18 => "00001110100111111110000111100000001001101010000001000011011111111011010110111111111011100011111111000011001000000000001000111111111101010110000000100110111", 
    19 => "11110011011111111100101110011111111011011110000001000111100111111101000110100000001100110001111110101101110111111110010010100000000100100001111111111101101", 
    20 => "11111101001000000010011000011111111010000110000000010110111000000001100110011111110110111100000000001010100111111111011101100000000010010001111111111101100", 
    21 => "10111111110000000001100011011111101010001000000001001110100111111110100101111111110001111011111111110110100000000001001111111111100110011010000000101010010", 
    22 => "11101010001000000001110001000000001110111111111111100110001111111101011010100000000001111111111110000011110000000000111010011111111110101001111111011100011", 
    23 => "11001110100111111100101001111111110101010001111111000101111000000011001000011111110111011000000000000000000000000010011000100000000011001110000000001100111", 
    24 => "11001001110000000000000011100000000100101011111111100000001000000001101111011111111011011110000000101110001000000100001101011111111101100010000000010011011", 
    25 => "00001111110111111110101111100000001011011000000000000110011111111110101010000000000101110101111111010001100000000010001111100000001001000000000000001101000", 
    26 => "01001001111111111110110000100000000100101001111110100101010000000001110100100000000001100100000000101101111111111001001100100000000111101000000001001001111", 
    27 => "00101111101111111000110101100000000011110011111111010011111111111101011101100000001100111011111111001101010000000010011101111111110100111101111110111101010", 
    28 => "11011110110111111110000001000000000010110111111110011011101000000010110101111111111000111100000000011001111111111111010100100000010000111011111111110110011", 
    29 => "11011110001000000100011111100000000101011111111111011110110111111010000101011111111110010001111110111011011000000010101101000000000100100101111110011000110", 
    30 => "00000110001111111111110000111111111101111100000000100011100000000011000000111111111101100000000000001100110111111000101101011111111010111011111110111110000", 
    31 => "10100000111111111011100100111111101010011000000000101100010000000010110100111111100100010010000000011100110000000010110100000000000111011011111110110011011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V is
    generic (
        DataWidth : INTEGER := 155;
        AddressRange : INTEGER := 32;
        AddressWidth : INTEGER := 5);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V is
    component dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_rom_U :  component dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config9_s_w9_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


