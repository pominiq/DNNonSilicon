-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    data_V_data_4_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_4_V_empty_n : IN STD_LOGIC;
    data_V_data_4_V_read : OUT STD_LOGIC;
    data_V_data_5_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_5_V_empty_n : IN STD_LOGIC;
    data_V_data_5_V_read : OUT STD_LOGIC;
    data_V_data_6_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_6_V_empty_n : IN STD_LOGIC;
    data_V_data_6_V_read : OUT STD_LOGIC;
    data_V_data_7_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_7_V_empty_n : IN STD_LOGIC;
    data_V_data_7_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC;
    res_V_data_4_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_4_V_full_n : IN STD_LOGIC;
    res_V_data_4_V_write : OUT STD_LOGIC;
    res_V_data_5_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_5_V_full_n : IN STD_LOGIC;
    res_V_data_5_V_write : OUT STD_LOGIC;
    res_V_data_6_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_6_V_full_n : IN STD_LOGIC;
    res_V_data_6_V_write : OUT STD_LOGIC;
    res_V_data_7_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_7_V_full_n : IN STD_LOGIC;
    res_V_data_7_V_write : OUT STD_LOGIC );
end;


architecture behav of pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal pX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_3_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_3_9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_3_10 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_3_11 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_3_12 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_3_13 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_3_14 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_3_15 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_3_24 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_3_25 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_3_26 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_3_27 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_3_28 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_3_29 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_3_30 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_3_31 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal line_buffer_Array_V_3_0_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_3_0_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_1_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_3_0_2_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_2_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_3_0_3_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_3_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_3_0_4_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_4_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_4_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_3_0_5_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_5_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_5_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_3_0_6_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_6_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_6_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_Array_V_3_0_7_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_7_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_7_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln241_reg_1408 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_data_1_V_blk_n : STD_LOGIC;
    signal data_V_data_2_V_blk_n : STD_LOGIC;
    signal data_V_data_3_V_blk_n : STD_LOGIC;
    signal data_V_data_4_V_blk_n : STD_LOGIC;
    signal data_V_data_5_V_blk_n : STD_LOGIC;
    signal data_V_data_6_V_blk_n : STD_LOGIC;
    signal data_V_data_7_V_blk_n : STD_LOGIC;
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal and_ln191_2_reg_1417 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_4_V_blk_n : STD_LOGIC;
    signal res_V_data_5_V_blk_n : STD_LOGIC;
    signal res_V_data_6_V_blk_n : STD_LOGIC;
    signal res_V_data_7_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_398 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln241_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal io_acc_block_signal_op62 : STD_LOGIC;
    signal io_acc_block_signal_op183 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln241_fu_426_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal and_ln191_2_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_reg_1421 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln216_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln222_fu_564_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_reg_pp0_iter0_storemerge_i_i_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_i_i_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln225_fu_496_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln227_fu_514_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln220_fu_546_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_sY_load : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_0_V_fu_904_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_data_1_V_fu_973_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_fu_1042_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_fu_1111_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_4_V_fu_1180_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_5_V_fu_1249_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_6_V_fu_1318_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_7_V_fu_1387_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln191_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_2_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_3_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_1_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln227_fu_508_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln222_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1496_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_1_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_856_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_2_fu_878_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_2_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_1_fu_870_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_fu_892_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_data_0_V_fu_904_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1496_8_fu_919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_9_fu_933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_4_fu_925_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_6_fu_947_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_10_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_5_fu_939_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_1_fu_961_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_data_1_V_fu_973_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1496_11_fu_988_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_12_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_8_fu_994_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_10_fu_1016_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_13_fu_1024_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_9_fu_1008_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_2_fu_1030_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_data_2_V_fu_1042_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1496_3_fu_1057_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_14_fu_1071_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_12_fu_1063_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_14_fu_1085_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_15_fu_1093_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_13_fu_1077_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_3_fu_1099_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_data_3_V_fu_1111_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1496_4_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_16_fu_1140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_16_fu_1132_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_18_fu_1154_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_17_fu_1162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_17_fu_1146_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_4_fu_1168_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_data_4_V_fu_1180_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1496_5_fu_1195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_18_fu_1209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_20_fu_1201_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_22_fu_1223_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_19_fu_1231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_21_fu_1215_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_5_fu_1237_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_data_5_V_fu_1249_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1496_6_fu_1264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_20_fu_1278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_24_fu_1270_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_26_fu_1292_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_21_fu_1300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_25_fu_1284_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_6_fu_1306_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_data_6_V_fu_1318_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1496_7_fu_1333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_22_fu_1347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_28_fu_1339_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_30_fu_1361_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_23_fu_1369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_29_fu_1353_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_7_fu_1375_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_data_7_V_fu_1387_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_266 : BOOLEAN;
    signal ap_condition_292 : BOOLEAN;
    signal ap_condition_252 : BOOLEAN;
    signal ap_condition_285 : BOOLEAN;
    signal ap_condition_298 : BOOLEAN;

    component myproject_mux_42_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_buxdS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    line_buffer_Array_V_3_0_0_U : component pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_buxdS
    generic map (
        DataWidth => 16,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv2_3,
        ce0 => line_buffer_Array_V_3_0_0_ce0,
        we0 => line_buffer_Array_V_3_0_0_we0,
        d0 => data_V_data_0_V_dout,
        q0 => line_buffer_Array_V_3_0_0_q0);

    line_buffer_Array_V_3_0_1_U : component pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_buxdS
    generic map (
        DataWidth => 16,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv2_3,
        ce0 => line_buffer_Array_V_3_0_1_ce0,
        we0 => line_buffer_Array_V_3_0_1_we0,
        d0 => data_V_data_1_V_dout,
        q0 => line_buffer_Array_V_3_0_1_q0);

    line_buffer_Array_V_3_0_2_U : component pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_buxdS
    generic map (
        DataWidth => 16,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv2_3,
        ce0 => line_buffer_Array_V_3_0_2_ce0,
        we0 => line_buffer_Array_V_3_0_2_we0,
        d0 => data_V_data_2_V_dout,
        q0 => line_buffer_Array_V_3_0_2_q0);

    line_buffer_Array_V_3_0_3_U : component pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_buxdS
    generic map (
        DataWidth => 16,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv2_3,
        ce0 => line_buffer_Array_V_3_0_3_ce0,
        we0 => line_buffer_Array_V_3_0_3_we0,
        d0 => data_V_data_3_V_dout,
        q0 => line_buffer_Array_V_3_0_3_q0);

    line_buffer_Array_V_3_0_4_U : component pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_buxdS
    generic map (
        DataWidth => 16,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv2_3,
        ce0 => line_buffer_Array_V_3_0_4_ce0,
        we0 => line_buffer_Array_V_3_0_4_we0,
        d0 => data_V_data_4_V_dout,
        q0 => line_buffer_Array_V_3_0_4_q0);

    line_buffer_Array_V_3_0_5_U : component pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_buxdS
    generic map (
        DataWidth => 16,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv2_3,
        ce0 => line_buffer_Array_V_3_0_5_ce0,
        we0 => line_buffer_Array_V_3_0_5_we0,
        d0 => data_V_data_5_V_dout,
        q0 => line_buffer_Array_V_3_0_5_q0);

    line_buffer_Array_V_3_0_6_U : component pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_buxdS
    generic map (
        DataWidth => 16,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv2_3,
        ce0 => line_buffer_Array_V_3_0_6_ce0,
        we0 => line_buffer_Array_V_3_0_6_we0,
        d0 => data_V_data_6_V_dout,
        q0 => line_buffer_Array_V_3_0_6_q0);

    line_buffer_Array_V_3_0_7_U : component pooling2d_cl_array_ap_fixed_8u_array_ap_fixed_16_6_5_3_0_8u_config7_s_line_buxdS
    generic map (
        DataWidth => 16,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv2_3,
        ce0 => line_buffer_Array_V_3_0_7_ce0,
        we0 => line_buffer_Array_V_3_0_7_we0,
        d0 => data_V_data_7_V_dout,
        q0 => line_buffer_Array_V_3_0_7_q0);

    myproject_mux_42_16_1_1_U105 : component myproject_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_3_8,
        din1 => line_buffer_Array_V_3_0_0_q0,
        din2 => kernel_data_V_3_24,
        din3 => data_V_data_0_V_dout,
        din4 => tmp_data_0_V_fu_904_p5,
        dout => tmp_data_0_V_fu_904_p6);

    myproject_mux_42_16_1_1_U106 : component myproject_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_3_9,
        din1 => line_buffer_Array_V_3_0_1_q0,
        din2 => kernel_data_V_3_25,
        din3 => data_V_data_1_V_dout,
        din4 => tmp_data_1_V_fu_973_p5,
        dout => tmp_data_1_V_fu_973_p6);

    myproject_mux_42_16_1_1_U107 : component myproject_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_3_10,
        din1 => line_buffer_Array_V_3_0_2_q0,
        din2 => kernel_data_V_3_26,
        din3 => data_V_data_2_V_dout,
        din4 => tmp_data_2_V_fu_1042_p5,
        dout => tmp_data_2_V_fu_1042_p6);

    myproject_mux_42_16_1_1_U108 : component myproject_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_3_11,
        din1 => line_buffer_Array_V_3_0_3_q0,
        din2 => kernel_data_V_3_27,
        din3 => data_V_data_3_V_dout,
        din4 => tmp_data_3_V_fu_1111_p5,
        dout => tmp_data_3_V_fu_1111_p6);

    myproject_mux_42_16_1_1_U109 : component myproject_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_3_12,
        din1 => line_buffer_Array_V_3_0_4_q0,
        din2 => kernel_data_V_3_28,
        din3 => data_V_data_4_V_dout,
        din4 => tmp_data_4_V_fu_1180_p5,
        dout => tmp_data_4_V_fu_1180_p6);

    myproject_mux_42_16_1_1_U110 : component myproject_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_3_13,
        din1 => line_buffer_Array_V_3_0_5_q0,
        din2 => kernel_data_V_3_29,
        din3 => data_V_data_5_V_dout,
        din4 => tmp_data_5_V_fu_1249_p5,
        dout => tmp_data_5_V_fu_1249_p6);

    myproject_mux_42_16_1_1_U111 : component myproject_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_3_14,
        din1 => line_buffer_Array_V_3_0_6_q0,
        din2 => kernel_data_V_3_30,
        din3 => data_V_data_6_V_dout,
        din4 => tmp_data_6_V_fu_1318_p5,
        dout => tmp_data_6_V_fu_1318_p6);

    myproject_mux_42_16_1_1_U112 : component myproject_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_data_V_3_15,
        din1 => line_buffer_Array_V_3_0_7_q0,
        din2 => kernel_data_V_3_31,
        din3 => data_V_data_7_V_dout,
        din4 => tmp_data_7_V_fu_1387_p5,
        dout => tmp_data_7_V_fu_1387_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_storemerge_i_i_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_252)) then
                if ((ap_const_boolean_1 = ap_condition_292)) then 
                    ap_phi_reg_pp0_iter1_storemerge_i_i_reg_409 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_266)) then 
                    ap_phi_reg_pp0_iter1_storemerge_i_i_reg_409 <= select_ln222_fu_564_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_storemerge_i_i_reg_409 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_409;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_fu_420_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_398 <= add_ln241_fu_426_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_398 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    pX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_285)) then
                if ((icmp_ln212_fu_490_p2 = ap_const_lv1_1)) then 
                    pX <= ap_const_lv32_0;
                elsif ((icmp_ln212_fu_490_p2 = ap_const_lv1_0)) then 
                    pX <= add_ln225_fu_496_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_298)) then
                if ((icmp_ln216_fu_540_p2 = ap_const_lv1_1)) then 
                    pY <= ap_const_lv32_0;
                elsif ((icmp_ln216_fu_540_p2 = ap_const_lv1_0)) then 
                    pY <= add_ln220_fu_546_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_285)) then
                if ((icmp_ln212_fu_490_p2 = ap_const_lv1_1)) then 
                    sX <= ap_const_lv32_0;
                elsif ((icmp_ln212_fu_490_p2 = ap_const_lv1_0)) then 
                    sX <= select_ln227_fu_514_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_fu_420_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln191_2_reg_1417 <= and_ln191_2_fu_484_p2;
                icmp_ln212_reg_1421 <= icmp_ln212_fu_490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln241_reg_1408 <= icmp_ln241_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                kernel_data_V_3_10 <= line_buffer_Array_V_3_0_2_q0;
                kernel_data_V_3_11 <= line_buffer_Array_V_3_0_3_q0;
                kernel_data_V_3_12 <= line_buffer_Array_V_3_0_4_q0;
                kernel_data_V_3_13 <= line_buffer_Array_V_3_0_5_q0;
                kernel_data_V_3_14 <= line_buffer_Array_V_3_0_6_q0;
                kernel_data_V_3_15 <= line_buffer_Array_V_3_0_7_q0;
                kernel_data_V_3_24 <= data_V_data_0_V_dout;
                kernel_data_V_3_25 <= data_V_data_1_V_dout;
                kernel_data_V_3_26 <= data_V_data_2_V_dout;
                kernel_data_V_3_27 <= data_V_data_3_V_dout;
                kernel_data_V_3_28 <= data_V_data_4_V_dout;
                kernel_data_V_3_29 <= data_V_data_5_V_dout;
                kernel_data_V_3_30 <= data_V_data_6_V_dout;
                kernel_data_V_3_31 <= data_V_data_7_V_dout;
                kernel_data_V_3_8 <= line_buffer_Array_V_3_0_0_q0;
                kernel_data_V_3_9 <= line_buffer_Array_V_3_0_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_reg_1421 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sY <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_409;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln241_fu_420_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln241_fu_420_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln241_fu_420_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln220_fu_546_p2 <= std_logic_vector(unsigned(pY) + unsigned(ap_const_lv32_1));
    add_ln222_fu_558_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_sY_load) + unsigned(ap_const_lv32_1));
    add_ln225_fu_496_p2 <= std_logic_vector(unsigned(pX) + unsigned(ap_const_lv32_1));
    add_ln227_fu_508_p2 <= std_logic_vector(unsigned(sX) + unsigned(ap_const_lv32_1));
    add_ln241_fu_426_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_398) + unsigned(ap_const_lv5_1));
    and_ln191_1_fu_478_p2 <= (icmp_ln191_3_fu_466_p2 and icmp_ln191_2_fu_456_p2);
    and_ln191_2_fu_484_p2 <= (and_ln191_fu_472_p2 and and_ln191_1_fu_478_p2);
    and_ln191_fu_472_p2 <= (icmp_ln191_fu_436_p2 and icmp_ln191_1_fu_446_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, and_ln191_2_reg_1417, io_acc_block_signal_op62, io_acc_block_signal_op183)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((io_acc_block_signal_op183 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_2_reg_1417)) or ((io_acc_block_signal_op62 = ap_const_logic_0) and (icmp_ln241_reg_1408 = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, and_ln191_2_reg_1417, io_acc_block_signal_op62, io_acc_block_signal_op183)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((io_acc_block_signal_op183 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_2_reg_1417)) or ((io_acc_block_signal_op62 = ap_const_logic_0) and (icmp_ln241_reg_1408 = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, and_ln191_2_reg_1417, io_acc_block_signal_op62, io_acc_block_signal_op183)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((io_acc_block_signal_op183 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_2_reg_1417)) or ((io_acc_block_signal_op62 = ap_const_logic_0) and (icmp_ln241_reg_1408 = ap_const_lv1_0))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(icmp_ln241_reg_1408, and_ln191_2_reg_1417, io_acc_block_signal_op62, io_acc_block_signal_op183)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((io_acc_block_signal_op183 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_2_reg_1417)) or ((io_acc_block_signal_op62 = ap_const_logic_0) and (icmp_ln241_reg_1408 = ap_const_lv1_0)));
    end process;


    ap_condition_252_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
                ap_condition_252 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_266_assign_proc : process(icmp_ln241_fu_420_p2, icmp_ln212_fu_490_p2, icmp_ln216_fu_540_p2)
    begin
                ap_condition_266 <= ((icmp_ln212_fu_490_p2 = ap_const_lv1_1) and (icmp_ln216_fu_540_p2 = ap_const_lv1_0) and (icmp_ln241_fu_420_p2 = ap_const_lv1_0));
    end process;


    ap_condition_285_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln241_fu_420_p2, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
                ap_condition_285 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_fu_420_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_292_assign_proc : process(icmp_ln241_fu_420_p2, icmp_ln212_fu_490_p2, icmp_ln216_fu_540_p2)
    begin
                ap_condition_292 <= ((icmp_ln216_fu_540_p2 = ap_const_lv1_1) and (icmp_ln212_fu_490_p2 = ap_const_lv1_1) and (icmp_ln241_fu_420_p2 = ap_const_lv1_0));
    end process;


    ap_condition_298_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln241_fu_420_p2, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, icmp_ln212_fu_490_p2)
    begin
                ap_condition_298 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_490_p2 = ap_const_lv1_1) and (icmp_ln241_fu_420_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln241_fu_420_p2)
    begin
        if ((icmp_ln241_fu_420_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge_i_i_reg_409 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    ap_sig_allocacmp_sY_load_assign_proc : process(sY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln212_reg_1421, ap_phi_reg_pp0_iter1_storemerge_i_i_reg_409)
    begin
        if (((icmp_ln212_reg_1421 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_sY_load <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_409;
        else 
            ap_sig_allocacmp_sY_load <= sY;
        end if; 
    end process;


    data_V_data_0_V_blk_n_assign_proc : process(data_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_1408)
    begin
        if (((icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(data_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_1408)
    begin
        if (((icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(data_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_1408)
    begin
        if (((icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(data_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_1408)
    begin
        if (((icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_4_V_blk_n_assign_proc : process(data_V_data_4_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_1408)
    begin
        if (((icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_4_V_blk_n <= data_V_data_4_V_empty_n;
        else 
            data_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_4_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_4_V_read <= ap_const_logic_1;
        else 
            data_V_data_4_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_5_V_blk_n_assign_proc : process(data_V_data_5_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_1408)
    begin
        if (((icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_5_V_blk_n <= data_V_data_5_V_empty_n;
        else 
            data_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_5_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_5_V_read <= ap_const_logic_1;
        else 
            data_V_data_5_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_6_V_blk_n_assign_proc : process(data_V_data_6_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_1408)
    begin
        if (((icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_6_V_blk_n <= data_V_data_6_V_empty_n;
        else 
            data_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_6_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_6_V_read <= ap_const_logic_1;
        else 
            data_V_data_6_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_7_V_blk_n_assign_proc : process(data_V_data_7_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_1408)
    begin
        if (((icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_7_V_blk_n <= data_V_data_7_V_empty_n;
        else 
            data_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_7_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_7_V_read <= ap_const_logic_1;
        else 
            data_V_data_7_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1496_10_fu_955_p2 <= "1" when (signed(select_ln65_4_fu_925_p3) < signed(select_ln65_6_fu_947_p3)) else "0";
    icmp_ln1496_11_fu_988_p2 <= "1" when (signed(kernel_data_V_3_10) < signed(line_buffer_Array_V_3_0_2_q0)) else "0";
    icmp_ln1496_12_fu_1002_p2 <= "1" when (signed(kernel_data_V_3_26) < signed(data_V_data_2_V_dout)) else "0";
    icmp_ln1496_13_fu_1024_p2 <= "1" when (signed(select_ln65_8_fu_994_p3) < signed(select_ln65_10_fu_1016_p3)) else "0";
    icmp_ln1496_14_fu_1071_p2 <= "1" when (signed(kernel_data_V_3_27) < signed(data_V_data_3_V_dout)) else "0";
    icmp_ln1496_15_fu_1093_p2 <= "1" when (signed(select_ln65_12_fu_1063_p3) < signed(select_ln65_14_fu_1085_p3)) else "0";
    icmp_ln1496_16_fu_1140_p2 <= "1" when (signed(kernel_data_V_3_28) < signed(data_V_data_4_V_dout)) else "0";
    icmp_ln1496_17_fu_1162_p2 <= "1" when (signed(select_ln65_16_fu_1132_p3) < signed(select_ln65_18_fu_1154_p3)) else "0";
    icmp_ln1496_18_fu_1209_p2 <= "1" when (signed(kernel_data_V_3_29) < signed(data_V_data_5_V_dout)) else "0";
    icmp_ln1496_19_fu_1231_p2 <= "1" when (signed(select_ln65_20_fu_1201_p3) < signed(select_ln65_22_fu_1223_p3)) else "0";
    icmp_ln1496_1_fu_864_p2 <= "1" when (signed(kernel_data_V_3_24) < signed(data_V_data_0_V_dout)) else "0";
    icmp_ln1496_20_fu_1278_p2 <= "1" when (signed(kernel_data_V_3_30) < signed(data_V_data_6_V_dout)) else "0";
    icmp_ln1496_21_fu_1300_p2 <= "1" when (signed(select_ln65_24_fu_1270_p3) < signed(select_ln65_26_fu_1292_p3)) else "0";
    icmp_ln1496_22_fu_1347_p2 <= "1" when (signed(kernel_data_V_3_31) < signed(data_V_data_7_V_dout)) else "0";
    icmp_ln1496_23_fu_1369_p2 <= "1" when (signed(select_ln65_28_fu_1339_p3) < signed(select_ln65_30_fu_1361_p3)) else "0";
    icmp_ln1496_2_fu_886_p2 <= "1" when (signed(select_ln65_fu_856_p3) < signed(select_ln65_2_fu_878_p3)) else "0";
    icmp_ln1496_3_fu_1057_p2 <= "1" when (signed(kernel_data_V_3_11) < signed(line_buffer_Array_V_3_0_3_q0)) else "0";
    icmp_ln1496_4_fu_1126_p2 <= "1" when (signed(kernel_data_V_3_12) < signed(line_buffer_Array_V_3_0_4_q0)) else "0";
    icmp_ln1496_5_fu_1195_p2 <= "1" when (signed(kernel_data_V_3_13) < signed(line_buffer_Array_V_3_0_5_q0)) else "0";
    icmp_ln1496_6_fu_1264_p2 <= "1" when (signed(kernel_data_V_3_14) < signed(line_buffer_Array_V_3_0_6_q0)) else "0";
    icmp_ln1496_7_fu_1333_p2 <= "1" when (signed(kernel_data_V_3_15) < signed(line_buffer_Array_V_3_0_7_q0)) else "0";
    icmp_ln1496_8_fu_919_p2 <= "1" when (signed(kernel_data_V_3_9) < signed(line_buffer_Array_V_3_0_1_q0)) else "0";
    icmp_ln1496_9_fu_933_p2 <= "1" when (signed(kernel_data_V_3_25) < signed(data_V_data_1_V_dout)) else "0";
    icmp_ln1496_fu_850_p2 <= "1" when (signed(kernel_data_V_3_8) < signed(line_buffer_Array_V_3_0_0_q0)) else "0";
    icmp_ln191_1_fu_446_p2 <= "1" when (ap_sig_allocacmp_sY_load = ap_const_lv32_1) else "0";
    icmp_ln191_2_fu_456_p2 <= "1" when (signed(pY) > signed(ap_const_lv32_0)) else "0";
    icmp_ln191_3_fu_466_p2 <= "1" when (signed(pX) > signed(ap_const_lv32_0)) else "0";
    icmp_ln191_fu_436_p2 <= "1" when (sX = ap_const_lv32_1) else "0";
    icmp_ln212_fu_490_p2 <= "1" when (pX = ap_const_lv32_3) else "0";
    icmp_ln216_fu_540_p2 <= "1" when (pY = ap_const_lv32_3) else "0";
    icmp_ln241_fu_420_p2 <= "1" when (indvar_flatten_reg_398 = ap_const_lv5_10) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op183 <= (res_V_data_7_V_full_n and res_V_data_6_V_full_n and res_V_data_5_V_full_n and res_V_data_4_V_full_n and res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    io_acc_block_signal_op62 <= (data_V_data_7_V_empty_n and data_V_data_6_V_empty_n and data_V_data_5_V_empty_n and data_V_data_4_V_empty_n and data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);

    line_buffer_Array_V_3_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_3_0_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_3_0_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_3_0_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_3_0_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_3_0_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_3_0_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_3_0_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_3_0_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_3_0_4_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_3_0_4_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_3_0_5_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_3_0_5_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_3_0_6_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_6_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_3_0_6_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_3_0_7_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_7_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1408, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_Array_V_3_0_7_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, and_ln191_2_reg_1417)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1417) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= tmp_data_0_V_fu_904_p6;

    res_V_data_0_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1417, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1417) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, and_ln191_2_reg_1417)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1417) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= tmp_data_1_V_fu_973_p6;

    res_V_data_1_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1417, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1417) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, and_ln191_2_reg_1417)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1417) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= tmp_data_2_V_fu_1042_p6;

    res_V_data_2_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1417, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1417) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, and_ln191_2_reg_1417)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1417) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= tmp_data_3_V_fu_1111_p6;

    res_V_data_3_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1417, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1417) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_4_V_blk_n_assign_proc : process(res_V_data_4_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, and_ln191_2_reg_1417)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1417) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_4_V_blk_n <= res_V_data_4_V_full_n;
        else 
            res_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_4_V_din <= tmp_data_4_V_fu_1180_p6;

    res_V_data_4_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1417, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1417) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_4_V_write <= ap_const_logic_1;
        else 
            res_V_data_4_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_5_V_blk_n_assign_proc : process(res_V_data_5_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, and_ln191_2_reg_1417)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1417) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_5_V_blk_n <= res_V_data_5_V_full_n;
        else 
            res_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_5_V_din <= tmp_data_5_V_fu_1249_p6;

    res_V_data_5_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1417, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1417) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_5_V_write <= ap_const_logic_1;
        else 
            res_V_data_5_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_6_V_blk_n_assign_proc : process(res_V_data_6_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, and_ln191_2_reg_1417)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1417) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_6_V_blk_n <= res_V_data_6_V_full_n;
        else 
            res_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_6_V_din <= tmp_data_6_V_fu_1318_p6;

    res_V_data_6_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1417, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1417) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_6_V_write <= ap_const_logic_1;
        else 
            res_V_data_6_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_7_V_blk_n_assign_proc : process(res_V_data_7_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, and_ln191_2_reg_1417)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1417) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_7_V_blk_n <= res_V_data_7_V_full_n;
        else 
            res_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_7_V_din <= tmp_data_7_V_fu_1387_p6;

    res_V_data_7_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1417, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1417) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_V_data_7_V_write <= ap_const_logic_1;
        else 
            res_V_data_7_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln222_fu_564_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_1_fu_446_p2(0) = '1') else 
        add_ln222_fu_558_p2;
    select_ln227_fu_514_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_fu_436_p2(0) = '1') else 
        add_ln227_fu_508_p2;
    select_ln65_10_fu_1016_p3 <= 
        data_V_data_2_V_dout when (icmp_ln1496_12_fu_1002_p2(0) = '1') else 
        kernel_data_V_3_26;
    select_ln65_12_fu_1063_p3 <= 
        line_buffer_Array_V_3_0_3_q0 when (icmp_ln1496_3_fu_1057_p2(0) = '1') else 
        kernel_data_V_3_11;
    select_ln65_13_fu_1077_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_14_fu_1071_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_14_fu_1085_p3 <= 
        data_V_data_3_V_dout when (icmp_ln1496_14_fu_1071_p2(0) = '1') else 
        kernel_data_V_3_27;
    select_ln65_16_fu_1132_p3 <= 
        line_buffer_Array_V_3_0_4_q0 when (icmp_ln1496_4_fu_1126_p2(0) = '1') else 
        kernel_data_V_3_12;
    select_ln65_17_fu_1146_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_16_fu_1140_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_18_fu_1154_p3 <= 
        data_V_data_4_V_dout when (icmp_ln1496_16_fu_1140_p2(0) = '1') else 
        kernel_data_V_3_28;
    select_ln65_1_fu_870_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_1_fu_864_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_20_fu_1201_p3 <= 
        line_buffer_Array_V_3_0_5_q0 when (icmp_ln1496_5_fu_1195_p2(0) = '1') else 
        kernel_data_V_3_13;
    select_ln65_21_fu_1215_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_18_fu_1209_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_22_fu_1223_p3 <= 
        data_V_data_5_V_dout when (icmp_ln1496_18_fu_1209_p2(0) = '1') else 
        kernel_data_V_3_29;
    select_ln65_24_fu_1270_p3 <= 
        line_buffer_Array_V_3_0_6_q0 when (icmp_ln1496_6_fu_1264_p2(0) = '1') else 
        kernel_data_V_3_14;
    select_ln65_25_fu_1284_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_20_fu_1278_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_26_fu_1292_p3 <= 
        data_V_data_6_V_dout when (icmp_ln1496_20_fu_1278_p2(0) = '1') else 
        kernel_data_V_3_30;
    select_ln65_28_fu_1339_p3 <= 
        line_buffer_Array_V_3_0_7_q0 when (icmp_ln1496_7_fu_1333_p2(0) = '1') else 
        kernel_data_V_3_15;
    select_ln65_29_fu_1353_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_22_fu_1347_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_2_fu_878_p3 <= 
        data_V_data_0_V_dout when (icmp_ln1496_1_fu_864_p2(0) = '1') else 
        kernel_data_V_3_24;
    select_ln65_30_fu_1361_p3 <= 
        data_V_data_7_V_dout when (icmp_ln1496_22_fu_1347_p2(0) = '1') else 
        kernel_data_V_3_31;
    select_ln65_4_fu_925_p3 <= 
        line_buffer_Array_V_3_0_1_q0 when (icmp_ln1496_8_fu_919_p2(0) = '1') else 
        kernel_data_V_3_9;
    select_ln65_5_fu_939_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_9_fu_933_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_6_fu_947_p3 <= 
        data_V_data_1_V_dout when (icmp_ln1496_9_fu_933_p2(0) = '1') else 
        kernel_data_V_3_25;
    select_ln65_8_fu_994_p3 <= 
        line_buffer_Array_V_3_0_2_q0 when (icmp_ln1496_11_fu_988_p2(0) = '1') else 
        kernel_data_V_3_10;
    select_ln65_9_fu_1008_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_12_fu_1002_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_fu_856_p3 <= 
        line_buffer_Array_V_3_0_0_q0 when (icmp_ln1496_fu_850_p2(0) = '1') else 
        kernel_data_V_3_8;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_data_0_V_fu_904_p5 <= 
        select_ln65_1_fu_870_p3 when (icmp_ln1496_2_fu_886_p2(0) = '1') else 
        zext_ln65_fu_892_p1;
    tmp_data_1_V_fu_973_p5 <= 
        select_ln65_5_fu_939_p3 when (icmp_ln1496_10_fu_955_p2(0) = '1') else 
        zext_ln65_1_fu_961_p1;
    tmp_data_2_V_fu_1042_p5 <= 
        select_ln65_9_fu_1008_p3 when (icmp_ln1496_13_fu_1024_p2(0) = '1') else 
        zext_ln65_2_fu_1030_p1;
    tmp_data_3_V_fu_1111_p5 <= 
        select_ln65_13_fu_1077_p3 when (icmp_ln1496_15_fu_1093_p2(0) = '1') else 
        zext_ln65_3_fu_1099_p1;
    tmp_data_4_V_fu_1180_p5 <= 
        select_ln65_17_fu_1146_p3 when (icmp_ln1496_17_fu_1162_p2(0) = '1') else 
        zext_ln65_4_fu_1168_p1;
    tmp_data_5_V_fu_1249_p5 <= 
        select_ln65_21_fu_1215_p3 when (icmp_ln1496_19_fu_1231_p2(0) = '1') else 
        zext_ln65_5_fu_1237_p1;
    tmp_data_6_V_fu_1318_p5 <= 
        select_ln65_25_fu_1284_p3 when (icmp_ln1496_21_fu_1300_p2(0) = '1') else 
        zext_ln65_6_fu_1306_p1;
    tmp_data_7_V_fu_1387_p5 <= 
        select_ln65_29_fu_1353_p3 when (icmp_ln1496_23_fu_1369_p2(0) = '1') else 
        zext_ln65_7_fu_1375_p1;
    zext_ln65_1_fu_961_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_8_fu_919_p2),2));
    zext_ln65_2_fu_1030_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_11_fu_988_p2),2));
    zext_ln65_3_fu_1099_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_3_fu_1057_p2),2));
    zext_ln65_4_fu_1168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_4_fu_1126_p2),2));
    zext_ln65_5_fu_1237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_5_fu_1195_p2),2));
    zext_ln65_6_fu_1306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_6_fu_1264_p2),2));
    zext_ln65_7_fu_1375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_7_fu_1333_p2),2));
    zext_ln65_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_fu_850_p2),2));
end behav;
