// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] pX_1;
reg   [31:0] sX_1;
reg   [31:0] pY_1;
reg   [31:0] sY_1;
reg   [15:0] kernel_data_V_2_4;
reg   [15:0] kernel_data_V_2_5;
reg   [15:0] kernel_data_V_2_6;
reg   [15:0] kernel_data_V_2_7;
reg   [15:0] kernel_data_V_2_20;
reg   [15:0] kernel_data_V_2_21;
reg   [15:0] kernel_data_V_2_22;
reg   [15:0] kernel_data_V_2_23;
reg   [15:0] kernel_data_V_2_36;
reg   [15:0] kernel_data_V_2_37;
reg   [15:0] kernel_data_V_2_38;
reg   [15:0] kernel_data_V_2_39;
reg   [15:0] kernel_data_V_2_52;
reg   [15:0] kernel_data_V_2_53;
reg   [15:0] kernel_data_V_2_54;
reg   [15:0] kernel_data_V_2_55;
reg   [15:0] kernel_data_V_2_8;
reg   [15:0] kernel_data_V_2_9;
reg   [15:0] kernel_data_V_2_10;
reg   [15:0] kernel_data_V_2_11;
reg   [15:0] kernel_data_V_2_24;
reg   [15:0] kernel_data_V_2_25;
reg   [15:0] kernel_data_V_2_26;
reg   [15:0] kernel_data_V_2_27;
reg   [15:0] kernel_data_V_2_40;
reg   [15:0] kernel_data_V_2_41;
reg   [15:0] kernel_data_V_2_42;
reg   [15:0] kernel_data_V_2_43;
reg   [15:0] kernel_data_V_2_56;
reg   [15:0] kernel_data_V_2_57;
reg   [15:0] kernel_data_V_2_58;
reg   [15:0] kernel_data_V_2_59;
reg   [15:0] kernel_data_V_2_12;
reg   [15:0] kernel_data_V_2_13;
reg   [15:0] kernel_data_V_2_14;
reg   [15:0] kernel_data_V_2_15;
reg   [15:0] kernel_data_V_2_28;
reg   [15:0] kernel_data_V_2_29;
reg   [15:0] kernel_data_V_2_30;
reg   [15:0] kernel_data_V_2_31;
reg   [15:0] kernel_data_V_2_44;
reg   [15:0] kernel_data_V_2_45;
reg   [15:0] kernel_data_V_2_46;
reg   [15:0] kernel_data_V_2_47;
reg   [15:0] kernel_data_V_2_60;
reg   [15:0] kernel_data_V_2_61;
reg   [15:0] kernel_data_V_2_62;
reg   [15:0] kernel_data_V_2_63;
reg    line_buffer_Array_V_2_0_0_ce0;
reg    line_buffer_Array_V_2_0_0_we0;
wire   [15:0] line_buffer_Array_V_2_0_0_q0;
reg    line_buffer_Array_V_2_1_0_ce0;
reg    line_buffer_Array_V_2_1_0_we0;
wire   [15:0] line_buffer_Array_V_2_1_0_q0;
reg    line_buffer_Array_V_2_2_0_ce0;
reg    line_buffer_Array_V_2_2_0_we0;
wire   [15:0] line_buffer_Array_V_2_2_0_q0;
reg    line_buffer_Array_V_2_0_1_ce0;
reg    line_buffer_Array_V_2_0_1_we0;
wire   [15:0] line_buffer_Array_V_2_0_1_q0;
reg    line_buffer_Array_V_2_1_1_ce0;
reg    line_buffer_Array_V_2_1_1_we0;
wire   [15:0] line_buffer_Array_V_2_1_1_q0;
reg    line_buffer_Array_V_2_2_1_ce0;
reg    line_buffer_Array_V_2_2_1_we0;
wire   [15:0] line_buffer_Array_V_2_2_1_q0;
reg    line_buffer_Array_V_2_0_2_ce0;
reg    line_buffer_Array_V_2_0_2_we0;
wire   [15:0] line_buffer_Array_V_2_0_2_q0;
reg    line_buffer_Array_V_2_1_2_ce0;
reg    line_buffer_Array_V_2_1_2_we0;
wire   [15:0] line_buffer_Array_V_2_1_2_q0;
reg    line_buffer_Array_V_2_2_2_ce0;
reg    line_buffer_Array_V_2_2_2_we0;
wire   [15:0] line_buffer_Array_V_2_2_2_q0;
reg    line_buffer_Array_V_2_0_3_ce0;
reg    line_buffer_Array_V_2_0_3_we0;
wire   [15:0] line_buffer_Array_V_2_0_3_q0;
reg    line_buffer_Array_V_2_1_3_ce0;
reg    line_buffer_Array_V_2_1_3_we0;
wire   [15:0] line_buffer_Array_V_2_1_3_q0;
reg    line_buffer_Array_V_2_2_3_ce0;
reg    line_buffer_Array_V_2_2_3_we0;
wire   [15:0] line_buffer_Array_V_2_2_3_q0;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln241_reg_3286;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] and_ln191_4_reg_3295;
reg   [0:0] and_ln191_4_reg_3295_pp0_iter1_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg   [9:0] indvar_flatten_reg_364;
wire   [0:0] icmp_ln241_fu_386_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op53;
reg    ap_block_state3_pp0_stage0_iter1;
wire    io_acc_block_signal_op373;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln241_reg_3286_pp0_iter1_reg;
wire   [9:0] add_ln241_fu_392_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] and_ln191_4_fu_450_p2;
wire   [0:0] icmp_ln212_fu_456_p2;
reg   [0:0] icmp_ln212_reg_3299;
wire   [0:0] icmp_ln216_fu_506_p2;
wire   [31:0] select_ln222_fu_530_p3;
reg   [15:0] pool_window_15_V_reg_3312;
reg   [15:0] pool_window_15_V_1_reg_3343;
reg   [15:0] pool_window_15_V_2_reg_3374;
reg   [15:0] pool_window_15_V_3_reg_3405;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge_i_i_reg_375;
reg   [31:0] ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375;
wire   [31:0] add_ln225_fu_462_p2;
wire   [31:0] select_ln227_fu_480_p3;
wire   [31:0] add_ln220_fu_512_p2;
reg   [31:0] ap_sig_allocacmp_sY_1_load;
wire   [15:0] tmp_data_0_V_fu_1652_p18;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] tmp_data_1_V_fu_2184_p18;
wire   [15:0] tmp_data_2_V_fu_2716_p18;
wire   [15:0] tmp_data_3_V_fu_3248_p18;
wire   [0:0] icmp_ln191_fu_402_p2;
wire   [0:0] icmp_ln191_4_fu_412_p2;
wire   [0:0] icmp_ln191_5_fu_422_p2;
wire   [0:0] icmp_ln191_6_fu_432_p2;
wire   [0:0] and_ln191_3_fu_444_p2;
wire   [0:0] and_ln191_fu_438_p2;
wire   [31:0] add_ln227_fu_474_p2;
wire   [31:0] add_ln222_fu_524_p2;
wire   [0:0] icmp_ln1496_fu_1158_p2;
wire   [0:0] icmp_ln1496_24_fu_1176_p2;
wire   [15:0] select_ln65_fu_1168_p3;
wire   [15:0] select_ln65_33_fu_1190_p3;
wire   [0:0] icmp_ln1496_25_fu_1198_p2;
wire   [1:0] select_ln65_32_fu_1182_p3;
wire   [1:0] zext_ln65_fu_1164_p1;
wire   [1:0] select_ln65_34_fu_1204_p3;
wire   [3:0] phi_ln_fu_1220_p17;
wire   [0:0] icmp_ln1496_26_fu_1258_p2;
wire   [0:0] icmp_ln1496_27_fu_1280_p2;
wire   [15:0] select_ln65_36_fu_1272_p3;
wire   [15:0] select_ln65_38_fu_1294_p3;
wire   [0:0] icmp_ln1496_28_fu_1302_p2;
wire   [2:0] select_ln65_37_fu_1286_p3;
wire   [2:0] select_ln65_35_fu_1264_p3;
wire   [2:0] select_ln65_39_fu_1308_p3;
wire   [3:0] phi_ln65_1_fu_1320_p17;
wire   [15:0] phi_ln_fu_1220_p18;
wire   [15:0] phi_ln65_1_fu_1320_p18;
wire   [0:0] icmp_ln1496_29_fu_1358_p2;
wire   [2:0] zext_ln65_8_fu_1212_p1;
wire   [2:0] select_ln65_40_fu_1364_p3;
wire   [3:0] zext_ln65_9_fu_1372_p1;
wire   [0:0] icmp_ln1496_30_fu_1414_p2;
wire   [0:0] icmp_ln1496_31_fu_1436_p2;
wire   [15:0] select_ln65_42_fu_1428_p3;
wire   [15:0] select_ln65_44_fu_1450_p3;
wire   [0:0] icmp_ln1496_32_fu_1458_p2;
wire   [3:0] select_ln65_43_fu_1442_p3;
wire   [3:0] select_ln65_41_fu_1420_p3;
wire   [3:0] select_ln65_45_fu_1464_p3;
wire   [0:0] icmp_ln1496_33_fu_1510_p2;
wire   [0:0] icmp_ln1496_34_fu_1532_p2;
wire   [15:0] select_ln65_47_fu_1524_p3;
wire   [15:0] select_ln65_49_fu_1545_p3;
wire   [0:0] icmp_ln1496_35_fu_1552_p2;
wire   [2:0] select_ln65_48_fu_1537_p3;
wire   [2:0] select_ln65_46_fu_1516_p3;
wire   [2:0] select_ln65_50_fu_1558_p3;
wire  signed [3:0] sext_ln65_fu_1566_p1;
wire   [15:0] phi_ln65_3_fu_1472_p18;
wire   [15:0] phi_ln65_4_fu_1570_p18;
wire   [0:0] icmp_ln1496_36_fu_1595_p2;
wire   [3:0] select_ln65_51_fu_1601_p3;
wire   [15:0] phi_ln65_2_fu_1376_p18;
wire   [15:0] phi_ln65_5_fu_1609_p18;
wire   [0:0] icmp_ln1496_37_fu_1638_p2;
wire   [3:0] tmp_data_0_V_fu_1652_p17;
wire   [0:0] icmp_ln1496_1_fu_1690_p2;
wire   [0:0] icmp_ln1496_38_fu_1708_p2;
wire   [15:0] select_ln65_53_fu_1700_p3;
wire   [15:0] select_ln65_55_fu_1722_p3;
wire   [0:0] icmp_ln1496_39_fu_1730_p2;
wire   [1:0] select_ln65_54_fu_1714_p3;
wire   [1:0] zext_ln65_10_fu_1696_p1;
wire   [1:0] select_ln65_56_fu_1736_p3;
wire   [3:0] phi_ln65_6_fu_1752_p17;
wire   [0:0] icmp_ln1496_40_fu_1790_p2;
wire   [0:0] icmp_ln1496_41_fu_1812_p2;
wire   [15:0] select_ln65_58_fu_1804_p3;
wire   [15:0] select_ln65_60_fu_1826_p3;
wire   [0:0] icmp_ln1496_42_fu_1834_p2;
wire   [2:0] select_ln65_59_fu_1818_p3;
wire   [2:0] select_ln65_57_fu_1796_p3;
wire   [2:0] select_ln65_61_fu_1840_p3;
wire   [3:0] phi_ln65_7_fu_1852_p17;
wire   [15:0] phi_ln65_6_fu_1752_p18;
wire   [15:0] phi_ln65_7_fu_1852_p18;
wire   [0:0] icmp_ln1496_43_fu_1890_p2;
wire   [2:0] zext_ln65_11_fu_1744_p1;
wire   [2:0] select_ln65_62_fu_1896_p3;
wire   [3:0] zext_ln65_12_fu_1904_p1;
wire   [0:0] icmp_ln1496_44_fu_1946_p2;
wire   [0:0] icmp_ln1496_45_fu_1968_p2;
wire   [15:0] select_ln65_64_fu_1960_p3;
wire   [15:0] select_ln65_66_fu_1982_p3;
wire   [0:0] icmp_ln1496_46_fu_1990_p2;
wire   [3:0] select_ln65_65_fu_1974_p3;
wire   [3:0] select_ln65_63_fu_1952_p3;
wire   [3:0] select_ln65_67_fu_1996_p3;
wire   [0:0] icmp_ln1496_47_fu_2042_p2;
wire   [0:0] icmp_ln1496_48_fu_2064_p2;
wire   [15:0] select_ln65_69_fu_2056_p3;
wire   [15:0] select_ln65_71_fu_2077_p3;
wire   [0:0] icmp_ln1496_49_fu_2084_p2;
wire   [2:0] select_ln65_70_fu_2069_p3;
wire   [2:0] select_ln65_68_fu_2048_p3;
wire   [2:0] select_ln65_72_fu_2090_p3;
wire  signed [3:0] sext_ln65_1_fu_2098_p1;
wire   [15:0] phi_ln65_9_fu_2004_p18;
wire   [15:0] phi_ln65_s_fu_2102_p18;
wire   [0:0] icmp_ln1496_50_fu_2127_p2;
wire   [3:0] select_ln65_73_fu_2133_p3;
wire   [15:0] phi_ln65_8_fu_1908_p18;
wire   [15:0] phi_ln65_10_fu_2141_p18;
wire   [0:0] icmp_ln1496_51_fu_2170_p2;
wire   [3:0] tmp_data_1_V_fu_2184_p17;
wire   [0:0] icmp_ln1496_2_fu_2222_p2;
wire   [0:0] icmp_ln1496_52_fu_2240_p2;
wire   [15:0] select_ln65_74_fu_2232_p3;
wire   [15:0] select_ln65_76_fu_2254_p3;
wire   [0:0] icmp_ln1496_53_fu_2262_p2;
wire   [1:0] select_ln65_75_fu_2246_p3;
wire   [1:0] zext_ln65_13_fu_2228_p1;
wire   [1:0] select_ln65_77_fu_2268_p3;
wire   [3:0] phi_ln65_11_fu_2284_p17;
wire   [0:0] icmp_ln1496_54_fu_2322_p2;
wire   [0:0] icmp_ln1496_55_fu_2344_p2;
wire   [15:0] select_ln65_79_fu_2336_p3;
wire   [15:0] select_ln65_81_fu_2358_p3;
wire   [0:0] icmp_ln1496_56_fu_2366_p2;
wire   [2:0] select_ln65_91_fu_2350_p3;
wire   [2:0] select_ln65_78_fu_2328_p3;
wire   [2:0] select_ln65_82_fu_2372_p3;
wire   [3:0] phi_ln65_12_fu_2384_p17;
wire   [15:0] phi_ln65_11_fu_2284_p18;
wire   [15:0] phi_ln65_12_fu_2384_p18;
wire   [0:0] icmp_ln1496_57_fu_2422_p2;
wire   [2:0] zext_ln65_14_fu_2276_p1;
wire   [2:0] select_ln65_83_fu_2428_p3;
wire   [3:0] zext_ln65_15_fu_2436_p1;
wire   [0:0] icmp_ln1496_58_fu_2478_p2;
wire   [0:0] icmp_ln1496_59_fu_2500_p2;
wire   [15:0] select_ln65_85_fu_2492_p3;
wire   [15:0] select_ln65_87_fu_2514_p3;
wire   [0:0] icmp_ln1496_60_fu_2522_p2;
wire   [3:0] select_ln65_86_fu_2506_p3;
wire   [3:0] select_ln65_84_fu_2484_p3;
wire   [3:0] select_ln65_88_fu_2528_p3;
wire   [0:0] icmp_ln1496_61_fu_2574_p2;
wire   [0:0] icmp_ln1496_62_fu_2596_p2;
wire   [15:0] select_ln65_90_fu_2588_p3;
wire   [15:0] select_ln65_92_fu_2609_p3;
wire   [0:0] icmp_ln1496_63_fu_2616_p2;
wire   [2:0] select_ln65_101_fu_2601_p3;
wire   [2:0] select_ln65_89_fu_2580_p3;
wire   [2:0] select_ln65_93_fu_2622_p3;
wire  signed [3:0] sext_ln65_2_fu_2630_p1;
wire   [15:0] phi_ln65_14_fu_2536_p18;
wire   [15:0] phi_ln65_15_fu_2634_p18;
wire   [0:0] icmp_ln1496_64_fu_2659_p2;
wire   [3:0] select_ln65_94_fu_2665_p3;
wire   [15:0] phi_ln65_13_fu_2440_p18;
wire   [15:0] phi_ln65_16_fu_2673_p18;
wire   [0:0] icmp_ln1496_65_fu_2702_p2;
wire   [3:0] tmp_data_2_V_fu_2716_p17;
wire   [0:0] icmp_ln1496_66_fu_2754_p2;
wire   [0:0] icmp_ln1496_67_fu_2772_p2;
wire   [15:0] select_ln65_95_fu_2764_p3;
wire   [15:0] select_ln65_97_fu_2786_p3;
wire   [0:0] icmp_ln1496_68_fu_2794_p2;
wire   [1:0] select_ln65_96_fu_2778_p3;
wire   [1:0] zext_ln65_16_fu_2760_p1;
wire   [1:0] select_ln65_98_fu_2800_p3;
wire   [3:0] phi_ln65_17_fu_2816_p17;
wire   [0:0] icmp_ln1496_69_fu_2854_p2;
wire   [0:0] icmp_ln1496_70_fu_2876_p2;
wire   [15:0] select_ln65_100_fu_2868_p3;
wire   [15:0] select_ln65_102_fu_2890_p3;
wire   [0:0] icmp_ln1496_71_fu_2898_p2;
wire   [2:0] select_ln65_116_fu_2882_p3;
wire   [2:0] select_ln65_99_fu_2860_p3;
wire   [2:0] select_ln65_103_fu_2904_p3;
wire   [3:0] phi_ln65_18_fu_2916_p17;
wire   [15:0] phi_ln65_17_fu_2816_p18;
wire   [15:0] phi_ln65_18_fu_2916_p18;
wire   [0:0] icmp_ln1496_72_fu_2954_p2;
wire   [2:0] zext_ln65_17_fu_2808_p1;
wire   [2:0] select_ln65_104_fu_2960_p3;
wire   [3:0] zext_ln65_18_fu_2968_p1;
wire   [0:0] icmp_ln1496_73_fu_3010_p2;
wire   [0:0] icmp_ln1496_74_fu_3032_p2;
wire   [15:0] select_ln65_106_fu_3024_p3;
wire   [15:0] select_ln65_108_fu_3046_p3;
wire   [0:0] icmp_ln1496_75_fu_3054_p2;
wire   [3:0] select_ln65_107_fu_3038_p3;
wire   [3:0] select_ln65_105_fu_3016_p3;
wire   [3:0] select_ln65_109_fu_3060_p3;
wire   [0:0] icmp_ln1496_76_fu_3106_p2;
wire   [0:0] icmp_ln1496_77_fu_3128_p2;
wire   [15:0] select_ln65_111_fu_3120_p3;
wire   [15:0] select_ln65_113_fu_3141_p3;
wire   [0:0] icmp_ln1496_78_fu_3148_p2;
wire   [2:0] select_ln65_117_fu_3133_p3;
wire   [2:0] select_ln65_110_fu_3112_p3;
wire   [2:0] select_ln65_114_fu_3154_p3;
wire  signed [3:0] sext_ln65_3_fu_3162_p1;
wire   [15:0] phi_ln65_20_fu_3068_p18;
wire   [15:0] phi_ln65_21_fu_3166_p18;
wire   [0:0] icmp_ln1496_79_fu_3191_p2;
wire   [3:0] select_ln65_115_fu_3197_p3;
wire   [15:0] phi_ln65_19_fu_2972_p18;
wire   [15:0] phi_ln65_22_fu_3205_p18;
wire   [0:0] icmp_ln1496_80_fu_3234_p2;
wire   [3:0] tmp_data_3_V_fu_3248_p17;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_303;
reg    ap_condition_338;
reg    ap_condition_284;
reg    ap_condition_331;
reg    ap_condition_344;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 pX_1 = 32'd0;
#0 sX_1 = 32'd0;
#0 pY_1 = 32'd0;
#0 sY_1 = 32'd0;
#0 kernel_data_V_2_4 = 16'd0;
#0 kernel_data_V_2_5 = 16'd0;
#0 kernel_data_V_2_6 = 16'd0;
#0 kernel_data_V_2_7 = 16'd0;
#0 kernel_data_V_2_20 = 16'd0;
#0 kernel_data_V_2_21 = 16'd0;
#0 kernel_data_V_2_22 = 16'd0;
#0 kernel_data_V_2_23 = 16'd0;
#0 kernel_data_V_2_36 = 16'd0;
#0 kernel_data_V_2_37 = 16'd0;
#0 kernel_data_V_2_38 = 16'd0;
#0 kernel_data_V_2_39 = 16'd0;
#0 kernel_data_V_2_52 = 16'd0;
#0 kernel_data_V_2_53 = 16'd0;
#0 kernel_data_V_2_54 = 16'd0;
#0 kernel_data_V_2_55 = 16'd0;
#0 kernel_data_V_2_8 = 16'd0;
#0 kernel_data_V_2_9 = 16'd0;
#0 kernel_data_V_2_10 = 16'd0;
#0 kernel_data_V_2_11 = 16'd0;
#0 kernel_data_V_2_24 = 16'd0;
#0 kernel_data_V_2_25 = 16'd0;
#0 kernel_data_V_2_26 = 16'd0;
#0 kernel_data_V_2_27 = 16'd0;
#0 kernel_data_V_2_40 = 16'd0;
#0 kernel_data_V_2_41 = 16'd0;
#0 kernel_data_V_2_42 = 16'd0;
#0 kernel_data_V_2_43 = 16'd0;
#0 kernel_data_V_2_56 = 16'd0;
#0 kernel_data_V_2_57 = 16'd0;
#0 kernel_data_V_2_58 = 16'd0;
#0 kernel_data_V_2_59 = 16'd0;
#0 kernel_data_V_2_12 = 16'd0;
#0 kernel_data_V_2_13 = 16'd0;
#0 kernel_data_V_2_14 = 16'd0;
#0 kernel_data_V_2_15 = 16'd0;
#0 kernel_data_V_2_28 = 16'd0;
#0 kernel_data_V_2_29 = 16'd0;
#0 kernel_data_V_2_30 = 16'd0;
#0 kernel_data_V_2_31 = 16'd0;
#0 kernel_data_V_2_44 = 16'd0;
#0 kernel_data_V_2_45 = 16'd0;
#0 kernel_data_V_2_46 = 16'd0;
#0 kernel_data_V_2_47 = 16'd0;
#0 kernel_data_V_2_60 = 16'd0;
#0 kernel_data_V_2_61 = 16'd0;
#0 kernel_data_V_2_62 = 16'd0;
#0 kernel_data_V_2_63 = 16'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_0_ce0),
    .we0(line_buffer_Array_V_2_0_0_we0),
    .d0(pool_window_15_V_reg_3312),
    .q0(line_buffer_Array_V_2_0_0_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_1_0_ce0),
    .we0(line_buffer_Array_V_2_1_0_we0),
    .d0(line_buffer_Array_V_2_0_0_q0),
    .q0(line_buffer_Array_V_2_1_0_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_2_0_ce0),
    .we0(line_buffer_Array_V_2_2_0_we0),
    .d0(line_buffer_Array_V_2_1_0_q0),
    .q0(line_buffer_Array_V_2_2_0_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_1_ce0),
    .we0(line_buffer_Array_V_2_0_1_we0),
    .d0(pool_window_15_V_1_reg_3343),
    .q0(line_buffer_Array_V_2_0_1_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_1_1_ce0),
    .we0(line_buffer_Array_V_2_1_1_we0),
    .d0(line_buffer_Array_V_2_0_1_q0),
    .q0(line_buffer_Array_V_2_1_1_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_2_1_ce0),
    .we0(line_buffer_Array_V_2_2_1_we0),
    .d0(line_buffer_Array_V_2_1_1_q0),
    .q0(line_buffer_Array_V_2_2_1_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_2_ce0),
    .we0(line_buffer_Array_V_2_0_2_we0),
    .d0(pool_window_15_V_2_reg_3374),
    .q0(line_buffer_Array_V_2_0_2_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_1_2_ce0),
    .we0(line_buffer_Array_V_2_1_2_we0),
    .d0(line_buffer_Array_V_2_0_2_q0),
    .q0(line_buffer_Array_V_2_1_2_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_2_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_2_2_ce0),
    .we0(line_buffer_Array_V_2_2_2_we0),
    .d0(line_buffer_Array_V_2_1_2_q0),
    .q0(line_buffer_Array_V_2_2_2_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_3_ce0),
    .we0(line_buffer_Array_V_2_0_3_we0),
    .d0(pool_window_15_V_3_reg_3405),
    .q0(line_buffer_Array_V_2_0_3_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_1_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_1_3_ce0),
    .we0(line_buffer_Array_V_2_1_3_we0),
    .d0(line_buffer_Array_V_2_0_3_q0),
    .q0(line_buffer_Array_V_2_1_3_q0)
);

pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s_line_budEe #(
    .DataWidth( 16 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_2_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_2_3_ce0),
    .we0(line_buffer_Array_V_2_2_3_we0),
    .d0(line_buffer_Array_V_2_1_3_q0),
    .q0(line_buffer_Array_V_2_2_3_q0)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U22(
    .din0(kernel_data_V_2_4),
    .din1(kernel_data_V_2_8),
    .din2(kernel_data_V_2_12),
    .din3(line_buffer_Array_V_2_2_0_q0),
    .din4(line_buffer_Array_V_2_2_0_q0),
    .din5(line_buffer_Array_V_2_2_0_q0),
    .din6(line_buffer_Array_V_2_2_0_q0),
    .din7(line_buffer_Array_V_2_2_0_q0),
    .din8(line_buffer_Array_V_2_2_0_q0),
    .din9(line_buffer_Array_V_2_2_0_q0),
    .din10(line_buffer_Array_V_2_2_0_q0),
    .din11(line_buffer_Array_V_2_2_0_q0),
    .din12(line_buffer_Array_V_2_2_0_q0),
    .din13(line_buffer_Array_V_2_2_0_q0),
    .din14(line_buffer_Array_V_2_2_0_q0),
    .din15(line_buffer_Array_V_2_2_0_q0),
    .din16(phi_ln_fu_1220_p17),
    .dout(phi_ln_fu_1220_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U23(
    .din0(line_buffer_Array_V_2_1_0_q0),
    .din1(line_buffer_Array_V_2_1_0_q0),
    .din2(line_buffer_Array_V_2_1_0_q0),
    .din3(line_buffer_Array_V_2_1_0_q0),
    .din4(kernel_data_V_2_20),
    .din5(kernel_data_V_2_24),
    .din6(kernel_data_V_2_28),
    .din7(line_buffer_Array_V_2_1_0_q0),
    .din8(line_buffer_Array_V_2_1_0_q0),
    .din9(line_buffer_Array_V_2_1_0_q0),
    .din10(line_buffer_Array_V_2_1_0_q0),
    .din11(line_buffer_Array_V_2_1_0_q0),
    .din12(line_buffer_Array_V_2_1_0_q0),
    .din13(line_buffer_Array_V_2_1_0_q0),
    .din14(line_buffer_Array_V_2_1_0_q0),
    .din15(line_buffer_Array_V_2_1_0_q0),
    .din16(phi_ln65_1_fu_1320_p17),
    .dout(phi_ln65_1_fu_1320_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U24(
    .din0(kernel_data_V_2_4),
    .din1(kernel_data_V_2_8),
    .din2(kernel_data_V_2_12),
    .din3(line_buffer_Array_V_2_2_0_q0),
    .din4(kernel_data_V_2_20),
    .din5(kernel_data_V_2_24),
    .din6(kernel_data_V_2_28),
    .din7(line_buffer_Array_V_2_1_0_q0),
    .din8(line_buffer_Array_V_2_1_0_q0),
    .din9(line_buffer_Array_V_2_1_0_q0),
    .din10(line_buffer_Array_V_2_1_0_q0),
    .din11(line_buffer_Array_V_2_1_0_q0),
    .din12(line_buffer_Array_V_2_1_0_q0),
    .din13(line_buffer_Array_V_2_1_0_q0),
    .din14(line_buffer_Array_V_2_1_0_q0),
    .din15(line_buffer_Array_V_2_1_0_q0),
    .din16(zext_ln65_9_fu_1372_p1),
    .dout(phi_ln65_2_fu_1376_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U25(
    .din0(line_buffer_Array_V_2_0_0_q0),
    .din1(line_buffer_Array_V_2_0_0_q0),
    .din2(line_buffer_Array_V_2_0_0_q0),
    .din3(line_buffer_Array_V_2_0_0_q0),
    .din4(line_buffer_Array_V_2_0_0_q0),
    .din5(line_buffer_Array_V_2_0_0_q0),
    .din6(line_buffer_Array_V_2_0_0_q0),
    .din7(line_buffer_Array_V_2_0_0_q0),
    .din8(kernel_data_V_2_36),
    .din9(kernel_data_V_2_40),
    .din10(kernel_data_V_2_44),
    .din11(line_buffer_Array_V_2_0_0_q0),
    .din12(line_buffer_Array_V_2_0_0_q0),
    .din13(line_buffer_Array_V_2_0_0_q0),
    .din14(line_buffer_Array_V_2_0_0_q0),
    .din15(line_buffer_Array_V_2_0_0_q0),
    .din16(select_ln65_45_fu_1464_p3),
    .dout(phi_ln65_3_fu_1472_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U26(
    .din0(pool_window_15_V_reg_3312),
    .din1(pool_window_15_V_reg_3312),
    .din2(pool_window_15_V_reg_3312),
    .din3(pool_window_15_V_reg_3312),
    .din4(pool_window_15_V_reg_3312),
    .din5(pool_window_15_V_reg_3312),
    .din6(pool_window_15_V_reg_3312),
    .din7(pool_window_15_V_reg_3312),
    .din8(pool_window_15_V_reg_3312),
    .din9(pool_window_15_V_reg_3312),
    .din10(pool_window_15_V_reg_3312),
    .din11(pool_window_15_V_reg_3312),
    .din12(kernel_data_V_2_52),
    .din13(kernel_data_V_2_56),
    .din14(kernel_data_V_2_60),
    .din15(pool_window_15_V_reg_3312),
    .din16(sext_ln65_fu_1566_p1),
    .dout(phi_ln65_4_fu_1570_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U27(
    .din0(pool_window_15_V_reg_3312),
    .din1(pool_window_15_V_reg_3312),
    .din2(pool_window_15_V_reg_3312),
    .din3(pool_window_15_V_reg_3312),
    .din4(pool_window_15_V_reg_3312),
    .din5(pool_window_15_V_reg_3312),
    .din6(pool_window_15_V_reg_3312),
    .din7(pool_window_15_V_reg_3312),
    .din8(kernel_data_V_2_36),
    .din9(kernel_data_V_2_40),
    .din10(kernel_data_V_2_44),
    .din11(line_buffer_Array_V_2_0_0_q0),
    .din12(kernel_data_V_2_52),
    .din13(kernel_data_V_2_56),
    .din14(kernel_data_V_2_60),
    .din15(pool_window_15_V_reg_3312),
    .din16(select_ln65_51_fu_1601_p3),
    .dout(phi_ln65_5_fu_1609_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U28(
    .din0(kernel_data_V_2_4),
    .din1(kernel_data_V_2_8),
    .din2(kernel_data_V_2_12),
    .din3(line_buffer_Array_V_2_2_0_q0),
    .din4(kernel_data_V_2_20),
    .din5(kernel_data_V_2_24),
    .din6(kernel_data_V_2_28),
    .din7(line_buffer_Array_V_2_1_0_q0),
    .din8(kernel_data_V_2_36),
    .din9(kernel_data_V_2_40),
    .din10(kernel_data_V_2_44),
    .din11(line_buffer_Array_V_2_0_0_q0),
    .din12(kernel_data_V_2_52),
    .din13(kernel_data_V_2_56),
    .din14(kernel_data_V_2_60),
    .din15(pool_window_15_V_reg_3312),
    .din16(tmp_data_0_V_fu_1652_p17),
    .dout(tmp_data_0_V_fu_1652_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U29(
    .din0(kernel_data_V_2_5),
    .din1(kernel_data_V_2_9),
    .din2(kernel_data_V_2_13),
    .din3(line_buffer_Array_V_2_2_1_q0),
    .din4(line_buffer_Array_V_2_2_1_q0),
    .din5(line_buffer_Array_V_2_2_1_q0),
    .din6(line_buffer_Array_V_2_2_1_q0),
    .din7(line_buffer_Array_V_2_2_1_q0),
    .din8(line_buffer_Array_V_2_2_1_q0),
    .din9(line_buffer_Array_V_2_2_1_q0),
    .din10(line_buffer_Array_V_2_2_1_q0),
    .din11(line_buffer_Array_V_2_2_1_q0),
    .din12(line_buffer_Array_V_2_2_1_q0),
    .din13(line_buffer_Array_V_2_2_1_q0),
    .din14(line_buffer_Array_V_2_2_1_q0),
    .din15(line_buffer_Array_V_2_2_1_q0),
    .din16(phi_ln65_6_fu_1752_p17),
    .dout(phi_ln65_6_fu_1752_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U30(
    .din0(line_buffer_Array_V_2_1_1_q0),
    .din1(line_buffer_Array_V_2_1_1_q0),
    .din2(line_buffer_Array_V_2_1_1_q0),
    .din3(line_buffer_Array_V_2_1_1_q0),
    .din4(kernel_data_V_2_21),
    .din5(kernel_data_V_2_25),
    .din6(kernel_data_V_2_29),
    .din7(line_buffer_Array_V_2_1_1_q0),
    .din8(line_buffer_Array_V_2_1_1_q0),
    .din9(line_buffer_Array_V_2_1_1_q0),
    .din10(line_buffer_Array_V_2_1_1_q0),
    .din11(line_buffer_Array_V_2_1_1_q0),
    .din12(line_buffer_Array_V_2_1_1_q0),
    .din13(line_buffer_Array_V_2_1_1_q0),
    .din14(line_buffer_Array_V_2_1_1_q0),
    .din15(line_buffer_Array_V_2_1_1_q0),
    .din16(phi_ln65_7_fu_1852_p17),
    .dout(phi_ln65_7_fu_1852_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U31(
    .din0(kernel_data_V_2_5),
    .din1(kernel_data_V_2_9),
    .din2(kernel_data_V_2_13),
    .din3(line_buffer_Array_V_2_2_1_q0),
    .din4(kernel_data_V_2_21),
    .din5(kernel_data_V_2_25),
    .din6(kernel_data_V_2_29),
    .din7(line_buffer_Array_V_2_1_1_q0),
    .din8(line_buffer_Array_V_2_1_1_q0),
    .din9(line_buffer_Array_V_2_1_1_q0),
    .din10(line_buffer_Array_V_2_1_1_q0),
    .din11(line_buffer_Array_V_2_1_1_q0),
    .din12(line_buffer_Array_V_2_1_1_q0),
    .din13(line_buffer_Array_V_2_1_1_q0),
    .din14(line_buffer_Array_V_2_1_1_q0),
    .din15(line_buffer_Array_V_2_1_1_q0),
    .din16(zext_ln65_12_fu_1904_p1),
    .dout(phi_ln65_8_fu_1908_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U32(
    .din0(line_buffer_Array_V_2_0_1_q0),
    .din1(line_buffer_Array_V_2_0_1_q0),
    .din2(line_buffer_Array_V_2_0_1_q0),
    .din3(line_buffer_Array_V_2_0_1_q0),
    .din4(line_buffer_Array_V_2_0_1_q0),
    .din5(line_buffer_Array_V_2_0_1_q0),
    .din6(line_buffer_Array_V_2_0_1_q0),
    .din7(line_buffer_Array_V_2_0_1_q0),
    .din8(kernel_data_V_2_37),
    .din9(kernel_data_V_2_41),
    .din10(kernel_data_V_2_45),
    .din11(line_buffer_Array_V_2_0_1_q0),
    .din12(line_buffer_Array_V_2_0_1_q0),
    .din13(line_buffer_Array_V_2_0_1_q0),
    .din14(line_buffer_Array_V_2_0_1_q0),
    .din15(line_buffer_Array_V_2_0_1_q0),
    .din16(select_ln65_67_fu_1996_p3),
    .dout(phi_ln65_9_fu_2004_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U33(
    .din0(pool_window_15_V_1_reg_3343),
    .din1(pool_window_15_V_1_reg_3343),
    .din2(pool_window_15_V_1_reg_3343),
    .din3(pool_window_15_V_1_reg_3343),
    .din4(pool_window_15_V_1_reg_3343),
    .din5(pool_window_15_V_1_reg_3343),
    .din6(pool_window_15_V_1_reg_3343),
    .din7(pool_window_15_V_1_reg_3343),
    .din8(pool_window_15_V_1_reg_3343),
    .din9(pool_window_15_V_1_reg_3343),
    .din10(pool_window_15_V_1_reg_3343),
    .din11(pool_window_15_V_1_reg_3343),
    .din12(kernel_data_V_2_53),
    .din13(kernel_data_V_2_57),
    .din14(kernel_data_V_2_61),
    .din15(pool_window_15_V_1_reg_3343),
    .din16(sext_ln65_1_fu_2098_p1),
    .dout(phi_ln65_s_fu_2102_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U34(
    .din0(pool_window_15_V_1_reg_3343),
    .din1(pool_window_15_V_1_reg_3343),
    .din2(pool_window_15_V_1_reg_3343),
    .din3(pool_window_15_V_1_reg_3343),
    .din4(pool_window_15_V_1_reg_3343),
    .din5(pool_window_15_V_1_reg_3343),
    .din6(pool_window_15_V_1_reg_3343),
    .din7(pool_window_15_V_1_reg_3343),
    .din8(kernel_data_V_2_37),
    .din9(kernel_data_V_2_41),
    .din10(kernel_data_V_2_45),
    .din11(line_buffer_Array_V_2_0_1_q0),
    .din12(kernel_data_V_2_53),
    .din13(kernel_data_V_2_57),
    .din14(kernel_data_V_2_61),
    .din15(pool_window_15_V_1_reg_3343),
    .din16(select_ln65_73_fu_2133_p3),
    .dout(phi_ln65_10_fu_2141_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U35(
    .din0(kernel_data_V_2_5),
    .din1(kernel_data_V_2_9),
    .din2(kernel_data_V_2_13),
    .din3(line_buffer_Array_V_2_2_1_q0),
    .din4(kernel_data_V_2_21),
    .din5(kernel_data_V_2_25),
    .din6(kernel_data_V_2_29),
    .din7(line_buffer_Array_V_2_1_1_q0),
    .din8(kernel_data_V_2_37),
    .din9(kernel_data_V_2_41),
    .din10(kernel_data_V_2_45),
    .din11(line_buffer_Array_V_2_0_1_q0),
    .din12(kernel_data_V_2_53),
    .din13(kernel_data_V_2_57),
    .din14(kernel_data_V_2_61),
    .din15(pool_window_15_V_1_reg_3343),
    .din16(tmp_data_1_V_fu_2184_p17),
    .dout(tmp_data_1_V_fu_2184_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U36(
    .din0(kernel_data_V_2_6),
    .din1(kernel_data_V_2_10),
    .din2(kernel_data_V_2_14),
    .din3(line_buffer_Array_V_2_2_2_q0),
    .din4(line_buffer_Array_V_2_2_2_q0),
    .din5(line_buffer_Array_V_2_2_2_q0),
    .din6(line_buffer_Array_V_2_2_2_q0),
    .din7(line_buffer_Array_V_2_2_2_q0),
    .din8(line_buffer_Array_V_2_2_2_q0),
    .din9(line_buffer_Array_V_2_2_2_q0),
    .din10(line_buffer_Array_V_2_2_2_q0),
    .din11(line_buffer_Array_V_2_2_2_q0),
    .din12(line_buffer_Array_V_2_2_2_q0),
    .din13(line_buffer_Array_V_2_2_2_q0),
    .din14(line_buffer_Array_V_2_2_2_q0),
    .din15(line_buffer_Array_V_2_2_2_q0),
    .din16(phi_ln65_11_fu_2284_p17),
    .dout(phi_ln65_11_fu_2284_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U37(
    .din0(line_buffer_Array_V_2_1_2_q0),
    .din1(line_buffer_Array_V_2_1_2_q0),
    .din2(line_buffer_Array_V_2_1_2_q0),
    .din3(line_buffer_Array_V_2_1_2_q0),
    .din4(kernel_data_V_2_22),
    .din5(kernel_data_V_2_26),
    .din6(kernel_data_V_2_30),
    .din7(line_buffer_Array_V_2_1_2_q0),
    .din8(line_buffer_Array_V_2_1_2_q0),
    .din9(line_buffer_Array_V_2_1_2_q0),
    .din10(line_buffer_Array_V_2_1_2_q0),
    .din11(line_buffer_Array_V_2_1_2_q0),
    .din12(line_buffer_Array_V_2_1_2_q0),
    .din13(line_buffer_Array_V_2_1_2_q0),
    .din14(line_buffer_Array_V_2_1_2_q0),
    .din15(line_buffer_Array_V_2_1_2_q0),
    .din16(phi_ln65_12_fu_2384_p17),
    .dout(phi_ln65_12_fu_2384_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U38(
    .din0(kernel_data_V_2_6),
    .din1(kernel_data_V_2_10),
    .din2(kernel_data_V_2_14),
    .din3(line_buffer_Array_V_2_2_2_q0),
    .din4(kernel_data_V_2_22),
    .din5(kernel_data_V_2_26),
    .din6(kernel_data_V_2_30),
    .din7(line_buffer_Array_V_2_1_2_q0),
    .din8(line_buffer_Array_V_2_1_2_q0),
    .din9(line_buffer_Array_V_2_1_2_q0),
    .din10(line_buffer_Array_V_2_1_2_q0),
    .din11(line_buffer_Array_V_2_1_2_q0),
    .din12(line_buffer_Array_V_2_1_2_q0),
    .din13(line_buffer_Array_V_2_1_2_q0),
    .din14(line_buffer_Array_V_2_1_2_q0),
    .din15(line_buffer_Array_V_2_1_2_q0),
    .din16(zext_ln65_15_fu_2436_p1),
    .dout(phi_ln65_13_fu_2440_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U39(
    .din0(line_buffer_Array_V_2_0_2_q0),
    .din1(line_buffer_Array_V_2_0_2_q0),
    .din2(line_buffer_Array_V_2_0_2_q0),
    .din3(line_buffer_Array_V_2_0_2_q0),
    .din4(line_buffer_Array_V_2_0_2_q0),
    .din5(line_buffer_Array_V_2_0_2_q0),
    .din6(line_buffer_Array_V_2_0_2_q0),
    .din7(line_buffer_Array_V_2_0_2_q0),
    .din8(kernel_data_V_2_38),
    .din9(kernel_data_V_2_42),
    .din10(kernel_data_V_2_46),
    .din11(line_buffer_Array_V_2_0_2_q0),
    .din12(line_buffer_Array_V_2_0_2_q0),
    .din13(line_buffer_Array_V_2_0_2_q0),
    .din14(line_buffer_Array_V_2_0_2_q0),
    .din15(line_buffer_Array_V_2_0_2_q0),
    .din16(select_ln65_88_fu_2528_p3),
    .dout(phi_ln65_14_fu_2536_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U40(
    .din0(pool_window_15_V_2_reg_3374),
    .din1(pool_window_15_V_2_reg_3374),
    .din2(pool_window_15_V_2_reg_3374),
    .din3(pool_window_15_V_2_reg_3374),
    .din4(pool_window_15_V_2_reg_3374),
    .din5(pool_window_15_V_2_reg_3374),
    .din6(pool_window_15_V_2_reg_3374),
    .din7(pool_window_15_V_2_reg_3374),
    .din8(pool_window_15_V_2_reg_3374),
    .din9(pool_window_15_V_2_reg_3374),
    .din10(pool_window_15_V_2_reg_3374),
    .din11(pool_window_15_V_2_reg_3374),
    .din12(kernel_data_V_2_54),
    .din13(kernel_data_V_2_58),
    .din14(kernel_data_V_2_62),
    .din15(pool_window_15_V_2_reg_3374),
    .din16(sext_ln65_2_fu_2630_p1),
    .dout(phi_ln65_15_fu_2634_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U41(
    .din0(pool_window_15_V_2_reg_3374),
    .din1(pool_window_15_V_2_reg_3374),
    .din2(pool_window_15_V_2_reg_3374),
    .din3(pool_window_15_V_2_reg_3374),
    .din4(pool_window_15_V_2_reg_3374),
    .din5(pool_window_15_V_2_reg_3374),
    .din6(pool_window_15_V_2_reg_3374),
    .din7(pool_window_15_V_2_reg_3374),
    .din8(kernel_data_V_2_38),
    .din9(kernel_data_V_2_42),
    .din10(kernel_data_V_2_46),
    .din11(line_buffer_Array_V_2_0_2_q0),
    .din12(kernel_data_V_2_54),
    .din13(kernel_data_V_2_58),
    .din14(kernel_data_V_2_62),
    .din15(pool_window_15_V_2_reg_3374),
    .din16(select_ln65_94_fu_2665_p3),
    .dout(phi_ln65_16_fu_2673_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U42(
    .din0(kernel_data_V_2_6),
    .din1(kernel_data_V_2_10),
    .din2(kernel_data_V_2_14),
    .din3(line_buffer_Array_V_2_2_2_q0),
    .din4(kernel_data_V_2_22),
    .din5(kernel_data_V_2_26),
    .din6(kernel_data_V_2_30),
    .din7(line_buffer_Array_V_2_1_2_q0),
    .din8(kernel_data_V_2_38),
    .din9(kernel_data_V_2_42),
    .din10(kernel_data_V_2_46),
    .din11(line_buffer_Array_V_2_0_2_q0),
    .din12(kernel_data_V_2_54),
    .din13(kernel_data_V_2_58),
    .din14(kernel_data_V_2_62),
    .din15(pool_window_15_V_2_reg_3374),
    .din16(tmp_data_2_V_fu_2716_p17),
    .dout(tmp_data_2_V_fu_2716_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U43(
    .din0(kernel_data_V_2_7),
    .din1(kernel_data_V_2_11),
    .din2(kernel_data_V_2_15),
    .din3(line_buffer_Array_V_2_2_3_q0),
    .din4(line_buffer_Array_V_2_2_3_q0),
    .din5(line_buffer_Array_V_2_2_3_q0),
    .din6(line_buffer_Array_V_2_2_3_q0),
    .din7(line_buffer_Array_V_2_2_3_q0),
    .din8(line_buffer_Array_V_2_2_3_q0),
    .din9(line_buffer_Array_V_2_2_3_q0),
    .din10(line_buffer_Array_V_2_2_3_q0),
    .din11(line_buffer_Array_V_2_2_3_q0),
    .din12(line_buffer_Array_V_2_2_3_q0),
    .din13(line_buffer_Array_V_2_2_3_q0),
    .din14(line_buffer_Array_V_2_2_3_q0),
    .din15(line_buffer_Array_V_2_2_3_q0),
    .din16(phi_ln65_17_fu_2816_p17),
    .dout(phi_ln65_17_fu_2816_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U44(
    .din0(line_buffer_Array_V_2_1_3_q0),
    .din1(line_buffer_Array_V_2_1_3_q0),
    .din2(line_buffer_Array_V_2_1_3_q0),
    .din3(line_buffer_Array_V_2_1_3_q0),
    .din4(kernel_data_V_2_23),
    .din5(kernel_data_V_2_27),
    .din6(kernel_data_V_2_31),
    .din7(line_buffer_Array_V_2_1_3_q0),
    .din8(line_buffer_Array_V_2_1_3_q0),
    .din9(line_buffer_Array_V_2_1_3_q0),
    .din10(line_buffer_Array_V_2_1_3_q0),
    .din11(line_buffer_Array_V_2_1_3_q0),
    .din12(line_buffer_Array_V_2_1_3_q0),
    .din13(line_buffer_Array_V_2_1_3_q0),
    .din14(line_buffer_Array_V_2_1_3_q0),
    .din15(line_buffer_Array_V_2_1_3_q0),
    .din16(phi_ln65_18_fu_2916_p17),
    .dout(phi_ln65_18_fu_2916_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U45(
    .din0(kernel_data_V_2_7),
    .din1(kernel_data_V_2_11),
    .din2(kernel_data_V_2_15),
    .din3(line_buffer_Array_V_2_2_3_q0),
    .din4(kernel_data_V_2_23),
    .din5(kernel_data_V_2_27),
    .din6(kernel_data_V_2_31),
    .din7(line_buffer_Array_V_2_1_3_q0),
    .din8(line_buffer_Array_V_2_1_3_q0),
    .din9(line_buffer_Array_V_2_1_3_q0),
    .din10(line_buffer_Array_V_2_1_3_q0),
    .din11(line_buffer_Array_V_2_1_3_q0),
    .din12(line_buffer_Array_V_2_1_3_q0),
    .din13(line_buffer_Array_V_2_1_3_q0),
    .din14(line_buffer_Array_V_2_1_3_q0),
    .din15(line_buffer_Array_V_2_1_3_q0),
    .din16(zext_ln65_18_fu_2968_p1),
    .dout(phi_ln65_19_fu_2972_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U46(
    .din0(line_buffer_Array_V_2_0_3_q0),
    .din1(line_buffer_Array_V_2_0_3_q0),
    .din2(line_buffer_Array_V_2_0_3_q0),
    .din3(line_buffer_Array_V_2_0_3_q0),
    .din4(line_buffer_Array_V_2_0_3_q0),
    .din5(line_buffer_Array_V_2_0_3_q0),
    .din6(line_buffer_Array_V_2_0_3_q0),
    .din7(line_buffer_Array_V_2_0_3_q0),
    .din8(kernel_data_V_2_39),
    .din9(kernel_data_V_2_43),
    .din10(kernel_data_V_2_47),
    .din11(line_buffer_Array_V_2_0_3_q0),
    .din12(line_buffer_Array_V_2_0_3_q0),
    .din13(line_buffer_Array_V_2_0_3_q0),
    .din14(line_buffer_Array_V_2_0_3_q0),
    .din15(line_buffer_Array_V_2_0_3_q0),
    .din16(select_ln65_109_fu_3060_p3),
    .dout(phi_ln65_20_fu_3068_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U47(
    .din0(pool_window_15_V_3_reg_3405),
    .din1(pool_window_15_V_3_reg_3405),
    .din2(pool_window_15_V_3_reg_3405),
    .din3(pool_window_15_V_3_reg_3405),
    .din4(pool_window_15_V_3_reg_3405),
    .din5(pool_window_15_V_3_reg_3405),
    .din6(pool_window_15_V_3_reg_3405),
    .din7(pool_window_15_V_3_reg_3405),
    .din8(pool_window_15_V_3_reg_3405),
    .din9(pool_window_15_V_3_reg_3405),
    .din10(pool_window_15_V_3_reg_3405),
    .din11(pool_window_15_V_3_reg_3405),
    .din12(kernel_data_V_2_55),
    .din13(kernel_data_V_2_59),
    .din14(kernel_data_V_2_63),
    .din15(pool_window_15_V_3_reg_3405),
    .din16(sext_ln65_3_fu_3162_p1),
    .dout(phi_ln65_21_fu_3166_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U48(
    .din0(pool_window_15_V_3_reg_3405),
    .din1(pool_window_15_V_3_reg_3405),
    .din2(pool_window_15_V_3_reg_3405),
    .din3(pool_window_15_V_3_reg_3405),
    .din4(pool_window_15_V_3_reg_3405),
    .din5(pool_window_15_V_3_reg_3405),
    .din6(pool_window_15_V_3_reg_3405),
    .din7(pool_window_15_V_3_reg_3405),
    .din8(kernel_data_V_2_39),
    .din9(kernel_data_V_2_43),
    .din10(kernel_data_V_2_47),
    .din11(line_buffer_Array_V_2_0_3_q0),
    .din12(kernel_data_V_2_55),
    .din13(kernel_data_V_2_59),
    .din14(kernel_data_V_2_63),
    .din15(pool_window_15_V_3_reg_3405),
    .din16(select_ln65_115_fu_3197_p3),
    .dout(phi_ln65_22_fu_3205_p18)
);

myproject_mux_164_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_mux_164_16_1_1_U49(
    .din0(kernel_data_V_2_7),
    .din1(kernel_data_V_2_11),
    .din2(kernel_data_V_2_15),
    .din3(line_buffer_Array_V_2_2_3_q0),
    .din4(kernel_data_V_2_23),
    .din5(kernel_data_V_2_27),
    .din6(kernel_data_V_2_31),
    .din7(line_buffer_Array_V_2_1_3_q0),
    .din8(kernel_data_V_2_39),
    .din9(kernel_data_V_2_43),
    .din10(kernel_data_V_2_47),
    .din11(line_buffer_Array_V_2_0_3_q0),
    .din12(kernel_data_V_2_55),
    .din13(kernel_data_V_2_59),
    .din14(kernel_data_V_2_63),
    .din15(pool_window_15_V_3_reg_3405),
    .din16(tmp_data_3_V_fu_3248_p17),
    .dout(tmp_data_3_V_fu_3248_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_284)) begin
        if ((1'b1 == ap_condition_338)) begin
            ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375 <= 32'd0;
        end else if ((1'b1 == ap_condition_303)) begin
            ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375 <= select_ln222_fu_530_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_375;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_386_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_364 <= add_ln241_fu_392_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_364 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_331)) begin
        if ((icmp_ln212_fu_456_p2 == 1'd1)) begin
            pX_1 <= 32'd0;
        end else if ((icmp_ln212_fu_456_p2 == 1'd0)) begin
            pX_1 <= add_ln225_fu_462_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_344)) begin
        if ((icmp_ln216_fu_506_p2 == 1'd1)) begin
            pY_1 <= 32'd0;
        end else if ((icmp_ln216_fu_506_p2 == 1'd0)) begin
            pY_1 <= add_ln220_fu_512_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_331)) begin
        if ((icmp_ln212_fu_456_p2 == 1'd1)) begin
            sX_1 <= 32'd0;
        end else if ((icmp_ln212_fu_456_p2 == 1'd0)) begin
            sX_1 <= select_ln227_fu_480_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_386_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln191_4_reg_3295 <= and_ln191_4_fu_450_p2;
        icmp_ln212_reg_3299 <= icmp_ln212_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln191_4_reg_3295_pp0_iter1_reg <= and_ln191_4_reg_3295;
        icmp_ln241_reg_3286 <= icmp_ln241_fu_386_p2;
        icmp_ln241_reg_3286_pp0_iter1_reg <= icmp_ln241_reg_3286;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        kernel_data_V_2_10 <= kernel_data_V_2_14;
        kernel_data_V_2_11 <= kernel_data_V_2_15;
        kernel_data_V_2_12 <= line_buffer_Array_V_2_2_0_q0;
        kernel_data_V_2_13 <= line_buffer_Array_V_2_2_1_q0;
        kernel_data_V_2_14 <= line_buffer_Array_V_2_2_2_q0;
        kernel_data_V_2_15 <= line_buffer_Array_V_2_2_3_q0;
        kernel_data_V_2_20 <= kernel_data_V_2_24;
        kernel_data_V_2_21 <= kernel_data_V_2_25;
        kernel_data_V_2_22 <= kernel_data_V_2_26;
        kernel_data_V_2_23 <= kernel_data_V_2_27;
        kernel_data_V_2_24 <= kernel_data_V_2_28;
        kernel_data_V_2_25 <= kernel_data_V_2_29;
        kernel_data_V_2_26 <= kernel_data_V_2_30;
        kernel_data_V_2_27 <= kernel_data_V_2_31;
        kernel_data_V_2_28 <= line_buffer_Array_V_2_1_0_q0;
        kernel_data_V_2_29 <= line_buffer_Array_V_2_1_1_q0;
        kernel_data_V_2_30 <= line_buffer_Array_V_2_1_2_q0;
        kernel_data_V_2_31 <= line_buffer_Array_V_2_1_3_q0;
        kernel_data_V_2_36 <= kernel_data_V_2_40;
        kernel_data_V_2_37 <= kernel_data_V_2_41;
        kernel_data_V_2_38 <= kernel_data_V_2_42;
        kernel_data_V_2_39 <= kernel_data_V_2_43;
        kernel_data_V_2_4 <= kernel_data_V_2_8;
        kernel_data_V_2_40 <= kernel_data_V_2_44;
        kernel_data_V_2_41 <= kernel_data_V_2_45;
        kernel_data_V_2_42 <= kernel_data_V_2_46;
        kernel_data_V_2_43 <= kernel_data_V_2_47;
        kernel_data_V_2_44 <= line_buffer_Array_V_2_0_0_q0;
        kernel_data_V_2_45 <= line_buffer_Array_V_2_0_1_q0;
        kernel_data_V_2_46 <= line_buffer_Array_V_2_0_2_q0;
        kernel_data_V_2_47 <= line_buffer_Array_V_2_0_3_q0;
        kernel_data_V_2_5 <= kernel_data_V_2_9;
        kernel_data_V_2_52 <= kernel_data_V_2_56;
        kernel_data_V_2_53 <= kernel_data_V_2_57;
        kernel_data_V_2_54 <= kernel_data_V_2_58;
        kernel_data_V_2_55 <= kernel_data_V_2_59;
        kernel_data_V_2_56 <= kernel_data_V_2_60;
        kernel_data_V_2_57 <= kernel_data_V_2_61;
        kernel_data_V_2_58 <= kernel_data_V_2_62;
        kernel_data_V_2_59 <= kernel_data_V_2_63;
        kernel_data_V_2_6 <= kernel_data_V_2_10;
        kernel_data_V_2_60 <= pool_window_15_V_reg_3312;
        kernel_data_V_2_61 <= pool_window_15_V_1_reg_3343;
        kernel_data_V_2_62 <= pool_window_15_V_2_reg_3374;
        kernel_data_V_2_63 <= pool_window_15_V_3_reg_3405;
        kernel_data_V_2_7 <= kernel_data_V_2_11;
        kernel_data_V_2_8 <= kernel_data_V_2_12;
        kernel_data_V_2_9 <= kernel_data_V_2_13;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pool_window_15_V_1_reg_3343 <= data_V_data_1_V_dout;
        pool_window_15_V_2_reg_3374 <= data_V_data_2_V_dout;
        pool_window_15_V_3_reg_3405 <= data_V_data_3_V_dout;
        pool_window_15_V_reg_3312 <= data_V_data_0_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_reg_3299 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sY_1 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375;
    end
end

always @ (*) begin
    if ((icmp_ln241_fu_386_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln212_reg_3299 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_sY_1_load = ap_phi_reg_pp0_iter1_storemerge_i_i_reg_375;
    end else begin
        ap_sig_allocacmp_sY_1_load = sY_1;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3286 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3286 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3286 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3286 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_0_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_1_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_1_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_1_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_1_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_1_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_1_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_1_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_1_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_1_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_2_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_2_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_2_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_2_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_2_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_2_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_2_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_2_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3286_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line_buffer_Array_V_2_2_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_2_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3295_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3295_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3295_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3295_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3295_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3295_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3295_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3295_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln241_fu_386_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln241_fu_386_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln220_fu_512_p2 = (pY_1 + 32'd1);

assign add_ln222_fu_524_p2 = (ap_sig_allocacmp_sY_1_load + 32'd1);

assign add_ln225_fu_462_p2 = (pX_1 + 32'd1);

assign add_ln227_fu_474_p2 = (sX_1 + 32'd1);

assign add_ln241_fu_392_p2 = (indvar_flatten_reg_364 + 10'd1);

assign and_ln191_3_fu_444_p2 = (icmp_ln191_6_fu_432_p2 & icmp_ln191_5_fu_422_p2);

assign and_ln191_4_fu_450_p2 = (and_ln191_fu_438_p2 & and_ln191_3_fu_444_p2);

assign and_ln191_fu_438_p2 = (icmp_ln191_fu_402_p2 & icmp_ln191_4_fu_412_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((io_acc_block_signal_op373 == 1'b0) & (1'd1 == and_ln191_4_reg_3295_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((io_acc_block_signal_op53 == 1'b0) & (icmp_ln241_reg_3286 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((io_acc_block_signal_op373 == 1'b0) & (1'd1 == and_ln191_4_reg_3295_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((io_acc_block_signal_op53 == 1'b0) & (icmp_ln241_reg_3286 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((io_acc_block_signal_op373 == 1'b0) & (1'd1 == and_ln191_4_reg_3295_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((io_acc_block_signal_op53 == 1'b0) & (icmp_ln241_reg_3286 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((io_acc_block_signal_op53 == 1'b0) & (icmp_ln241_reg_3286 == 1'd0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((io_acc_block_signal_op373 == 1'b0) & (1'd1 == and_ln191_4_reg_3295_pp0_iter1_reg));
end

always @ (*) begin
    ap_condition_284 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_303 = ((icmp_ln212_fu_456_p2 == 1'd1) & (icmp_ln216_fu_506_p2 == 1'd0) & (icmp_ln241_fu_386_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_331 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_386_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_338 = ((icmp_ln216_fu_506_p2 == 1'd1) & (icmp_ln212_fu_456_p2 == 1'd1) & (icmp_ln241_fu_386_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_344 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_456_p2 == 1'd1) & (icmp_ln241_fu_386_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_storemerge_i_i_reg_375 = 'bx;

assign ap_ready = internal_ap_ready;

assign icmp_ln1496_1_fu_1690_p2 = (($signed(kernel_data_V_2_5) < $signed(kernel_data_V_2_9)) ? 1'b1 : 1'b0);

assign icmp_ln1496_24_fu_1176_p2 = (($signed(kernel_data_V_2_12) < $signed(line_buffer_Array_V_2_2_0_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_25_fu_1198_p2 = (($signed(select_ln65_fu_1168_p3) < $signed(select_ln65_33_fu_1190_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_26_fu_1258_p2 = (($signed(kernel_data_V_2_20) < $signed(kernel_data_V_2_24)) ? 1'b1 : 1'b0);

assign icmp_ln1496_27_fu_1280_p2 = (($signed(kernel_data_V_2_28) < $signed(line_buffer_Array_V_2_1_0_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_28_fu_1302_p2 = (($signed(select_ln65_36_fu_1272_p3) < $signed(select_ln65_38_fu_1294_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_29_fu_1358_p2 = (($signed(phi_ln_fu_1220_p18) < $signed(phi_ln65_1_fu_1320_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_2222_p2 = (($signed(kernel_data_V_2_6) < $signed(kernel_data_V_2_10)) ? 1'b1 : 1'b0);

assign icmp_ln1496_30_fu_1414_p2 = (($signed(kernel_data_V_2_36) < $signed(kernel_data_V_2_40)) ? 1'b1 : 1'b0);

assign icmp_ln1496_31_fu_1436_p2 = (($signed(kernel_data_V_2_44) < $signed(line_buffer_Array_V_2_0_0_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_32_fu_1458_p2 = (($signed(select_ln65_42_fu_1428_p3) < $signed(select_ln65_44_fu_1450_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_33_fu_1510_p2 = (($signed(kernel_data_V_2_52) < $signed(kernel_data_V_2_56)) ? 1'b1 : 1'b0);

assign icmp_ln1496_34_fu_1532_p2 = (($signed(kernel_data_V_2_60) < $signed(pool_window_15_V_reg_3312)) ? 1'b1 : 1'b0);

assign icmp_ln1496_35_fu_1552_p2 = (($signed(select_ln65_47_fu_1524_p3) < $signed(select_ln65_49_fu_1545_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_36_fu_1595_p2 = (($signed(phi_ln65_3_fu_1472_p18) < $signed(phi_ln65_4_fu_1570_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_37_fu_1638_p2 = (($signed(phi_ln65_2_fu_1376_p18) < $signed(phi_ln65_5_fu_1609_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_38_fu_1708_p2 = (($signed(kernel_data_V_2_13) < $signed(line_buffer_Array_V_2_2_1_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_39_fu_1730_p2 = (($signed(select_ln65_53_fu_1700_p3) < $signed(select_ln65_55_fu_1722_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_40_fu_1790_p2 = (($signed(kernel_data_V_2_21) < $signed(kernel_data_V_2_25)) ? 1'b1 : 1'b0);

assign icmp_ln1496_41_fu_1812_p2 = (($signed(kernel_data_V_2_29) < $signed(line_buffer_Array_V_2_1_1_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_42_fu_1834_p2 = (($signed(select_ln65_58_fu_1804_p3) < $signed(select_ln65_60_fu_1826_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_43_fu_1890_p2 = (($signed(phi_ln65_6_fu_1752_p18) < $signed(phi_ln65_7_fu_1852_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_44_fu_1946_p2 = (($signed(kernel_data_V_2_37) < $signed(kernel_data_V_2_41)) ? 1'b1 : 1'b0);

assign icmp_ln1496_45_fu_1968_p2 = (($signed(kernel_data_V_2_45) < $signed(line_buffer_Array_V_2_0_1_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_46_fu_1990_p2 = (($signed(select_ln65_64_fu_1960_p3) < $signed(select_ln65_66_fu_1982_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_47_fu_2042_p2 = (($signed(kernel_data_V_2_53) < $signed(kernel_data_V_2_57)) ? 1'b1 : 1'b0);

assign icmp_ln1496_48_fu_2064_p2 = (($signed(kernel_data_V_2_61) < $signed(pool_window_15_V_1_reg_3343)) ? 1'b1 : 1'b0);

assign icmp_ln1496_49_fu_2084_p2 = (($signed(select_ln65_69_fu_2056_p3) < $signed(select_ln65_71_fu_2077_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_50_fu_2127_p2 = (($signed(phi_ln65_9_fu_2004_p18) < $signed(phi_ln65_s_fu_2102_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_51_fu_2170_p2 = (($signed(phi_ln65_8_fu_1908_p18) < $signed(phi_ln65_10_fu_2141_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_52_fu_2240_p2 = (($signed(kernel_data_V_2_14) < $signed(line_buffer_Array_V_2_2_2_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_53_fu_2262_p2 = (($signed(select_ln65_74_fu_2232_p3) < $signed(select_ln65_76_fu_2254_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_54_fu_2322_p2 = (($signed(kernel_data_V_2_22) < $signed(kernel_data_V_2_26)) ? 1'b1 : 1'b0);

assign icmp_ln1496_55_fu_2344_p2 = (($signed(kernel_data_V_2_30) < $signed(line_buffer_Array_V_2_1_2_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_56_fu_2366_p2 = (($signed(select_ln65_79_fu_2336_p3) < $signed(select_ln65_81_fu_2358_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_57_fu_2422_p2 = (($signed(phi_ln65_11_fu_2284_p18) < $signed(phi_ln65_12_fu_2384_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_58_fu_2478_p2 = (($signed(kernel_data_V_2_38) < $signed(kernel_data_V_2_42)) ? 1'b1 : 1'b0);

assign icmp_ln1496_59_fu_2500_p2 = (($signed(kernel_data_V_2_46) < $signed(line_buffer_Array_V_2_0_2_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_60_fu_2522_p2 = (($signed(select_ln65_85_fu_2492_p3) < $signed(select_ln65_87_fu_2514_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_61_fu_2574_p2 = (($signed(kernel_data_V_2_54) < $signed(kernel_data_V_2_58)) ? 1'b1 : 1'b0);

assign icmp_ln1496_62_fu_2596_p2 = (($signed(kernel_data_V_2_62) < $signed(pool_window_15_V_2_reg_3374)) ? 1'b1 : 1'b0);

assign icmp_ln1496_63_fu_2616_p2 = (($signed(select_ln65_90_fu_2588_p3) < $signed(select_ln65_92_fu_2609_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_64_fu_2659_p2 = (($signed(phi_ln65_14_fu_2536_p18) < $signed(phi_ln65_15_fu_2634_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_65_fu_2702_p2 = (($signed(phi_ln65_13_fu_2440_p18) < $signed(phi_ln65_16_fu_2673_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_66_fu_2754_p2 = (($signed(kernel_data_V_2_7) < $signed(kernel_data_V_2_11)) ? 1'b1 : 1'b0);

assign icmp_ln1496_67_fu_2772_p2 = (($signed(kernel_data_V_2_15) < $signed(line_buffer_Array_V_2_2_3_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_68_fu_2794_p2 = (($signed(select_ln65_95_fu_2764_p3) < $signed(select_ln65_97_fu_2786_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_69_fu_2854_p2 = (($signed(kernel_data_V_2_23) < $signed(kernel_data_V_2_27)) ? 1'b1 : 1'b0);

assign icmp_ln1496_70_fu_2876_p2 = (($signed(kernel_data_V_2_31) < $signed(line_buffer_Array_V_2_1_3_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_71_fu_2898_p2 = (($signed(select_ln65_100_fu_2868_p3) < $signed(select_ln65_102_fu_2890_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_72_fu_2954_p2 = (($signed(phi_ln65_17_fu_2816_p18) < $signed(phi_ln65_18_fu_2916_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_73_fu_3010_p2 = (($signed(kernel_data_V_2_39) < $signed(kernel_data_V_2_43)) ? 1'b1 : 1'b0);

assign icmp_ln1496_74_fu_3032_p2 = (($signed(kernel_data_V_2_47) < $signed(line_buffer_Array_V_2_0_3_q0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_75_fu_3054_p2 = (($signed(select_ln65_106_fu_3024_p3) < $signed(select_ln65_108_fu_3046_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_76_fu_3106_p2 = (($signed(kernel_data_V_2_55) < $signed(kernel_data_V_2_59)) ? 1'b1 : 1'b0);

assign icmp_ln1496_77_fu_3128_p2 = (($signed(kernel_data_V_2_63) < $signed(pool_window_15_V_3_reg_3405)) ? 1'b1 : 1'b0);

assign icmp_ln1496_78_fu_3148_p2 = (($signed(select_ln65_111_fu_3120_p3) < $signed(select_ln65_113_fu_3141_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_79_fu_3191_p2 = (($signed(phi_ln65_20_fu_3068_p18) < $signed(phi_ln65_21_fu_3166_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_80_fu_3234_p2 = (($signed(phi_ln65_19_fu_2972_p18) < $signed(phi_ln65_22_fu_3205_p18)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_1158_p2 = (($signed(kernel_data_V_2_4) < $signed(kernel_data_V_2_8)) ? 1'b1 : 1'b0);

assign icmp_ln191_4_fu_412_p2 = ((ap_sig_allocacmp_sY_1_load == 32'd3) ? 1'b1 : 1'b0);

assign icmp_ln191_5_fu_422_p2 = (($signed(pY_1) > $signed(32'd2)) ? 1'b1 : 1'b0);

assign icmp_ln191_6_fu_432_p2 = (($signed(pX_1) > $signed(32'd2)) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_402_p2 = ((sX_1 == 32'd3) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_456_p2 = ((pX_1 == 32'd25) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_506_p2 = ((pY_1 == 32'd25) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_386_p2 = ((indvar_flatten_reg_364 == 10'd676) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op373 = (res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op53 = (data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign phi_ln65_11_fu_2284_p17 = select_ln65_77_fu_2268_p3;

assign phi_ln65_12_fu_2384_p17 = select_ln65_82_fu_2372_p3;

assign phi_ln65_17_fu_2816_p17 = select_ln65_98_fu_2800_p3;

assign phi_ln65_18_fu_2916_p17 = select_ln65_103_fu_2904_p3;

assign phi_ln65_1_fu_1320_p17 = select_ln65_39_fu_1308_p3;

assign phi_ln65_6_fu_1752_p17 = select_ln65_56_fu_1736_p3;

assign phi_ln65_7_fu_1852_p17 = select_ln65_61_fu_1840_p3;

assign phi_ln_fu_1220_p17 = select_ln65_34_fu_1204_p3;

assign res_V_data_0_V_din = tmp_data_0_V_fu_1652_p18;

assign res_V_data_1_V_din = tmp_data_1_V_fu_2184_p18;

assign res_V_data_2_V_din = tmp_data_2_V_fu_2716_p18;

assign res_V_data_3_V_din = tmp_data_3_V_fu_3248_p18;

assign select_ln222_fu_530_p3 = ((icmp_ln191_4_fu_412_p2[0:0] === 1'b1) ? 32'd0 : add_ln222_fu_524_p2);

assign select_ln227_fu_480_p3 = ((icmp_ln191_fu_402_p2[0:0] === 1'b1) ? 32'd0 : add_ln227_fu_474_p2);

assign select_ln65_100_fu_2868_p3 = ((icmp_ln1496_69_fu_2854_p2[0:0] === 1'b1) ? kernel_data_V_2_27 : kernel_data_V_2_23);

assign select_ln65_101_fu_2601_p3 = ((icmp_ln1496_62_fu_2596_p2[0:0] === 1'b1) ? 3'd7 : 3'd6);

assign select_ln65_102_fu_2890_p3 = ((icmp_ln1496_70_fu_2876_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_1_3_q0 : kernel_data_V_2_31);

assign select_ln65_103_fu_2904_p3 = ((icmp_ln1496_71_fu_2898_p2[0:0] === 1'b1) ? select_ln65_116_fu_2882_p3 : select_ln65_99_fu_2860_p3);

assign select_ln65_104_fu_2960_p3 = ((icmp_ln1496_72_fu_2954_p2[0:0] === 1'b1) ? select_ln65_103_fu_2904_p3 : zext_ln65_17_fu_2808_p1);

assign select_ln65_105_fu_3016_p3 = ((icmp_ln1496_73_fu_3010_p2[0:0] === 1'b1) ? 4'd9 : 4'd8);

assign select_ln65_106_fu_3024_p3 = ((icmp_ln1496_73_fu_3010_p2[0:0] === 1'b1) ? kernel_data_V_2_43 : kernel_data_V_2_39);

assign select_ln65_107_fu_3038_p3 = ((icmp_ln1496_74_fu_3032_p2[0:0] === 1'b1) ? 4'd11 : 4'd10);

assign select_ln65_108_fu_3046_p3 = ((icmp_ln1496_74_fu_3032_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_0_3_q0 : kernel_data_V_2_47);

assign select_ln65_109_fu_3060_p3 = ((icmp_ln1496_75_fu_3054_p2[0:0] === 1'b1) ? select_ln65_107_fu_3038_p3 : select_ln65_105_fu_3016_p3);

assign select_ln65_110_fu_3112_p3 = ((icmp_ln1496_76_fu_3106_p2[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign select_ln65_111_fu_3120_p3 = ((icmp_ln1496_76_fu_3106_p2[0:0] === 1'b1) ? kernel_data_V_2_59 : kernel_data_V_2_55);

assign select_ln65_113_fu_3141_p3 = ((icmp_ln1496_77_fu_3128_p2[0:0] === 1'b1) ? pool_window_15_V_3_reg_3405 : kernel_data_V_2_63);

assign select_ln65_114_fu_3154_p3 = ((icmp_ln1496_78_fu_3148_p2[0:0] === 1'b1) ? select_ln65_117_fu_3133_p3 : select_ln65_110_fu_3112_p3);

assign select_ln65_115_fu_3197_p3 = ((icmp_ln1496_79_fu_3191_p2[0:0] === 1'b1) ? sext_ln65_3_fu_3162_p1 : select_ln65_109_fu_3060_p3);

assign select_ln65_116_fu_2882_p3 = ((icmp_ln1496_70_fu_2876_p2[0:0] === 1'b1) ? 3'd7 : 3'd6);

assign select_ln65_117_fu_3133_p3 = ((icmp_ln1496_77_fu_3128_p2[0:0] === 1'b1) ? 3'd7 : 3'd6);

assign select_ln65_32_fu_1182_p3 = ((icmp_ln1496_24_fu_1176_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_33_fu_1190_p3 = ((icmp_ln1496_24_fu_1176_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_2_0_q0 : kernel_data_V_2_12);

assign select_ln65_34_fu_1204_p3 = ((icmp_ln1496_25_fu_1198_p2[0:0] === 1'b1) ? select_ln65_32_fu_1182_p3 : zext_ln65_fu_1164_p1);

assign select_ln65_35_fu_1264_p3 = ((icmp_ln1496_26_fu_1258_p2[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign select_ln65_36_fu_1272_p3 = ((icmp_ln1496_26_fu_1258_p2[0:0] === 1'b1) ? kernel_data_V_2_24 : kernel_data_V_2_20);

assign select_ln65_37_fu_1286_p3 = ((icmp_ln1496_27_fu_1280_p2[0:0] === 1'b1) ? 3'd7 : 3'd6);

assign select_ln65_38_fu_1294_p3 = ((icmp_ln1496_27_fu_1280_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_1_0_q0 : kernel_data_V_2_28);

assign select_ln65_39_fu_1308_p3 = ((icmp_ln1496_28_fu_1302_p2[0:0] === 1'b1) ? select_ln65_37_fu_1286_p3 : select_ln65_35_fu_1264_p3);

assign select_ln65_40_fu_1364_p3 = ((icmp_ln1496_29_fu_1358_p2[0:0] === 1'b1) ? select_ln65_39_fu_1308_p3 : zext_ln65_8_fu_1212_p1);

assign select_ln65_41_fu_1420_p3 = ((icmp_ln1496_30_fu_1414_p2[0:0] === 1'b1) ? 4'd9 : 4'd8);

assign select_ln65_42_fu_1428_p3 = ((icmp_ln1496_30_fu_1414_p2[0:0] === 1'b1) ? kernel_data_V_2_40 : kernel_data_V_2_36);

assign select_ln65_43_fu_1442_p3 = ((icmp_ln1496_31_fu_1436_p2[0:0] === 1'b1) ? 4'd11 : 4'd10);

assign select_ln65_44_fu_1450_p3 = ((icmp_ln1496_31_fu_1436_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_0_0_q0 : kernel_data_V_2_44);

assign select_ln65_45_fu_1464_p3 = ((icmp_ln1496_32_fu_1458_p2[0:0] === 1'b1) ? select_ln65_43_fu_1442_p3 : select_ln65_41_fu_1420_p3);

assign select_ln65_46_fu_1516_p3 = ((icmp_ln1496_33_fu_1510_p2[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign select_ln65_47_fu_1524_p3 = ((icmp_ln1496_33_fu_1510_p2[0:0] === 1'b1) ? kernel_data_V_2_56 : kernel_data_V_2_52);

assign select_ln65_48_fu_1537_p3 = ((icmp_ln1496_34_fu_1532_p2[0:0] === 1'b1) ? 3'd7 : 3'd6);

assign select_ln65_49_fu_1545_p3 = ((icmp_ln1496_34_fu_1532_p2[0:0] === 1'b1) ? pool_window_15_V_reg_3312 : kernel_data_V_2_60);

assign select_ln65_50_fu_1558_p3 = ((icmp_ln1496_35_fu_1552_p2[0:0] === 1'b1) ? select_ln65_48_fu_1537_p3 : select_ln65_46_fu_1516_p3);

assign select_ln65_51_fu_1601_p3 = ((icmp_ln1496_36_fu_1595_p2[0:0] === 1'b1) ? sext_ln65_fu_1566_p1 : select_ln65_45_fu_1464_p3);

assign select_ln65_53_fu_1700_p3 = ((icmp_ln1496_1_fu_1690_p2[0:0] === 1'b1) ? kernel_data_V_2_9 : kernel_data_V_2_5);

assign select_ln65_54_fu_1714_p3 = ((icmp_ln1496_38_fu_1708_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_55_fu_1722_p3 = ((icmp_ln1496_38_fu_1708_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_2_1_q0 : kernel_data_V_2_13);

assign select_ln65_56_fu_1736_p3 = ((icmp_ln1496_39_fu_1730_p2[0:0] === 1'b1) ? select_ln65_54_fu_1714_p3 : zext_ln65_10_fu_1696_p1);

assign select_ln65_57_fu_1796_p3 = ((icmp_ln1496_40_fu_1790_p2[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign select_ln65_58_fu_1804_p3 = ((icmp_ln1496_40_fu_1790_p2[0:0] === 1'b1) ? kernel_data_V_2_25 : kernel_data_V_2_21);

assign select_ln65_59_fu_1818_p3 = ((icmp_ln1496_41_fu_1812_p2[0:0] === 1'b1) ? 3'd7 : 3'd6);

assign select_ln65_60_fu_1826_p3 = ((icmp_ln1496_41_fu_1812_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_1_1_q0 : kernel_data_V_2_29);

assign select_ln65_61_fu_1840_p3 = ((icmp_ln1496_42_fu_1834_p2[0:0] === 1'b1) ? select_ln65_59_fu_1818_p3 : select_ln65_57_fu_1796_p3);

assign select_ln65_62_fu_1896_p3 = ((icmp_ln1496_43_fu_1890_p2[0:0] === 1'b1) ? select_ln65_61_fu_1840_p3 : zext_ln65_11_fu_1744_p1);

assign select_ln65_63_fu_1952_p3 = ((icmp_ln1496_44_fu_1946_p2[0:0] === 1'b1) ? 4'd9 : 4'd8);

assign select_ln65_64_fu_1960_p3 = ((icmp_ln1496_44_fu_1946_p2[0:0] === 1'b1) ? kernel_data_V_2_41 : kernel_data_V_2_37);

assign select_ln65_65_fu_1974_p3 = ((icmp_ln1496_45_fu_1968_p2[0:0] === 1'b1) ? 4'd11 : 4'd10);

assign select_ln65_66_fu_1982_p3 = ((icmp_ln1496_45_fu_1968_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_0_1_q0 : kernel_data_V_2_45);

assign select_ln65_67_fu_1996_p3 = ((icmp_ln1496_46_fu_1990_p2[0:0] === 1'b1) ? select_ln65_65_fu_1974_p3 : select_ln65_63_fu_1952_p3);

assign select_ln65_68_fu_2048_p3 = ((icmp_ln1496_47_fu_2042_p2[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign select_ln65_69_fu_2056_p3 = ((icmp_ln1496_47_fu_2042_p2[0:0] === 1'b1) ? kernel_data_V_2_57 : kernel_data_V_2_53);

assign select_ln65_70_fu_2069_p3 = ((icmp_ln1496_48_fu_2064_p2[0:0] === 1'b1) ? 3'd7 : 3'd6);

assign select_ln65_71_fu_2077_p3 = ((icmp_ln1496_48_fu_2064_p2[0:0] === 1'b1) ? pool_window_15_V_1_reg_3343 : kernel_data_V_2_61);

assign select_ln65_72_fu_2090_p3 = ((icmp_ln1496_49_fu_2084_p2[0:0] === 1'b1) ? select_ln65_70_fu_2069_p3 : select_ln65_68_fu_2048_p3);

assign select_ln65_73_fu_2133_p3 = ((icmp_ln1496_50_fu_2127_p2[0:0] === 1'b1) ? sext_ln65_1_fu_2098_p1 : select_ln65_67_fu_1996_p3);

assign select_ln65_74_fu_2232_p3 = ((icmp_ln1496_2_fu_2222_p2[0:0] === 1'b1) ? kernel_data_V_2_10 : kernel_data_V_2_6);

assign select_ln65_75_fu_2246_p3 = ((icmp_ln1496_52_fu_2240_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_76_fu_2254_p3 = ((icmp_ln1496_52_fu_2240_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_2_2_q0 : kernel_data_V_2_14);

assign select_ln65_77_fu_2268_p3 = ((icmp_ln1496_53_fu_2262_p2[0:0] === 1'b1) ? select_ln65_75_fu_2246_p3 : zext_ln65_13_fu_2228_p1);

assign select_ln65_78_fu_2328_p3 = ((icmp_ln1496_54_fu_2322_p2[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign select_ln65_79_fu_2336_p3 = ((icmp_ln1496_54_fu_2322_p2[0:0] === 1'b1) ? kernel_data_V_2_26 : kernel_data_V_2_22);

assign select_ln65_81_fu_2358_p3 = ((icmp_ln1496_55_fu_2344_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_1_2_q0 : kernel_data_V_2_30);

assign select_ln65_82_fu_2372_p3 = ((icmp_ln1496_56_fu_2366_p2[0:0] === 1'b1) ? select_ln65_91_fu_2350_p3 : select_ln65_78_fu_2328_p3);

assign select_ln65_83_fu_2428_p3 = ((icmp_ln1496_57_fu_2422_p2[0:0] === 1'b1) ? select_ln65_82_fu_2372_p3 : zext_ln65_14_fu_2276_p1);

assign select_ln65_84_fu_2484_p3 = ((icmp_ln1496_58_fu_2478_p2[0:0] === 1'b1) ? 4'd9 : 4'd8);

assign select_ln65_85_fu_2492_p3 = ((icmp_ln1496_58_fu_2478_p2[0:0] === 1'b1) ? kernel_data_V_2_42 : kernel_data_V_2_38);

assign select_ln65_86_fu_2506_p3 = ((icmp_ln1496_59_fu_2500_p2[0:0] === 1'b1) ? 4'd11 : 4'd10);

assign select_ln65_87_fu_2514_p3 = ((icmp_ln1496_59_fu_2500_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_0_2_q0 : kernel_data_V_2_46);

assign select_ln65_88_fu_2528_p3 = ((icmp_ln1496_60_fu_2522_p2[0:0] === 1'b1) ? select_ln65_86_fu_2506_p3 : select_ln65_84_fu_2484_p3);

assign select_ln65_89_fu_2580_p3 = ((icmp_ln1496_61_fu_2574_p2[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign select_ln65_90_fu_2588_p3 = ((icmp_ln1496_61_fu_2574_p2[0:0] === 1'b1) ? kernel_data_V_2_58 : kernel_data_V_2_54);

assign select_ln65_91_fu_2350_p3 = ((icmp_ln1496_55_fu_2344_p2[0:0] === 1'b1) ? 3'd7 : 3'd6);

assign select_ln65_92_fu_2609_p3 = ((icmp_ln1496_62_fu_2596_p2[0:0] === 1'b1) ? pool_window_15_V_2_reg_3374 : kernel_data_V_2_62);

assign select_ln65_93_fu_2622_p3 = ((icmp_ln1496_63_fu_2616_p2[0:0] === 1'b1) ? select_ln65_101_fu_2601_p3 : select_ln65_89_fu_2580_p3);

assign select_ln65_94_fu_2665_p3 = ((icmp_ln1496_64_fu_2659_p2[0:0] === 1'b1) ? sext_ln65_2_fu_2630_p1 : select_ln65_88_fu_2528_p3);

assign select_ln65_95_fu_2764_p3 = ((icmp_ln1496_66_fu_2754_p2[0:0] === 1'b1) ? kernel_data_V_2_11 : kernel_data_V_2_7);

assign select_ln65_96_fu_2778_p3 = ((icmp_ln1496_67_fu_2772_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_97_fu_2786_p3 = ((icmp_ln1496_67_fu_2772_p2[0:0] === 1'b1) ? line_buffer_Array_V_2_2_3_q0 : kernel_data_V_2_15);

assign select_ln65_98_fu_2800_p3 = ((icmp_ln1496_68_fu_2794_p2[0:0] === 1'b1) ? select_ln65_96_fu_2778_p3 : zext_ln65_16_fu_2760_p1);

assign select_ln65_99_fu_2860_p3 = ((icmp_ln1496_69_fu_2854_p2[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign select_ln65_fu_1168_p3 = ((icmp_ln1496_fu_1158_p2[0:0] === 1'b1) ? kernel_data_V_2_8 : kernel_data_V_2_4);

assign sext_ln65_1_fu_2098_p1 = $signed(select_ln65_72_fu_2090_p3);

assign sext_ln65_2_fu_2630_p1 = $signed(select_ln65_93_fu_2622_p3);

assign sext_ln65_3_fu_3162_p1 = $signed(select_ln65_114_fu_3154_p3);

assign sext_ln65_fu_1566_p1 = $signed(select_ln65_50_fu_1558_p3);

assign start_out = real_start;

assign tmp_data_0_V_fu_1652_p17 = ((icmp_ln1496_37_fu_1638_p2[0:0] === 1'b1) ? select_ln65_51_fu_1601_p3 : zext_ln65_9_fu_1372_p1);

assign tmp_data_1_V_fu_2184_p17 = ((icmp_ln1496_51_fu_2170_p2[0:0] === 1'b1) ? select_ln65_73_fu_2133_p3 : zext_ln65_12_fu_1904_p1);

assign tmp_data_2_V_fu_2716_p17 = ((icmp_ln1496_65_fu_2702_p2[0:0] === 1'b1) ? select_ln65_94_fu_2665_p3 : zext_ln65_15_fu_2436_p1);

assign tmp_data_3_V_fu_3248_p17 = ((icmp_ln1496_80_fu_3234_p2[0:0] === 1'b1) ? select_ln65_115_fu_3197_p3 : zext_ln65_18_fu_2968_p1);

assign zext_ln65_10_fu_1696_p1 = icmp_ln1496_1_fu_1690_p2;

assign zext_ln65_11_fu_1744_p1 = select_ln65_56_fu_1736_p3;

assign zext_ln65_12_fu_1904_p1 = select_ln65_62_fu_1896_p3;

assign zext_ln65_13_fu_2228_p1 = icmp_ln1496_2_fu_2222_p2;

assign zext_ln65_14_fu_2276_p1 = select_ln65_77_fu_2268_p3;

assign zext_ln65_15_fu_2436_p1 = select_ln65_83_fu_2428_p3;

assign zext_ln65_16_fu_2760_p1 = icmp_ln1496_66_fu_2754_p2;

assign zext_ln65_17_fu_2808_p1 = select_ln65_98_fu_2800_p3;

assign zext_ln65_18_fu_2968_p1 = select_ln65_104_fu_2960_p3;

assign zext_ln65_8_fu_1212_p1 = select_ln65_34_fu_1204_p3;

assign zext_ln65_9_fu_1372_p1 = select_ln65_40_fu_1364_p3;

assign zext_ln65_fu_1164_p1 = icmp_ln1496_fu_1158_p2;

endmodule //pooling2d_cl_array_ap_fixed_4u_array_ap_fixed_16_6_5_3_0_4u_config4_s
